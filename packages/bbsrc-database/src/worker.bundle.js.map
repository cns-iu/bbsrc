{"version":3,"sources":["webpack:///webpack/bootstrap 3b6491bcc87bf8f8cfc7","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/error/index.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/type/definition.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/language/kinds.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/index.mjs","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/type/schema.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/jsutils/invariant.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/nano-sql/lib/utilities.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/language/printer.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/jsutils/isInvalid.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/type/directives.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/type/introspection.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/iterall/index.mjs","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/utilities/typeFromAST.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/lie-ts/index.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/type/scalars.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/jsutils/objectValues.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/error/GraphQLError.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/jsutils/keyMap.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/language/visitor.js","webpack:///(webpack)/buildin/global.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/language/directiveLocation.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/jsutils/find.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/language/parser.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/utilities/TypeInfo.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/jsutils/suggestionList.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/type/validate.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/jsutils/keyValMap.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/jsutils/isNullish.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/utilities/typeComparators.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/execution/execute.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/execution/values.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/utilities/valueFromAST.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql-tools/dist/schemaGenerator.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/nano-sql/lib/index.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/nano-sql/lib/database/db-idx.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/apollo-link/lib/index.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/zen-observable-ts/lib/index.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/apollo-utilities/lib/storeUtils.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/apollo-utilities/lib/util/environment.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/jsutils/instanceOf.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/utilities/astFromValue.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/language/location.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/language/lexer.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/jsutils/quotedOrList.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/jsutils/orList.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/rules/ValuesOfCorrectType.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/ValidationContext.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/utilities/coerceValue.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql-tools/dist/stitching/resolveFromParentTypename.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql-tools/dist/stitching/errors.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/zen-observable-ts/lib/zenObservable.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/apollo-link/lib/linkUtils.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/apollo-utilities/lib/getFromAST.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/apollo-utilities/lib/util/assign.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/apollo-utilities/lib/util/cloneDeep.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/process/browser.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/utilities/getOperationAST.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/utilities/valueFromASTUntyped.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/error/printError.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/utilities/assertValidName.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/language/source.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/error/locatedError.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/language/blockStringValue.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/validate.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/specifiedRules.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/rules/UniqueOperationNames.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/rules/LoneAnonymousOperation.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/rules/SingleFieldSubscriptions.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/rules/KnownTypeNames.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/rules/VariablesAreInputTypes.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/rules/ScalarLeafs.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/rules/UniqueFragmentNames.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/rules/KnownFragmentNames.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/rules/NoUnusedFragments.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/rules/PossibleFragmentSpreads.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/rules/NoFragmentCycles.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/rules/UniqueVariableNames.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/rules/NoUndefinedVariables.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/rules/NoUnusedVariables.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/rules/KnownDirectives.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/rules/UniqueDirectivesPerLocation.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/rules/KnownArgumentNames.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/rules/UniqueArgumentNames.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/rules/ProvidedNonNullArguments.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/rules/VariablesDefaultValueAllowed.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/rules/VariablesInAllowedPosition.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/rules/UniqueInputFieldNames.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/jsutils/isPromise.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/utilities/introspectionQuery.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/utilities/buildASTSchema.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql-tools/dist/schemaVisitor.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql-tools/dist/mergeDeep.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/uuid/lib/rng-browser.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/uuid/lib/bytesToUuid.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql-tools/dist/stitching/linkToFetcher.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql-tools/dist/isEmptyObject.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql-tools/dist/stitching/defaultMergedResolver.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql-tools/dist/stitching/delegateToSchema.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/levenshtein-edit-distance/index.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/events/events.js","webpack:///./src/worker.ts","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/apollo-link-webworker/dist/bundle.umd.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/apollo-link/lib/link.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/zen-observable/index.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/zen-observable/zen-observable.js","webpack:///(webpack)/buildin/module.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/apollo-utilities/lib/index.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/apollo-utilities/lib/directives.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/apollo-utilities/lib/fragments.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/apollo-utilities/lib/transform.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/apollo-utilities/lib/util/errorHandling.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/apollo-utilities/lib/util/isEqual.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/apollo-utilities/lib/util/maybeDeepFreeze.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/apollo-utilities/lib/util/warnOnce.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/subscriptions-transport-ws/dist/client.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/backo2/index.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/eventemitter3/index.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/lodash.isstring/index.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/lodash.isobject/index.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/symbol-observable/es/index.js","webpack:///(webpack)/buildin/harmony-module.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/symbol-observable/es/ponyfill.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/subscriptions-transport-ws/dist/protocol.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/subscriptions-transport-ws/dist/defaults.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/subscriptions-transport-ws/dist/message-types.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/promise-worker/index.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/lie/lib/browser.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/immediate/lib/browser.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/graphql.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/error/syntaxError.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/error/formatError.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/rules/ExecutableDefinitions.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/jsutils/memoize3.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/jsutils/promiseForObject.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/jsutils/promiseReduce.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/type/index.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/language/index.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/execution/index.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/subscription/index.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/subscription/subscribe.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/subscription/mapAsyncIterator.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/index.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/utilities/index.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/utilities/introspectionFromSchema.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/utilities/buildClientSchema.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/utilities/extendSchema.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/utilities/lexicographicSortSchema.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/utilities/schemaPrinter.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/utilities/isValidJSValue.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/utilities/isValidLiteralValue.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/utilities/concatAST.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/utilities/separateOperations.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/utilities/findBreakingChanges.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/utilities/findDeprecatedUsages.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/promise-worker/register.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/is-promise/index.js","webpack:///./src/graphql/schema.ts","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql-tools/dist/index.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/deprecated-decorator/bld/index.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql-tools/dist/mock.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/uuid/index.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/uuid/v1.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/uuid/v4.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql-tools/dist/stitching/index.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql-tools/dist/stitching/makeRemoteExecutableSchema.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql-tools/dist/stitching/observableToAsyncIterable.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql-tools/dist/stitching/introspectSchema.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql-tools/dist/stitching/mergeSchemas.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql-tools/dist/stitching/TypeRegistry.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql-tools/dist/stitching/schemaRecreation.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql-tools/dist/stitching/typeFromAST.js","webpack:///./src/graphql/schema-definition.ts","webpack:///./src/graphql/types.graphql.ts","webpack:///./src/graphql/resolvers.ts","webpack:///./src/nsql/queries.ts","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/nano-sql/lib/query/std-query.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/metaphone/index.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/stemmer/index.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/nano-sql/lib/query/transaction.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/really-small-events/src/index.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/nano-sql/lib/database/index.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/nano-sql/lib/database/query.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/fuzzysearch/index.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/nano-sql/lib/database/storage.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/prefix-trie-ts/node/index.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/nano-sql/lib/database/adapter-sync.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/nano-sql/lib/database/adapter-indexedDB.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/nano-sql/lib/database/adapter-websql.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/nano-sql/lib/database/adapter-levelDB.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/queue/index.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/inherits/inherits_browser.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/nano-sql/lib/history-plugin.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/nano-sql/lib/observable.js","webpack:///./src/graphql/subscriptions.ts","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql-subscriptions/dist/index.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql-subscriptions/dist/pubsub.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql-subscriptions/dist/event-emitter-to-async-iterator.js","webpack:////home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql-subscriptions/dist/with-filter.js","webpack:///./src/graphql/client-context.ts","webpack:///./src/nsql/bbsrc-database.ts","webpack:///./src/nsql/publication.model.ts","webpack:///./src/graphql/context.ts","webpack:///./src/loader/options.ts"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;AC7DA;;AAEA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC,E;;;;;;;ACjDD;;AAEA;AACA;AACA,CAAC;AACD;;AAEA,oGAAoG,mBAAmB,EAAE,mBAAmB,8HAA8H;;AAE1Q,mDAAmD,gBAAgB,sBAAsB,OAAO,2BAA2B,0BAA0B,yDAAyD,2BAA2B,EAAE,EAAE,EAAE,eAAe;;AAE9P;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F,iDAAiD,0CAA0C,0DAA0D,EAAE,EAAE;AACzqBAAqB,gCAAgC;AACrD,sBAAsB,gCAAgC;AACtD,UAAU;AACV,QAAQ;AACR;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,sCAAsC;AACtD,UAAU;AACV,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;;AAED;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,sBAAsB;AAC1C,oBAAoB,mBAAmB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,sBAAsB;AACxC,wBAAwB,mBAAmB;AAC3C,UAAU;AACV,QAAQ;AACR;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;;AAED;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;;AAED;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;;AAED;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,WAAW;AAC5B,mBAAmB,WAAW;AAC9B,kBAAkB;AAClB;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;;AAED;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,qCAAqC;AACtD,iBAAiB,qCAAqC;AACtD,iBAAiB,sCAAsC;AACvD;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;;AAED;;;AAGA;AACA,qF;;;;;;;ACh2BA;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA,G;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClF+B;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;;AAEA;AAuBmC;;AAEnC;AAOkG;;AAElG;AACiF;;AAEpC;;AAE7C;AAK+qB;;AAE/qB;AACgD;;AAEhD;;;;;;;;ACtFA;;AAEA;AACA;AACA,CAAC;AACD;;AAEA,oGAAoG,mBAAmB,EAAE,mBAAmB,8HAA8H;;AAE1Q;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F,iDAAiD,0CAA0C,0DAA0D,EAAE,EAAE;AACzJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,C;;;;;;;ACnQA;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,C;;;;;;ACpBA,4FAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,6DAA6D;AACxE,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,6DAA6D;AACxE,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,6DAA6D;AACxE,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA,+EAA+E;AAC/E,8EAA8E,mBAAmB,EAAE;AACnG;AACA;AACA,+DAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB;AACA,iBAAiB;AACjB,iBAAiB;AACjB,iBAAiB;AACjB,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,gGAAgG,4JAA4J,EAAE;AAC9P;AACA,sCAAsC,GAAG;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D;AAC1D;AACA;AACA;AACA,SAAS,EAAE,EAAE;AACb,+DAA+D;AAC/D;AACA;AACA;AACA,SAAS,EAAE,EAAE;AACb,+DAA+D;AAC/D;AACA;AACA;AACA,SAAS,EAAE,EAAE;AACb;AACA;AACA,sCAAsC,UAAU,mBAAmB,EAAE,EAAE;AACvE;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,0CAA0C,EAAE;AAC5F;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,cAAc,EAAE;AAC7C;AACA,2BAA2B,yBAAyB,EAAE;AACtD,6BAA6B,6BAA6B;AAC1D;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,eAAe;AAC1B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,EAAE;AACb,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,kBAAkB;AAClB,kBAAkB;AAClB,qBAAqB;AACrB,mBAAmB;AACnB,oBAAoB;AACpB,oBAAoB;AACpB,oBAAoB;AACpB;AACA;AACA;AACA,gGAAgG,qBAAqB,EAAE;AACvH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,EAAE;AACb,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa;AACb;AACA;AACA,4BAA4B,eAAe;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,SAAS;AAC/B,6BAA6B,WAAW;AACxC,yBAAyB,iBAAiB;AAC1C,gCAAgC,iBAAiB;AACjD,mCAAmC,sBAAsB;AACzD,mCAAmC,QAAQ,eAAe;AAC1D;AACA,WAAW,OAAO;AAClB,WAAW,EAAE;AACb,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,mDAAmD,EAAE,qBAAqB,kCAAkC,EAAE;AACjL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC9dA;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,mCAAmC,4BAA4B;AAC/D,CAAC;AACD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;;AAGH;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,aAAa,2BAA2B;AACxC,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA,cAAc,EAAE;AAChB;AACA;AACA,yCAAyC,sCAAsC;AAC/E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;AClVA;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;ACpBA;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F,iDAAiD,0CAA0C,0DAA0D,EAAE,EAAE;AACzJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH,C;;;;;;;ACzIA;;AAEA;AACA;AACA,CAAC;AACD;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,EAAE;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,gEAAgE;AAC7E,oBAAoB,+BAA+B;AACnD;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,OAAO;AACP,aAAa,+BAA+B;AAC5C,oBAAoB,+BAA+B;AACnD;AACA;AACA;AACA,8BAA8B;AAC9B,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,8BAA8B;AAC9B,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,eAAe;AACf;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,gEAAgE;AAC7E,oBAAoB,+BAA+B;AACnD;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,aAAa,gDAAgD;AAC7D,qBAAqB,iEAAiE;AACtF;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,gEAAgE;AAC7E,oBAAoB,+BAA+B;AACnD,aAAa,gDAAgD;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,gEAAgE;AAC7E,oBAAoB,+BAA+B;AACnD,qBAAqB,iEAAiE;AACtF;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU,8EAA8E;AACxF;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;;;;;;;;;;AC7cA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,kBAAkB,KAAK,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,iDAAiD;AACjD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wBAAwB;AACvC,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA,2DAA2D;AAC3D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wBAAwB;AACxC,gBAAgB,eAAe;AAC/B;AACA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,wBAAwB;AACzC,iBAAiB,eAAe;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA,6DAA6D;AAC7D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB,uBAAuB;AACvB,uBAAuB;AACvB,uBAAuB;AACvB;AACA;AACA,WAAW,YAAY;AACvB;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,YAAY;AACvB;AACA,YAAY,wBAAwB;AACpC;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,kBAAkB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,uBAAuB;AACvB,uBAAuB;AACvB,uBAAuB;AACvB,uBAAuB;AACvB;AACA;AACA,WAAW,aAAa,kBAAkB;AAC1C;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA,mBAAmB,eAAe;AAClC,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,WAAW,aAAa,kBAAkB;AAC1C;AACA,WAAW,4BAA4B;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,eAAe;AACnC;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,YAAY,uBAAuB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,cAAc,8BAA8B;AAC5C;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI,oBAAoB,sBAAsB,oBAAoB;AAClE;AACA,8DAA8D,eAAe;AAC7E;AACA,kCAAkC,cAAc;AAChD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,uBAAuB,KAAK,sBAAsB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+BAA+B;AACrD,YAAY;AACZ;AACA,wBAAwB,iCAAiC;AACzD,cAAc;AACd;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,2DAA2D;AAC3D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA,gEAAgE;AAChE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C,8CAA8C;AAC9C,8CAA8C;AAC9C,8CAA8C;AAC9C;AACA;AACA,WAAW,iBAAiB;AAC5B;AACA,YAAY,iBAAiB;AAC7B;AACA;AACA;AACA,8DAA8D;AAC9D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,iBAAiB;AAC5B;AACA,YAAY,6BAA6B;AACzC;AACA;AACA;AACA,sEAAsE;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,uBAAuB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,yCAAyC;AACzC,yCAAyC;AACzC,yCAAyC;AACzC,yCAAyC;AACzC;AACA;AACA,WAAW,8BAA8B,kBAAkB;AAC3D;AACA,YAAY,iBAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA;AACA,WAAW,2CAA2C,kBAAkB;AACxE;AACA,WAAW,4BAA4B;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,iBAAiB;AACrC;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;;;;;;;AC7rBA;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;8CC5CA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA,4BAA4B,uBAAuB;AACnD;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,CAAC;AACD,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,EAAE;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,IAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,IAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA,2BAA2B,qBAAqB;AAChD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,WAAW,IAAI;AACf,WAAW,IAAI;AACf,WAAW,IAAI;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,WAAW,IAAI;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,0DAA0D;AACrE;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,IAAI;AACf,WAAW,EAAE;AACb;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACjXA;;AAEA;AACA;AACA,CAAC;AACD;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA,yLAAyL;AACzL;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;AC7HA;;AAEA;AACA;AACA,CAAC;;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA,+B;;;;;;;ACvBA;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA,gBAAgB,sBAAsB;AACtC,SAAS,wBAAwB;AACjC;AACA;AACA;AACA;AACA;AACA,CAAC,E;;;;;;;ACvID;;AAEA;AACA;AACA,CAAC;AACD;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,+BAA+B;AACzC,UAAU;AACV;AACA;AACA,WAAW,OAAO,+BAA+B;AACjD,oBAAoB,iCAAiC;AACrD;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,K;;;;;;;AC1CA;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB,qBAAqB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,qBAAqB,qBAAqB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,UAAU;AACpB;AACA;AACA;AACA;AACA,UAAU,QAAQ,WAAW,YAAY,EAAE;AAC3C;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,YAAY,WAAW,YAAY;AACnC;AACA;AACA;AACA;AACA,YAAY,SAAS,UAAU,EAAE,UAAU,UAAU,EAAE;AACvD;AACA;AACA;AACA;AACA,C;;;;;;ACjaA;;AAEA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;;AAEA;AACA;AACA,4CAA4C;;AAE5C;;;;;;;;ACpBA;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA,G;;;;;;;AC1CA;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;AACA,C;;;;;;;ACrBA;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D;AAC9D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,8DAA8D;AAC9D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D;AAC9D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ;AACR,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;ACx0CA;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F,iDAAiD,0CAA0C,0DAA0D,EAAE,EAAE;AACzJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;ACnQA;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,aAAa;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,IAAI;AAChB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,aAAa,cAAc;AAC3B;AACA;;AAEA,aAAa,cAAc;AAC3B;AACA;;AAEA,aAAa,cAAc;AAC3B,eAAe,cAAc;AAC7B;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,C;;;;;;;AC5FA;;AAEA;AACA;AACA,CAAC;AACD;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F,iDAAiD,0CAA0C,0DAA0D,EAAE,EAAE;AACzJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,qBAAqB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,qBAAqB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,GAAG;AACH,C;;;;;;;ACngBA;;AAEA;AACA;AACA,CAAC;AACD;;;AAGA;AACA;AACA;AACA;AACA;AACA,UAAU,+BAA+B;AACzC,UAAU;AACV;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,K;;;;;;;ACpCA;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;ACpBA;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,C;;;;;;;ACzHA;;AAEA;AACA;AACA,CAAC;AACD;;AAEA,oGAAoG,mBAAmB,EAAE,mBAAmB,8HAA8H,GAAG;AAC7Q;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,IAAI;AACtD;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,wCAAwC,aAAa,IAAI;AACzD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,iCAAiC;AAClD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA,mIAAmI;;AAEnI;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oCAAoC;AACriBAAiB,uBAAuB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,iBAAiB,0BAA0B;AAC3C;;AAEA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA,sBAAsB,6BAA6B;AACnD;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA,C;;;;;;;ACx2BA;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,wBAAwB;AACzC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,8GAA8G;AAC9G;AACA;AACA,aAAa;AACb;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,gCAAgC,4CAA4C,IAAI;AAChF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,C;;;;;;;ACxKA;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB,sBAAsB;AAC3C;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA,SAAS;AACT;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,oBAAoB,oBAAoB;AACxC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,C;;;;;;;ACnLA;AACA;AACA;AACA;AACA,UAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,yBAAyB,uDAAuD;AAChF;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD;AACA;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,iEAAiE,uBAAuB,EAAE,4BAA4B;AACrJ;AACA,KAAK;AACL;AACA;AACA,aAAa,6BAA6B,0BAA0B,aAAa,EAAE,qBAAqB;AACxG,gBAAgB,qDAAqD,oEAAoE,aAAa,EAAE;AACxJ,sBAAsB,sBAAsB,qBAAqB,GAAG;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,kCAAkC,SAAS;AAC3C,kCAAkC,WAAW,UAAU;AACvD,yCAAyC,cAAc;AACvD;AACA,6GAA6G,OAAO,UAAU;AAC9H,gFAAgF,iBAAiB,OAAO;AACxG,wDAAwD,gBAAgB,QAAQ,OAAO;AACvF,8CAA8C,gBAAgB,gBAAgB,OAAO;AACrF;AACA,iCAAiC;AACjC;AACA;AACA,SAAS,YAAY,aAAa,OAAO,EAAE,UAAU,WAAW;AAChE,mCAAmC,SAAS;AAC5C;AACA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,wCAAwC,EAAE;AACtF,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF,8NAA8N,kNAAkN;AACjgB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,wCAAwC,yBAAyB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,0DAA0D,iBAAiB,EAAE;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,2BAA2B;AAC3B;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,YAAY,EAAE;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,gCAAgC;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,wBAAwB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,+CAA+C,gCAAgC;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,uBAAuB;AAC3D;AACA;AACA;AACA,iDAAiD,sDAAsD;AACvG;AACA,qBAAqB,EAAE,EAAE,EAAE,EAAE;AAC7B;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,2C;;;;;;AC1iBA;AACA,4CAA4C,OAAO;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,UAAU;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,uBAAuB;AACvB,qBAAqB;AACrB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,kDAAkD;AACnE,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E;AAC3E;AACA,kEAAkE,SAAS,yBAAyB;AACpG;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2FAA2F,qBAAqB,EAAE;AAClH;AACA;AACA,6CAA6C;AAC7C;AACA;AACA,qCAAqC;AACrC;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E,wBAAwB,EAAE;AACzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,wBAAwB,EAAE;AAC3F;AACA,iCAAiC;AACjC,6BAA6B;AAC7B;AACA;AACA,+EAA+E,wBAAwB,EAAE;AACzG;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,2EAA2E,aAAa,EAAE;AAC1F;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,uCAAuC,mCAAmC,cAAc,iBAAiB;AACzG;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,6EAA6E,iBAAiB;AAC9F;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,qDAAqD;AACpE,eAAe,SAAS;AACxB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,sCAAsC;AAC/C,SAAS;AACT;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+HAA+H,iBAAiB,EAAE;AAClJ;AACA;AACA;AACA;AACA;AACA,gHAAgH,iBAAiB,EAAE;AACnI;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,+BAA+B,6CAA6C;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,4BAA4B;AACzE;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oBAAoB;AACnC,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,UAAU;AACvD;AACA,QAAQ;AACR;AACA;AACA,eAAe,OAAO;AACtB,eAAe,IAAI;AACnB,iBAAiB;AACjB;AACA;AACA;AACA;AACA,kCAAkC,eAAe;AACjD;AACA,gEAAgE,cAAc,EAAE;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,UAAU;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,4BAA4B;AAC5E;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oBAAoB;AACnC,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,UAAU;AAC1D;AACA,QAAQ;AACR;AACA;AACA,eAAe,OAAO;AACtB,eAAe,IAAI;AACnB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,gEAAgE,cAAc,EAAE;AAChF;AACA;AACA;AACA;AACA;AACA,eAAe,wDAAwD;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kBAAkB;AACjC,eAAe,eAAe;AAC9B,eAAe,OAAO;AACtB,eAAe,EAAE;AACjB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,gEAAgE,sCAAsC,EAAE;AACxG;AACA;AACA;AACA;AACA;AACA,wFAAwF;AACxF,iBAAiB;AACjB;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,yFAAyF;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C,wBAAwB,iBAAiB;AACzC,wBAAwB,YAAY;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oCAAoC;AACnD,eAAe,IAAI;AACnB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uFAAuF;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD,6CAA6C,kBAAkB,OAAO;AACtE;AACA;AACA,6FAA6F,QAAQ;AACrG;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,gBAAgB,0BAA0B;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E,EAAE;AAC/E;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,gBAAgB,iCAAiC;AACjD,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,wFAAwF,SAAS,+DAA+D;AAChK,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA,iCAAiC;AACjC;AACA,6BAA6B;AAC7B,yBAAyB;AACzB,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,IAAI;AACnB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,eAAe,iDAAiD;AAChE,eAAe,SAAS;AACxB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,cAAc;AAC7B,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,wBAAwB;AACjC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,cAAc;AAC7B,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,eAAe;AAC1E,iBAAiB;AACjB,+CAA+C,kBAAkB,EAAE;AACnE,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB,eAAe,QAAQ;AACvB,eAAe,SAAS;AACxB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,kBAAkB;AACjC,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,YAAY;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,oBAAoB,EAAE;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,uBAAuB,UAAU,EAAE;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,eAAe;AAC1E,iBAAiB;AACjB,+CAA+C,kBAAkB,EAAE;AACnE,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA,0DAA0D,+BAA+B,EAAE;AAC3F;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,+BAA+B,EAAE;AAC3F;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,gDAAgD,EAAE;AACrG;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,uDAAuD,gEAAgE,EAAE;AACzH;AACA,KAAK;AACL;AACA;AACA;AACA,uDAAuD,gEAAgE,EAAE;AACzH;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC99CA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E,uBAAuB,EAAE;AACxG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,gDAAgD,uBAAuB,EAAE;AACzE;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACxIA;AAC2E;AAC3E;AACQ;AACR,iC;;;;;;;;;ACJqB;AACrB;AACA;AACA,iC;;;;;;;;;;;;;;;;;;;ACHA;AAAA;AACA,4CAA4C,OAAO;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,mBAAmB;AAClD,qBAAqB,mCAAmC;AACxD,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,uCAAuC;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,qCAAqC,EAAE;AACxF;AACA;AACA,8CAA8C,gBAAgB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sC;;;;;;;;;;;;ACrNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uC;;;;;;;;+CCnBA;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,G;;;;;;;;ACjCA;;AAEA;AACA;AACA,CAAC;;AAED,oGAAoG,mBAAmB,EAAE,mBAAmB,8HAA8H,GAAG;AAC7Q;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,4CAA4C;AAC7D;AACA,SAAS;AACT;AACA,KAAK;AACL,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;;AAEA;AACA;AACA;AACA,oDAAoD,0CAA0C,IAAI;AAClG;;AAEA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA;AACA;AACA,gBAAgB;AAChB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gD;;;;;;;ACjKA;;AAEA;AACA;AACA,CAAC;AACD;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA,G;;;;;;;ACnCA;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,kCAAkC;AACvC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yCAAyC,EAAE;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;ACvlBA;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,K;;;;;;;AC3BA;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,C;;;;;;;ACzBA;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6EAA6E;AAC7E;;AAEA;AACA;AACA;;AAEA;AACA,uFAAuF;AACvF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,C;;;;;;;AC1KA;;AAEA;AACA;AACA,CAAC;;AAED;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,iDAAiD,0CAA0C,0DAA0D,EAAE,EAAE;AACzJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,2BAA2B;AAClD;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,0BAA0B,gDAAgD;AAC1E;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB,sBAAsB;AAC3C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;;AAED,oC;;;;;;;ACvLA;;AAEA;AACA;AACA,CAAC;;AAED,oGAAoG,mBAAmB,EAAE,mBAAmB,8HAA8H,GAAG;AAC7Q;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,UAAU;AACV;;AAEA;AACA,UAAU;AACV;;AAEA;AACA;AACA;;AAEA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA,+FAA+F;AAC/F;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qD;;;;;;;AChMA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qD;;;;;;;8CCfA;AACA;AACA;AACA,UAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,yBAAyB,uDAAuD;AAChF;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD;AACA,4CAA4C,OAAO;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,UAAU,4BAA4B;AAC9E;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,8BAA8B,kBAAkB,0DAA0D,oBAAoB,uBAAuB,4BAA4B,KAAK,GAAG,EAAE;AAC3L;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,sBAAsB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,sBAAsB,EAAE;AAChE;AACA;AACA;AACA;AACA,kC;;;;;;;;;ACtHA;AACA,yC;;;;;;;;;;;;;;;;;;;ACDA;AAAA;AAAA;AACA;AACA,UAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,yBAAyB,uDAAuD;AAChF;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD;AACA,4CAA4C,OAAO;AACnD;AACA;AACA;AACA;AACA;AACA;AAC2B;AAC3B;AACgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,gBAAgB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACO;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,4CAA4C;AAC5C,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,iCAAiC;AACjC;AACA;AACA,iCAAiC;AACjC;AACA;AACA,kCAAkC,oBAAoB,YAAY;AAClE;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,4BAA4B,0BAA0B,EAAE;AACxD,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,qC;;;;;;;;;;;;;;;;;;;;;AC9HiB;AACqB;AACtC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,wCAAwC,EAAE;AACxE;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,kDAAkD,EAAE;AAC7G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,2BAA2B,qBAAqB,EAAE;AAClD;AACA;AACA;AACA,yDAAyD,iDAAiD,EAAE;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,gBAAgB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,gBAAgB;AAC/C;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,6FAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,gBAAgB;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA,sC;;;;;;;;AC/IA;AACA;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA,kC;;;;;;;ACfA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,wBAAwB,EAAE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qC;;;;;;ACvBA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qCAAqC;;AAErC;AACA;AACA;;AAEA,2BAA2B;AAC3B;AACA;AACA;AACA,4BAA4B,UAAU;;;;;;;;ACvLtC;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oCAAoC;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,K;;;;;;;ACxCA;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,K;;;;;;;ACtEA;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,C;;;;;;;ACrEA;;AAEA;AACA;AACA,CAAC;AACD;AACA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;ACjDA;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F,iDAAiD,0CAA0C,0DAA0D,EAAE,EAAE;AACzJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA,yCAAyC,sBAAsB;AAC/D;AACA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA,E;;;;;;;ACtCA;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,K;;;;;;;AC9BA;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,mBAAmB;AACvC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,C;;;;;;;AClEA;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,C;;;;;;;AC3EA;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;AACA;;AAEA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yC;;;;;;;AC1JA;;AAEA;AACA;AACA,CAAC;AACD;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,C;;;;;;;AC/CA;;AAEA;AACA;AACA,CAAC;AACD;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;AC7CA;;AAEA;AACA;AACA,CAAC;AACD;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;ACtCA;;AAEA;AACA;AACA,CAAC;AACD;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;ACrEA;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;ACzDA;;AAEA;AACA;AACA,CAAC;AACD;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;AC/CA;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,8IAA8I,MAAM;AACpJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,C;;;;;;;AClDA;;AAEA;AACA;AACA,CAAC;AACD;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;ACxHA;;AAEA;AACA;AACA,CAAC;AACD;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,C;;;;;;;AC5CA;;AAEA;AACA;AACA,CAAC;AACD;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;ACvCA;;AAEA;AACA;AACA,CAAC;AACD;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,C;;;;;;;AC7DA;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;ACnEA;;AAEA;AACA;AACA,CAAC;AACD;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,mBAAmB,wBAAwB;AAC3C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,C;;;;;;;ACrFA;;AAEA;AACA;AACA,CAAC;AACD;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,C;;;;;;;AC3CA;;AAEA;AACA;AACA,CAAC;AACD;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,C;;;;;;;ACtDA;;AAEA;AACA;AACA,CAAC;AACD;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,C;;;;;;;AC5DA;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;AC/GA;;AAEA;AACA;AACA,CAAC;AACD;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,C;;;;;;;AClDA;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,C;;;;;;;AC7EA;;AAEA;AACA;AACA,CAAC;AACD;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,C;;;;;;;AChDA;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,C;;;;;;;ACtFA;;AAEA;AACA;AACA,CAAC;AACD;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,KAAK;;AAEL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,C;;;;;;;AClDA;;AAEA;AACA;AACA,CAAC;AACD;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,C;;;;;;;ACzEA;;AAEA;AACA;AACA,CAAC;AACD;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F,iDAAiD,0CAA0C,0DAA0D,EAAE,EAAE;AACzJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,0BAA0B;AAC7C;AACA;AACA;AACA;AACA;AACA,yBAAyB,0BAA0B;AACnD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,2BAA2B;AAC5C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;AACA,iBAAiB,2BAA2B;AAC5C;AACA;;AAEA;AACA;AACA,iBAAiB,2BAA2B;AAC5C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB,4BAA4B;AAC9C,oBAAoB,4BAA4B;AAChD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,mBAAmB;AACxC,2BAA2B,mBAAmB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,oBAAoB;AACzC,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,iBAAiB,oCAAoC;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;AC3jBA;;AAEA;AACA;AACA,CAAC;AACD;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,C;;;;;;;ACrDA;;AAEA;AACA;AACA,CAAC;AACD;;;AAGA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,G;;;;;;;ACvBA;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,0CAA0C,kBAAkB,qBAAqB,OAAO,wBAAwB,OAAO,4BAA4B,OAAO,iBAAiB,kCAAkC,sBAAsB,8GAA8G,wCAAwC,WAAW,SAAS,OAAO,qCAAqC,oHAAoH,mFAAmF,oCAAoC,gBAAgB,iCAAiC,0DAA0D,qBAAqB,gCAAgC,oBAAoB,6BAA6B,6CAA6C,6HAA6H,uBAAuB,6BAA6B,OAAO,6CAA6C,6EAA6E,aAAa,2BAA2B,oCAAoC,wCAAwC,8CAA8C,oDAAoD,0DAA0D,gEAAgE,sEAAsE,4EAA4E,yEAAyE,mBAAmB,iBAAiB,eAAe,aAAa,WAAW,SAAS,OAAO;AAC11D;;AAEA,8E;;;;;;;ACpBA;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F,iDAAiD,0CAA0C,0DAA0D,EAAE,EAAE;AACzJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,iBAAiB,4BAA4B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO,MAAM;AACb;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;;AAEA;AACA,CAAC;;AAED;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;AC/bA;AACA;AACA;AACA,UAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,yBAAyB,uDAAuD;AAChF;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D,6DAA6D;AAC7D,6DAA6D;AAC7D,8EAA8E;AAC9E,oFAAoF;AACpF,+DAA+D;AAC/D,2DAA2D;AAC3D,yDAAyD;AACzD,wEAAwE;AACxE,kEAAkE;AAClE,mFAAmF;AACnF;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,yDAAyD,oBAAoB,EAAE;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,yDAAyD,oBAAoB,EAAE;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,iBAAiB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,0CAA0C,WAAW;AACrD;AACA;AACA;AACA;AACA,kBAAkB,MAAM;AACxB;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,+BAA+B;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,yC;;;;;;;ACjkBA;AACA,8CAA8C,cAAc;AAC5D;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qC;;;;;;AC1BA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iCAAiC;;AAEjC;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB,QAAQ;AAC9B;AACA;AACA;;AAEA;AACA;AACA;;;;;;;AC/BA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;ACtBA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yC;;;;;;;ACXA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yC;;;;;;;ACdA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iD;;;;;;;AChCA;AACA;AACA,4CAA4C,OAAO;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,iEAAiE,uBAAuB,EAAE,4BAA4B;AACrJ;AACA,KAAK;AACL;AACA;AACA,aAAa,6BAA6B,0BAA0B,aAAa,EAAE,qBAAqB;AACxG,gBAAgB,qDAAqD,oEAAoE,aAAa,EAAE;AACxJ,sBAAsB,sBAAsB,qBAAqB,GAAG;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,kCAAkC,SAAS;AAC3C,kCAAkC,WAAW,UAAU;AACvD,yCAAyC,cAAc;AACvD;AACA,6GAA6G,OAAO,UAAU;AAC9H,gFAAgF,iBAAiB,OAAO;AACxG,wDAAwD,gBAAgB,QAAQ,OAAO;AACvF,8CAA8C,gBAAgB,gBAAgB,OAAO;AACrF;AACA,iCAAiC;AACjC;AACA;AACA,SAAS,YAAY,aAAa,OAAO,EAAE,UAAU,WAAW;AAChE,mCAAmC,SAAS;AAC5C;AACA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,kFAAkF,gBAAgB;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,8DAA8D,mDAAmD,EAAE;AACnH;AACA;AACA,6DAA6D,6BAA6B,EAAE;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,uBAAuB,EAAE;AAC/F,8DAA8D,iBAAiB,EAAE;AACjF;AACA;AACA,6EAA6E,sDAAsD,EAAE;AACrI;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,2EAA2E,2BAA2B,EAAE;AACxG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,kCAAkC,SAAS,yBAAyB;AACpE;AACA,SAAS;AACT;AACA,yEAAyE,2CAA2C,EAAE;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,cAAc;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL,wCAAwC,qBAAqB,EAAE;AAC/D;AACA,4C;;;;;;;ACxcA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,GAAG;AACH,oBAAoB,SAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AC7S0E;AAEhC;AACO;AACE;AAEnD,2EAAY,CAAC;IACX,MAAM;IACN,OAAO;CACR,CAAC,CAAC;AAEH,IAAI,CAAC,SAAS,GAAG,iBAAO,IAAI,yFAAmB,CAAC;IAC9C,IAAI;IACJ,OAAO;IACP,MAAM;IACN,OAAO;IACP,MAAM;CACP,CAAC,EAN0B,CAM1B,CAAC;;;;;;;ACjBH;AACA;AACA;AACA,oCAAoC;AACpC,CAAC,8FAA8F;;AAE/F;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA,CAAC;AACD;AACA;;;;;;;;;;;;AAYA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;AAMD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;;AAEA;AACA;;;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;;;;;;;;;;;AAYA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA,GAAG;AACH;AACA,CAAC;;AAED;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,6CAA6C;AAC7C;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX,gBAAgB,aAAa;AAC7B;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,wFAAwF,yBAAyB,iBAAiB;AAClI;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA,iFAAiF,iBAAiB,0BAA0B,iBAAiB;AAC7I;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,8BAA8B,+BAA+B;AAC7D,KAAK;AACL;AACA,8BAA8B,+BAA+B;AAC7D,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kCAAkC,4BAA4B;AAC9D;AACA,gCAAgC,+BAA+B;AAC/D,OAAO;AACP;AACA;AACA,gCAAgC,+BAA+B;AAC/D,OAAO;AACP;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,wDAAwD,kBAAkB,uBAAuB;AACjG,OAAO;AACP;AACA;AACA,GAAG;AACH;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAA6F,2BAA2B;AACxH,aAAa;AACb;AACA,mEAAmE;;AAEnE;AACA;AACA,eAAe;AACf;AACA,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA,yBAAyB;AACzB;;AAEA;AACA,aAAa;;AAEb;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA,2CAA2C,mBAAmB;AAC9D,aAAa;AACb,+BAA+B,qBAAqB;AACpD;AACA;AACA;AACA,WAAW;AACX;;AAEA;AACA,2BAA2B,mCAAmC;AAC9D;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mCAAmC;AAC1D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,8CAA8C,cAAc;;AAE5D,CAAC;AACD;;;;;;;;;;;;;;;;ACpdA;AAC4F;AAC5F,0CAA0C,0GAAkD;AAC5F;AACA;AACA;AACA;AACA,kDAAkD,gFAAwB,EAAE;AAC5E;AACA;AACA;AACA;AACA,qDAAqD,oBAAoB,EAAE;AAC3E;AACA;AACA,2BAA2B,qCAAqC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,wGAAgD,EAAE;AACjH,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,qCAAqC;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACO;AACR;AACA;AACA;AACA,gC;;;;;;AC9EA;;;;;;;;8CCAa,sBAAsB,YAAsC,qBAAqB,EAAE,wCAAwC,sDAAsD,KAAK,EAAE,QAAQ,aAAa,EAAE,EAAE,EAAE,6BAA6B;;AAE7P;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,yBAAyB,UAAU;AACnC;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,OAAO;AACP,aAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,qBAAqB;AACrB;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,sCAAsC;AACtC,gBAAgB,kCAAkC;AAClD,2BAA2B,0BAA0B;AACrD,CAAC;;AAED;AACA;AACA;;AAEA,8CAA8C;;AAE9C,gBAAgB,gDAAgD;;AAEhE;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA,GAAG;;AAEH,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,iCAAiC,8BAA8B,yBAAyB,oC;AACxF;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA,GAAG;;AAEH,yBAAyB,mB;AACzB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,OAAO;AACP,KAAK;AACL,GAAG;;AAEH,qBAAqB,mB;AACrB;AACA;;AAEA;;AAEA,qCAAqC;AACrC;AACA;AACA;;AAEA,aAAa;AACb,mBAAmB;;AAEnB;AACA,OAAO;;AAEP,0BAA0B,oBAAoB;AAC9C,4BAA4B,sBAAsB;AAClD,KAAK,EAAE,EAAE;AACT,GAAG;;AAEH,wBAAwB,mB;AACxB;AACA;;AAEA;;AAEA,qCAAqC;AACrC;AACA;AACA;;AAEA,aAAa;AACb,mBAAmB;;AAEnB;AACA,OAAO;;AAEP,0BAA0B,oBAAoB;AAC9C,4BAA4B,sBAAsB;AAClD,KAAK,EAAE,EAAE;AACT,GAAG;;AAEH,wBAAwB,mB;AACxB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,qCAAqC;;AAErC;AACA;AACA;;AAEA;AACA;;AAEA;AACA,eAAe;AACf,qBAAqB;AACrB,SAAS;AACT;AACA;AACA,OAAO;;AAEP,0BAA0B,oBAAoB;;AAE9C;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;;AAEP,KAAK,EAAE,EAAE;AACT,GAAG;;AAEH,CAAC;;AAED;AACA,qBAAqB,cAAc;AACnC;AACA;AACA,CAAC;;AAED;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,uCAAuC,yCAAyC,EAAE;AAClF;;AAEA;AACA;AACA,kEAAkE,gCAAgC,GAAG,yB;AACrG;AACA;AACA;AACA;;AAEA;AACA,OAAO;AACP;;AAEA;AACA;AACA,yBAAyB,gBAAgB;AACzC;AACA;AACA;AACA;;AAEA;AACA,OAAO;AACP;;AAEA;AACA,GAAG;;AAEH,kBAAkB,+BAA+B,yBAAyB,qC;AAC1E;;AAEA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL,GAAG;;AAEH,CAAC;;AAED;AACA,mBAAmB,cAAc;AACjC;AACA,CAAC;;AAED;AACA;AACA;AACA,sCAAsC,uBAAuB;AAC7D,GAAG;AACH,CAAC;;AAED;;;AAGA,CAAC,O;;;;;;;AC3bD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iC;;;;;;;;;;;;;ACZmC;AACnC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,+BAA+B,gBAAgB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,iDAAiD,oCAAoC,EAAE;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,2BAA2B,6BAA6B,EAAE;AAC1D,iDAAiD,oCAAoC,EAAE;AACvF;AACA;AACA,KAAK;AACL,mCAAmC,6BAA6B,EAAE;AAClE,kDAAkD,qCAAqC,EAAE;AACzF,mCAAmC,6BAA6B,EAAE;AAClE;AACA;AACA;AACA;AACA,wDAAwD,iCAAiC,EAAE;AAC3F;AACA,sC;;;;;;;AC7FA;AAAA;AACA,4CAA4C,OAAO;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,aAAa;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA,wCAAwC;AACxC;AACA;AACA,qC;;;;;;;;;;;;;AC/EoB;AAC6E;AACjG;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,4BAA4B,gBAAgB;AAC5C;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,mBAAmB,EAAE;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL,8BAA8B,YAAY,EAAE;AAC5C;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,iCAAiC,EAAE;AAC7F;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,oBAAoB;AACrD;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,iCAAiC,oBAAoB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,yCAAyC,6BAA6B;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,qC;;;;;;;;;AChMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yC;;;;;;;ACbA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mC;;;;;;;;;AC1CgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2C;;;;;;;;;ACzB+B;AAC/B,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,eAAe;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oC;;;;;;;8CC5BA;AACA;AACA,4CAA4C,OAAO;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,mGAAmG;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,mJAAmJ;AAClL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,cAAc;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,kCAAkC,iBAAiB;AACnD,sCAAsC,qBAAqB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,oCAAoC,0BAA0B,EAAE;AAChE,qCAAqC,0BAA0B,EAAE;AACjE,uCAAuC,+BAA+B,EAAE;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,YAAY,4FAA4F;AAC5K;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACbuDAAuD,0BAA0B,0DAA0D;AAC3I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,kC;;;;;;;;AC7bA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;ACnFA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;;AAEzB;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,0DAA0D,OAAO;AACjE;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yCAAyC,SAAS;AAClD;AACA;;AAEA;AACA,GAAG;AACH;AACA;;AAEA,eAAe,YAAY;AAC3B;;AAEA;AACA,2DAA2D;AAC3D,+DAA+D;AAC/D,mEAAmE;AACnE;AACA,0DAA0D,SAAS;AACnE;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,WAAW,MAAM;AACjB;AACA;AACA;AACA;AACA;;AAEA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,WAAW,MAAM;AACjB;AACA;AACA;AACA;AACA;;AAEA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,gDAAgD,YAAY;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;;AAEA;AACA,iCAAiC;;AAEjC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AChSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AC9FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;sDCpCA;AAAA;AACA;;AAEA;;AAEA;AACA;AACA,CAAC;AACD;AACA,CAAC;AACD;AACA,CAAC;AACD;AACA,CAAC;AACD;AACA;;AAEA;AACA;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;;;;;;;;ACvBA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,EAAE;AACF;AACA;;AAEA;AACA;;;;;;;;AChBA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA,oC;;;;;;;ACNA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA,oC;;;;;;;ACJA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,yC;;;;;;;AC5BA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;;AAEA,+B;;;;;;;AC7EA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;;;;;;;8CC5PA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA,mCAAmC;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACpEA;;AAEA;AACA;AACA,CAAC;AACD;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH,YAAY;AACZ;;AAEA;AACA;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA,C;;;;;;;AChHA;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,C;;;;;;;ACxBA;;AAEA;AACA;AACA,CAAC;;AAED,mDAAmD,gBAAgB,sBAAsB,OAAO,2BAA2B,0BAA0B,yDAAyD,2BAA2B,EAAE,EAAE,EAAE,eAAe,GAAG;AACjQ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,GAAG;AACH,C;;;;;;;AClCA;;AAEA;AACA;AACA,CAAC;AACD;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,C;;;;;;;AC1CA;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;AC/CA;;AAEA;AACA;AACA,CAAC;AACD;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,K;;;;;;;ACjCA;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,K;;;;;;;ACjCA;;AAEA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC,E;;;;;;;ACpeD;;AAEA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC,E;;;;;;;ACtHD;;AAEA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC,E;;;;;;;AClCD;;AAEA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC,E;;;;;;;ACnBD;;AAEA;AACA;AACA,CAAC;AACD;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,8BAA8B,qBAAqB;AACnD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA,C;;;;;;;AC5KA;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA,2CAA2C,kBAAkB,kCAAkC,qEAAqE,EAAE,EAAE,OAAO,kBAAkB,EAAE,YAAY,EAAE;AACjN;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,4FAA4F,+BAA+B;AAC3H,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA,UAAU;AACV,C;;;;;;;AC/EA;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;;AAEA,uD;;;;;;;AC3QA;;AAEA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC,E;;;;;;;AC5QD;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,K;;;;;;;AC1CA;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,K;;;;;;;ACnTA;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,iBAAiB,oCAAoC;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;ACxUA;;AAEA;AACA;AACA,CAAC;;AAED,mDAAmD,gBAAgB,sBAAsB,OAAO,2BAA2B,0BAA0B,yDAAyD,2BAA2B,EAAE,EAAE,EAAE,eAAe,GAAG;AACjQ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,KAAK;AACL,wBAAwB;AACxB;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA,8DAA8D,gEAAgE;AAC9H;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,C;;;;;;;AClPA;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,kBAAkB,sCAAsC;AACxD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH,6FAA6F,6CAA6C;AAC1I;;AAEA;AACA,0EAA0E,6CAA6C;AACvH;;AAEA;AACA;AACA;;AAEA;AACA,qEAAqE,6DAA6D;AAClI;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA,sEAAsE;AACtE;AACA,GAAG,wBAAwB;AAC3B;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,qBAAqB;AACtC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,qBAAqB,qBAAqB;AAC1C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,+CAA+C,yBAAyB;AACxE;AACA;AACA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA,C;;;;;;;AC/TA;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,K;;;;;;;ACxBA;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gDAAgD;AAChD,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,C;;;;;;;AC7CA;;AAEA;AACA;AACA,CAAC;AACD;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClC;AACA,mBAAmB,wBAAwB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,K;;;;;;;AChCA;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,C;;;;;;;AC5FA;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,OAAO;AACP,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,GAAG;AACH,C;;;;;;;ACprBA;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,K;;;;;;;ACzDA;;AAEA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,mDAAmD;AACnD;AACA,OAAO,OAAO;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd,KAAK;AACL,cAAc;AACd;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA,uC;;;;;;ACpFA;;AAEA;AACA;AACA;;;;;;;;;;;;;ACJqD;AAEL;AACR;AAEjC,IAAM,MAAM,GAAG,2EAAoB,CAAC,EAAE,QAAQ,EAAE,qEAAS,EAAE,SAAS,iEAAE,CAAC,CAAC;;;;;;;;ACL/E;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA,iC;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,EAAE;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,gBAAgB;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E,gBAAgB;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D;AACA,iC;;;;;;;ACzKA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,2BAA2B;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,uEAAuE;AACrG,YAAY,gCAAgC,6CAA6C,IAAI,QAAQ,EAAE;AACvG;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,2CAA2C,8CAA8C,EAAE;AAC3F,6CAA6C,kCAAkC,EAAE;AACjF,8CAA8C,sBAAsB,EAAE;AACtE,+CAA+C,4BAA4B,EAAE;AAC7E,0CAA0C,kBAAkB,EAAE;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,4CAA4C,EAAE;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,iCAAiC;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,IAAI,IAAI;AACpD;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,gC;;;;;;ACvTA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;ACPA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mCAAmC;AACnC;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,iBAAiB,OAAO;AACxB;AACA;;AAEA;AACA;;AAEA;;;;;;;AC5GA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,SAAS;AAC7B;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;;AC5BA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iC;;;;;;;ACXA;AACA;AACA;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,iEAAiE,uBAAuB,EAAE,4BAA4B;AACrJ;AACA,KAAK;AACL;AACA;AACA,aAAa,6BAA6B,0BAA0B,aAAa,EAAE,qBAAqB;AACxG,gBAAgB,qDAAqD,oEAAoE,aAAa,EAAE;AACxJ,sBAAsB,sBAAsB,qBAAqB,GAAG;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,kCAAkC,SAAS;AAC3C,kCAAkC,WAAW,UAAU;AACvD,yCAAyC,cAAc;AACvD;AACA,6GAA6G,OAAO,UAAU;AAC9H,gFAAgF,iBAAiB,OAAO;AACxG,wDAAwD,gBAAgB,QAAQ,OAAO;AACvF,8CAA8C,gBAAgB,gBAAgB,OAAO;AACrF;AACA,iCAAiC;AACjC;AACA;AACA,SAAS,YAAY,aAAa,OAAO,EAAE,UAAU,WAAW;AAChE,mCAAmC,SAAS;AAC5C;AACA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,sBAAsB,EAAE;AAClF;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,qCAAqC,qBAAqB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA,qFAAqF,iCAAiC,EAAE;AACxH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,0BAA0B;AAChE,yBAAyB;AACzB;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK,EAAE;AACP;AACA;AACA;AACA,6EAA6E,iCAAiC,EAAE;AAChH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,0BAA0B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sD;;;;;;;ACxNA;AACA;AACA,4CAA4C,OAAO;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,iEAAiE,uBAAuB,EAAE,4BAA4B;AACrJ;AACA,KAAK;AACL;AACA;AACA,aAAa,6BAA6B,0BAA0B,aAAa,EAAE,qBAAqB;AACxG,gBAAgB,qDAAqD,oEAAoE,aAAa,EAAE;AACxJ,sBAAsB,sBAAsB,qBAAqB,GAAG;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,kCAAkC,SAAS;AAC3C,kCAAkC,WAAW,UAAU;AACvD,yCAAyC,cAAc;AACvD;AACA,6GAA6G,OAAO,UAAU;AAC9H,gFAAgF,iBAAiB,OAAO;AACxG,wDAAwD,gBAAgB,QAAQ,OAAO;AACvF,8CAA8C,gBAAgB,gBAAgB,OAAO;AACrF;AACA,iCAAiC;AACjC;AACA;AACA,SAAS,YAAY,aAAa,OAAO,EAAE,UAAU,WAAW;AAChE,mCAAmC,SAAS;AAC5C;AACA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,2BAA2B;AAC1D;AACA;AACA,4BAA4B,cAAc;AAC1C;AACA;AACA;AACA;AACA,+BAA+B,SAAS,kBAAkB,eAAe;AACzE;AACA;AACA,4BAA4B,SAAS,kBAAkB,EAAE;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,QAAQ,eAAe,KAAK;AACvD,mCAAmC,YAAY,cAAc;AAC7D;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA,kDAAkD,iBAAiB,+BAA+B,EAAE,EAAE;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,wCAAwC,+BAA+B;AACvE,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,qD;;;;;;;ACxHA;AACA;AACA;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,iEAAiE,uBAAuB,EAAE,4BAA4B;AACrJ;AACA,KAAK;AACL;AACA;AACA,aAAa,6BAA6B,0BAA0B,aAAa,EAAE,qBAAqB;AACxG,gBAAgB,qDAAqD,oEAAoE,aAAa,EAAE;AACxJ,sBAAsB,sBAAsB,qBAAqB,GAAG;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,kCAAkC,SAAS;AAC3C,kCAAkC,WAAW,UAAU;AACvD,yCAAyC,cAAc;AACvD;AACA,6GAA6G,OAAO,UAAU;AAC9H,gFAAgF,iBAAiB,OAAO;AACxG,wDAAwD,gBAAgB,QAAQ,OAAO;AACvF,8CAA8C,gBAAgB,gBAAgB,OAAO;AACrF;AACA,iCAAiC;AACjC;AACA;AACA,SAAS,YAAY,aAAa,OAAO,EAAE,UAAU,WAAW;AAChE,mCAAmC,SAAS;AAC5C;AACA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA,4C;;;;;;;ACtEA;AACA;AACA,4CAA4C,OAAO;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,4CAA4C;AAC5C;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,+CAA+C;AAC/C;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,6BAA6B,8EAA8E,EAAE;AAC7G,KAAK;AACL;AACA;AACA;AACA;AACA,iCAAiC,iFAAiF,EAAE;AACpH,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iCAAiC,qFAAqF,EAAE;AACxH,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,yCAAyC,SAAS,uBAAuB;AACzE;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA,wC;;;;;;;AC1NA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,wBAAwB;AACxB,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,0BAA0B,EAAE;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,+CAA+C,gBAAgB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wC;;;;;;;AClGA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,wDAAwD,EAAE;AAC3F,qCAAqC,2CAA2C,2BAA2B,EAAE,EAAE,EAAE;AACjH,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,wDAAwD,EAAE;AAC3F;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,oDAAoD,iCAAiC,EAAE,EAAE,EAAE;AAC3H;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4C;;;;;;;AC9MA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA,WAAW,iBAAiB;AAC5B,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,8CAA8C,EAAE;AAC7E;AACA,yDAAyD,+CAA+C,EAAE;AAC1G,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,6BAA6B,8CAA8C,EAAE;AAC7E;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,mDAAmD,wCAAwC,EAAE;AAC7F,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,gCAAgC,aAAa,EAAE;AAC/C;AACA;AACA;AACA;AACA,iCAAiC,cAAc,EAAE;AACjD,mCAAmC,cAAc,EAAE;AACnD,KAAK;AACL;AACA;AACA;AACA;AACA,6BAA6B,8CAA8C,EAAE;AAC7E;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uC;;;;;;;;;AC9N8C;AAEvC,IAAM,SAAS,GAAG,sBAGvB,mEAAW,qgBA8BZ,CAAC;;;;;;;;;ACnCK,IAAM,WAAW,GAAG,s2BAqD1B,CAAC;;;;;;;;;;ACnDgF;AAE3E,IAAM,SAAS,GAAQ;IAC5B,KAAK,EAAE;QACL,iBAAiB,EAAE,UAAC,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI;YAC1C,MAAM,CAAC,8EAAe,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QACxD,CAAC;QACD,mBAAmB,EAAE,UAAC,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI;YAC5C,MAAM,CAAC,gFAAiB,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QAC1D,CAAC;QACD,aAAa,EAAE,UAAC,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI;YACtC,MAAM,CAAC,0EAAW,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QACpE,CAAC;KACF;CACF,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChBsD;AASxD,8DAA8D;AAC9D,IAAM,gBAAgB,GAAG,qBAAqB,CAAC;AAC/C,4BAA4B,GAAW;IACrC,EAAE,CAAC,CAAC,OAAO,GAAG,KAAK,QAAQ,CAAC,CAAC,CAAC;QAC5B,MAAM,IAAI,SAAS,CAAC,mBAAmB,CAAC,CAAC;IAC3C,CAAC;IACD,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC;AAC/C,CAAC;AAED,IAAM,QAAQ,GAAG,CAAC,CAAC,CAAC;AACpB,IAAM,iBAAiB,GAAG,CAAC,CAAC,CAAC;AAE7B,gBAAyB,KAAU,EAAE,YAAoB,EAAE,QAAgB,EAAE,UAAkB;;;;YACvF,GAAG,GAAQ,EAAE,CAAC;YACpB,GAAG,CAAC,OAAyB,EAAL,eAAK,EAAL,mBAAK,EAAL,IAAK;gBAAlB,SAAS;gBAClB,GAAG,CAAC,OAA8C,EAA/B,MAAC,SAAS,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC,EAA/B,cAA+B,EAA/B,IAA+B;oBAAvC,IAAI;oBACP,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC;oBACrB,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC;oBAChC,EAAE,CAAC,CAAC,GAAG,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;wBAC5B,GAAG,CAAC,GAAG,CAAC,IAAI,MAAM,CAAC;oBACrB,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACN,GAAG,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC;oBACpB,CAAC;iBACF;aACF;YACD,sBAAO,GAAG,EAAC;;;CACZ;AAED,2BAAiC,QAAuB,EAAE,MAA4B,EAAE,UAAgB;IAA9C,oCAA4B;;;;;wBACzE,qBAAM,QAAQ,CAAC,GAAG,EAAE;;oBAAzB,EAAE,GAAG,SAAoB;oBAE3B,KAAK,GAAG,EAAE,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,KAAK,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;oBAChE,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;wBAChD,KAAK,GAAG,EAAE,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;oBAClD,CAAC;oBACK,KAAK,GAAU,EAAE,CAAC;oBAClB,MAAM,GAAG,UAAS,KAAa,EAAE,MAAgB;wBACrD,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;4BACxB,MAAM,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;wBACjC,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACN,MAAM,CAAC,CAAC,KAAK,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;wBAC/B,CAAC;oBACH,CAAC;oBAED,EAAE,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC;wBACvB,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wBAAC,CAAC;wBAC5C,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC;oBACxD,CAAC;oBACD,EAAE,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;wBACrB,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wBAAC,CAAC;wBAC5C,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;oBACzD,CAAC;oBACD,EAAE,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC;wBACvB,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wBAAC,CAAC;wBAC5C,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,kBAAkB,EAAE,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC;oBAC7D,CAAC;oBACD,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;wBAChB,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wBAAC,CAAC;wBAC5C,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,KAAK,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;4BAC1C,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM,EAAC,GAAG,EAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;wBAC7C,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACN,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM,EAAC,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;4BAC7C,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;4BAClB,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM,EAAC,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;4BAC3C,uEAAuE;wBACzE,CAAC;oBACH,CAAC;oBACD,EAAE,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC;wBACvB,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wBAAC,CAAC;wBAC5C,EAAE,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,KAAK,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC;4BACxD,KAAK,CAAC,IAAI,CAAC,CAAC,WAAW,EAAC,GAAG,EAAC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;wBACzD,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACN,KAAK,CAAC,IAAI,CAAC,CAAC,WAAW,EAAC,IAAI,EAAE,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;4BACzD,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;4BAClB,KAAK,CAAC,IAAI,CAAC,CAAC,WAAW,EAAC,IAAI,EAAE,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC;4BACvD,0FAA0F;wBAC5F,CAAC;oBACH,CAAC;oBACD,EAAE,CAAC,CAAC,MAAM,CAAC,sBAAsB,CAAC,CAAC,CAAC;wBAClC,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wBAAC,CAAC;wBAC5C,KAAK,CAAC,IAAI,CAAC,CAAC,cAAc,EAAC,WAAW,EAAE,MAAM,CAAC,sBAAsB,CAAC,CAAC,CAAC;oBAC1E,CAAC;oBACD,EAAE,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;wBACpB,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wBAAC,CAAC;wBACtC,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAC,IAAI,IAAK,yBAAkB,CAAC,IAAI,CAAC,EAAxB,CAAwB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC;wBAC/F,KAAK,CAAC,IAAI,CAAC,CAAC,UAAU,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC;oBAC5C,CAAC;oBACD,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;wBACrB,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC;oBAC7D,CAAC;oBACD,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;wBACpC,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;wBAC7B,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,KAAK,IAAI,CAAC;wBAE9C,KAAK,GAAG,EAAE,CAAC;wBACjB,KAAK,CAAC,KAAK,CAAC,GAAG,SAAS,KAAK,IAAI,GAAG,KAAK,GAAG,MAAM,CAAC;wBACnD,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;oBAC/B,CAAC;yBACG,OAAM,CAAC,OAAO,IAAI,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,GAA3C,wBAA2C;oBAEvC,QAAQ,GAAG,MAAM,CAAC,OAAO,IAAI,EAAE,CAAC;oBAChC,gBAAc,QAAQ,CAAC,OAAO,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC;oBACzD,eAAa,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;oBAC/C,eAAa,EAAE,CAAC;oBAAC,QAAQ,CAAC,OAAO,CAAC,WAAC,IAAI,mBAAU,CAAC,CAAC,CAAC,GAAG,IAAI,EAApB,CAAoB,CAAC,CAAC;oBAErD,qBAAM,KAAK,CAAC,IAAI,EAAE;;oBAA5B,OAAO,GAAG,SAAkB;oBAChC,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,UAAC,GAAG;wBAC3B,IAAM,cAAc,GAA0B,GAAG,CAAC,cAAc,IAAI,EAAE,CAAC;wBAEvE,EAAE,CAAC,CAAC,aAAW,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAC7C,MAAM,CAAC,IAAI,CAAC;wBACd,CAAC;wBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,YAAU,IAAI,cAAc,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC;4BACpD,MAAM,CAAC,IAAI,CAAC;wBACd,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACN,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,UAAC,CAAC,IAAK,mBAAU,CAAC,CAAC,CAAC,OAAO,CAAC,EAArB,CAAqB,CAAC,CAAC;wBAC3D,CAAC;oBACH,CAAC,CAAC,CAAC;oBACH,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,IAAI,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;wBACrC,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;oBAC3C,CAAC;oBACD,KAAK,GAAG,sDAAI,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;;;oBAElD,0DAA0D;oBAC1D,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,IAAI,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;wBACrC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;oBACpC,CAAC;;wBAEK,qBAAM,KAAK,CAAC,IAAI,EAAE;wBAA1B,sBAAO,CAAC,SAAkB,CAAC,EAAC;;;;CAC7B;AAEK,yBAAgC,QAAuB,EAAE,MAA4B;IAA5B,oCAA4B;;;;;wBAC3E,qBAAM,iBAAiB,CAAC,QAAQ,EAAE,MAAM,CAAC;;oBAAnD,OAAO,GAAG,SAAyC;oBACnD,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC;yBAC5B,OAAM,CAAC,KAAK,IAAI,MAAM,CAAC,KAAK,GAAG,CAAC,GAAhC,wBAAgC;oBAClC,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;oBACzC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,EAAE,EAAC,KAAK,EAAE,CAAC,EAAC,CAAC,CAAC;oBACjC,qBAAM,iBAAiB,CAAC,QAAQ,EAAE,MAAM,EAAE,CAAC,IAAI,CAAC,CAAC;;oBAA/D,UAAU,GAAG,CAAC,SAAiD,CAAC,CAAC,MAAM,CAAC;;wBAE1E,sBAAO,EAAE,OAAO,WAAE,QAAQ,EAAE,EAAE,UAAU,cAAE,EAAE,EAAC;;;;CAC9C;AAEK,2BAAkC,QAAuB,EAAE,MAA4B;IAA5B,oCAA4B;;;;;wBACrE,qBAAM,iBAAiB,CAAC,QAAQ,EAAE,MAAM,EAAE,CAAC,gBAAgB,CAAC,CAAC;;oBAA7E,YAAY,GAAG,CAAC,SAA6D,CAAC,CAAC,GAAG,CAAC,UAAC,GAAG;wBAC3F,EAAE,CAAC,CAAC,MAAM,CAAC,YAAY,IAAI,CAAC,CAAC,GAAG,CAAC,cAAc,IAAI,GAAG,CAAC,cAAc,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;4BACpF,MAAM,CAAC,EAAC,gBAAgB,EAAC,CAAC,EAAC,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,EAAC,CAAC,EAAC,CAAC;wBAC7D,CAAC;wBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,qBAAqB,IAAI,GAAG,CAAC,cAAc,IAAI,GAAG,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAC/F,MAAM,CAAC,EAAC,gBAAgB,EAAC,CAAC,EAAC,OAAO,EAAE,iBAAiB,EAAE,MAAM,EAAE,CAAC,EAAC,CAAC,EAAC,CAAC;wBACtE,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACN,MAAM,CAAC,GAAG,CAAC;wBACb,CAAC;oBACH,CAAC,CAAC;oBACc,qBAAM,MAAM,CAAuB,YAAY,EAAE,gBAAgB,EAAE,SAAS,EAAE,QAAQ,CAAC;;oBAAjG,OAAO,GAAG,SAAuF;oBAEjG,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,UAAC,EAAM;4BAAL,SAAC,EAAE,SAAC;wBAAM,QAAqB,EAAC,OAAO,EAAgB,CAAE,EAAE,MAAM,EAAE,CAAC,EAAC;oBAA3D,CAA2D,CAAC,CAAC;oBAC/G,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC;oBAClC,sBAAO,EAAE,OAAO,WAAE,QAAQ,EAAE,EAAE,UAAU,cAAE,EAAE,EAAC;;;;CAC9C;AAEK,qBAA4B,QAAuB,EAAE,SAAiB,EAAE,MAA4B;IAA5B,oCAA4B;;;;;wBAGlF,qBAAM,iBAAiB,CAAC,QAAQ,EAAE,MAAM,EAAE,CAAC,SAAS,CAAC,CAAC;;oBAAtE,YAAY,GAAG,CAAC,SAAsD,CAAC;oBACvE,MAAM,GAAQ,EAAE,CAAC;oBACjB,OAAO,GAAG,EAAE,CAAC;oBACnB,YAAY,CAAC,OAAO,CAAC,UAAC,GAAG;wBACvB,IAAI,GAAG,GAAG,GAAG,CAAC,SAAS,CAAC,CAAC;wBACzB,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,GAAG,KAAK,QAAQ,IAAI,GAAG,YAAY,MAAM,CAAC,CAAC,CAAC,CAAC;4BACxD,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;wBAC5B,CAAC;wBACD,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;4BAChC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;4BAChB,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACpB,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACN,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC;wBAChB,CAAC;oBACH,CAAC,CAAC,CAAC;oBAEG,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC;oBAClC,sBAAO,EAAE,OAAO,WAAE,QAAQ,EAAE,EAAE,UAAU,cAAE,EAAE,EAAC;;;;CAC9C;;;;;;;AC5LD;AACA,4CAA4C,OAAO;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,oBAAoB,MAAM,kBAAkB,GAAG,EAAE;AAC/G;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,8DAA8D,oBAAoB,MAAM,kBAAkB,GAAG,EAAE;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wBAAwB;AACvC,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,qBAAqB;AACpC,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,eAAe;AAChC,iBAAiB,8BAA8B;AAC/C;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,sBAAsB;AACjG;AACA;AACA;AACA;AACA,eAAe,EAAE,2BAA2B,EAAE;AAC9C,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,oBAAoB;AACtC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB;AACjB;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,iBAAiB;AACjB;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qIAAqI,cAAc,EAAE;AACrJ;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,kCAAkC;AACjD,iBAAiB;AACjB;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mGAAmG,kDAAkD,EAAE;AACvJ;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,iDAAiD,cAAc,EAAE,oBAAoB,eAAe,EAAE;AAC3I,6BAA6B;AAC7B,2EAA2E,4BAA4B;AACvG,6BAA6B;AAC7B,yBAAyB;AACzB,iCAAiC,sCAAsC;AACvE,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA,kFAAkF,4BAA4B;AAC9G,iCAAiC;AACjC,6BAA6B;AAC7B,sCAAsC,mEAAmE;AACzG,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kFAAkF,4BAA4B;AAC9G,iCAAiC;AACjC,6BAA6B;AAC7B,qCAAqC,sCAAsC;AAC3E,6BAA6B;AAC7B,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,sCAAsC,EAAE,oCAAoC;AACjH,yCAAyC,iCAAiC;AAC1E,QAAQ;AACR;AACA,QAAQ;AACR;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kLAAkL,UAAU,EAAE;AAC9L;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA,6EAA6E;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,cAAc,EAAE;AACtF,qFAAqF,yCAAyC,EAAE,EAAE;AAClI;AACA;AACA,yBAAyB;AACzB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;AACD;;;;;;;;ACplBA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;AC1VA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,+CAA+C,GAAG;AAClD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;ACvLA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;;;;;;ACzBA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA,8DAA8D,+BAA+B,EAAE;AAC/F;AACA;AACA;AACA,CAAC;AACD;AACA;;;;;;;ACjCA;AACA,4CAA4C,OAAO;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mFAAmF;AACnF,yBAAyB,SAAS;AAClC;AACA,SAAS;AACT;AACA,4CAA4C;AAC5C;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,qBAAqB;AACrB;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB,uHAAuH,4CAA4C,EAAE;AACrK,uIAAuI,qCAAqC,EAAE;AAC9K,uIAAuI,2CAA2C,EAAE;AACpL;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,iDAAiD,eAAe;AAChE;AACA;AACA;AACA;AACA,iCAAiC;AACjC,6BAA6B;AAC7B,yBAAyB;AACzB,qBAAqB;AACrB,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;;;;;;ACxOA;AACA,4CAA4C,OAAO;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,oIAAoI,gCAAgC;AACpK;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,sBAAsB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wBAAwB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,UAAU,EAAE;AAC/D,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,sBAAsB;AACrC;AACA;AACA;AACA;AACA;AACA,gEAAgE,gBAAgB,gBAAgB;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uHAAuH,wBAAwB,EAAE;AACjJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,4FAA4F,6BAA6B;AACzH,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,sBAAsB,EAAE;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iLAAiL,UAAU,EAAE;AAC7L;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iHAAiH,qEAAqE,EAAE;AACxL,oHAAoH,qEAAqE,EAAE;AAC3L;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B,uLAAuL,UAAU,EAAE;AACnM;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,oBAAoB,EAAE;AAC7F;AACA,yBAAyB;AACzB,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE;AACxE;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA,uEAAuE;AACvE;AACA;AACA,oEAAoE,wBAAwB,EAAE,uBAAuB,wBAAwB,EAAE;AAC/I,8DAA8D,wBAAwB,EAAE,uBAAuB,wBAAwB,EAAE;AACzI,iEAAiE,sCAAsC,EAAE,EAAE;AAC3G,oEAAoE,sCAAsC,EAAE,EAAE;AAC9G;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mFAAmF,YAAY,EAAE;AACjG;AACA,yCAAyC;AACzC;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB;AACzB,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA,4DAA4D,UAAU,iBAAiB,EAAE,EAAE;AAC3F,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,sBAAsB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA,iCAAiC;AACjC,6BAA6B;AAC7B,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB,8DAA8D,cAAc,EAAE;AAC9E,gDAAgD,2FAA2F;AAC3I;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA,4CAA4C,iEAAiE;AAC7G;AACA;AACA,aAAa;AACb;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,6BAA6B;AAC7B,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,aAAa;AACb,wCAAwC,8FAA8F,cAAc,EAAE,8BAA8B;AACpL;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,sBAAsB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA,iDAAiD,UAAU,EAAE;AAC7D;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA,yDAAyD,0DAA0D,EAAE;AACrH,gDAAgD,iFAAiF;AACjI;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA,4CAA4C,iEAAiE;AAC7G;AACA;AACA,aAAa;AACb;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,sBAAsB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,4FAA4F,0DAA0D,EAAE,uBAAuB;AACvN;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,wBAAwB;AACvC,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,gCAAgC;AAChC;AACA;AACA,iBAAiB;AACjB;AACA,qCAAqC;AACrC;AACA;AACA,iBAAiB;AACjB;AACA,kBAAkB;AAClB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,EAAE;AACjB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,oEAAoE,6BAA6B,EAAE;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,wBAAwB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+KAA+K,6BAA6B;AAC5M;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,cAAc;AACpD,2DAA2D,UAAU,EAAE;AACvE;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,iDAAiD;AAChE,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,SAAS,gDAAgD,EAAE;AAC1E,eAAe,wBAAwB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qFAAqF;AACrF,iBAAiB;AACjB;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA,sBAAsB;AACtB,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,uEAAuE,gCAAgC,EAAE;AACzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB,yBAAyB;AACzC,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,wBAAwB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,+CAA+C;AAC/C,2HAA2H,iBAAiB,EAAE;AAC9I,iEAAiE;AACjE;AACA;AACA;AACA;AACA,wGAAwG,6CAA6C,EAAE;AACvJ;AACA;AACA,iCAAiC;AACjC;AACA,yBAAyB;AACzB;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA,mEAAmE,6CAA6C,EAAE,0BAA0B,cAAc,EAAE;AAC5J;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6CAA6C;AAC7C,0DAA0D,cAAc,EAAE,uBAAuB,2CAA2C,EAAE;AAC9I;AACA,sBAAsB;AACtB,uDAAuD,2CAA2C,EAAE;AACpG;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,wBAAwB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,UAAU,EAAE;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,yCAAyC,EAAE;AACjG,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wBAAwB;AACvC;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,yBAAyB,EAAE;AACtG;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB,eAAe,wBAAwB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mGAAmG,iBAAiB,EAAE;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA,iCAAiC;AACjC,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC,iCAAiC;AACjC;AACA,mFAAmF,2BAA2B,EAAE;AAChH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA,qCAAqC;AACrC,iCAAiC;AACjC,6BAA6B;AAC7B;AACA;AACA,iBAAiB;AACjB;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,yBAAyB;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC,yBAAyB;AACzB,8EAA8E,yBAAyB,EAAE;AACzG;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA,yCAAyC;AACzC,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA,6BAA6B;AAC7B;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA,qDAAqD,UAAU,EAAE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA,8FAA8F,YAAY,EAAE;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,6BAA6B;AAC7B,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,oBAAoB,oBAAoB,MAAM,2EAA2E,GAAG,EAAE;AACnJ,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA,kGAAkG,gDAAgD,EAAE;AACpJ;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA,uDAAuD,oBAAoB,MAAM,yBAAyB,GAAG,EAAE;AAC/G,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8FAA8F,iDAAiD,EAAE;AACjJ,uDAAuD,sDAAsD,EAAE;AAC/G;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,cAAc;AACd;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wBAAwB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wBAAwB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wBAAwB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA,sBAAsB;AACtB;AACA;AACA,aAAa;AACb;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E,uBAAuB;AACpG,iEAAiE,cAAc,EAAE;AACjF;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gGAAgG,iBAAiB,EAAE;AACnH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wFAAwF,gCAAgC,EAAE;AAC1H,oGAAoG,iBAAiB,EAAE;AACvH;AACA,gDAAgD,gEAAgE,EAAE;AAClH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,OAAO;AAClB,WAAW,EAAE;AACb,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sFAAsF,mDAAmD,EAAE;AAC3I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E,2CAA2C,EAAE;AACvH;AACA,8EAA8E,2CAA2C,EAAE;AAC3H;AACA;AACA;;;;;;;;ACxpEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,UAAU;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACvBA;AACA,4CAA4C,OAAO;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,+CAA+C,kCAAkC;AACjF;AACA;AACA,8CAA8C,iBAAiB,EAAE;AACjE,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,eAAe,uBAAuB;AACtC,eAAe,4CAA4C;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,kEAAkE;AACjG;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,6BAA6B;AAC7B,yBAAyB;AACzB,qBAAqB;AACrB;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,uBAAuB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB,EAAE;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,kFAAkF;AAClF,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,6BAA6B;AAC7B;AACA,qBAAqB;AACrB;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,wBAAwB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,gDAAgD,EAAE,uBAAuB,UAAU,EAAE;AAC/H;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,gFAAgF,eAAe,EAAE;AACjG;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,MAAM;AACrB,eAAe,MAAM;AACrB,eAAe,wBAAwB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,qEAAqE;AACpF,eAAe,wBAAwB;AACvC;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,uDAAuD,UAAU,EAAE;AACnE,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,yBAAyB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,MAAM;AACrB,eAAe,MAAM;AACrB,eAAe,SAAS;AACxB,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gGAAgG;AAChG;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,MAAM;AACrB,eAAe,MAAM;AACrB,eAAe,SAAS;AACxB,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oGAAoG;AACpG;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,MAAM;AACrB,eAAe,EAAE;AACjB,eAAe,MAAM;AACrB,eAAe,qBAAqB;AACpC;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,cAAc;AACd,sCAAsC,0BAA0B;AAChE,6FAA6F;AAC7F;AACA,aAAa,sBAAsB,EAAE;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,MAAM;AACrB,eAAe,qBAAqB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA;AACA,+FAA+F,4CAA4C,EAAE;AAC7I,+GAA+G,qCAAqC,EAAE;AACtJ,+GAA+G,2CAA2C,EAAE;AAC5J;AACA,sFAAsF,kCAAkC,EAAE;AAC1H;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,uBAAuB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,mEAAmE;AAChG,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,kDAAkD;AACnF,iCAAiC;AACjC;AACA;AACA,iCAAiC,kDAAkD;AACnF,iCAAiC;AACjC;AACA;AACA,iCAAiC,+CAA+C;AAChF,iCAAiC,8BAA8B;AAC/D,iCAAiC;AACjC;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,YAAY;AAC3B,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,gJAAgJ,iBAAiB,EAAE;AACnK;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mFAAmF;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iEAAiE,EAAE;AACnE;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,yDAAyD,EAAE;AAC3D;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,mDAAmD,EAAE;AACrD;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;AACD;;;;;;;AC7+BA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,IAAI;AACb;AACA;AACA;AACA,kCAAkC,eAAe;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;;;;;;AC1FA;AACA,4CAA4C,OAAO;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,gBAAgB;AAC/C;AACA;AACA;AACA;AACA,+BAA+B,gBAAgB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;;;;;;AC7KA;AACA,4CAA4C,OAAO;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,+BAA+B;AACvF;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,gBAAgB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF;AAChF,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;;;;;;AC7NA;AACA,4CAA4C,OAAO;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,0BAA0B;AAC/D;AACA;AACA;AACA;AACA,wDAAwD,uBAAuB,EAAE;AACjF;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,gBAAgB;AACjD;AACA;AACA,aAAa;AACb;AACA;AACA,iCAAiC,gBAAgB;AACjD;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gHAAgH,YAAY,EAAE;AAC9H;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,6CAA6C,EAAE;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,YAAY,EAAE;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E;AAC5E,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;;;;;;AC3NA;AACA,4CAA4C,OAAO;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA,kBAAkB;AAClB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,gBAAgB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E;AAC5E,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;AACD;;;;;;;;AC7MA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;AC/LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACtBA;AACA,4CAA4C,OAAO;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,yCAAyC;AACzC;AACA,iBAAiB;AACjB;AACA,mCAAmC,8CAA8C;AACjF;AACA;AACA;AACA;AACA,qBAAqB,6DAA6D;AAClF,qBAAqB,sCAAsC;AAC3D,qBAAqB,iCAAiC;AACtD;AACA;AACA,SAAS;AACT;AACA;AACA,aAAa,6CAA6C;AAC1D,aAAa,+BAA+B;AAC5C,aAAa;AACb;AACA;AACA,aAAa,6CAA6C;AAC1D,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA,iBAAiB;AACjB;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,kCAAkC;AAClC;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA,qBAAqB,cAAc,4BAA4B;AAC/D;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,6CAA6C;AAC7C;AACA;AACA,0BAA0B;AAC1B;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,iCAAiC;AACjC;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,cAAc,qBAAqB;AACxD;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,MAAM;AACrB,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E,qBAAqB;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oFAAoF,iBAAiB,EAAE;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qHAAqH,qBAAqB;AAC1I,mHAAmH,sBAAsB;AACzI;AACA,iHAAiH,eAAe;AAChI;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,gDAAgD,wBAAwB;AACxE;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,eAAe;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB,iIAAiI,aAAa,EAAE,gBAAgB,eAAe;AAC/K;AACA,8HAA8H,wBAAwB;AACtJ,yBAAyB;AACzB,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,MAAM;AACrB,eAAe,WAAW;AAC1B;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA,yBAAyB;AACzB;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,cAAc,0CAA0C;AACrF;AACA,6BAA6B;AAC7B,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,cAAc,mBAAmB;AAC9C;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E,sBAAsB;AACrG;AACA;AACA,+FAA+F,sBAAsB;AACrH;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,2CAA2C,qCAAqC;AACzI;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E,sBAAsB;AAChG,iEAAiE,kBAAkB,EAAE;AACrF,mFAAmF,qCAAqC;AACxH;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,gFAAgF,kCAAkC,EAAE;AACpH,qBAAqB;AACrB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,qDAAqD,wBAAwB;AAC7E;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,iCAAiC;AACjC;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,8EAA8E,sBAAsB;AACpG;AACA;AACA,aAAa;AACb;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,wBAAwB;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA,iHAAiH,eAAe;AAChI,qEAAqE,wBAAwB;AAC7F;AACA;AACA,yBAAyB;AACzB;AACA,yBAAyB;AACzB,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,uGAAuG,oCAAoC;AAC3I;AACA,aAAa;AACb;AACA,2FAA2F,oCAAoC;AAC/H;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA,mCAAmC;AACnC,8HAA8H,eAAe;AAC7I;AACA,iBAAiB;AACjB;AACA,kBAAkB;AAClB;AACA,wFAAwF,qCAAqC;AAC7H;AACA,+FAA+F,eAAe;AAC9G;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;;;;;;AC9hBA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,YAAY,EAAE;AACtD,+CAA+C,kBAAkB,EAAE;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,sBAAsB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kBAAkB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8BAA8B;AAC7C;AACA;AACA;AACA;AACA,uEAAuE,aAAa,EAAE;AACtF;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,YAAY,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;;;;;;;;;;ACxR+C;AAExC,IAAM,MAAM,GAAG,IAAI,6DAAM,EAAE,CAAC;;;;;;;;ACFnC;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA,iC;;;;;;;ACNA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA,iCAAiC,cAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,kC;;;;;;;AChCA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,4BAA4B;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,wCAAwC;AACjE;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,kDAAkD,iBAAiB,+BAA+B,EAAE,EAAE;AACtG;AACA;AACA;AACA;AACA;AACA,qDAAqD,2BAA2B;AAChF;AACA;AACA;AACA;AACA;AACA,qDAAqD,2BAA2B;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,wCAAwC,+BAA+B;AACvE,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,2D;;;;;;;ACpEA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA,iGAAiG,cAAc,EAAE;AACjH,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,uC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvCuD;AACZ;AAEK;AAEhD,kBAAwB,GAAW;;;;wBACzB,qBAAM,KAAK,CAAC,GAAG,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC;wBAA3C,sBAAO,CAAC,SAAmC,CAAC,CAAC,IAAI,EAAE,EAAC;;;;CACrD;AAED,sBAA4B,QAAuB;;;;;;wBACtC,qBAAM,QAAQ,CAAC,GAAG,CAAC,UAAO,EAAE;;;;wCACf,qBAAM,QAAQ,CAAC,eAAe,CAAC,aAAa,CAAC;;oCAA7D,UAAU,GAAG,CAAC,CAAC,CAAC,SAA6C,CAAC;yCAChE,CAAC,UAAU,EAAX,wBAAW;oCACb,OAAO,CAAC,GAAG,CAAC,uBAAqB,oEAAa,CAAC,CAAC;oCACnC,qBAAM,QAAQ,CAAC,oEAAW,CAAC;;oCAAlC,IAAI,GAAG,SAA2B;oCACxC,qBAAM,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC;;oCAAxB,SAAwB,CAAC;;;;;yBAE5B,CAAC;;oBAPI,EAAE,GAAG,SAOT;oBACF,sBAAO,EAAE,EAAC;;;;CACX;AAEK;IACJ,IAAM,QAAQ,GAAG,IAAI,2EAAa,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IACjD,YAAY,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC;QAC1B,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;IAC3B,CAAC,CAAC,CAAC;IACH,MAAM,CAAC,IAAI,gEAAc,CAAC,QAAQ,CAAC,CAAC;AACtC,CAAC;AAEM,IAAM,OAAO,GAAG,mBAAmB,EAAE,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7BmB;AACT;AAEvD;IAOE,uBAAoB,UAAoB,EAAU,OAAwB,EAAU,WAA+B;QAAjE,0CAAwB;QAAU,8CAA+B;QAA/F,eAAU,GAAV,UAAU,CAAU;QAAU,YAAO,GAAP,OAAO,CAAiB;QAAU,gBAAW,GAAX,WAAW,CAAoB;QAJnH,gBAAW,GAAU;YACnB,EAAE,IAAI,EAAE,aAAa,EAAE,MAAM,EAAE,4EAAgB,EAAE;SAClD,CAAC;IAEqH,CAAC;IAExH,2BAAG,GAAH,UAAI,WAAmD;QACrD,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,CAAC;YAC7B,aAAa,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QACtD,CAAC;QACD,MAAM,CAAC,aAAa,CAAC,SAAS,CAAC;IACjC,CAAC;IAEY,4CAAoB,GAAjC,UAAkC,UAAkB,EAAE,IAAW;;;;;4BACpD,qBAAM,IAAI,CAAC,GAAG,EAAE;;wBAArB,EAAE,GAAG,SAAgB;wBACrB,IAAI,GAAG,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;wBAC7B,qBAAM,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC;;6BAAvC,CAAC,UAAsC,MAAK,CAAC,CAAC,EAA9C,wBAA8C;wBAChD,qBAAM,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC;;wBAAnC,SAAmC,CAAC;;4BAEtB,qBAAM,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC;;wBAAhD,OAAO,GAAG,SAAsC;wBACtD,IAAI,CAAC,GAAG,CAAI,UAAU,UAAK,OAAS,CAAC,CAAC;;;;;KACvC;IAEY,uCAAe,GAA5B,UAA6B,UAAkB,EAAE,EAAoB;;;;;;6BAC/D,CAAC,EAAE,EAAH,wBAAG;wBACA,qBAAM,IAAI,CAAC,GAAG,EAAE;;wBAArB,EAAE,GAAG,SAAgB,CAAC;;;wBAElB,KAAK,GAAG,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,QAAQ,EAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;wBACxD,qBAAM,KAAK,CAAC,IAAI,EAAE;;wBAA7B,OAAO,GAAG,CAAC,SAAkB,CAAC,CAAC,CAAC,CAAC;wBACvC,sBAAO,OAAO,CAAC,OAAO,CAAC,IAAI,OAAO,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAAC;;;;KAC9D;IAEa,kCAAU,GAAxB,UAAyB,EAAmB;;;;;;KAE3C;IAEa,+BAAO,GAArB,UAAsB,WAAmD;;;;;;wBACjE,MAAM,GAAkB,MAAM,CAAC,MAAM,CAAC;4BAC1C,IAAI,EAAE,IAAI,CAAC,OAAO;yBACnB,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;wBAErB,IAAI,CAAC,GAAG,CAAC,oCAAoC,CAAC,CAAC;wBAC/C,IAAI,CAAC,GAAG,CAAC,uCAAuC,CAAC,CAAC;wBAC9C,EAAE,GAAoB,IAAI,CAAC;8BACU,EAAhB,SAAI,CAAC,WAAW;;;6BAAhB,eAAgB;wBAA9B,UAAU;wBACnB,EAAE,GAAG,sDAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;wBACnE,qBAAM,EAAE,CAAC,OAAO,EAAE;;wBAAlB,SAAkB,CAAC;wBACnB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;;;wBAHJ,IAAgB;;4BAMzC,qBAAM,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC;;wBAAzB,SAAyB,CAAC;6BACtB,WAAW,EAAX,wBAAW;wBACb,qBAAM,WAAW,CAAC,EAAE,CAAC;;wBAArB,SAAqB,CAAC;;4BAGxB,sBAAO,EAAE,EAAC;;;;KACX;IAEO,2BAAG,GAAX,UAAY,OAAe;QACzB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACrB,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACvB,CAAC;IACH,CAAC;IAhEc,uBAAS,GAA6B,IAAI,CAAC;IAiE5D,oBAAC;CAAA;AAlEyB;;;;;;;;;ACHnB,IAAM,gBAAgB,GAAG;IAC9B,EAAC,GAAG,EAAE,IAAI,EAAC,IAAI,EAAC,QAAQ,EAAE,KAAK,EAAC,CAAC,IAAI,CAAC,EAAC;IACvC,EAAC,GAAG,EAAE,OAAO,EAAC,IAAI,EAAC,QAAQ,EAAC;IAC5B,EAAC,GAAG,EAAE,QAAQ,EAAC,IAAI,EAAC,QAAQ,EAAC;IAC7B,EAAC,GAAG,EAAE,MAAM,EAAC,IAAI,EAAC,KAAK,EAAC;IACxB,EAAC,GAAG,EAAE,MAAM,EAAC,IAAI,EAAC,QAAQ,EAAC;IAC3B,EAAC,GAAG,EAAE,KAAK,EAAC,IAAI,EAAC,QAAQ,EAAC;IAC1B,EAAC,GAAG,EAAE,OAAO,EAAC,IAAI,EAAC,QAAQ,EAAC;IAC5B,EAAC,GAAG,EAAE,aAAa,EAAC,IAAI,EAAC,QAAQ,EAAC;IAClC,EAAC,GAAG,EAAE,WAAW,EAAC,IAAI,EAAC,KAAK,EAAC;IAC7B,EAAC,GAAG,EAAE,gBAAgB,EAAC,IAAI,EAAC,OAAO,EAAC;IACpC,EAAC,GAAG,EAAE,SAAS,EAAC,IAAI,EAAC,QAAQ,EAAC;IAC9B,EAAC,GAAG,EAAE,YAAY,EAAC,IAAI,EAAC,QAAQ,EAAC;IACjC,EAAC,GAAG,EAAE,cAAc,EAAC,IAAI,EAAC,OAAO,EAAC;IAClC,EAAC,GAAG,EAAE,WAAW,EAAC,IAAI,EAAC,KAAK,EAAC;IAC7B,EAAC,GAAG,EAAE,kBAAkB,EAAC,IAAI,EAAC,QAAQ,EAAC;IACvC,EAAC,GAAG,EAAE,gBAAgB,EAAC,IAAI,EAAC,QAAQ,EAAC;IACrC,EAAC,GAAG,EAAE,UAAU,EAAC,IAAI,EAAC,QAAQ,EAAC;CAChC,CAAC;;;;;;;;ACfF;AAAA;IACE,wBAAmB,QAAuB,EAAS,EAAoB;QAAvE,iBAIC;QAJkB,aAAQ,GAAR,QAAQ,CAAe;QAAS,OAAE,GAAF,EAAE,CAAkB;QACrE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACR,QAAQ,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,UAAC,UAAU,IAAO,KAAI,CAAC,EAAE,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;QACjE,CAAC;IACH,CAAC;IACH,qBAAC;AAAD,CAAC;;;;;;;;;;;;;;;;;ACTM,IAAM,MAAM,GAAG,4BAA4B,CAAC;AAC5C,IAAM,IAAI,GAAG,kCAAkC,CAAC;AAChD,IAAM,oBAAoB,GAAG,2DAA2D,CAAC;AACzF,IAAM,0BAA0B,GAAG,2EAA2E,CAAC;AAC/G,IAAM,OAAO,GAAG,8BAA8B,CAAC;AAC/C,IAAM,OAAO,GAAG,6BAA6B,CAAC;AAC9C,IAAM,SAAS,GAAG,oBAAoB,CAAC;AACvC,IAAM,WAAW,GAAG,sBAAsB,CAAC","file":"src/worker.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 103);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 3b6491bcc87bf8f8cfc7","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _GraphQLError = require('./GraphQLError');\n\nObject.defineProperty(exports, 'GraphQLError', {\n  enumerable: true,\n  get: function get() {\n    return _GraphQLError.GraphQLError;\n  }\n});\n\nvar _syntaxError = require('./syntaxError');\n\nObject.defineProperty(exports, 'syntaxError', {\n  enumerable: true,\n  get: function get() {\n    return _syntaxError.syntaxError;\n  }\n});\n\nvar _locatedError = require('./locatedError');\n\nObject.defineProperty(exports, 'locatedError', {\n  enumerable: true,\n  get: function get() {\n    return _locatedError.locatedError;\n  }\n});\n\nvar _printError = require('./printError');\n\nObject.defineProperty(exports, 'printError', {\n  enumerable: true,\n  get: function get() {\n    return _printError.printError;\n  }\n});\n\nvar _formatError = require('./formatError');\n\nObject.defineProperty(exports, 'formatError', {\n  enumerable: true,\n  get: function get() {\n    return _formatError.formatError;\n  }\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/error/index.js\n// module id = 0\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLInputObjectType = exports.GraphQLEnumType = exports.GraphQLUnionType = exports.GraphQLInterfaceType = exports.GraphQLObjectType = exports.GraphQLScalarType = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports.isType = isType;\nexports.assertType = assertType;\nexports.isScalarType = isScalarType;\nexports.assertScalarType = assertScalarType;\nexports.isObjectType = isObjectType;\nexports.assertObjectType = assertObjectType;\nexports.isInterfaceType = isInterfaceType;\nexports.assertInterfaceType = assertInterfaceType;\nexports.isUnionType = isUnionType;\nexports.assertUnionType = assertUnionType;\nexports.isEnumType = isEnumType;\nexports.assertEnumType = assertEnumType;\nexports.isInputObjectType = isInputObjectType;\nexports.assertInputObjectType = assertInputObjectType;\nexports.isListType = isListType;\nexports.assertListType = assertListType;\nexports.isNonNullType = isNonNullType;\nexports.assertNonNullType = assertNonNullType;\nexports.isInputType = isInputType;\nexports.assertInputType = assertInputType;\nexports.isOutputType = isOutputType;\nexports.assertOutputType = assertOutputType;\nexports.isLeafType = isLeafType;\nexports.assertLeafType = assertLeafType;\nexports.isCompositeType = isCompositeType;\nexports.assertCompositeType = assertCompositeType;\nexports.isAbstractType = isAbstractType;\nexports.assertAbstractType = assertAbstractType;\nexports.GraphQLList = GraphQLList;\nexports.GraphQLNonNull = GraphQLNonNull;\nexports.isWrappingType = isWrappingType;\nexports.assertWrappingType = assertWrappingType;\nexports.isNullableType = isNullableType;\nexports.assertNullableType = assertNullableType;\nexports.getNullableType = getNullableType;\nexports.isNamedType = isNamedType;\nexports.assertNamedType = assertNamedType;\nexports.getNamedType = getNamedType;\n\nvar _instanceOf = require('../jsutils/instanceOf');\n\nvar _instanceOf2 = _interopRequireDefault(_instanceOf);\n\nvar _invariant = require('../jsutils/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _isInvalid = require('../jsutils/isInvalid');\n\nvar _isInvalid2 = _interopRequireDefault(_isInvalid);\n\nvar _kinds = require('../language/kinds');\n\nvar _valueFromASTUntyped = require('../utilities/valueFromASTUntyped');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /**\n                                                                                                                                                           * Copyright (c) 2015-present, Facebook, Inc.\n                                                                                                                                                           *\n                                                                                                                                                           * This source code is licensed under the MIT license found in the\n                                                                                                                                                           * LICENSE file in the root directory of this source tree.\n                                                                                                                                                           *\n                                                                                                                                                           *  strict\n                                                                                                                                                           */\n\n// Predicates & Assertions\n\n/**\n * These are all of the possible kinds of types.\n */\nfunction isType(type) {\n  return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isInputObjectType(type) || isListType(type) || isNonNullType(type);\n}\n\nfunction assertType(type) {\n  !isType(type) ? (0, _invariant2.default)(0, 'Expected ' + String(type) + ' to be a GraphQL type.') : void 0;\n  return type;\n}\n\n/**\n * There are predicates for each kind of GraphQL type.\n */\n\n// eslint-disable-next-line no-redeclare\nfunction isScalarType(type) {\n  return (0, _instanceOf2.default)(type, GraphQLScalarType);\n}\n\nfunction assertScalarType(type) {\n  !isScalarType(type) ? (0, _invariant2.default)(0, 'Expected ' + String(type) + ' to be a GraphQL Scalar type.') : void 0;\n  return type;\n}\n\n// eslint-disable-next-line no-redeclare\nfunction isObjectType(type) {\n  return (0, _instanceOf2.default)(type, GraphQLObjectType);\n}\n\nfunction assertObjectType(type) {\n  !isObjectType(type) ? (0, _invariant2.default)(0, 'Expected ' + String(type) + ' to be a GraphQL Object type.') : void 0;\n  return type;\n}\n\n// eslint-disable-next-line no-redeclare\nfunction isInterfaceType(type) {\n  return (0, _instanceOf2.default)(type, GraphQLInterfaceType);\n}\n\nfunction assertInterfaceType(type) {\n  !isInterfaceType(type) ? (0, _invariant2.default)(0, 'Expected ' + String(type) + ' to be a GraphQL Interface type.') : void 0;\n  return type;\n}\n\n// eslint-disable-next-line no-redeclare\nfunction isUnionType(type) {\n  return (0, _instanceOf2.default)(type, GraphQLUnionType);\n}\n\nfunction assertUnionType(type) {\n  !isUnionType(type) ? (0, _invariant2.default)(0, 'Expected ' + String(type) + ' to be a GraphQL Union type.') : void 0;\n  return type;\n}\n\n// eslint-disable-next-line no-redeclare\nfunction isEnumType(type) {\n  return (0, _instanceOf2.default)(type, GraphQLEnumType);\n}\n\nfunction assertEnumType(type) {\n  !isEnumType(type) ? (0, _invariant2.default)(0, 'Expected ' + String(type) + ' to be a GraphQL Enum type.') : void 0;\n  return type;\n}\n\n// eslint-disable-next-line no-redeclare\nfunction isInputObjectType(type) {\n  return (0, _instanceOf2.default)(type, GraphQLInputObjectType);\n}\n\nfunction assertInputObjectType(type) {\n  !isInputObjectType(type) ? (0, _invariant2.default)(0, 'Expected ' + String(type) + ' to be a GraphQL Input Object type.') : void 0;\n  return type;\n}\n\n// eslint-disable-next-line no-redeclare\nfunction isListType(type) {\n  return (0, _instanceOf2.default)(type, GraphQLList);\n}\n\nfunction assertListType(type) {\n  !isListType(type) ? (0, _invariant2.default)(0, 'Expected ' + String(type) + ' to be a GraphQL List type.') : void 0;\n  return type;\n}\n\n// eslint-disable-next-line no-redeclare\nfunction isNonNullType(type) {\n  return (0, _instanceOf2.default)(type, GraphQLNonNull);\n}\n\nfunction assertNonNullType(type) {\n  !isNonNullType(type) ? (0, _invariant2.default)(0, 'Expected ' + String(type) + ' to be a GraphQL Non-Null type.') : void 0;\n  return type;\n}\n\n/**\n * These types may be used as input types for arguments and directives.\n */\nfunction isInputType(type) {\n  return isScalarType(type) || isEnumType(type) || isInputObjectType(type) || isWrappingType(type) && isInputType(type.ofType);\n}\n\nfunction assertInputType(type) {\n  !isInputType(type) ? (0, _invariant2.default)(0, 'Expected ' + String(type) + ' to be a GraphQL input type.') : void 0;\n  return type;\n}\n\n/**\n * These types may be used as output types as the result of fields.\n */\nfunction isOutputType(type) {\n  return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isWrappingType(type) && isOutputType(type.ofType);\n}\n\nfunction assertOutputType(type) {\n  !isOutputType(type) ? (0, _invariant2.default)(0, 'Expected ' + String(type) + ' to be a GraphQL output type.') : void 0;\n  return type;\n}\n\n/**\n * These types may describe types which may be leaf values.\n */\nfunction isLeafType(type) {\n  return isScalarType(type) || isEnumType(type);\n}\n\nfunction assertLeafType(type) {\n  !isLeafType(type) ? (0, _invariant2.default)(0, 'Expected ' + String(type) + ' to be a GraphQL leaf type.') : void 0;\n  return type;\n}\n\n/**\n * These types may describe the parent context of a selection set.\n */\nfunction isCompositeType(type) {\n  return isObjectType(type) || isInterfaceType(type) || isUnionType(type);\n}\n\nfunction assertCompositeType(type) {\n  !isCompositeType(type) ? (0, _invariant2.default)(0, 'Expected ' + String(type) + ' to be a GraphQL composite type.') : void 0;\n  return type;\n}\n\n/**\n * These types may describe the parent context of a selection set.\n */\nfunction isAbstractType(type) {\n  return isInterfaceType(type) || isUnionType(type);\n}\n\nfunction assertAbstractType(type) {\n  !isAbstractType(type) ? (0, _invariant2.default)(0, 'Expected ' + String(type) + ' to be a GraphQL abstract type.') : void 0;\n  return type;\n}\n\n/**\n * List Type Wrapper\n *\n * A list is a wrapping type which points to another type.\n * Lists are often created within the context of defining the fields of\n * an object type.\n *\n * Example:\n *\n *     const PersonType = new GraphQLObjectType({\n *       name: 'Person',\n *       fields: () => ({\n *         parents: { type: GraphQLList(PersonType) },\n *         children: { type: GraphQLList(PersonType) },\n *       })\n *     })\n *\n */\n\n// eslint-disable-next-line no-redeclare\nfunction GraphQLList(ofType) {\n  if (this instanceof GraphQLList) {\n    this.ofType = assertType(ofType);\n  } else {\n    return new GraphQLList(ofType);\n  }\n}\n\n// Also provide toJSON and inspect aliases for toString.\nvar listProto = GraphQLList.prototype;\nlistProto.toString = listProto.toJSON = listProto.inspect = function toString() {\n  return '[' + String(this.ofType) + ']';\n};\n\n/**\n * Non-Null Type Wrapper\n *\n * A non-null is a wrapping type which points to another type.\n * Non-null types enforce that their values are never null and can ensure\n * an error is raised if this ever occurs during a request. It is useful for\n * fields which you can make a strong guarantee on non-nullability, for example\n * usually the id field of a database row will never be null.\n *\n * Example:\n *\n *     const RowType = new GraphQLObjectType({\n *       name: 'Row',\n *       fields: () => ({\n *         id: { type: GraphQLNonNull(GraphQLString) },\n *       })\n *     })\n *\n * Note: the enforcement of non-nullability occurs within the executor.\n */\n\n// eslint-disable-next-line no-redeclare\nfunction GraphQLNonNull(ofType) {\n  if (this instanceof GraphQLNonNull) {\n    this.ofType = assertNullableType(ofType);\n  } else {\n    return new GraphQLNonNull(ofType);\n  }\n}\n\n// Also provide toJSON and inspect aliases for toString.\nvar nonNullProto = GraphQLNonNull.prototype;\nnonNullProto.toString = nonNullProto.toJSON = nonNullProto.inspect = function toString() {\n  return String(this.ofType) + '!';\n};\n\n/**\n * These types wrap and modify other types\n */\n\nfunction isWrappingType(type) {\n  return isListType(type) || isNonNullType(type);\n}\n\nfunction assertWrappingType(type) {\n  !isWrappingType(type) ? (0, _invariant2.default)(0, 'Expected ' + String(type) + ' to be a GraphQL wrapping type.') : void 0;\n  return type;\n}\n\n/**\n * These types can all accept null as a value.\n */\nfunction isNullableType(type) {\n  return isType(type) && !isNonNullType(type);\n}\n\nfunction assertNullableType(type) {\n  !isNullableType(type) ? (0, _invariant2.default)(0, 'Expected ' + String(type) + ' to be a GraphQL nullable type.') : void 0;\n  return type;\n}\n\n/* eslint-disable no-redeclare */\nfunction getNullableType(type) {\n  /* eslint-enable no-redeclare */\n  if (type) {\n    return isNonNullType(type) ? type.ofType : type;\n  }\n}\n\n/**\n * These named types do not include modifiers like List or NonNull.\n */\nfunction isNamedType(type) {\n  return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isInputObjectType(type);\n}\n\nfunction assertNamedType(type) {\n  !isNamedType(type) ? (0, _invariant2.default)(0, 'Expected ' + String(type) + ' to be a GraphQL named type.') : void 0;\n  return type;\n}\n\n/* eslint-disable no-redeclare */\nfunction getNamedType(type) {\n  /* eslint-enable no-redeclare */\n  if (type) {\n    var unwrappedType = type;\n    while (isWrappingType(unwrappedType)) {\n      unwrappedType = unwrappedType.ofType;\n    }\n    return unwrappedType;\n  }\n}\n\n/**\n * Used while defining GraphQL types to allow for circular references in\n * otherwise immutable type definitions.\n */\n\n\nfunction resolveThunk(thunk) {\n  return typeof thunk === 'function' ? thunk() : thunk;\n}\n\n/**\n * Scalar Type Definition\n *\n * The leaf values of any request and input values to arguments are\n * Scalars (or Enums) and are defined with a name and a series of functions\n * used to parse input from ast or variables and to ensure validity.\n *\n * If a type's serialize function does not return a value (i.e. it returns\n * `undefined`) then an error will be raised and a `null` value will be returned\n * in the response. If the serialize function returns `null`, then no error will\n * be included in the response.\n *\n * Example:\n *\n *     const OddType = new GraphQLScalarType({\n *       name: 'Odd',\n *       serialize(value) {\n *         if (value % 2 === 1) {\n *           return value;\n *         }\n *       }\n *     });\n *\n */\n\nvar GraphQLScalarType = exports.GraphQLScalarType = function () {\n  function GraphQLScalarType(config) {\n    _classCallCheck(this, GraphQLScalarType);\n\n    this.name = config.name;\n    this.description = config.description;\n    this.astNode = config.astNode;\n    this._scalarConfig = config;\n    !(typeof config.name === 'string') ? (0, _invariant2.default)(0, 'Must provide name.') : void 0;\n    !(typeof config.serialize === 'function') ? (0, _invariant2.default)(0, this.name + ' must provide \"serialize\" function. If this custom Scalar ' + 'is also used as an input type, ensure \"parseValue\" and \"parseLiteral\" ' + 'functions are also provided.') : void 0;\n    if (config.parseValue || config.parseLiteral) {\n      !(typeof config.parseValue === 'function' && typeof config.parseLiteral === 'function') ? (0, _invariant2.default)(0, this.name + ' must provide both \"parseValue\" and \"parseLiteral\" ' + 'functions.') : void 0;\n    }\n  }\n\n  // Serializes an internal value to include in a response.\n\n\n  GraphQLScalarType.prototype.serialize = function serialize(value) {\n    var serializer = this._scalarConfig.serialize;\n    return serializer(value);\n  };\n\n  // Parses an externally provided value to use as an input.\n\n\n  GraphQLScalarType.prototype.parseValue = function parseValue(value) {\n    var parser = this._scalarConfig.parseValue;\n    if ((0, _isInvalid2.default)(value)) {\n      return undefined;\n    }\n    return parser ? parser(value) : value;\n  };\n\n  // Parses an externally provided literal value to use as an input.\n\n\n  GraphQLScalarType.prototype.parseLiteral = function parseLiteral(valueNode, variables) {\n    var parser = this._scalarConfig.parseLiteral;\n    return parser ? parser(valueNode, variables) : (0, _valueFromASTUntyped.valueFromASTUntyped)(valueNode, variables);\n  };\n\n  GraphQLScalarType.prototype.toString = function toString() {\n    return this.name;\n  };\n\n  return GraphQLScalarType;\n}();\n\n// Also provide toJSON and inspect aliases for toString.\n\n\nGraphQLScalarType.prototype.toJSON = GraphQLScalarType.prototype.inspect = GraphQLScalarType.prototype.toString;\n\n/**\n * Object Type Definition\n *\n * Almost all of the GraphQL types you define will be object types. Object types\n * have a name, but most importantly describe their fields.\n *\n * Example:\n *\n *     const AddressType = new GraphQLObjectType({\n *       name: 'Address',\n *       fields: {\n *         street: { type: GraphQLString },\n *         number: { type: GraphQLInt },\n *         formatted: {\n *           type: GraphQLString,\n *           resolve(obj) {\n *             return obj.number + ' ' + obj.street\n *           }\n *         }\n *       }\n *     });\n *\n * When two types need to refer to each other, or a type needs to refer to\n * itself in a field, you can use a function expression (aka a closure or a\n * thunk) to supply the fields lazily.\n *\n * Example:\n *\n *     const PersonType = new GraphQLObjectType({\n *       name: 'Person',\n *       fields: () => ({\n *         name: { type: GraphQLString },\n *         bestFriend: { type: PersonType },\n *       })\n *     });\n *\n */\nvar GraphQLObjectType = exports.GraphQLObjectType = function () {\n  function GraphQLObjectType(config) {\n    _classCallCheck(this, GraphQLObjectType);\n\n    this.name = config.name;\n    this.description = config.description;\n    this.astNode = config.astNode;\n    this.extensionASTNodes = config.extensionASTNodes;\n    this.isTypeOf = config.isTypeOf;\n    this._typeConfig = config;\n    !(typeof config.name === 'string') ? (0, _invariant2.default)(0, 'Must provide name.') : void 0;\n    if (config.isTypeOf) {\n      !(typeof config.isTypeOf === 'function') ? (0, _invariant2.default)(0, this.name + ' must provide \"isTypeOf\" as a function.') : void 0;\n    }\n  }\n\n  GraphQLObjectType.prototype.getFields = function getFields() {\n    return this._fields || (this._fields = defineFieldMap(this, this._typeConfig.fields));\n  };\n\n  GraphQLObjectType.prototype.getInterfaces = function getInterfaces() {\n    return this._interfaces || (this._interfaces = defineInterfaces(this, this._typeConfig.interfaces));\n  };\n\n  GraphQLObjectType.prototype.toString = function toString() {\n    return this.name;\n  };\n\n  return GraphQLObjectType;\n}();\n\n// Also provide toJSON and inspect aliases for toString.\n\n\nGraphQLObjectType.prototype.toJSON = GraphQLObjectType.prototype.inspect = GraphQLObjectType.prototype.toString;\n\nfunction defineInterfaces(type, interfacesThunk) {\n  var interfaces = resolveThunk(interfacesThunk) || [];\n  !Array.isArray(interfaces) ? (0, _invariant2.default)(0, type.name + ' interfaces must be an Array or a function which returns ' + 'an Array.') : void 0;\n  return interfaces;\n}\n\nfunction defineFieldMap(type, fieldsThunk) {\n  var fieldMap = resolveThunk(fieldsThunk) || {};\n  !isPlainObj(fieldMap) ? (0, _invariant2.default)(0, type.name + ' fields must be an object with field names as keys or a ' + 'function which returns such an object.') : void 0;\n\n  var resultFieldMap = Object.create(null);\n  Object.keys(fieldMap).forEach(function (fieldName) {\n    var fieldConfig = fieldMap[fieldName];\n    !isPlainObj(fieldConfig) ? (0, _invariant2.default)(0, type.name + '.' + fieldName + ' field config must be an object') : void 0;\n    !!fieldConfig.hasOwnProperty('isDeprecated') ? (0, _invariant2.default)(0, type.name + '.' + fieldName + ' should provide \"deprecationReason\" instead ' + 'of \"isDeprecated\".') : void 0;\n    var field = _extends({}, fieldConfig, {\n      isDeprecated: Boolean(fieldConfig.deprecationReason),\n      name: fieldName\n    });\n    !isValidResolver(field.resolve) ? (0, _invariant2.default)(0, type.name + '.' + fieldName + ' field resolver must be a function if ' + ('provided, but got: ' + String(field.resolve) + '.')) : void 0;\n    var argsConfig = fieldConfig.args;\n    if (!argsConfig) {\n      field.args = [];\n    } else {\n      !isPlainObj(argsConfig) ? (0, _invariant2.default)(0, type.name + '.' + fieldName + ' args must be an object with argument ' + 'names as keys.') : void 0;\n      field.args = Object.keys(argsConfig).map(function (argName) {\n        var arg = argsConfig[argName];\n        return {\n          name: argName,\n          description: arg.description === undefined ? null : arg.description,\n          type: arg.type,\n          defaultValue: arg.defaultValue,\n          astNode: arg.astNode\n        };\n      });\n    }\n    resultFieldMap[fieldName] = field;\n  });\n  return resultFieldMap;\n}\n\nfunction isPlainObj(obj) {\n  return obj && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && !Array.isArray(obj);\n}\n\n// If a resolver is defined, it must be a function.\nfunction isValidResolver(resolver) {\n  return resolver == null || typeof resolver === 'function';\n}\n\n/**\n * Interface Type Definition\n *\n * When a field can return one of a heterogeneous set of types, a Interface type\n * is used to describe what types are possible, what fields are in common across\n * all types, as well as a function to determine which type is actually used\n * when the field is resolved.\n *\n * Example:\n *\n *     const EntityType = new GraphQLInterfaceType({\n *       name: 'Entity',\n *       fields: {\n *         name: { type: GraphQLString }\n *       }\n *     });\n *\n */\nvar GraphQLInterfaceType = exports.GraphQLInterfaceType = function () {\n  function GraphQLInterfaceType(config) {\n    _classCallCheck(this, GraphQLInterfaceType);\n\n    this.name = config.name;\n    this.description = config.description;\n    this.astNode = config.astNode;\n    this.extensionASTNodes = config.extensionASTNodes;\n    this.resolveType = config.resolveType;\n    this._typeConfig = config;\n    !(typeof config.name === 'string') ? (0, _invariant2.default)(0, 'Must provide name.') : void 0;\n    if (config.resolveType) {\n      !(typeof config.resolveType === 'function') ? (0, _invariant2.default)(0, this.name + ' must provide \"resolveType\" as a function.') : void 0;\n    }\n  }\n\n  GraphQLInterfaceType.prototype.getFields = function getFields() {\n    return this._fields || (this._fields = defineFieldMap(this, this._typeConfig.fields));\n  };\n\n  GraphQLInterfaceType.prototype.toString = function toString() {\n    return this.name;\n  };\n\n  return GraphQLInterfaceType;\n}();\n\n// Also provide toJSON and inspect aliases for toString.\n\n\nGraphQLInterfaceType.prototype.toJSON = GraphQLInterfaceType.prototype.inspect = GraphQLInterfaceType.prototype.toString;\n\n/**\n * Union Type Definition\n *\n * When a field can return one of a heterogeneous set of types, a Union type\n * is used to describe what types are possible as well as providing a function\n * to determine which type is actually used when the field is resolved.\n *\n * Example:\n *\n *     const PetType = new GraphQLUnionType({\n *       name: 'Pet',\n *       types: [ DogType, CatType ],\n *       resolveType(value) {\n *         if (value instanceof Dog) {\n *           return DogType;\n *         }\n *         if (value instanceof Cat) {\n *           return CatType;\n *         }\n *       }\n *     });\n *\n */\nvar GraphQLUnionType = exports.GraphQLUnionType = function () {\n  function GraphQLUnionType(config) {\n    _classCallCheck(this, GraphQLUnionType);\n\n    this.name = config.name;\n    this.description = config.description;\n    this.astNode = config.astNode;\n    this.resolveType = config.resolveType;\n    this._typeConfig = config;\n    !(typeof config.name === 'string') ? (0, _invariant2.default)(0, 'Must provide name.') : void 0;\n    if (config.resolveType) {\n      !(typeof config.resolveType === 'function') ? (0, _invariant2.default)(0, this.name + ' must provide \"resolveType\" as a function.') : void 0;\n    }\n  }\n\n  GraphQLUnionType.prototype.getTypes = function getTypes() {\n    return this._types || (this._types = defineTypes(this, this._typeConfig.types));\n  };\n\n  GraphQLUnionType.prototype.toString = function toString() {\n    return this.name;\n  };\n\n  return GraphQLUnionType;\n}();\n\n// Also provide toJSON and inspect aliases for toString.\n\n\nGraphQLUnionType.prototype.toJSON = GraphQLUnionType.prototype.inspect = GraphQLUnionType.prototype.toString;\n\nfunction defineTypes(unionType, typesThunk) {\n  var types = resolveThunk(typesThunk) || [];\n  !Array.isArray(types) ? (0, _invariant2.default)(0, 'Must provide Array of types or a function which returns ' + ('such an array for Union ' + unionType.name + '.')) : void 0;\n  return types;\n}\n\n/**\n * Enum Type Definition\n *\n * Some leaf values of requests and input values are Enums. GraphQL serializes\n * Enum values as strings, however internally Enums can be represented by any\n * kind of type, often integers.\n *\n * Example:\n *\n *     const RGBType = new GraphQLEnumType({\n *       name: 'RGB',\n *       values: {\n *         RED: { value: 0 },\n *         GREEN: { value: 1 },\n *         BLUE: { value: 2 }\n *       }\n *     });\n *\n * Note: If a value is not provided in a definition, the name of the enum value\n * will be used as its internal value.\n */\nvar GraphQLEnumType /* <T> */ = exports.GraphQLEnumType = function () {\n  function GraphQLEnumType(config /* <T> */) {\n    _classCallCheck(this, GraphQLEnumType);\n\n    this.name = config.name;\n    this.description = config.description;\n    this.astNode = config.astNode;\n    this._enumConfig = config;\n    !(typeof config.name === 'string') ? (0, _invariant2.default)(0, 'Must provide name.') : void 0;\n  }\n\n  GraphQLEnumType.prototype.getValues = function getValues() {\n    return this._values || (this._values = defineEnumValues(this, this._enumConfig.values));\n  };\n\n  GraphQLEnumType.prototype.getValue = function getValue(name) {\n    return this._getNameLookup()[name];\n  };\n\n  GraphQLEnumType.prototype.serialize = function serialize(value /* T */) {\n    var enumValue = this._getValueLookup().get(value);\n    if (enumValue) {\n      return enumValue.name;\n    }\n  };\n\n  GraphQLEnumType.prototype.parseValue = function parseValue(value) /* T */{\n    if (typeof value === 'string') {\n      var enumValue = this._getNameLookup()[value];\n      if (enumValue) {\n        return enumValue.value;\n      }\n    }\n  };\n\n  GraphQLEnumType.prototype.parseLiteral = function parseLiteral(valueNode, _variables) /* T */{\n    // Note: variables will be resolved to a value before calling this function.\n    if (valueNode.kind === _kinds.Kind.ENUM) {\n      var enumValue = this._getNameLookup()[valueNode.value];\n      if (enumValue) {\n        return enumValue.value;\n      }\n    }\n  };\n\n  GraphQLEnumType.prototype._getValueLookup = function _getValueLookup() {\n    if (!this._valueLookup) {\n      var lookup = new Map();\n      this.getValues().forEach(function (value) {\n        lookup.set(value.value, value);\n      });\n      this._valueLookup = lookup;\n    }\n    return this._valueLookup;\n  };\n\n  GraphQLEnumType.prototype._getNameLookup = function _getNameLookup() {\n    if (!this._nameLookup) {\n      var lookup = Object.create(null);\n      this.getValues().forEach(function (value) {\n        lookup[value.name] = value;\n      });\n      this._nameLookup = lookup;\n    }\n    return this._nameLookup;\n  };\n\n  GraphQLEnumType.prototype.toString = function toString() {\n    return this.name;\n  };\n\n  return GraphQLEnumType;\n}();\n\n// Also provide toJSON and inspect aliases for toString.\n\n\nGraphQLEnumType.prototype.toJSON = GraphQLEnumType.prototype.inspect = GraphQLEnumType.prototype.toString;\n\nfunction defineEnumValues(type, valueMap /* <T> */\n) {\n  !isPlainObj(valueMap) ? (0, _invariant2.default)(0, type.name + ' values must be an object with value names as keys.') : void 0;\n  return Object.keys(valueMap).map(function (valueName) {\n    var value = valueMap[valueName];\n    !isPlainObj(value) ? (0, _invariant2.default)(0, type.name + '.' + valueName + ' must refer to an object with a \"value\" key ' + ('representing an internal value but got: ' + String(value) + '.')) : void 0;\n    !!value.hasOwnProperty('isDeprecated') ? (0, _invariant2.default)(0, type.name + '.' + valueName + ' should provide \"deprecationReason\" instead ' + 'of \"isDeprecated\".') : void 0;\n    return {\n      name: valueName,\n      description: value.description,\n      isDeprecated: Boolean(value.deprecationReason),\n      deprecationReason: value.deprecationReason,\n      astNode: value.astNode,\n      value: value.hasOwnProperty('value') ? value.value : valueName\n    };\n  });\n} /* <T> */\n\n/**\n * Input Object Type Definition\n *\n * An input object defines a structured collection of fields which may be\n * supplied to a field argument.\n *\n * Using `NonNull` will ensure that a value must be provided by the query\n *\n * Example:\n *\n *     const GeoPoint = new GraphQLInputObjectType({\n *       name: 'GeoPoint',\n *       fields: {\n *         lat: { type: GraphQLNonNull(GraphQLFloat) },\n *         lon: { type: GraphQLNonNull(GraphQLFloat) },\n *         alt: { type: GraphQLFloat, defaultValue: 0 },\n *       }\n *     });\n *\n */\nvar GraphQLInputObjectType = exports.GraphQLInputObjectType = function () {\n  function GraphQLInputObjectType(config) {\n    _classCallCheck(this, GraphQLInputObjectType);\n\n    this.name = config.name;\n    this.description = config.description;\n    this.astNode = config.astNode;\n    this._typeConfig = config;\n    !(typeof config.name === 'string') ? (0, _invariant2.default)(0, 'Must provide name.') : void 0;\n  }\n\n  GraphQLInputObjectType.prototype.getFields = function getFields() {\n    return this._fields || (this._fields = this._defineFieldMap());\n  };\n\n  GraphQLInputObjectType.prototype._defineFieldMap = function _defineFieldMap() {\n    var _this = this;\n\n    var fieldMap = resolveThunk(this._typeConfig.fields) || {};\n    !isPlainObj(fieldMap) ? (0, _invariant2.default)(0, this.name + ' fields must be an object with field names as keys or a ' + 'function which returns such an object.') : void 0;\n    var resultFieldMap = Object.create(null);\n    Object.keys(fieldMap).forEach(function (fieldName) {\n      var field = _extends({}, fieldMap[fieldName], {\n        name: fieldName\n      });\n      !!field.hasOwnProperty('resolve') ? (0, _invariant2.default)(0, _this.name + '.' + fieldName + ' field type has a resolve property, but ' + 'Input Types cannot define resolvers.') : void 0;\n      resultFieldMap[fieldName] = field;\n    });\n    return resultFieldMap;\n  };\n\n  GraphQLInputObjectType.prototype.toString = function toString() {\n    return this.name;\n  };\n\n  return GraphQLInputObjectType;\n}();\n\n// Also provide toJSON and inspect aliases for toString.\n\n\nGraphQLInputObjectType.prototype.toJSON = GraphQLInputObjectType.prototype.toString;\nGraphQLInputObjectType.prototype.inspect = GraphQLInputObjectType.prototype.toString;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/type/definition.js\n// module id = 1\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * The set of allowed kind values for AST nodes.\n */\nvar Kind = exports.Kind = Object.freeze({\n  // Name\n  NAME: 'Name',\n\n  // Document\n  DOCUMENT: 'Document',\n  OPERATION_DEFINITION: 'OperationDefinition',\n  VARIABLE_DEFINITION: 'VariableDefinition',\n  VARIABLE: 'Variable',\n  SELECTION_SET: 'SelectionSet',\n  FIELD: 'Field',\n  ARGUMENT: 'Argument',\n\n  // Fragments\n  FRAGMENT_SPREAD: 'FragmentSpread',\n  INLINE_FRAGMENT: 'InlineFragment',\n  FRAGMENT_DEFINITION: 'FragmentDefinition',\n\n  // Values\n  INT: 'IntValue',\n  FLOAT: 'FloatValue',\n  STRING: 'StringValue',\n  BOOLEAN: 'BooleanValue',\n  NULL: 'NullValue',\n  ENUM: 'EnumValue',\n  LIST: 'ListValue',\n  OBJECT: 'ObjectValue',\n  OBJECT_FIELD: 'ObjectField',\n\n  // Directives\n  DIRECTIVE: 'Directive',\n\n  // Types\n  NAMED_TYPE: 'NamedType',\n  LIST_TYPE: 'ListType',\n  NON_NULL_TYPE: 'NonNullType',\n\n  // Type System Definitions\n  SCHEMA_DEFINITION: 'SchemaDefinition',\n  OPERATION_TYPE_DEFINITION: 'OperationTypeDefinition',\n\n  // Type Definitions\n  SCALAR_TYPE_DEFINITION: 'ScalarTypeDefinition',\n  OBJECT_TYPE_DEFINITION: 'ObjectTypeDefinition',\n  FIELD_DEFINITION: 'FieldDefinition',\n  INPUT_VALUE_DEFINITION: 'InputValueDefinition',\n  INTERFACE_TYPE_DEFINITION: 'InterfaceTypeDefinition',\n  UNION_TYPE_DEFINITION: 'UnionTypeDefinition',\n  ENUM_TYPE_DEFINITION: 'EnumTypeDefinition',\n  ENUM_VALUE_DEFINITION: 'EnumValueDefinition',\n  INPUT_OBJECT_TYPE_DEFINITION: 'InputObjectTypeDefinition',\n\n  // Type Extensions\n  SCALAR_TYPE_EXTENSION: 'ScalarTypeExtension',\n  OBJECT_TYPE_EXTENSION: 'ObjectTypeExtension',\n  INTERFACE_TYPE_EXTENSION: 'InterfaceTypeExtension',\n  UNION_TYPE_EXTENSION: 'UnionTypeExtension',\n  ENUM_TYPE_EXTENSION: 'EnumTypeExtension',\n  INPUT_OBJECT_TYPE_EXTENSION: 'InputObjectTypeExtension',\n\n  // Directive Definitions\n  DIRECTIVE_DEFINITION: 'DirectiveDefinition'\n});\n\n/**\n * The enum type representing the possible kind values of AST nodes.\n */\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/language/kinds.js\n// module id = 2\n// module chunks = 0","\nexport { graphql, graphqlSync } from './graphql';\n\n// Create and operate on GraphQL type definitions and schema.\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * GraphQL.js provides a reference implementation for the GraphQL specification\n * but is also a useful utility for operating on GraphQL files and building\n * sophisticated tools.\n *\n * This primary module exports a general purpose function for fulfilling all\n * steps of the GraphQL specification in a single operation, but also includes\n * utilities for every part of the GraphQL specification:\n *\n *   - Parsing the GraphQL language.\n *   - Building a GraphQL type schema.\n *   - Validating a GraphQL request against a type schema.\n *   - Executing a GraphQL request against a type schema.\n *\n * This also includes utility functions for operating on GraphQL types and\n * GraphQL documents to facilitate building tools.\n *\n * You may also import from each sub-directory directly. For example, the\n * following two import statements are equivalent:\n *\n *     import { parse } from 'graphql';\n *     import { parse } from 'graphql/language';\n */\n\n// The primary entry point into fulfilling a GraphQL request.\nexport { GraphQLSchema,\n// Definitions\nGraphQLScalarType, GraphQLObjectType, GraphQLInterfaceType, GraphQLUnionType, GraphQLEnumType, GraphQLInputObjectType, GraphQLList, GraphQLNonNull, GraphQLDirective,\n// \"Enum\" of Type Kinds\nTypeKind,\n// Scalars\nspecifiedScalarTypes, GraphQLInt, GraphQLFloat, GraphQLString, GraphQLBoolean, GraphQLID,\n// Built-in Directives defined by the Spec\nspecifiedDirectives, GraphQLIncludeDirective, GraphQLSkipDirective, GraphQLDeprecatedDirective,\n// Constant Deprecation Reason\nDEFAULT_DEPRECATION_REASON,\n// Meta-field definitions.\nSchemaMetaFieldDef, TypeMetaFieldDef, TypeNameMetaFieldDef,\n// GraphQL Types for introspection.\nintrospectionTypes, __Schema, __Directive, __DirectiveLocation, __Type, __Field, __InputValue, __EnumValue, __TypeKind,\n// Predicates\nisSchema, isDirective, isType, isScalarType, isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType, isListType, isNonNullType, isInputType, isOutputType, isLeafType, isCompositeType, isAbstractType, isWrappingType, isNullableType, isNamedType, isSpecifiedScalarType, isIntrospectionType, isSpecifiedDirective,\n// Assertions\nassertType, assertScalarType, assertObjectType, assertInterfaceType, assertUnionType, assertEnumType, assertInputObjectType, assertListType, assertNonNullType, assertInputType, assertOutputType, assertLeafType, assertCompositeType, assertAbstractType, assertWrappingType, assertNullableType, assertNamedType,\n// Un-modifiers\ngetNullableType, getNamedType,\n// Validate GraphQL schema.\nvalidateSchema, assertValidSchema } from './type';\n\n// Parse and operate on GraphQL language source files.\nexport { Source, getLocation,\n// Parse\nparse, parseValue, parseType,\n// Print\nprint,\n// Visit\nvisit, visitInParallel, visitWithTypeInfo, getVisitFn, Kind, TokenKind, DirectiveLocation, BREAK } from './language';\n\n// Execute GraphQL queries.\nexport { execute, defaultFieldResolver, responsePathAsArray, getDirectiveValues } from './execution';\n\nexport { subscribe, createSourceEventStream } from './subscription';\n\n// Validate GraphQL queries.\nexport { validate, ValidationContext,\n// All validation rules in the GraphQL Specification.\nspecifiedRules,\n// Individual validation rules.\nFieldsOnCorrectTypeRule, FragmentsOnCompositeTypesRule, KnownArgumentNamesRule, KnownDirectivesRule, KnownFragmentNamesRule, KnownTypeNamesRule, LoneAnonymousOperationRule, NoFragmentCyclesRule, NoUndefinedVariablesRule, NoUnusedFragmentsRule, NoUnusedVariablesRule, OverlappingFieldsCanBeMergedRule, PossibleFragmentSpreadsRule, ProvidedNonNullArgumentsRule, ScalarLeafsRule, SingleFieldSubscriptionsRule, UniqueArgumentNamesRule, UniqueDirectivesPerLocationRule, UniqueFragmentNamesRule, UniqueInputFieldNamesRule, UniqueOperationNamesRule, UniqueVariableNamesRule, ValuesOfCorrectTypeRule, VariablesAreInputTypesRule, VariablesDefaultValueAllowedRule, VariablesInAllowedPositionRule } from './validation';\n\n// Create, format, and print GraphQL errors.\nexport { GraphQLError, formatError, printError } from './error';\n\n// Utilities for operating on GraphQL type schema and parsed sources.\nexport {\n// Produce the GraphQL query recommended for a full schema introspection.\n// Accepts optional IntrospectionOptions.\ngetIntrospectionQuery,\n// Deprecated: use getIntrospectionQuery\nintrospectionQuery,\n// Gets the target Operation from a Document\ngetOperationAST,\n// Convert a GraphQLSchema to an IntrospectionQuery\nintrospectionFromSchema,\n// Build a GraphQLSchema from an introspection result.\nbuildClientSchema,\n// Build a GraphQLSchema from a parsed GraphQL Schema language AST.\nbuildASTSchema,\n// Build a GraphQLSchema from a GraphQL schema language document.\nbuildSchema,\n// Get the description from a schema AST node.\ngetDescription,\n// Extends an existing GraphQLSchema from a parsed GraphQL Schema\n// language AST.\nextendSchema,\n// Sort a GraphQLSchema.\nlexicographicSortSchema,\n// Print a GraphQLSchema to GraphQL Schema language.\nprintSchema,\n// Prints the built-in introspection schema in the Schema Language\n// format.\nprintIntrospectionSchema,\n// Print a GraphQLType to GraphQL Schema language.\nprintType,\n// Create a GraphQLType from a GraphQL language AST.\ntypeFromAST,\n// Create a JavaScript value from a GraphQL language AST with a Type.\nvalueFromAST,\n// Create a JavaScript value from a GraphQL language AST without a Type.\nvalueFromASTUntyped,\n// Create a GraphQL language AST from a JavaScript value.\nastFromValue,\n// A helper to use within recursive-descent visitors which need to be aware of\n// the GraphQL type system.\nTypeInfo,\n// Coerces a JavaScript value to a GraphQL type, or produces errors.\ncoerceValue,\n// @deprecated use coerceValue\nisValidJSValue,\n// Determine if AST values adhere to a GraphQL type.\nisValidLiteralValue,\n// Concatenates multiple AST together.\nconcatAST,\n// Separates an AST into an AST per Operation.\nseparateOperations,\n// Comparators for types\nisEqualType, isTypeSubTypeOf, doTypesOverlap,\n// Asserts a string is a valid GraphQL name.\nassertValidName,\n// Determine if a string is a valid GraphQL name.\nisValidNameError,\n// Compares two GraphQLSchemas and detects breaking changes.\nfindBreakingChanges, findDangerousChanges, BreakingChangeType, DangerousChangeType,\n// Report all deprecated usage within a GraphQL document.\nfindDeprecatedUsages } from './utilities';\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/index.mjs\n// module id = 3\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLSchema = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports.isSchema = isSchema;\n\nvar _definition = require('./definition');\n\nvar _directives = require('./directives');\n\nvar _introspection = require('./introspection');\n\nvar _find = require('../jsutils/find');\n\nvar _find2 = _interopRequireDefault(_find);\n\nvar _instanceOf = require('../jsutils/instanceOf');\n\nvar _instanceOf2 = _interopRequireDefault(_instanceOf);\n\nvar _invariant = require('../jsutils/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _objectValues = require('../jsutils/objectValues');\n\nvar _objectValues2 = _interopRequireDefault(_objectValues);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /**\n                                                                                                                                                           * Copyright (c) 2015-present, Facebook, Inc.\n                                                                                                                                                           *\n                                                                                                                                                           * This source code is licensed under the MIT license found in the\n                                                                                                                                                           * LICENSE file in the root directory of this source tree.\n                                                                                                                                                           *\n                                                                                                                                                           *  strict\n                                                                                                                                                           */\n\n// eslint-disable-next-line no-redeclare\n\n\n/**\n * Test if the given value is a GraphQL schema.\n */\nfunction isSchema(schema) {\n  return (0, _instanceOf2.default)(schema, GraphQLSchema);\n}\n\n/**\n * Schema Definition\n *\n * A Schema is created by supplying the root types of each type of operation,\n * query and mutation (optional). A schema definition is then supplied to the\n * validator and executor.\n *\n * Example:\n *\n *     const MyAppSchema = new GraphQLSchema({\n *       query: MyAppQueryRootType,\n *       mutation: MyAppMutationRootType,\n *     })\n *\n * Note: If an array of `directives` are provided to GraphQLSchema, that will be\n * the exact list of directives represented and allowed. If `directives` is not\n * provided then a default set of the specified directives (e.g. @include and\n * @skip) will be used. If you wish to provide *additional* directives to these\n * specified directives, you must explicitly declare them. Example:\n *\n *     const MyAppSchema = new GraphQLSchema({\n *       ...\n *       directives: specifiedDirectives.concat([ myCustomDirective ]),\n *     })\n *\n */\n\nvar GraphQLSchema = exports.GraphQLSchema = function () {\n  // Used as a cache for validateSchema().\n  function GraphQLSchema(config) {\n    var _this = this;\n\n    _classCallCheck(this, GraphQLSchema);\n\n    // If this schema was built from a source known to be valid, then it may be\n    // marked with assumeValid to avoid an additional type system validation.\n    if (config && config.assumeValid) {\n      this.__validationErrors = [];\n    } else {\n      // Otherwise check for common mistakes during construction to produce\n      // clear and early error messages.\n      !((typeof config === 'undefined' ? 'undefined' : _typeof(config)) === 'object') ? (0, _invariant2.default)(0, 'Must provide configuration object.') : void 0;\n      !(!config.types || Array.isArray(config.types)) ? (0, _invariant2.default)(0, '\"types\" must be Array if provided but got: ' + String(config.types) + '.') : void 0;\n      !(!config.directives || Array.isArray(config.directives)) ? (0, _invariant2.default)(0, '\"directives\" must be Array if provided but got: ' + (String(config.directives) + '.')) : void 0;\n      !(!config.allowedLegacyNames || Array.isArray(config.allowedLegacyNames)) ? (0, _invariant2.default)(0, '\"allowedLegacyNames\" must be Array if provided but got: ' + (String(config.allowedLegacyNames) + '.')) : void 0;\n    }\n\n    this.__allowedLegacyNames = config.allowedLegacyNames;\n    this._queryType = config.query;\n    this._mutationType = config.mutation;\n    this._subscriptionType = config.subscription;\n    // Provide specified directives (e.g. @include and @skip) by default.\n    this._directives = config.directives || _directives.specifiedDirectives;\n    this.astNode = config.astNode;\n\n    // Build type map now to detect any errors within this schema.\n    var initialTypes = [this.getQueryType(), this.getMutationType(), this.getSubscriptionType(), _introspection.__Schema];\n\n    var types = config.types;\n    if (types) {\n      initialTypes = initialTypes.concat(types);\n    }\n\n    // Keep track of all types referenced within the schema.\n    var typeMap = Object.create(null);\n\n    // First by deeply visiting all initial types.\n    typeMap = initialTypes.reduce(typeMapReducer, typeMap);\n\n    // Then by deeply visiting all directive types.\n    typeMap = this._directives.reduce(typeMapDirectiveReducer, typeMap);\n\n    // Storing the resulting map for reference by the schema.\n    this._typeMap = typeMap;\n\n    // Keep track of all implementations by interface name.\n    this._implementations = Object.create(null);\n    Object.keys(this._typeMap).forEach(function (typeName) {\n      var type = _this._typeMap[typeName];\n      if ((0, _definition.isObjectType)(type)) {\n        type.getInterfaces().forEach(function (iface) {\n          if ((0, _definition.isInterfaceType)(iface)) {\n            var impls = _this._implementations[iface.name];\n            if (impls) {\n              impls.push(type);\n            } else {\n              _this._implementations[iface.name] = [type];\n            }\n          }\n        });\n      }\n    });\n  }\n  // Referenced by validateSchema().\n\n\n  GraphQLSchema.prototype.getQueryType = function getQueryType() {\n    return this._queryType;\n  };\n\n  GraphQLSchema.prototype.getMutationType = function getMutationType() {\n    return this._mutationType;\n  };\n\n  GraphQLSchema.prototype.getSubscriptionType = function getSubscriptionType() {\n    return this._subscriptionType;\n  };\n\n  GraphQLSchema.prototype.getTypeMap = function getTypeMap() {\n    return this._typeMap;\n  };\n\n  GraphQLSchema.prototype.getType = function getType(name) {\n    return this.getTypeMap()[name];\n  };\n\n  GraphQLSchema.prototype.getPossibleTypes = function getPossibleTypes(abstractType) {\n    if ((0, _definition.isUnionType)(abstractType)) {\n      return abstractType.getTypes();\n    }\n    return this._implementations[abstractType.name];\n  };\n\n  GraphQLSchema.prototype.isPossibleType = function isPossibleType(abstractType, possibleType) {\n    var possibleTypeMap = this._possibleTypeMap;\n    if (!possibleTypeMap) {\n      this._possibleTypeMap = possibleTypeMap = Object.create(null);\n    }\n\n    if (!possibleTypeMap[abstractType.name]) {\n      var possibleTypes = this.getPossibleTypes(abstractType);\n      !Array.isArray(possibleTypes) ? (0, _invariant2.default)(0, 'Could not find possible implementing types for ' + abstractType.name + ' ' + 'in schema. Check that schema.types is defined and is an array of ' + 'all possible types in the schema.') : void 0;\n      possibleTypeMap[abstractType.name] = possibleTypes.reduce(function (map, type) {\n        return map[type.name] = true, map;\n      }, Object.create(null));\n    }\n\n    return Boolean(possibleTypeMap[abstractType.name][possibleType.name]);\n  };\n\n  GraphQLSchema.prototype.getDirectives = function getDirectives() {\n    return this._directives;\n  };\n\n  GraphQLSchema.prototype.getDirective = function getDirective(name) {\n    return (0, _find2.default)(this.getDirectives(), function (directive) {\n      return directive.name === name;\n    });\n  };\n\n  return GraphQLSchema;\n}();\n\nfunction typeMapReducer(map, type) {\n  if (!type) {\n    return map;\n  }\n  if ((0, _definition.isWrappingType)(type)) {\n    return typeMapReducer(map, type.ofType);\n  }\n  if (map[type.name]) {\n    !(map[type.name] === type) ? (0, _invariant2.default)(0, 'Schema must contain unique named types but contains multiple ' + ('types named \"' + type.name + '\".')) : void 0;\n    return map;\n  }\n  map[type.name] = type;\n\n  var reducedMap = map;\n\n  if ((0, _definition.isUnionType)(type)) {\n    reducedMap = type.getTypes().reduce(typeMapReducer, reducedMap);\n  }\n\n  if ((0, _definition.isObjectType)(type)) {\n    reducedMap = type.getInterfaces().reduce(typeMapReducer, reducedMap);\n  }\n\n  if ((0, _definition.isObjectType)(type) || (0, _definition.isInterfaceType)(type)) {\n    (0, _objectValues2.default)(type.getFields()).forEach(function (field) {\n      if (field.args) {\n        var fieldArgTypes = field.args.map(function (arg) {\n          return arg.type;\n        });\n        reducedMap = fieldArgTypes.reduce(typeMapReducer, reducedMap);\n      }\n      reducedMap = typeMapReducer(reducedMap, field.type);\n    });\n  }\n\n  if ((0, _definition.isInputObjectType)(type)) {\n    (0, _objectValues2.default)(type.getFields()).forEach(function (field) {\n      reducedMap = typeMapReducer(reducedMap, field.type);\n    });\n  }\n\n  return reducedMap;\n}\n\nfunction typeMapDirectiveReducer(map, directive) {\n  // Directives are not validated until validateSchema() is called.\n  if (!(0, _directives.isDirective)(directive)) {\n    return map;\n  }\n  return directive.args.reduce(function (_map, arg) {\n    return typeMapReducer(_map, arg.type);\n  }, map);\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/type/schema.js\n// module id = 4\n// module chunks = 0","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = invariant;\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction invariant(condition, message) {\n  /* istanbul ignore else */\n  if (!condition) {\n    throw new Error(message);\n  }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/jsutils/invariant.js\n// module id = 5\n// module chunks = 0","Object.defineProperty(exports, \"__esModule\", { value: true });\r\nvar lie_ts_1 = require(\"lie-ts\");\r\nvar metaphone = require(\"metaphone\");\r\nvar stemmer = require(\"stemmer\");\r\nexports.Promise = (function () {\r\n    return typeof window !== \"undefined\" && window[\"Promise\"] ? window[\"Promise\"] : typeof global !== \"undefined\" && global[\"Promise\"] ? global[\"Promise\"] : lie_ts_1.Promise;\r\n})();\r\nexports.stopWords = [\r\n    \"a\", \"about\", \"after\", \"all\", \"also\", \"am\", \"an\", \"and\", \"andor\", \"another\", \"any\",\r\n    \"are\", \"as\", \"at\", \"be\", \"because\", \"been\", \"before\", \"being\", \"between\",\r\n    \"both\", \"but\", \"by\", \"came\", \"can\", \"come\", \"could\", \"did\", \"do\", \"each\",\r\n    \"for\", \"from\", \"get\", \"got\", \"had\", \"has\", \"have\", \"he\", \"her\", \"here\",\r\n    \"him\", \"himself\", \"his\", \"how\", \"i\", \"if\", \"in\", \"into\", \"is\", \"it\", \"like\",\r\n    \"make\", \"many\", \"me\", \"might\", \"more\", \"most\", \"much\", \"must\", \"my\", \"never\",\r\n    \"now\", \"of\", \"on\", \"only\", \"or\", \"other\", \"our\", \"out\", \"over\", \"said\", \"same\",\r\n    \"see\", \"should\", \"since\", \"some\", \"still\", \"such\", \"take\", \"than\", \"that\", \"the\",\r\n    \"their\", \"them\", \"then\", \"there\", \"these\", \"they\", \"this\", \"those\", \"through\",\r\n    \"to\", \"too\", \"under\", \"up\", \"very\", \"was\", \"way\", \"we\", \"well\", \"were\", \"what\",\r\n    \"where\", \"which\", \"while\", \"who\", \"with\", \"would\", \"you\", \"your\"\r\n];\r\n/**\r\n * Object.assign, but faster.\r\n *\r\n * @param {*} obj\r\n * @returns\r\n */\r\nexports._assign = function (obj) {\r\n    return obj ? JSON.parse(JSON.stringify(obj)) : null;\r\n};\r\n/**\r\n * Quickly and efficiently fire asyncrounous operations in sequence, returns once all operations complete.\r\n *\r\n * @param {any[]} items\r\n * @param {(item: any, i: number, next: (result?: any) => void) => void} callback\r\n * @returns {Promise<any[]>}\r\n */\r\nexports.fastCHAIN = function (items, callback) {\r\n    return new exports.Promise(function (res, rej) {\r\n        if (!items || !items.length) {\r\n            res([]);\r\n            return;\r\n        }\r\n        var results = [];\r\n        var step = function () {\r\n            if (results.length < items.length) {\r\n                callback(items[results.length], results.length, function (result) {\r\n                    results.push(result);\r\n                    results.length % 100 === 0 ? lie_ts_1.setFast(step) : step();\r\n                });\r\n            }\r\n            else {\r\n                res(results);\r\n            }\r\n        };\r\n        step();\r\n    });\r\n};\r\n/**\r\n * Quickly and efficiently fire asyncrounous operations in parallel, returns once first operation completes.\r\n *\r\n * @param {any[]} items\r\n * @param {(item: any, i: number, next: (result?: any) => void) => void} callback\r\n * @returns {Promise<any[]>}\r\n */\r\nexports.fastRACE = function (items, callback) {\r\n    return new exports.Promise(function (res, rej) {\r\n        if (!items || !items.length) {\r\n            res([]);\r\n            return;\r\n        }\r\n        var resolved = false;\r\n        var counter = 0;\r\n        var step = function () {\r\n            if (counter < items.length) {\r\n                callback(items[counter], counter, function (result) {\r\n                    if (!resolved) {\r\n                        resolved = true;\r\n                        res([result]);\r\n                    }\r\n                });\r\n                counter++;\r\n                step();\r\n            }\r\n        };\r\n        step();\r\n    });\r\n};\r\n/**\r\n * Quickly and efficiently fire asyncrounous operations in parallel, returns once all operations are complete.\r\n *\r\n * @param {any[]} items\r\n * @param {(item: any, i: number, done: (result?: any) => void) => void} callback\r\n * @returns {Promise<any[]>}\r\n */\r\nexports.fastALL = function (items, callback) {\r\n    return exports.Promise.all((items || []).map(function (item, i) {\r\n        return new exports.Promise(function (res, rej) {\r\n            callback(item, i, function (result) {\r\n                res(result);\r\n            });\r\n        });\r\n    }));\r\n};\r\nvar ua = typeof window === \"undefined\" ? \"\" : (navigator.userAgent || \"\");\r\n// Detects iOS device OR Safari running on desktop\r\nexports.isSafari = ua.length === 0 ? false : (/^((?!chrome|android).)*safari/i.test(ua)) || (/iPad|iPhone|iPod/.test(ua) && !window[\"MSStream\"]);\r\n// Detect Edge or Internet Explorer\r\nexports.isMSBrowser = ua.length === 0 ? false : ua.indexOf(\"MSIE \") > 0 || ua.indexOf(\"Trident/\") > 0 || ua.indexOf(\"Edge/\") > 0;\r\n// Detect Android Device\r\nexports.isAndroid = /Android/.test(ua);\r\n/**\r\n * Generate a random 16 bit number using strongest entropy/crypto available.\r\n *\r\n * @returns {number}\r\n */\r\nexports.random16Bits = function () {\r\n    if (typeof crypto === \"undefined\") {\r\n        return Math.round(Math.random() * Math.pow(2, 16)); // Less random fallback.\r\n    }\r\n    else {\r\n        if (crypto.getRandomValues) { // Browser crypto\r\n            var buf = new Uint16Array(1);\r\n            crypto.getRandomValues(buf);\r\n            return buf[0];\r\n        }\r\n        else if (typeof global !== \"undefined\" && global._crypto.randomBytes) { // NodeJS crypto\r\n            return global._crypto.randomBytes(2).reduce(function (prev, cur) { return cur * prev; });\r\n        }\r\n        else {\r\n            return Math.round(Math.random() * Math.pow(2, 16)); // Less random fallback.\r\n        }\r\n    }\r\n};\r\n/**\r\n * nanoSQL's default tokenizer, handles a few different cases for the english language.\r\n *\r\n * @param {string} table\r\n * @param {string} column\r\n * @param {string[]} args\r\n * @param {string} value\r\n * @returns {{\r\n *     o: string; // original string\r\n *     w: string; // tokenized output\r\n *     i: number; // location of string\r\n * }[]}\r\n */\r\nexports.tokenizer = function (table, column, args, value, fractionFixed) {\r\n    var isStopWord = function (word) {\r\n        return !word ? true : // is this word falsey? (ie no length, undefined, etc);\r\n            String(word).length === 1 ? true : // is this word 1 length long?\r\n                exports.stopWords.indexOf(word) !== -1; // does word match something in the stop word list?\r\n    };\r\n    // Step 1, Clean up and normalize the text\r\n    var words = (value || \"\")\r\n        // everything to lowercase\r\n        .toLowerCase()\r\n        // normalize fractions and numbers (1/4 => 0.2500, 1,000,235 => 100235.0000)\r\n        .replace(/(\\d+)\\/(\\d+)|(?:\\d+(?:,\\d+)*|\\d+)(?:\\.\\d+)?/gmi, function (all, top, bottom) { return top || bottom ? (parseInt(top) / parseInt(bottom)).toFixed(fractionFixed || 4) : (parseFloat(all.replace(/\\,/gmi, \"\"))).toFixed(fractionFixed || 4); })\r\n        // replace dashes, underscores, anything like parantheses, slashes, newlines and tabs with a single whitespace\r\n        .replace(/\\-|\\_|\\[|\\]|\\(|\\)|\\{|\\}|\\r?\\n|\\r|\\t/gmi, \" \")\r\n        // remove anything but letters, numbers and decimals inside numbers with nothing.\r\n        .replace(/[^\\w\\s]|(\\d\\.)/gmi, \"$1\")\r\n        // remove white spaces larger than 1 with 1 white space.\r\n        .replace(/\\s+/g, \" \")\r\n        .split(\" \");\r\n    // Step 2, stem away!\r\n    switch (args[1]) {\r\n        case \"english\": return words.map(function (w, i) { return ({\r\n            i: i,\r\n            o: w,\r\n            w: isNaN(w) ? (isStopWord(w) ? \"\" : metaphone(stemmer(w))) : w\r\n        }); });\r\n        case \"english-stem\": return words.map(function (w, i) { return ({\r\n            i: i,\r\n            o: w,\r\n            w: isNaN(w) ? (isStopWord(w) ? \"\" : stemmer(w)) : w\r\n        }); });\r\n        case \"english-meta\": return words.map(function (w, i) { return ({\r\n            i: i,\r\n            o: w,\r\n            w: isNaN(w) ? (isStopWord(w) ? \"\" : metaphone(w)) : w\r\n        }); });\r\n    }\r\n    // 2,684 words/ms\r\n    return words.map(function (w, i) { return ({ o: w, w: w, i: i }); });\r\n};\r\n/**\r\n * Generate a TimeID for use in the database.\r\n *\r\n * @param {boolean} [ms]\r\n * @returns {string}\r\n */\r\nexports.timeid = function (ms) {\r\n    var time = Math.round((new Date().getTime()) / (ms ? 1 : 1000)).toString();\r\n    while (time.length < (ms ? 13 : 10)) {\r\n        time = \"0\" + time;\r\n    }\r\n    return time + \"-\" + (exports.random16Bits() + exports.random16Bits()).toString(16);\r\n};\r\n/**\r\n * See if two arrays intersect.\r\n *\r\n * @param {any[]} arr1\r\n * @param {any[]} arr2\r\n * @returns {boolean}\r\n */\r\nexports.intersect = function (arr1, arr2) {\r\n    if (!arr1 || !arr2)\r\n        return false;\r\n    if (!arr1.length || !arr2.length)\r\n        return false;\r\n    return (arr1 || []).filter(function (item) { return (arr2 || []).indexOf(item) !== -1; }).length > 0;\r\n};\r\n/**\r\n * Generates a valid V4 UUID using the strongest crypto available.\r\n *\r\n * @returns {string}\r\n */\r\nexports.uuid = function () {\r\n    var r, s, b = \"\";\r\n    return [b, b, b, b, b, b, b, b].reduce(function (prev, cur, i) {\r\n        r = exports.random16Bits();\r\n        s = (i === 3 ? 4 : (i === 4 ? (r % 16 & 0x3 | 0x8).toString(16) : b));\r\n        r = r.toString(16);\r\n        while (r.length < 4)\r\n            r = \"0\" + r;\r\n        return prev + ([2, 3, 4, 5].indexOf(i) > -1 ? \"-\" : b) + (s + r).slice(0, 4);\r\n    }, b);\r\n};\r\n/**\r\n * A quick and dirty hashing function, turns a string into a md5 style hash.\r\n * Stolen from https://github.com/darkskyapp/string-hash\r\n *\r\n * @param {string} str\r\n * @returns {string}\r\n */\r\nexports.hash = function (str) {\r\n    var hash = 5381, i = str.length;\r\n    while (i) {\r\n        hash = (hash * 33) ^ str.charCodeAt(--i);\r\n    }\r\n    return (hash >>> 0).toString(16);\r\n};\r\nvar idTypes = {\r\n    \"int\": function (value) { return value; },\r\n    \"uuid\": exports.uuid,\r\n    \"timeId\": function () { return exports.timeid(); },\r\n    \"timeIdms\": function () { return exports.timeid(true); }\r\n};\r\n/**\r\n * Generate a row ID given the primary key type.\r\n *\r\n * @param {string} primaryKeyType\r\n * @param {number} [incrimentValue]\r\n * @returns {*}\r\n */\r\nexports.generateID = function (primaryKeyType, incrimentValue) {\r\n    return idTypes[primaryKeyType] ? idTypes[primaryKeyType](incrimentValue || 1) : \"\";\r\n};\r\n/**\r\n * Clean the arguments from an object given an array of arguments and their types.\r\n *\r\n * @param {string[]} argDeclarations\r\n * @param {StdObject<any>} args\r\n * @returns {StdObject<any>}\r\n */\r\nexports.cleanArgs = function (argDeclarations, args) {\r\n    var a = {};\r\n    var i = argDeclarations.length;\r\n    while (i--) {\r\n        var k2 = argDeclarations[i].split(\":\");\r\n        if (k2.length > 1) {\r\n            a[k2[0]] = exports.cast(k2[1], args[k2[0]] || undefined);\r\n        }\r\n        else {\r\n            a[k2[0]] = args[k2[0]] || undefined;\r\n        }\r\n    }\r\n    return a;\r\n};\r\n/**\r\n * Determine if a given value is a javascript object or not. Exludes Arrays, Functions, Null, Undefined, etc.\r\n *\r\n * @param {*} val\r\n * @returns {boolean}\r\n */\r\nexports.isObject = function (val) {\r\n    return Object.prototype.toString.call(val) === \"[object Object]\";\r\n};\r\n/**\r\n * Cast a javascript variable to a given type. Supports typescript primitives and more specific types.\r\n *\r\n * @param {string} type\r\n * @param {*} [val]\r\n * @returns {*}\r\n */\r\nexports.cast = function (type, val) {\r\n    if (type === \"any\" || type === \"blob\")\r\n        return val;\r\n    var t = typeof val;\r\n    if (t === \"undefined\" || val === null) {\r\n        return val;\r\n    }\r\n    var entityMap = {\r\n        \"&\": \"&amp;\",\r\n        \"<\": \"&lt;\",\r\n        \">\": \"&gt;\",\r\n        \"\\\"\": \"&quot;\",\r\n        \"'\": \"&#39;\",\r\n        \"/\": \"&#x2F;\",\r\n        \"`\": \"&#x60;\",\r\n        \"=\": \"&#x3D;\"\r\n    };\r\n    var types = function (type, val) {\r\n        switch (type) {\r\n            case \"safestr\": return types(\"string\", val).replace(/[&<>\"'`=\\/]/gmi, function (s) { return entityMap[s]; });\r\n            case \"int\": return (t !== \"number\" || val % 1 !== 0) ? parseInt(val || 0) : val;\r\n            case \"number\":\r\n            case \"float\": return t !== \"number\" ? parseFloat(val || 0) : val;\r\n            case \"any[]\":\r\n            case \"array\": return Array.isArray(val) ? val : [];\r\n            case \"uuid\":\r\n            case \"timeId\":\r\n            case \"timeIdms\":\r\n            case \"string\": return t !== \"string\" ? String(val) : val;\r\n            case \"object\":\r\n            case \"obj\":\r\n            case \"map\": return exports.isObject(val) ? val : {};\r\n            case \"boolean\":\r\n            case \"bool\": return val === true;\r\n        }\r\n        return val;\r\n    };\r\n    var newVal = types(String(type || \"\").toLowerCase(), val);\r\n    if (type.indexOf(\"[]\") !== -1) {\r\n        var arrayOf_1 = type.slice(0, type.lastIndexOf(\"[]\"));\r\n        return (val || []).map(function (v) {\r\n            return exports.cast(arrayOf_1, v);\r\n        });\r\n    }\r\n    else if (newVal !== undefined) {\r\n        if ([\"int\", \"float\", \"number\"].indexOf(type) > -1) {\r\n            return isNaN(newVal) ? 0 : newVal;\r\n        }\r\n        else {\r\n            return newVal;\r\n        }\r\n    }\r\n    return undefined;\r\n};\r\n/**\r\n * Given a sorted array and a value, find where that value fits into the array.\r\n *\r\n * @param {any[]} arr\r\n * @param {*} value\r\n * @param {number} [startVal]\r\n * @param {number} [endVal]\r\n * @returns {number}\r\n */\r\nexports.binarySearch = function (arr, value, startVal, endVal) {\r\n    var start = startVal || 0;\r\n    var end = endVal || arr.length;\r\n    if (arr[start] > value)\r\n        return start;\r\n    if (arr[end] < value)\r\n        return end + 1;\r\n    var m = Math.floor((start + end) / 2);\r\n    if (value === arr[m])\r\n        return m;\r\n    if (end - 1 === start)\r\n        return end;\r\n    if (value > arr[m])\r\n        return exports.binarySearch(arr, value, m, end);\r\n    if (value < arr[m])\r\n        return exports.binarySearch(arr, value, start, m);\r\n    return end;\r\n};\r\n/**\r\n * Quickly removes duplicates from a sorted array.\r\n *\r\n * @param {any[]} arr\r\n * @returns {any[]}\r\n */\r\nexports.removeDuplicates = function (arr) {\r\n    if (!arr.length)\r\n        return [];\r\n    var newarr = [arr[0]];\r\n    for (var i = 1; i < arr.length; i++) {\r\n        if (arr[i] !== arr[i - 1])\r\n            newarr.push(arr[i]);\r\n    }\r\n    return newarr;\r\n};\r\n/**\r\n * Recursively freeze a javascript object to prevent it from being modified.\r\n *\r\n * @param {*} obj\r\n * @returns\r\n */\r\nexports.deepFreeze = function (obj) {\r\n    Object.getOwnPropertyNames(obj || {}).forEach(function (name) {\r\n        var prop = obj[name];\r\n        if (typeof prop === \"object\" && prop !== null) {\r\n            obj[name] = exports.deepFreeze(prop);\r\n        }\r\n    });\r\n    // Freeze self (no-op if already frozen)\r\n    return Object.freeze(obj);\r\n};\r\n/**\r\n * \"As the crow flies\" or Haversine formula, used to calculate the distance between two points on a sphere.\r\n *\r\n * The unit used for the radius will determine the unit of the answer.  If the radius is in km, distance provided will be in km.\r\n *\r\n * The radius is in km by default.\r\n *\r\n * @param {number} lat1\r\n * @param {number} lon1\r\n * @param {number} lat2\r\n * @param {number} lon2\r\n * @param {number} radius\r\n * @returns {number}\r\n */\r\nexports.crowDistance = function (lat1, lon1, lat2, lon2, radius) {\r\n    if (radius === void 0) { radius = 6371; }\r\n    var deg2rad = function (deg) {\r\n        return deg * (Math.PI / 180);\r\n    };\r\n    var dLat = deg2rad(lat2 - lat1);\r\n    var dLon = deg2rad(lon2 - lon1);\r\n    var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n        Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *\r\n            Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    return radius * c;\r\n};\r\nvar objectPathCache = {};\r\n/**\r\n * Take an object and a string describing a path like \"value.length\" or \"val[length]\" and safely get that value in the object.\r\n *\r\n * objQuery(\"hello\", {hello: 2}, false) => 2\r\n * objQuery(\"hello.length\", {hello: [0]}, false) => 1\r\n * objQuery(\"hello[0]\", {hello: [\"there\"]}, false) => \"there\"\r\n * objQuery(\"hello[0].length\", {hello: [\"there\"]}, false) => 5\r\n * objQuery(\"hello.color.length\", {\"hello.color\": \"blue\"}, true) => 4\r\n * objQuery(\"hello.color.length\", {hello: {color: \"blue\"}}, false) => 4\r\n *\r\n * @param {string} pathQuery\r\n * @param {*} object\r\n * @param {boolean} [ignoreFirstPath]\r\n * @returns {*}\r\n */\r\nexports.objQuery = function (pathQuery, object, ignoreFirstPath) {\r\n    var val;\r\n    var safeGet = function (getPath, pathIdx, object) {\r\n        if (!getPath[pathIdx] || !object)\r\n            return object;\r\n        return safeGet(getPath, pathIdx + 1, object[getPath[pathIdx]]);\r\n    };\r\n    var cacheKey = pathQuery + (ignoreFirstPath ? \"1\" : \"0\");\r\n    // cached path arrays, skips subsequent identical path requests.\r\n    if (objectPathCache[cacheKey]) {\r\n        return safeGet(objectPathCache[cacheKey], 0, object);\r\n    }\r\n    var path = [];\r\n    // need to turn path into array of strings, ie value[hey][there].length => [value, hey, there, length];\r\n    path = pathQuery.indexOf(\"[\") > -1 ?\r\n        // handle complex mix of dots and brackets like \"users.value[meta][value].length\"\r\n        [].concat.apply([], pathQuery.split(\".\").map(function (v) { return v.match(/([^\\[]+)|\\[([^\\]]+)\\]\\[/gmi) || v; })).map(function (v) { return v.replace(/\\[|\\]/gmi, \"\"); }) :\r\n        // handle simple dot paths like \"users.meta.value.length\"\r\n        pathQuery.split(\".\");\r\n    // handle joins where each row is defined as table.column\r\n    if (ignoreFirstPath) {\r\n        var firstPath = path.shift() + \".\" + path.shift();\r\n        path.unshift(firstPath);\r\n    }\r\n    objectPathCache[cacheKey] = path;\r\n    return safeGet(objectPathCache[cacheKey], 0, object);\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/nano-sql/lib/utilities.js\n// module id = 6\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.print = print;\n\nvar _visitor = require('./visitor');\n\n/**\n * Converts an AST into a string, using one set of reasonable\n * formatting rules.\n */\nfunction print(ast) {\n  return (0, _visitor.visit)(ast, { leave: printDocASTReducer });\n} /**\n   * Copyright (c) 2015-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n\nvar printDocASTReducer = {\n  Name: function Name(node) {\n    return node.value;\n  },\n  Variable: function Variable(node) {\n    return '$' + node.name;\n  },\n\n  // Document\n\n  Document: function Document(node) {\n    return join(node.definitions, '\\n\\n') + '\\n';\n  },\n\n  OperationDefinition: function OperationDefinition(node) {\n    var op = node.operation;\n    var name = node.name;\n    var varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');\n    var directives = join(node.directives, ' ');\n    var selectionSet = node.selectionSet;\n    // Anonymous queries with no directives or variable definitions can use\n    // the query short form.\n    return !name && !directives && !varDefs && op === 'query' ? selectionSet : join([op, join([name, varDefs]), directives, selectionSet], ' ');\n  },\n\n\n  VariableDefinition: function VariableDefinition(_ref) {\n    var variable = _ref.variable,\n        type = _ref.type,\n        defaultValue = _ref.defaultValue;\n    return variable + ': ' + type + wrap(' = ', defaultValue);\n  },\n\n  SelectionSet: function SelectionSet(_ref2) {\n    var selections = _ref2.selections;\n    return block(selections);\n  },\n\n  Field: function Field(_ref3) {\n    var alias = _ref3.alias,\n        name = _ref3.name,\n        args = _ref3.arguments,\n        directives = _ref3.directives,\n        selectionSet = _ref3.selectionSet;\n    return join([wrap('', alias, ': ') + name + wrap('(', join(args, ', '), ')'), join(directives, ' '), selectionSet], ' ');\n  },\n\n  Argument: function Argument(_ref4) {\n    var name = _ref4.name,\n        value = _ref4.value;\n    return name + ': ' + value;\n  },\n\n  // Fragments\n\n  FragmentSpread: function FragmentSpread(_ref5) {\n    var name = _ref5.name,\n        directives = _ref5.directives;\n    return '...' + name + wrap(' ', join(directives, ' '));\n  },\n\n  InlineFragment: function InlineFragment(_ref6) {\n    var typeCondition = _ref6.typeCondition,\n        directives = _ref6.directives,\n        selectionSet = _ref6.selectionSet;\n    return join(['...', wrap('on ', typeCondition), join(directives, ' '), selectionSet], ' ');\n  },\n\n  FragmentDefinition: function FragmentDefinition(_ref7) {\n    var name = _ref7.name,\n        typeCondition = _ref7.typeCondition,\n        variableDefinitions = _ref7.variableDefinitions,\n        directives = _ref7.directives,\n        selectionSet = _ref7.selectionSet;\n    return (\n      // Note: fragment variable definitions are experimental and may be changed\n      // or removed in the future.\n      'fragment ' + name + wrap('(', join(variableDefinitions, ', '), ')') + ' ' + ('on ' + typeCondition + ' ' + wrap('', join(directives, ' '), ' ')) + selectionSet\n    );\n  },\n\n  // Value\n\n  IntValue: function IntValue(_ref8) {\n    var value = _ref8.value;\n    return value;\n  },\n  FloatValue: function FloatValue(_ref9) {\n    var value = _ref9.value;\n    return value;\n  },\n  StringValue: function StringValue(_ref10, key) {\n    var value = _ref10.value,\n        isBlockString = _ref10.block;\n    return isBlockString ? printBlockString(value, key === 'description') : JSON.stringify(value);\n  },\n  BooleanValue: function BooleanValue(_ref11) {\n    var value = _ref11.value;\n    return value ? 'true' : 'false';\n  },\n  NullValue: function NullValue() {\n    return 'null';\n  },\n  EnumValue: function EnumValue(_ref12) {\n    var value = _ref12.value;\n    return value;\n  },\n  ListValue: function ListValue(_ref13) {\n    var values = _ref13.values;\n    return '[' + join(values, ', ') + ']';\n  },\n  ObjectValue: function ObjectValue(_ref14) {\n    var fields = _ref14.fields;\n    return '{' + join(fields, ', ') + '}';\n  },\n  ObjectField: function ObjectField(_ref15) {\n    var name = _ref15.name,\n        value = _ref15.value;\n    return name + ': ' + value;\n  },\n\n  // Directive\n\n  Directive: function Directive(_ref16) {\n    var name = _ref16.name,\n        args = _ref16.arguments;\n    return '@' + name + wrap('(', join(args, ', '), ')');\n  },\n\n  // Type\n\n  NamedType: function NamedType(_ref17) {\n    var name = _ref17.name;\n    return name;\n  },\n  ListType: function ListType(_ref18) {\n    var type = _ref18.type;\n    return '[' + type + ']';\n  },\n  NonNullType: function NonNullType(_ref19) {\n    var type = _ref19.type;\n    return type + '!';\n  },\n\n  // Type System Definitions\n\n  SchemaDefinition: function SchemaDefinition(_ref20) {\n    var directives = _ref20.directives,\n        operationTypes = _ref20.operationTypes;\n    return join(['schema', join(directives, ' '), block(operationTypes)], ' ');\n  },\n\n  OperationTypeDefinition: function OperationTypeDefinition(_ref21) {\n    var operation = _ref21.operation,\n        type = _ref21.type;\n    return operation + ': ' + type;\n  },\n\n  ScalarTypeDefinition: addDescription(function (_ref22) {\n    var name = _ref22.name,\n        directives = _ref22.directives;\n    return join(['scalar', name, join(directives, ' ')], ' ');\n  }),\n\n  ObjectTypeDefinition: addDescription(function (_ref23) {\n    var name = _ref23.name,\n        interfaces = _ref23.interfaces,\n        directives = _ref23.directives,\n        fields = _ref23.fields;\n    return join(['type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');\n  }),\n\n  FieldDefinition: addDescription(function (_ref24) {\n    var name = _ref24.name,\n        args = _ref24.arguments,\n        type = _ref24.type,\n        directives = _ref24.directives;\n    return name + wrap('(', join(args, ', '), ')') + ': ' + type + wrap(' ', join(directives, ' '));\n  }),\n\n  InputValueDefinition: addDescription(function (_ref25) {\n    var name = _ref25.name,\n        type = _ref25.type,\n        defaultValue = _ref25.defaultValue,\n        directives = _ref25.directives;\n    return join([name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')], ' ');\n  }),\n\n  InterfaceTypeDefinition: addDescription(function (_ref26) {\n    var name = _ref26.name,\n        directives = _ref26.directives,\n        fields = _ref26.fields;\n    return join(['interface', name, join(directives, ' '), block(fields)], ' ');\n  }),\n\n  UnionTypeDefinition: addDescription(function (_ref27) {\n    var name = _ref27.name,\n        directives = _ref27.directives,\n        types = _ref27.types;\n    return join(['union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');\n  }),\n\n  EnumTypeDefinition: addDescription(function (_ref28) {\n    var name = _ref28.name,\n        directives = _ref28.directives,\n        values = _ref28.values;\n    return join(['enum', name, join(directives, ' '), block(values)], ' ');\n  }),\n\n  EnumValueDefinition: addDescription(function (_ref29) {\n    var name = _ref29.name,\n        directives = _ref29.directives;\n    return join([name, join(directives, ' ')], ' ');\n  }),\n\n  InputObjectTypeDefinition: addDescription(function (_ref30) {\n    var name = _ref30.name,\n        directives = _ref30.directives,\n        fields = _ref30.fields;\n    return join(['input', name, join(directives, ' '), block(fields)], ' ');\n  }),\n\n  ScalarTypeExtension: function ScalarTypeExtension(_ref31) {\n    var name = _ref31.name,\n        directives = _ref31.directives;\n    return join(['extend scalar', name, join(directives, ' ')], ' ');\n  },\n\n  ObjectTypeExtension: function ObjectTypeExtension(_ref32) {\n    var name = _ref32.name,\n        interfaces = _ref32.interfaces,\n        directives = _ref32.directives,\n        fields = _ref32.fields;\n    return join(['extend type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');\n  },\n\n  InterfaceTypeExtension: function InterfaceTypeExtension(_ref33) {\n    var name = _ref33.name,\n        directives = _ref33.directives,\n        fields = _ref33.fields;\n    return join(['extend interface', name, join(directives, ' '), block(fields)], ' ');\n  },\n\n  UnionTypeExtension: function UnionTypeExtension(_ref34) {\n    var name = _ref34.name,\n        directives = _ref34.directives,\n        types = _ref34.types;\n    return join(['extend union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');\n  },\n\n  EnumTypeExtension: function EnumTypeExtension(_ref35) {\n    var name = _ref35.name,\n        directives = _ref35.directives,\n        values = _ref35.values;\n    return join(['extend enum', name, join(directives, ' '), block(values)], ' ');\n  },\n\n  InputObjectTypeExtension: function InputObjectTypeExtension(_ref36) {\n    var name = _ref36.name,\n        directives = _ref36.directives,\n        fields = _ref36.fields;\n    return join(['extend input', name, join(directives, ' '), block(fields)], ' ');\n  },\n\n  DirectiveDefinition: addDescription(function (_ref37) {\n    var name = _ref37.name,\n        args = _ref37.arguments,\n        locations = _ref37.locations;\n    return 'directive @' + name + wrap('(', join(args, ', '), ')') + ' on ' + join(locations, ' | ');\n  })\n};\n\nfunction addDescription(cb) {\n  return function (node) {\n    return join([node.description, cb(node)], '\\n');\n  };\n}\n\n/**\n * Given maybeArray, print an empty string if it is null or empty, otherwise\n * print all items together separated by separator if provided\n */\nfunction join(maybeArray, separator) {\n  return maybeArray ? maybeArray.filter(function (x) {\n    return x;\n  }).join(separator || '') : '';\n}\n\n/**\n * Given array, print each item on its own line, wrapped in an\n * indented \"{ }\" block.\n */\nfunction block(array) {\n  return array && array.length !== 0 ? '{\\n' + indent(join(array, '\\n')) + '\\n}' : '';\n}\n\n/**\n * If maybeString is not null or empty, then wrap with start and end, otherwise\n * print an empty string.\n */\nfunction wrap(start, maybeString, end) {\n  return maybeString ? start + maybeString + (end || '') : '';\n}\n\nfunction indent(maybeString) {\n  return maybeString && '  ' + maybeString.replace(/\\n/g, '\\n  ');\n}\n\n/**\n * Print a block string in the indented block form by adding a leading and\n * trailing blank line. However, if a block string starts with whitespace and is\n * a single-line, adding a leading blank line would strip that whitespace.\n */\nfunction printBlockString(value, isDescription) {\n  var escaped = value.replace(/\"\"\"/g, '\\\\\"\"\"');\n  return (value[0] === ' ' || value[0] === '\\t') && value.indexOf('\\n') === -1 ? '\"\"\"' + escaped.replace(/\"$/, '\"\\n') + '\"\"\"' : '\"\"\"\\n' + (isDescription ? escaped : indent(escaped)) + '\\n\"\"\"';\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/language/printer.js\n// module id = 7\n// module chunks = 0","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isInvalid;\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * Returns true if a value is undefined, or NaN.\n */\nfunction isInvalid(value) {\n  return value === undefined || value !== value;\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/jsutils/isInvalid.js\n// module id = 8\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.specifiedDirectives = exports.GraphQLDeprecatedDirective = exports.DEFAULT_DEPRECATION_REASON = exports.GraphQLSkipDirective = exports.GraphQLIncludeDirective = exports.GraphQLDirective = undefined;\nexports.isDirective = isDirective;\nexports.isSpecifiedDirective = isSpecifiedDirective;\n\nvar _definition = require('./definition');\n\nvar _scalars = require('./scalars');\n\nvar _instanceOf = require('../jsutils/instanceOf');\n\nvar _instanceOf2 = _interopRequireDefault(_instanceOf);\n\nvar _invariant = require('../jsutils/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _directiveLocation = require('../language/directiveLocation');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /**\n                                                                                                                                                           * Copyright (c) 2015-present, Facebook, Inc.\n                                                                                                                                                           *\n                                                                                                                                                           * This source code is licensed under the MIT license found in the\n                                                                                                                                                           * LICENSE file in the root directory of this source tree.\n                                                                                                                                                           *\n                                                                                                                                                           *  strict\n                                                                                                                                                           */\n\n// eslint-disable-next-line no-redeclare\n\n\n/**\n * Test if the given value is a GraphQL directive.\n */\nfunction isDirective(directive) {\n  return (0, _instanceOf2.default)(directive, GraphQLDirective);\n}\n\n/**\n * Directives are used by the GraphQL runtime as a way of modifying execution\n * behavior. Type system creators will usually not create these directly.\n */\n\nvar GraphQLDirective = exports.GraphQLDirective = function GraphQLDirective(config) {\n  _classCallCheck(this, GraphQLDirective);\n\n  this.name = config.name;\n  this.description = config.description;\n  this.locations = config.locations;\n  this.astNode = config.astNode;\n  !config.name ? (0, _invariant2.default)(0, 'Directive must be named.') : void 0;\n  !Array.isArray(config.locations) ? (0, _invariant2.default)(0, 'Must provide locations for directive.') : void 0;\n\n  var args = config.args;\n  if (!args) {\n    this.args = [];\n  } else {\n    !!Array.isArray(args) ? (0, _invariant2.default)(0, '@' + config.name + ' args must be an object with argument names as keys.') : void 0;\n    this.args = Object.keys(args).map(function (argName) {\n      var arg = args[argName];\n      return {\n        name: argName,\n        description: arg.description === undefined ? null : arg.description,\n        type: arg.type,\n        defaultValue: arg.defaultValue,\n        astNode: arg.astNode\n      };\n    });\n  }\n};\n\n/**\n * Used to conditionally include fields or fragments.\n */\nvar GraphQLIncludeDirective = exports.GraphQLIncludeDirective = new GraphQLDirective({\n  name: 'include',\n  description: 'Directs the executor to include this field or fragment only when ' + 'the `if` argument is true.',\n  locations: [_directiveLocation.DirectiveLocation.FIELD, _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD, _directiveLocation.DirectiveLocation.INLINE_FRAGMENT],\n  args: {\n    if: {\n      type: (0, _definition.GraphQLNonNull)(_scalars.GraphQLBoolean),\n      description: 'Included when true.'\n    }\n  }\n});\n\n/**\n * Used to conditionally skip (exclude) fields or fragments.\n */\nvar GraphQLSkipDirective = exports.GraphQLSkipDirective = new GraphQLDirective({\n  name: 'skip',\n  description: 'Directs the executor to skip this field or fragment when the `if` ' + 'argument is true.',\n  locations: [_directiveLocation.DirectiveLocation.FIELD, _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD, _directiveLocation.DirectiveLocation.INLINE_FRAGMENT],\n  args: {\n    if: {\n      type: (0, _definition.GraphQLNonNull)(_scalars.GraphQLBoolean),\n      description: 'Skipped when true.'\n    }\n  }\n});\n\n/**\n * Constant string used for default reason for a deprecation.\n */\nvar DEFAULT_DEPRECATION_REASON = exports.DEFAULT_DEPRECATION_REASON = 'No longer supported';\n\n/**\n * Used to declare element of a GraphQL schema as deprecated.\n */\nvar GraphQLDeprecatedDirective = exports.GraphQLDeprecatedDirective = new GraphQLDirective({\n  name: 'deprecated',\n  description: 'Marks an element of a GraphQL schema as no longer supported.',\n  locations: [_directiveLocation.DirectiveLocation.FIELD_DEFINITION, _directiveLocation.DirectiveLocation.ENUM_VALUE],\n  args: {\n    reason: {\n      type: _scalars.GraphQLString,\n      description: 'Explains why this element was deprecated, usually also including a ' + 'suggestion for how to access supported similar data. Formatted ' + 'in [Markdown](https://daringfireball.net/projects/markdown/).',\n      defaultValue: DEFAULT_DEPRECATION_REASON\n    }\n  }\n});\n\n/**\n * The full list of specified directives.\n */\nvar specifiedDirectives = exports.specifiedDirectives = [GraphQLIncludeDirective, GraphQLSkipDirective, GraphQLDeprecatedDirective];\n\nfunction isSpecifiedDirective(directive) {\n  return specifiedDirectives.some(function (specifiedDirective) {\n    return specifiedDirective.name === directive.name;\n  });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/type/directives.js\n// module id = 9\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.introspectionTypes = exports.TypeNameMetaFieldDef = exports.TypeMetaFieldDef = exports.SchemaMetaFieldDef = exports.__TypeKind = exports.TypeKind = exports.__EnumValue = exports.__InputValue = exports.__Field = exports.__Type = exports.__DirectiveLocation = exports.__Directive = exports.__Schema = undefined;\nexports.isIntrospectionType = isIntrospectionType;\n\nvar _isInvalid = require('../jsutils/isInvalid');\n\nvar _isInvalid2 = _interopRequireDefault(_isInvalid);\n\nvar _objectValues = require('../jsutils/objectValues');\n\nvar _objectValues2 = _interopRequireDefault(_objectValues);\n\nvar _astFromValue = require('../utilities/astFromValue');\n\nvar _printer = require('../language/printer');\n\nvar _definition = require('./definition');\n\nvar _scalars = require('./scalars');\n\nvar _directiveLocation = require('../language/directiveLocation');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar __Schema = exports.__Schema = new _definition.GraphQLObjectType({\n  name: '__Schema',\n  isIntrospection: true,\n  description: 'A GraphQL Schema defines the capabilities of a GraphQL server. It ' + 'exposes all available types and directives on the server, as well as ' + 'the entry points for query, mutation, and subscription operations.',\n  fields: function fields() {\n    return {\n      types: {\n        description: 'A list of all types supported by this server.',\n        type: (0, _definition.GraphQLNonNull)((0, _definition.GraphQLList)((0, _definition.GraphQLNonNull)(__Type))),\n        resolve: function resolve(schema) {\n          return (0, _objectValues2.default)(schema.getTypeMap());\n        }\n      },\n      queryType: {\n        description: 'The type that query operations will be rooted at.',\n        type: (0, _definition.GraphQLNonNull)(__Type),\n        resolve: function resolve(schema) {\n          return schema.getQueryType();\n        }\n      },\n      mutationType: {\n        description: 'If this server supports mutation, the type that ' + 'mutation operations will be rooted at.',\n        type: __Type,\n        resolve: function resolve(schema) {\n          return schema.getMutationType();\n        }\n      },\n      subscriptionType: {\n        description: 'If this server support subscription, the type that ' + 'subscription operations will be rooted at.',\n        type: __Type,\n        resolve: function resolve(schema) {\n          return schema.getSubscriptionType();\n        }\n      },\n      directives: {\n        description: 'A list of all directives supported by this server.',\n        type: (0, _definition.GraphQLNonNull)((0, _definition.GraphQLList)((0, _definition.GraphQLNonNull)(__Directive))),\n        resolve: function resolve(schema) {\n          return schema.getDirectives();\n        }\n      }\n    };\n  }\n}); /**\n     * Copyright (c) 2015-present, Facebook, Inc.\n     *\n     * This source code is licensed under the MIT license found in the\n     * LICENSE file in the root directory of this source tree.\n     *\n     *  strict\n     */\n\nvar __Directive = exports.__Directive = new _definition.GraphQLObjectType({\n  name: '__Directive',\n  isIntrospection: true,\n  description: 'A Directive provides a way to describe alternate runtime execution and ' + 'type validation behavior in a GraphQL document.' + \"\\n\\nIn some cases, you need to provide options to alter GraphQL's \" + 'execution behavior in ways field arguments will not suffice, such as ' + 'conditionally including or skipping a field. Directives provide this by ' + 'describing additional information to the executor.',\n  fields: function fields() {\n    return {\n      name: { type: (0, _definition.GraphQLNonNull)(_scalars.GraphQLString) },\n      description: { type: _scalars.GraphQLString },\n      locations: {\n        type: (0, _definition.GraphQLNonNull)((0, _definition.GraphQLList)((0, _definition.GraphQLNonNull)(__DirectiveLocation)))\n      },\n      args: {\n        type: (0, _definition.GraphQLNonNull)((0, _definition.GraphQLList)((0, _definition.GraphQLNonNull)(__InputValue))),\n        resolve: function resolve(directive) {\n          return directive.args || [];\n        }\n      },\n      // NOTE: the following three fields are deprecated and are no longer part\n      // of the GraphQL specification.\n      onOperation: {\n        deprecationReason: 'Use `locations`.',\n        type: (0, _definition.GraphQLNonNull)(_scalars.GraphQLBoolean),\n        resolve: function resolve(d) {\n          return d.locations.indexOf(_directiveLocation.DirectiveLocation.QUERY) !== -1 || d.locations.indexOf(_directiveLocation.DirectiveLocation.MUTATION) !== -1 || d.locations.indexOf(_directiveLocation.DirectiveLocation.SUBSCRIPTION) !== -1;\n        }\n      },\n      onFragment: {\n        deprecationReason: 'Use `locations`.',\n        type: (0, _definition.GraphQLNonNull)(_scalars.GraphQLBoolean),\n        resolve: function resolve(d) {\n          return d.locations.indexOf(_directiveLocation.DirectiveLocation.FRAGMENT_SPREAD) !== -1 || d.locations.indexOf(_directiveLocation.DirectiveLocation.INLINE_FRAGMENT) !== -1 || d.locations.indexOf(_directiveLocation.DirectiveLocation.FRAGMENT_DEFINITION) !== -1;\n        }\n      },\n      onField: {\n        deprecationReason: 'Use `locations`.',\n        type: (0, _definition.GraphQLNonNull)(_scalars.GraphQLBoolean),\n        resolve: function resolve(d) {\n          return d.locations.indexOf(_directiveLocation.DirectiveLocation.FIELD) !== -1;\n        }\n      }\n    };\n  }\n});\n\nvar __DirectiveLocation = exports.__DirectiveLocation = new _definition.GraphQLEnumType({\n  name: '__DirectiveLocation',\n  isIntrospection: true,\n  description: 'A Directive can be adjacent to many parts of the GraphQL language, a ' + '__DirectiveLocation describes one such possible adjacencies.',\n  values: {\n    QUERY: {\n      value: _directiveLocation.DirectiveLocation.QUERY,\n      description: 'Location adjacent to a query operation.'\n    },\n    MUTATION: {\n      value: _directiveLocation.DirectiveLocation.MUTATION,\n      description: 'Location adjacent to a mutation operation.'\n    },\n    SUBSCRIPTION: {\n      value: _directiveLocation.DirectiveLocation.SUBSCRIPTION,\n      description: 'Location adjacent to a subscription operation.'\n    },\n    FIELD: {\n      value: _directiveLocation.DirectiveLocation.FIELD,\n      description: 'Location adjacent to a field.'\n    },\n    FRAGMENT_DEFINITION: {\n      value: _directiveLocation.DirectiveLocation.FRAGMENT_DEFINITION,\n      description: 'Location adjacent to a fragment definition.'\n    },\n    FRAGMENT_SPREAD: {\n      value: _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD,\n      description: 'Location adjacent to a fragment spread.'\n    },\n    INLINE_FRAGMENT: {\n      value: _directiveLocation.DirectiveLocation.INLINE_FRAGMENT,\n      description: 'Location adjacent to an inline fragment.'\n    },\n    SCHEMA: {\n      value: _directiveLocation.DirectiveLocation.SCHEMA,\n      description: 'Location adjacent to a schema definition.'\n    },\n    SCALAR: {\n      value: _directiveLocation.DirectiveLocation.SCALAR,\n      description: 'Location adjacent to a scalar definition.'\n    },\n    OBJECT: {\n      value: _directiveLocation.DirectiveLocation.OBJECT,\n      description: 'Location adjacent to an object type definition.'\n    },\n    FIELD_DEFINITION: {\n      value: _directiveLocation.DirectiveLocation.FIELD_DEFINITION,\n      description: 'Location adjacent to a field definition.'\n    },\n    ARGUMENT_DEFINITION: {\n      value: _directiveLocation.DirectiveLocation.ARGUMENT_DEFINITION,\n      description: 'Location adjacent to an argument definition.'\n    },\n    INTERFACE: {\n      value: _directiveLocation.DirectiveLocation.INTERFACE,\n      description: 'Location adjacent to an interface definition.'\n    },\n    UNION: {\n      value: _directiveLocation.DirectiveLocation.UNION,\n      description: 'Location adjacent to a union definition.'\n    },\n    ENUM: {\n      value: _directiveLocation.DirectiveLocation.ENUM,\n      description: 'Location adjacent to an enum definition.'\n    },\n    ENUM_VALUE: {\n      value: _directiveLocation.DirectiveLocation.ENUM_VALUE,\n      description: 'Location adjacent to an enum value definition.'\n    },\n    INPUT_OBJECT: {\n      value: _directiveLocation.DirectiveLocation.INPUT_OBJECT,\n      description: 'Location adjacent to an input object type definition.'\n    },\n    INPUT_FIELD_DEFINITION: {\n      value: _directiveLocation.DirectiveLocation.INPUT_FIELD_DEFINITION,\n      description: 'Location adjacent to an input object field definition.'\n    }\n  }\n});\n\nvar __Type = exports.__Type = new _definition.GraphQLObjectType({\n  name: '__Type',\n  isIntrospection: true,\n  description: 'The fundamental unit of any GraphQL Schema is the type. There are ' + 'many kinds of types in GraphQL as represented by the `__TypeKind` enum.' + '\\n\\nDepending on the kind of a type, certain fields describe ' + 'information about that type. Scalar types provide no information ' + 'beyond a name and description, while Enum types provide their values. ' + 'Object and Interface types provide the fields they describe. Abstract ' + 'types, Union and Interface, provide the Object types possible ' + 'at runtime. List and NonNull types compose other types.',\n  fields: function fields() {\n    return {\n      kind: {\n        type: (0, _definition.GraphQLNonNull)(__TypeKind),\n        resolve: function resolve(type) {\n          if ((0, _definition.isScalarType)(type)) {\n            return TypeKind.SCALAR;\n          } else if ((0, _definition.isObjectType)(type)) {\n            return TypeKind.OBJECT;\n          } else if ((0, _definition.isInterfaceType)(type)) {\n            return TypeKind.INTERFACE;\n          } else if ((0, _definition.isUnionType)(type)) {\n            return TypeKind.UNION;\n          } else if ((0, _definition.isEnumType)(type)) {\n            return TypeKind.ENUM;\n          } else if ((0, _definition.isInputObjectType)(type)) {\n            return TypeKind.INPUT_OBJECT;\n          } else if ((0, _definition.isListType)(type)) {\n            return TypeKind.LIST;\n          } else if ((0, _definition.isNonNullType)(type)) {\n            return TypeKind.NON_NULL;\n          }\n          throw new Error('Unknown kind of type: ' + type);\n        }\n      },\n      name: { type: _scalars.GraphQLString },\n      description: { type: _scalars.GraphQLString },\n      fields: {\n        type: (0, _definition.GraphQLList)((0, _definition.GraphQLNonNull)(__Field)),\n        args: {\n          includeDeprecated: { type: _scalars.GraphQLBoolean, defaultValue: false }\n        },\n        resolve: function resolve(type, _ref) {\n          var includeDeprecated = _ref.includeDeprecated;\n\n          if ((0, _definition.isObjectType)(type) || (0, _definition.isInterfaceType)(type)) {\n            var fields = (0, _objectValues2.default)(type.getFields());\n            if (!includeDeprecated) {\n              fields = fields.filter(function (field) {\n                return !field.deprecationReason;\n              });\n            }\n            return fields;\n          }\n          return null;\n        }\n      },\n      interfaces: {\n        type: (0, _definition.GraphQLList)((0, _definition.GraphQLNonNull)(__Type)),\n        resolve: function resolve(type) {\n          if ((0, _definition.isObjectType)(type)) {\n            return type.getInterfaces();\n          }\n        }\n      },\n      possibleTypes: {\n        type: (0, _definition.GraphQLList)((0, _definition.GraphQLNonNull)(__Type)),\n        resolve: function resolve(type, args, context, _ref2) {\n          var schema = _ref2.schema;\n\n          if ((0, _definition.isAbstractType)(type)) {\n            return schema.getPossibleTypes(type);\n          }\n        }\n      },\n      enumValues: {\n        type: (0, _definition.GraphQLList)((0, _definition.GraphQLNonNull)(__EnumValue)),\n        args: {\n          includeDeprecated: { type: _scalars.GraphQLBoolean, defaultValue: false }\n        },\n        resolve: function resolve(type, _ref3) {\n          var includeDeprecated = _ref3.includeDeprecated;\n\n          if ((0, _definition.isEnumType)(type)) {\n            var values = type.getValues();\n            if (!includeDeprecated) {\n              values = values.filter(function (value) {\n                return !value.deprecationReason;\n              });\n            }\n            return values;\n          }\n        }\n      },\n      inputFields: {\n        type: (0, _definition.GraphQLList)((0, _definition.GraphQLNonNull)(__InputValue)),\n        resolve: function resolve(type) {\n          if ((0, _definition.isInputObjectType)(type)) {\n            return (0, _objectValues2.default)(type.getFields());\n          }\n        }\n      },\n      ofType: { type: __Type }\n    };\n  }\n});\n\nvar __Field = exports.__Field = new _definition.GraphQLObjectType({\n  name: '__Field',\n  isIntrospection: true,\n  description: 'Object and Interface types are described by a list of Fields, each of ' + 'which has a name, potentially a list of arguments, and a return type.',\n  fields: function fields() {\n    return {\n      name: { type: (0, _definition.GraphQLNonNull)(_scalars.GraphQLString) },\n      description: { type: _scalars.GraphQLString },\n      args: {\n        type: (0, _definition.GraphQLNonNull)((0, _definition.GraphQLList)((0, _definition.GraphQLNonNull)(__InputValue))),\n        resolve: function resolve(field) {\n          return field.args || [];\n        }\n      },\n      type: { type: (0, _definition.GraphQLNonNull)(__Type) },\n      isDeprecated: { type: (0, _definition.GraphQLNonNull)(_scalars.GraphQLBoolean) },\n      deprecationReason: {\n        type: _scalars.GraphQLString\n      }\n    };\n  }\n});\n\nvar __InputValue = exports.__InputValue = new _definition.GraphQLObjectType({\n  name: '__InputValue',\n  isIntrospection: true,\n  description: 'Arguments provided to Fields or Directives and the input fields of an ' + 'InputObject are represented as Input Values which describe their type ' + 'and optionally a default value.',\n  fields: function fields() {\n    return {\n      name: { type: (0, _definition.GraphQLNonNull)(_scalars.GraphQLString) },\n      description: { type: _scalars.GraphQLString },\n      type: { type: (0, _definition.GraphQLNonNull)(__Type) },\n      defaultValue: {\n        type: _scalars.GraphQLString,\n        description: 'A GraphQL-formatted string representing the default value for this ' + 'input value.',\n        resolve: function resolve(inputVal) {\n          return (0, _isInvalid2.default)(inputVal.defaultValue) ? null : (0, _printer.print)((0, _astFromValue.astFromValue)(inputVal.defaultValue, inputVal.type));\n        }\n      }\n    };\n  }\n});\n\nvar __EnumValue = exports.__EnumValue = new _definition.GraphQLObjectType({\n  name: '__EnumValue',\n  isIntrospection: true,\n  description: 'One possible value for a given Enum. Enum values are unique values, not ' + 'a placeholder for a string or numeric value. However an Enum value is ' + 'returned in a JSON response as a string.',\n  fields: function fields() {\n    return {\n      name: { type: (0, _definition.GraphQLNonNull)(_scalars.GraphQLString) },\n      description: { type: _scalars.GraphQLString },\n      isDeprecated: { type: (0, _definition.GraphQLNonNull)(_scalars.GraphQLBoolean) },\n      deprecationReason: {\n        type: _scalars.GraphQLString\n      }\n    };\n  }\n});\n\nvar TypeKind = exports.TypeKind = {\n  SCALAR: 'SCALAR',\n  OBJECT: 'OBJECT',\n  INTERFACE: 'INTERFACE',\n  UNION: 'UNION',\n  ENUM: 'ENUM',\n  INPUT_OBJECT: 'INPUT_OBJECT',\n  LIST: 'LIST',\n  NON_NULL: 'NON_NULL'\n};\n\nvar __TypeKind = exports.__TypeKind = new _definition.GraphQLEnumType({\n  name: '__TypeKind',\n  isIntrospection: true,\n  description: 'An enum describing what kind of type a given `__Type` is.',\n  values: {\n    SCALAR: {\n      value: TypeKind.SCALAR,\n      description: 'Indicates this type is a scalar.'\n    },\n    OBJECT: {\n      value: TypeKind.OBJECT,\n      description: 'Indicates this type is an object. ' + '`fields` and `interfaces` are valid fields.'\n    },\n    INTERFACE: {\n      value: TypeKind.INTERFACE,\n      description: 'Indicates this type is an interface. ' + '`fields` and `possibleTypes` are valid fields.'\n    },\n    UNION: {\n      value: TypeKind.UNION,\n      description: 'Indicates this type is a union. ' + '`possibleTypes` is a valid field.'\n    },\n    ENUM: {\n      value: TypeKind.ENUM,\n      description: 'Indicates this type is an enum. ' + '`enumValues` is a valid field.'\n    },\n    INPUT_OBJECT: {\n      value: TypeKind.INPUT_OBJECT,\n      description: 'Indicates this type is an input object. ' + '`inputFields` is a valid field.'\n    },\n    LIST: {\n      value: TypeKind.LIST,\n      description: 'Indicates this type is a list. ' + '`ofType` is a valid field.'\n    },\n    NON_NULL: {\n      value: TypeKind.NON_NULL,\n      description: 'Indicates this type is a non-null. ' + '`ofType` is a valid field.'\n    }\n  }\n});\n\n/**\n * Note that these are GraphQLField and not GraphQLFieldConfig,\n * so the format for args is different.\n */\n\nvar SchemaMetaFieldDef = exports.SchemaMetaFieldDef = {\n  name: '__schema',\n  type: (0, _definition.GraphQLNonNull)(__Schema),\n  description: 'Access the current type schema of this server.',\n  args: [],\n  resolve: function resolve(source, args, context, _ref4) {\n    var schema = _ref4.schema;\n    return schema;\n  }\n};\n\nvar TypeMetaFieldDef = exports.TypeMetaFieldDef = {\n  name: '__type',\n  type: __Type,\n  description: 'Request the type information of a single type.',\n  args: [{ name: 'name', type: (0, _definition.GraphQLNonNull)(_scalars.GraphQLString) }],\n  resolve: function resolve(source, _ref5, context, _ref6) {\n    var name = _ref5.name;\n    var schema = _ref6.schema;\n    return schema.getType(name);\n  }\n};\n\nvar TypeNameMetaFieldDef = exports.TypeNameMetaFieldDef = {\n  name: '__typename',\n  type: (0, _definition.GraphQLNonNull)(_scalars.GraphQLString),\n  description: 'The name of the current Object type at runtime.',\n  args: [],\n  resolve: function resolve(source, args, context, _ref7) {\n    var parentType = _ref7.parentType;\n    return parentType.name;\n  }\n};\n\nvar introspectionTypes = exports.introspectionTypes = [__Schema, __Directive, __DirectiveLocation, __Type, __Field, __InputValue, __EnumValue, __TypeKind];\n\nfunction isIntrospectionType(type) {\n  return (0, _definition.isNamedType)(type) && (\n  // Would prefer to use introspectionTypes.some(), however %checks needs\n  // a simple expression.\n  type.name === __Schema.name || type.name === __Directive.name || type.name === __DirectiveLocation.name || type.name === __Type.name || type.name === __Field.name || type.name === __InputValue.name || type.name === __EnumValue.name || type.name === __TypeKind.name);\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/type/introspection.js\n// module id = 10\n// module chunks = 0","/**\n * Copyright (c) 2016, Lee Byron\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @ignore\n */\n\n/**\n * [Iterator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterator)\n * is a *protocol* which describes a standard way to produce a sequence of\n * values, typically the values of the Iterable represented by this Iterator.\n *\n * While described by the [ES2015 version of JavaScript](http://www.ecma-international.org/ecma-262/6.0/#sec-iterator-interface)\n * it can be utilized by any version of JavaScript.\n *\n * @external Iterator\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterator|MDN Iteration protocols}\n */\n\n/**\n * [Iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n * is a *protocol* which when implemented allows a JavaScript object to define\n * their iteration behavior, such as what values are looped over in a\n * [`for...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of)\n * loop or `iterall`'s `forEach` function. Many [built-in types](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#Builtin_iterables)\n * implement the Iterable protocol, including `Array` and `Map`.\n *\n * While described by the [ES2015 version of JavaScript](http://www.ecma-international.org/ecma-262/6.0/#sec-iterable-interface)\n * it can be utilized by any version of JavaScript.\n *\n * @external Iterable\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable|MDN Iteration protocols}\n */\n\n// In ES2015 environments, Symbol exists\nvar SYMBOL /*: any */ = typeof Symbol === 'function' ? Symbol : void 0\n\n// In ES2015 (or a polyfilled) environment, this will be Symbol.iterator\nvar SYMBOL_ITERATOR = SYMBOL && SYMBOL.iterator\n\n/**\n * A property name to be used as the name of an Iterable's method responsible\n * for producing an Iterator, referred to as `@@iterator`. Typically represents\n * the value `Symbol.iterator` but falls back to the string `\"@@iterator\"` when\n * `Symbol.iterator` is not defined.\n *\n * Use `$$iterator` for defining new Iterables instead of `Symbol.iterator`,\n * but do not use it for accessing existing Iterables, instead use\n * {@link getIterator} or {@link isIterable}.\n *\n * @example\n *\n * var $$iterator = require('iterall').$$iterator\n *\n * function Counter (to) {\n *   this.to = to\n * }\n *\n * Counter.prototype[$$iterator] = function () {\n *   return {\n *     to: this.to,\n *     num: 0,\n *     next () {\n *       if (this.num >= this.to) {\n *         return { value: undefined, done: true }\n *       }\n *       return { value: this.num++, done: false }\n *     }\n *   }\n * }\n *\n * var counter = new Counter(3)\n * for (var number of counter) {\n *   console.log(number) // 0 ... 1 ... 2\n * }\n *\n * @type {Symbol|string}\n */\n/*:: declare export var $$iterator: '@@iterator'; */\nexport var $$iterator = SYMBOL_ITERATOR || '@@iterator'\n\n/**\n * Returns true if the provided object implements the Iterator protocol via\n * either implementing a `Symbol.iterator` or `\"@@iterator\"` method.\n *\n * @example\n *\n * var isIterable = require('iterall').isIterable\n * isIterable([ 1, 2, 3 ]) // true\n * isIterable('ABC') // true\n * isIterable({ length: 1, 0: 'Alpha' }) // false\n * isIterable({ key: 'value' }) // false\n * isIterable(new Map()) // true\n *\n * @param obj\n *   A value which might implement the Iterable protocol.\n * @return {boolean} true if Iterable.\n */\n/*:: declare export function isIterable(obj: any): boolean; */\nexport function isIterable(obj) {\n  return !!getIteratorMethod(obj)\n}\n\n/**\n * Returns true if the provided object implements the Array-like protocol via\n * defining a positive-integer `length` property.\n *\n * @example\n *\n * var isArrayLike = require('iterall').isArrayLike\n * isArrayLike([ 1, 2, 3 ]) // true\n * isArrayLike('ABC') // true\n * isArrayLike({ length: 1, 0: 'Alpha' }) // true\n * isArrayLike({ key: 'value' }) // false\n * isArrayLike(new Map()) // false\n *\n * @param obj\n *   A value which might implement the Array-like protocol.\n * @return {boolean} true if Array-like.\n */\n/*:: declare export function isArrayLike(obj: any): boolean; */\nexport function isArrayLike(obj) {\n  var length = obj != null && obj.length\n  return typeof length === 'number' && length >= 0 && length % 1 === 0\n}\n\n/**\n * Returns true if the provided object is an Object (i.e. not a string literal)\n * and is either Iterable or Array-like.\n *\n * This may be used in place of [Array.isArray()][isArray] to determine if an\n * object should be iterated-over. It always excludes string literals and\n * includes Arrays (regardless of if it is Iterable). It also includes other\n * Array-like objects such as NodeList, TypedArray, and Buffer.\n *\n * @example\n *\n * var isCollection = require('iterall').isCollection\n * isCollection([ 1, 2, 3 ]) // true\n * isCollection('ABC') // false\n * isCollection({ length: 1, 0: 'Alpha' }) // true\n * isCollection({ key: 'value' }) // false\n * isCollection(new Map()) // true\n *\n * @example\n *\n * var forEach = require('iterall').forEach\n * if (isCollection(obj)) {\n *   forEach(obj, function (value) {\n *     console.log(value)\n *   })\n * }\n *\n * @param obj\n *   An Object value which might implement the Iterable or Array-like protocols.\n * @return {boolean} true if Iterable or Array-like Object.\n */\n/*:: declare export function isCollection(obj: any): boolean; */\nexport function isCollection(obj) {\n  return Object(obj) === obj && (isArrayLike(obj) || isIterable(obj))\n}\n\n/**\n * If the provided object implements the Iterator protocol, its Iterator object\n * is returned. Otherwise returns undefined.\n *\n * @example\n *\n * var getIterator = require('iterall').getIterator\n * var iterator = getIterator([ 1, 2, 3 ])\n * iterator.next() // { value: 1, done: false }\n * iterator.next() // { value: 2, done: false }\n * iterator.next() // { value: 3, done: false }\n * iterator.next() // { value: undefined, done: true }\n *\n * @template T the type of each iterated value\n * @param {Iterable<T>} iterable\n *   An Iterable object which is the source of an Iterator.\n * @return {Iterator<T>} new Iterator instance.\n */\n/*:: declare export var getIterator:\n  & (<+TValue>(iterable: Iterable<TValue>) => Iterator<TValue>)\n  & ((iterable: mixed) => void | Iterator<mixed>); */\nexport function getIterator(iterable) {\n  var method = getIteratorMethod(iterable)\n  if (method) {\n    return method.call(iterable)\n  }\n}\n\n/**\n * If the provided object implements the Iterator protocol, the method\n * responsible for producing its Iterator object is returned.\n *\n * This is used in rare cases for performance tuning. This method must be called\n * with obj as the contextual this-argument.\n *\n * @example\n *\n * var getIteratorMethod = require('iterall').getIteratorMethod\n * var myArray = [ 1, 2, 3 ]\n * var method = getIteratorMethod(myArray)\n * if (method) {\n *   var iterator = method.call(myArray)\n * }\n *\n * @template T the type of each iterated value\n * @param {Iterable<T>} iterable\n *   An Iterable object which defines an `@@iterator` method.\n * @return {function(): Iterator<T>} `@@iterator` method.\n */\n/*:: declare export var getIteratorMethod:\n  & (<+TValue>(iterable: Iterable<TValue>) => (() => Iterator<TValue>))\n  & ((iterable: mixed) => (void | (() => Iterator<mixed>))); */\nexport function getIteratorMethod(iterable) {\n  if (iterable != null) {\n    var method =\n      (SYMBOL_ITERATOR && iterable[SYMBOL_ITERATOR]) || iterable['@@iterator']\n    if (typeof method === 'function') {\n      return method\n    }\n  }\n}\n\n/**\n * Similar to {@link getIterator}, this method returns a new Iterator given an\n * Iterable. However it will also create an Iterator for a non-Iterable\n * Array-like collection, such as Array in a non-ES2015 environment.\n *\n * `createIterator` is complimentary to `forEach`, but allows a \"pull\"-based\n * iteration as opposed to `forEach`'s \"push\"-based iteration.\n *\n * `createIterator` produces an Iterator for Array-likes with the same behavior\n * as ArrayIteratorPrototype described in the ECMAScript specification, and\n * does *not* skip over \"holes\".\n *\n * @example\n *\n * var createIterator = require('iterall').createIterator\n *\n * var myArraylike = { length: 3, 0: 'Alpha', 1: 'Bravo', 2: 'Charlie' }\n * var iterator = createIterator(myArraylike)\n * iterator.next() // { value: 'Alpha', done: false }\n * iterator.next() // { value: 'Bravo', done: false }\n * iterator.next() // { value: 'Charlie', done: false }\n * iterator.next() // { value: undefined, done: true }\n *\n * @template T the type of each iterated value\n * @param {Iterable<T>|{ length: number }} collection\n *   An Iterable or Array-like object to produce an Iterator.\n * @return {Iterator<T>} new Iterator instance.\n */\n/*:: declare export var createIterator:\n  & (<+TValue>(collection: Iterable<TValue>) => Iterator<TValue>)\n  & ((collection: {length: number}) => Iterator<mixed>)\n  & ((collection: mixed) => (void | Iterator<mixed>)); */\nexport function createIterator(collection) {\n  if (collection != null) {\n    var iterator = getIterator(collection)\n    if (iterator) {\n      return iterator\n    }\n    if (isArrayLike(collection)) {\n      return new ArrayLikeIterator(collection)\n    }\n  }\n}\n\n// When the object provided to `createIterator` is not Iterable but is\n// Array-like, this simple Iterator is created.\nfunction ArrayLikeIterator(obj) {\n  this._o = obj\n  this._i = 0\n}\n\n// Note: all Iterators are themselves Iterable.\nArrayLikeIterator.prototype[$$iterator] = function() {\n  return this\n}\n\n// A simple state-machine determines the IteratorResult returned, yielding\n// each value in the Array-like object in order of their indicies.\nArrayLikeIterator.prototype.next = function() {\n  if (this._o === void 0 || this._i >= this._o.length) {\n    this._o = void 0\n    return { value: void 0, done: true }\n  }\n  return { value: this._o[this._i++], done: false }\n}\n\n/**\n * Given an object which either implements the Iterable protocol or is\n * Array-like, iterate over it, calling the `callback` at each iteration.\n *\n * Use `forEach` where you would expect to use a `for ... of` loop in ES6.\n * However `forEach` adheres to the behavior of [Array#forEach][] described in\n * the ECMAScript specification, skipping over \"holes\" in Array-likes. It will\n * also delegate to a `forEach` method on `collection` if one is defined,\n * ensuring native performance for `Arrays`.\n *\n * Similar to [Array#forEach][], the `callback` function accepts three\n * arguments, and is provided with `thisArg` as the calling context.\n *\n * Note: providing an infinite Iterator to forEach will produce an error.\n *\n * [Array#forEach]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\n *\n * @example\n *\n * var forEach = require('iterall').forEach\n *\n * forEach(myIterable, function (value, index, iterable) {\n *   console.log(value, index, iterable === myIterable)\n * })\n *\n * @example\n *\n * // ES6:\n * for (let value of myIterable) {\n *   console.log(value)\n * }\n *\n * // Any JavaScript environment:\n * forEach(myIterable, function (value) {\n *   console.log(value)\n * })\n *\n * @template T the type of each iterated value\n * @param {Iterable<T>|{ length: number }} collection\n *   The Iterable or array to iterate over.\n * @param {function(T, number, object)} callback\n *   Function to execute for each iteration, taking up to three arguments\n * @param [thisArg]\n *   Optional. Value to use as `this` when executing `callback`.\n */\n/*:: declare export var forEach:\n  & (<+TValue, TCollection: Iterable<TValue>>(\n      collection: TCollection,\n      callbackFn: (value: TValue, index: number, collection: TCollection) => any,\n      thisArg?: any\n    ) => void)\n  & (<TCollection: {length: number}>(\n      collection: TCollection,\n      callbackFn: (value: mixed, index: number, collection: TCollection) => any,\n      thisArg?: any\n    ) => void); */\nexport function forEach(collection, callback, thisArg) {\n  if (collection != null) {\n    if (typeof collection.forEach === 'function') {\n      return collection.forEach(callback, thisArg)\n    }\n    var i = 0\n    var iterator = getIterator(collection)\n    if (iterator) {\n      var step\n      while (!(step = iterator.next()).done) {\n        callback.call(thisArg, step.value, i++, collection)\n        // Infinite Iterators could cause forEach to run forever.\n        // After a very large number of iterations, produce an error.\n        /* istanbul ignore if */\n        if (i > 9999999) {\n          throw new TypeError('Near-infinite iteration.')\n        }\n      }\n    } else if (isArrayLike(collection)) {\n      for (; i < collection.length; i++) {\n        if (collection.hasOwnProperty(i)) {\n          callback.call(thisArg, collection[i], i, collection)\n        }\n      }\n    }\n  }\n}\n\n/////////////////////////////////////////////////////\n//                                                 //\n//                 ASYNC ITERATORS                 //\n//                                                 //\n/////////////////////////////////////////////////////\n\n/**\n * [AsyncIterable](https://tc39.github.io/proposal-async-iteration/#sec-asynciterable-interface)\n * is a *protocol* which when implemented allows a JavaScript object to define\n * an asynchronous iteration behavior, such as what values are looped over in\n * a [`for-await-of`](https://tc39.github.io/proposal-async-iteration/#sec-for-in-and-for-of-statements)\n * loop or `iterall`'s {@link forAwaitEach} function.\n *\n * While described as a proposed addition to the [ES2017 version of JavaScript](https://tc39.github.io/proposal-async-iteration/)\n * it can be utilized by any version of JavaScript.\n *\n * @external AsyncIterable\n * @see {@link https://tc39.github.io/proposal-async-iteration/#sec-asynciterable-interface|Async Iteration Proposal}\n * @template T The type of each iterated value\n * @property {function (): AsyncIterator<T>} Symbol.asyncIterator\n *   A method which produces an AsyncIterator for this AsyncIterable.\n */\n\n/**\n * [AsyncIterator](https://tc39.github.io/proposal-async-iteration/#sec-asynciterator-interface)\n * is a *protocol* which describes a standard way to produce and consume an\n * asynchronous sequence of values, typically the values of the\n * {@link AsyncIterable} represented by this {@link AsyncIterator}.\n *\n * AsyncIterator is similar to Observable or Stream. Like an {@link Iterator} it\n * also as a `next()` method, however instead of an IteratorResult,\n * calling this method returns a {@link Promise} for a IteratorResult.\n *\n * While described as a proposed addition to the [ES2017 version of JavaScript](https://tc39.github.io/proposal-async-iteration/)\n * it can be utilized by any version of JavaScript.\n *\n * @external AsyncIterator\n * @see {@link https://tc39.github.io/proposal-async-iteration/#sec-asynciterator-interface|Async Iteration Proposal}\n */\n\n// In ES2017 (or a polyfilled) environment, this will be Symbol.asyncIterator\nvar SYMBOL_ASYNC_ITERATOR = SYMBOL && SYMBOL.asyncIterator\n\n/**\n * A property name to be used as the name of an AsyncIterable's method\n * responsible for producing an Iterator, referred to as `@@asyncIterator`.\n * Typically represents the value `Symbol.asyncIterator` but falls back to the\n * string `\"@@asyncIterator\"` when `Symbol.asyncIterator` is not defined.\n *\n * Use `$$asyncIterator` for defining new AsyncIterables instead of\n * `Symbol.asyncIterator`, but do not use it for accessing existing Iterables,\n * instead use {@link getAsyncIterator} or {@link isAsyncIterable}.\n *\n * @example\n *\n * var $$asyncIterator = require('iterall').$$asyncIterator\n *\n * function Chirper (to) {\n *   this.to = to\n * }\n *\n * Chirper.prototype[$$asyncIterator] = function () {\n *   return {\n *     to: this.to,\n *     num: 0,\n *     next () {\n *       return new Promise(resolve => {\n *         if (this.num >= this.to) {\n *           resolve({ value: undefined, done: true })\n *         } else {\n *           setTimeout(() => {\n *             resolve({ value: this.num++, done: false })\n *           }, 1000)\n *         }\n *       })\n *     }\n *   }\n * }\n *\n * var chirper = new Chirper(3)\n * for await (var number of chirper) {\n *   console.log(number) // 0 ...wait... 1 ...wait... 2\n * }\n *\n * @type {Symbol|string}\n */\n/*:: declare export var $$asyncIterator: '@@asyncIterator'; */\nexport var $$asyncIterator = SYMBOL_ASYNC_ITERATOR || '@@asyncIterator'\n\n/**\n * Returns true if the provided object implements the AsyncIterator protocol via\n * either implementing a `Symbol.asyncIterator` or `\"@@asyncIterator\"` method.\n *\n * @example\n *\n * var isAsyncIterable = require('iterall').isAsyncIterable\n * isAsyncIterable(myStream) // true\n * isAsyncIterable('ABC') // false\n *\n * @param obj\n *   A value which might implement the AsyncIterable protocol.\n * @return {boolean} true if AsyncIterable.\n */\n/*:: declare export function isAsyncIterable(obj: any): boolean; */\nexport function isAsyncIterable(obj) {\n  return !!getAsyncIteratorMethod(obj)\n}\n\n/**\n * If the provided object implements the AsyncIterator protocol, its\n * AsyncIterator object is returned. Otherwise returns undefined.\n *\n * @example\n *\n * var getAsyncIterator = require('iterall').getAsyncIterator\n * var asyncIterator = getAsyncIterator(myStream)\n * asyncIterator.next().then(console.log) // { value: 1, done: false }\n * asyncIterator.next().then(console.log) // { value: 2, done: false }\n * asyncIterator.next().then(console.log) // { value: 3, done: false }\n * asyncIterator.next().then(console.log) // { value: undefined, done: true }\n *\n * @template T the type of each iterated value\n * @param {AsyncIterable<T>} asyncIterable\n *   An AsyncIterable object which is the source of an AsyncIterator.\n * @return {AsyncIterator<T>} new AsyncIterator instance.\n */\n/*:: declare export var getAsyncIterator:\n  & (<+TValue>(asyncIterable: AsyncIterable<TValue>) => AsyncIterator<TValue>)\n  & ((asyncIterable: mixed) => (void | AsyncIterator<mixed>)); */\nexport function getAsyncIterator(asyncIterable) {\n  var method = getAsyncIteratorMethod(asyncIterable)\n  if (method) {\n    return method.call(asyncIterable)\n  }\n}\n\n/**\n * If the provided object implements the AsyncIterator protocol, the method\n * responsible for producing its AsyncIterator object is returned.\n *\n * This is used in rare cases for performance tuning. This method must be called\n * with obj as the contextual this-argument.\n *\n * @example\n *\n * var getAsyncIteratorMethod = require('iterall').getAsyncIteratorMethod\n * var method = getAsyncIteratorMethod(myStream)\n * if (method) {\n *   var asyncIterator = method.call(myStream)\n * }\n *\n * @template T the type of each iterated value\n * @param {AsyncIterable<T>} asyncIterable\n *   An AsyncIterable object which defines an `@@asyncIterator` method.\n * @return {function(): AsyncIterator<T>} `@@asyncIterator` method.\n */\n/*:: declare export var getAsyncIteratorMethod:\n  & (<+TValue>(asyncIterable: AsyncIterable<TValue>) => (() => AsyncIterator<TValue>))\n  & ((asyncIterable: mixed) => (void | (() => AsyncIterator<mixed>))); */\nexport function getAsyncIteratorMethod(asyncIterable) {\n  if (asyncIterable != null) {\n    var method =\n      (SYMBOL_ASYNC_ITERATOR && asyncIterable[SYMBOL_ASYNC_ITERATOR]) ||\n      asyncIterable['@@asyncIterator']\n    if (typeof method === 'function') {\n      return method\n    }\n  }\n}\n\n/**\n * Similar to {@link getAsyncIterator}, this method returns a new AsyncIterator\n * given an AsyncIterable. However it will also create an AsyncIterator for a\n * non-async Iterable as well as non-Iterable Array-like collection, such as\n * Array in a pre-ES2015 environment.\n *\n * `createAsyncIterator` is complimentary to `forAwaitEach`, but allows a\n * buffering \"pull\"-based iteration as opposed to `forAwaitEach`'s\n * \"push\"-based iteration.\n *\n * `createAsyncIterator` produces an AsyncIterator for non-async Iterables as\n * described in the ECMAScript proposal [Async-from-Sync Iterator Objects](https://tc39.github.io/proposal-async-iteration/#sec-async-from-sync-iterator-objects).\n *\n * > Note: Creating `AsyncIterator`s requires the existence of `Promise`.\n * > While `Promise` has been available in modern browsers for a number of\n * > years, legacy browsers (like IE 11) may require a polyfill.\n *\n * @example\n *\n * var createAsyncIterator = require('iterall').createAsyncIterator\n *\n * var myArraylike = { length: 3, 0: 'Alpha', 1: 'Bravo', 2: 'Charlie' }\n * var iterator = createAsyncIterator(myArraylike)\n * iterator.next().then(console.log) // { value: 'Alpha', done: false }\n * iterator.next().then(console.log) // { value: 'Bravo', done: false }\n * iterator.next().then(console.log) // { value: 'Charlie', done: false }\n * iterator.next().then(console.log) // { value: undefined, done: true }\n *\n * @template T the type of each iterated value\n * @param {AsyncIterable<T>|Iterable<T>|{ length: number }} source\n *   An AsyncIterable, Iterable, or Array-like object to produce an Iterator.\n * @return {AsyncIterator<T>} new AsyncIterator instance.\n */\n/*:: declare export var createAsyncIterator:\n  & (<+TValue>(\n      collection: Iterable<Promise<TValue> | TValue> | AsyncIterable<TValue>\n    ) => AsyncIterator<TValue>)\n  & ((collection: {length: number}) => AsyncIterator<mixed>)\n  & ((collection: mixed) => (void | AsyncIterator<mixed>)); */\nexport function createAsyncIterator(source) {\n  if (source != null) {\n    var asyncIterator = getAsyncIterator(source)\n    if (asyncIterator) {\n      return asyncIterator\n    }\n    var iterator = createIterator(source)\n    if (iterator) {\n      return new AsyncFromSyncIterator(iterator)\n    }\n  }\n}\n\n// When the object provided to `createAsyncIterator` is not AsyncIterable but is\n// sync Iterable, this simple wrapper is created.\nfunction AsyncFromSyncIterator(iterator) {\n  this._i = iterator\n}\n\n// Note: all AsyncIterators are themselves AsyncIterable.\nAsyncFromSyncIterator.prototype[$$asyncIterator] = function() {\n  return this\n}\n\n// A simple state-machine determines the IteratorResult returned, yielding\n// each value in the Array-like object in order of their indicies.\nAsyncFromSyncIterator.prototype.next = function() {\n  var step = this._i.next()\n  return Promise.resolve(step.value).then(function(value) {\n    return { value: value, done: step.done }\n  })\n}\n\n/**\n * Given an object which either implements the AsyncIterable protocol or is\n * Array-like, iterate over it, calling the `callback` at each iteration.\n *\n * Use `forAwaitEach` where you would expect to use a [for-await-of](https://tc39.github.io/proposal-async-iteration/#sec-for-in-and-for-of-statements) loop.\n *\n * Similar to [Array#forEach][], the `callback` function accepts three\n * arguments, and is provided with `thisArg` as the calling context.\n *\n * > Note: Using `forAwaitEach` requires the existence of `Promise`.\n * > While `Promise` has been available in modern browsers for a number of\n * > years, legacy browsers (like IE 11) may require a polyfill.\n *\n * @example\n *\n * var forAwaitEach = require('iterall').forAwaitEach\n *\n * forAwaitEach(myIterable, function (value, index, iterable) {\n *   console.log(value, index, iterable === myIterable)\n * })\n *\n * @example\n *\n * // ES2017:\n * for await (let value of myAsyncIterable) {\n *   console.log(await doSomethingAsync(value))\n * }\n * console.log('done')\n *\n * // Any JavaScript environment:\n * forAwaitEach(myAsyncIterable, function (value) {\n *   return doSomethingAsync(value).then(console.log)\n * }).then(function () {\n *   console.log('done')\n * })\n *\n * @template T the type of each iterated value\n * @param {AsyncIterable<T>|Iterable<Promise<T> | T>|{ length: number }} source\n *   The AsyncIterable or array to iterate over.\n * @param {function(T, number, object)} callback\n *   Function to execute for each iteration, taking up to three arguments\n * @param [thisArg]\n *   Optional. Value to use as `this` when executing `callback`.\n */\n/*:: declare export var forAwaitEach:\n  & (<+TValue, TCollection: Iterable<Promise<TValue> | TValue> | AsyncIterable<TValue>>(\n      collection: TCollection,\n      callbackFn: (value: TValue, index: number, collection: TCollection) => any,\n      thisArg?: any\n    ) => Promise<void>)\n  & (<TCollection: { length: number }>(\n      collection: TCollection,\n      callbackFn: (value: mixed, index: number, collection: TCollection) => any,\n      thisArg?: any\n    ) => Promise<void>); */\nexport function forAwaitEach(source, callback, thisArg) {\n  var asyncIterator = createAsyncIterator(source)\n  if (asyncIterator) {\n    var i = 0\n    return new Promise(function(resolve, reject) {\n      function next() {\n        asyncIterator\n          .next()\n          .then(function(step) {\n            if (!step.done) {\n              Promise.resolve(callback.call(thisArg, step.value, i++, source))\n                .then(next)\n                .catch(reject)\n            } else {\n              resolve()\n            }\n            // Explicitly return null, silencing bluebird-style warnings.\n            return null\n          })\n          .catch(reject)\n        // Explicitly return null, silencing bluebird-style warnings.\n        return null\n      }\n      next()\n    })\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/iterall/index.mjs\n// module id = 11\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.typeFromAST = typeFromAST;\n\nvar _kinds = require('../language/kinds');\n\nvar _definition = require('../type/definition');\n\n/**\n * Given a Schema and an AST node describing a type, return a GraphQLType\n * definition which applies to that type. For example, if provided the parsed\n * AST node for `[User]`, a GraphQLList instance will be returned, containing\n * the type called \"User\" found in the schema. If a type called \"User\" is not\n * found in the schema, then undefined will be returned.\n */\n/* eslint-disable no-redeclare */\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction typeFromAST(schema, typeNode) {\n  /* eslint-enable no-redeclare */\n  var innerType = void 0;\n  if (typeNode.kind === _kinds.Kind.LIST_TYPE) {\n    innerType = typeFromAST(schema, typeNode.type);\n    return innerType && (0, _definition.GraphQLList)(innerType);\n  }\n  if (typeNode.kind === _kinds.Kind.NON_NULL_TYPE) {\n    innerType = typeFromAST(schema, typeNode.type);\n    return innerType && (0, _definition.GraphQLNonNull)(innerType);\n  }\n  if (typeNode.kind === _kinds.Kind.NAMED_TYPE) {\n    return schema.getType(typeNode.name.value);\n  }\n  /* istanbul ignore next */\n  throw new Error('Unexpected type kind: ' + typeNode.kind + '.');\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/utilities/typeFromAST.js\n// module id = 12\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n// stolen from https://github.com/Octane/setImmediate\r\n// convertd to NodeJS friendly syntax\r\nvar uid = 0;\r\nvar storage = {};\r\nvar slice = Array.prototype.slice;\r\nvar message = 'setMsg';\r\n// declare const Promise: any;\r\nvar canSetImmediate = typeof window !== 'undefined' && window[\"setImmediate\"] ? window[\"setImmediate\"] : typeof global !== \"undefined\" && global[\"setImmediate\"] ? global[\"setImmediate\"] : false;\r\nvar canPost = typeof window !== 'undefined' && window.postMessage && window.addEventListener;\r\nvar fastApply = function (args) {\r\n    return args[0].apply(null, slice.call(args, 1));\r\n};\r\nvar callback = function (event) {\r\n    var key = event.data;\r\n    var data;\r\n    if (typeof key == 'string' && key.indexOf(message) === 0) {\r\n        data = storage[key];\r\n        if (data) {\r\n            delete storage[key];\r\n            fastApply(data);\r\n        }\r\n    }\r\n};\r\nif (canPost) {\r\n    window.addEventListener('message', callback);\r\n}\r\nvar setImmediatePolyfill = function () {\r\n    var args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        args[_i] = arguments[_i];\r\n    }\r\n    var id = uid++;\r\n    var key = message + id;\r\n    storage[key] = args;\r\n    window.postMessage(key, '*');\r\n    return id;\r\n};\r\nexports.setFast = (function () {\r\n    return canSetImmediate ? function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        canSetImmediate(function () {\r\n            fastApply(args);\r\n        });\r\n    } : canPost ? setImmediatePolyfill : // built in window messaging (pretty fast, not bad)\r\n        function () {\r\n            var args = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                args[_i] = arguments[_i];\r\n            }\r\n            setTimeout(function () {\r\n                fastApply(args);\r\n            }, 0);\r\n        };\r\n})();\r\nvar _INTERNAL = function () { };\r\nvar _REJECTED = ['R'];\r\nvar _FULFILLED = ['F'];\r\nvar _PENDING = ['P'];\r\nvar Promise = /** @class */ (function () {\r\n    function Promise(resolver) {\r\n        this._state = _PENDING;\r\n        this._queue = [];\r\n        this._outcome = void 0;\r\n        if (resolver !== _INTERNAL) {\r\n            _safelyResolveThenable(this, resolver);\r\n        }\r\n    }\r\n    Promise.doPolyFill = function () {\r\n        if (typeof global !== \"undefined\") {\r\n            if (!global[\"Promise\"]) {\r\n                global[\"Promise\"] = this;\r\n            }\r\n        }\r\n        if (typeof window !== \"undefined\") {\r\n            if (!window[\"Promise\"]) {\r\n                window[\"Promise\"] = this;\r\n            }\r\n        }\r\n    };\r\n    Promise.prototype.catch = function (onRejected) {\r\n        return this.then(function () { }, onRejected);\r\n    };\r\n    Promise.prototype.then = function (onFulfilled, onRejected) {\r\n        if (typeof onFulfilled !== 'function' && this._state === _FULFILLED ||\r\n            typeof onRejected !== 'function' && this._state === _REJECTED) {\r\n            return this;\r\n        }\r\n        var promise = new Promise(_INTERNAL);\r\n        if (this._state !== _PENDING) {\r\n            var resolver = this._state === _FULFILLED ? onFulfilled : onRejected;\r\n            _unwrap(promise, resolver, this._outcome);\r\n        }\r\n        else {\r\n            this._queue.push(new _QueueItem(promise, onFulfilled, onRejected));\r\n        }\r\n        return promise;\r\n    };\r\n    /**\r\n     *\r\n     * @static\r\n     * @param {any} value\r\n     * @returns\r\n     *\r\n     * @memberOf Promise\r\n     */\r\n    Promise.resolve = function (value) {\r\n        if (value instanceof this)\r\n            return value;\r\n        return _handlers._resolve(new Promise(_INTERNAL), value);\r\n    };\r\n    /**\r\n     *\r\n     * @static\r\n     * @param {any} reason\r\n     * @returns\r\n     *\r\n     * @memberOf Promise\r\n     */\r\n    Promise.reject = function (reason) {\r\n        return _handlers._reject(new Promise(_INTERNAL), reason);\r\n    };\r\n    Promise.all = function (iterable) {\r\n        var t = this;\r\n        return new Promise(function (resolve, reject) {\r\n            var results = [];\r\n            if (!iterable.length) {\r\n                resolve([]);\r\n                return;\r\n            }\r\n            var maybeReturn = function (index, success, failure) {\r\n                if (failure !== undefined) {\r\n                    results.push(failure);\r\n                }\r\n                else {\r\n                    results.push(success);\r\n                }\r\n                if (results.length == iterable.length) {\r\n                    resolve(results);\r\n                }\r\n            };\r\n            var _loop_1 = function (i) {\r\n                iterable[i].then(function (res) {\r\n                    maybeReturn(i, res, undefined);\r\n                }).catch(function (e) {\r\n                    maybeReturn(i, undefined, e);\r\n                });\r\n            };\r\n            for (var i = 0; i < iterable.length; i++) {\r\n                _loop_1(i);\r\n            }\r\n        });\r\n    };\r\n    Promise.race = function (iterable) {\r\n        var self = this;\r\n        var len = iterable.length;\r\n        var called = false;\r\n        var i = -1;\r\n        var promise = new Promise(_INTERNAL);\r\n        if (Array.isArray(iterable) !== false) {\r\n            return this.reject(new TypeError());\r\n        }\r\n        function resolver(value) {\r\n            self.resolve(value).then(function (response) {\r\n                if (!called) {\r\n                    called = true;\r\n                    _handlers._resolve(promise, response);\r\n                }\r\n            }, function (error) {\r\n                if (!called) {\r\n                    called = true;\r\n                    _handlers._reject(promise, error);\r\n                }\r\n            });\r\n        }\r\n        if (!len) {\r\n            return this.resolve([]);\r\n        }\r\n        while (++i < len) {\r\n            resolver(iterable[i]);\r\n        }\r\n        return promise;\r\n    };\r\n    return Promise;\r\n}());\r\nexports.Promise = Promise;\r\n/**\r\n * @internal\r\n *\r\n * @export\r\n * @class _QueueItem\r\n */\r\nvar _QueueItem = /** @class */ (function () {\r\n    function _QueueItem(promise, onFulfilled, onRejected) {\r\n        this._promise = promise;\r\n        if (typeof onFulfilled === 'function') {\r\n            this._onFulfilled = onFulfilled;\r\n            this._callFulfilled = this._otherCallFulfilled;\r\n        }\r\n        if (typeof onRejected === 'function') {\r\n            this._onRejected = onRejected;\r\n            this._callRejected = this._otherCallRejected;\r\n        }\r\n    }\r\n    _QueueItem.prototype._callFulfilled = function (value) {\r\n        _handlers._resolve(this._promise, value);\r\n    };\r\n    ;\r\n    _QueueItem.prototype._otherCallFulfilled = function (value) {\r\n        _unwrap(this._promise, this._onFulfilled, value);\r\n    };\r\n    ;\r\n    _QueueItem.prototype._callRejected = function (value) {\r\n        _handlers._reject(this._promise, value);\r\n    };\r\n    ;\r\n    _QueueItem.prototype._otherCallRejected = function (value) {\r\n        _unwrap(this._promise, this._onRejected, value);\r\n    };\r\n    ;\r\n    return _QueueItem;\r\n}());\r\nexports._QueueItem = _QueueItem;\r\n/**\r\n *\r\n * @internal\r\n * @param {any} promise\r\n * @param {any} func\r\n * @param {any} value\r\n */\r\nfunction _unwrap(promise, func, value) {\r\n    exports.setFast(function () {\r\n        var returnValue;\r\n        try {\r\n            returnValue = func.apply(null, value);\r\n        }\r\n        catch (e) {\r\n            return _handlers._reject(promise, e);\r\n        }\r\n        if (returnValue === promise) {\r\n            _handlers._reject(promise, new TypeError());\r\n        }\r\n        else {\r\n            _handlers._resolve(promise, returnValue);\r\n        }\r\n        return null;\r\n    });\r\n}\r\n/**\r\n *\r\n * @internal\r\n * @class _handlers\r\n */\r\nvar _handlers = /** @class */ (function () {\r\n    function _handlers() {\r\n    }\r\n    _handlers._resolve = function (self, value) {\r\n        var result = _tryCatch(_getThen, value);\r\n        var thenable = result._value;\r\n        var i = -1;\r\n        var len = self._queue.length;\r\n        if (result._status === 'error') {\r\n            return _handlers._reject(self, result._value);\r\n        }\r\n        if (thenable) {\r\n            _safelyResolveThenable(self, thenable);\r\n        }\r\n        else {\r\n            self._state = _FULFILLED;\r\n            self._outcome = value;\r\n            while (++i < len) {\r\n                self._queue[i]._callFulfilled(value);\r\n            }\r\n        }\r\n        return self;\r\n    };\r\n    ;\r\n    _handlers._reject = function (self, error) {\r\n        self._state = _REJECTED;\r\n        self._outcome = error;\r\n        var i = -1;\r\n        var len = self._queue.length;\r\n        while (++i < len) {\r\n            self._queue[i]._callRejected(error);\r\n        }\r\n        return self;\r\n    };\r\n    ;\r\n    return _handlers;\r\n}());\r\n/**\r\n *\r\n * @internal\r\n * @param {any} obj\r\n * @returns\r\n */\r\nfunction _getThen(obj) {\r\n    // Make sure we only access the accessor once as required by the spec\r\n    var then = obj && obj.then;\r\n    if (obj && (typeof obj === 'object' || typeof obj === 'function') && typeof then === 'function') {\r\n        return function appyThen() {\r\n            then.apply(obj, arguments);\r\n        };\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n *\r\n * @internal\r\n * @param {Promise<any>} self\r\n * @param {(onSuccess:(...T) => void, onFail:(...T) => void) => void} thenable\r\n */\r\nfunction _safelyResolveThenable(self, thenable) {\r\n    // Either fulfill, reject or reject with error\r\n    var called = false;\r\n    function onError() {\r\n        var value = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            value[_i] = arguments[_i];\r\n        }\r\n        if (called) {\r\n            return;\r\n        }\r\n        called = true;\r\n        _handlers._reject(self, value);\r\n    }\r\n    function onSuccess() {\r\n        var value = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            value[_i] = arguments[_i];\r\n        }\r\n        if (called) {\r\n            return;\r\n        }\r\n        called = true;\r\n        _handlers._resolve(self, value);\r\n    }\r\n    function tryToUnwrap() {\r\n        thenable(onSuccess, onError);\r\n    }\r\n    var result = _tryCatch(tryToUnwrap);\r\n    if (result._status === 'error') {\r\n        onError(result._value);\r\n    }\r\n}\r\n/**\r\n *\r\n * @internal\r\n * @param {any} func\r\n * @param {*} [values]\r\n * @returns\r\n */\r\nfunction _tryCatch(func, values) {\r\n    var out = { _status: null, _value: null };\r\n    try {\r\n        out._value = func(values);\r\n        out._status = 'success';\r\n    }\r\n    catch (e) {\r\n        out._status = 'error';\r\n        out._value = e;\r\n    }\r\n    return out;\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/lie-ts/index.js\n// module id = 13\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.specifiedScalarTypes = exports.GraphQLID = exports.GraphQLBoolean = exports.GraphQLString = exports.GraphQLFloat = exports.GraphQLInt = undefined;\nexports.isSpecifiedScalarType = isSpecifiedScalarType;\n\nvar _definition = require('./definition');\n\nvar _kinds = require('../language/kinds');\n\n// As per the GraphQL Spec, Integers are only treated as valid when a valid\n// 32-bit signed integer, providing the broadest support across platforms.\n//\n// n.b. JavaScript's integers are safe between -(2^53 - 1) and 2^53 - 1 because\n// they are internally represented as IEEE 754 doubles.\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nvar MAX_INT = 2147483647;\nvar MIN_INT = -2147483648;\n\nfunction coerceInt(value) {\n  if (value === '') {\n    throw new TypeError('Int cannot represent non 32-bit signed integer value: (empty string)');\n  }\n  var num = Number(value);\n  if (num !== num || num > MAX_INT || num < MIN_INT) {\n    throw new TypeError('Int cannot represent non 32-bit signed integer value: ' + String(value));\n  }\n  var int = Math.floor(num);\n  if (int !== num) {\n    throw new TypeError('Int cannot represent non-integer value: ' + String(value));\n  }\n  return int;\n}\n\nvar GraphQLInt = exports.GraphQLInt = new _definition.GraphQLScalarType({\n  name: 'Int',\n  description: 'The `Int` scalar type represents non-fractional signed whole numeric ' + 'values. Int can represent values between -(2^31) and 2^31 - 1. ',\n  serialize: coerceInt,\n  parseValue: coerceInt,\n  parseLiteral: function parseLiteral(ast) {\n    if (ast.kind === _kinds.Kind.INT) {\n      var num = parseInt(ast.value, 10);\n      if (num <= MAX_INT && num >= MIN_INT) {\n        return num;\n      }\n    }\n    return undefined;\n  }\n});\n\nfunction coerceFloat(value) {\n  if (value === '') {\n    throw new TypeError('Float cannot represent non numeric value: (empty string)');\n  }\n  var num = Number(value);\n  if (num === num) {\n    return num;\n  }\n  throw new TypeError('Float cannot represent non numeric value: ' + String(value));\n}\n\nvar GraphQLFloat = exports.GraphQLFloat = new _definition.GraphQLScalarType({\n  name: 'Float',\n  description: 'The `Float` scalar type represents signed double-precision fractional ' + 'values as specified by ' + '[IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). ',\n  serialize: coerceFloat,\n  parseValue: coerceFloat,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === _kinds.Kind.FLOAT || ast.kind === _kinds.Kind.INT ? parseFloat(ast.value) : undefined;\n  }\n});\n\nfunction coerceString(value) {\n  if (Array.isArray(value)) {\n    throw new TypeError('String cannot represent an array value: [' + String(value) + ']');\n  }\n  return String(value);\n}\n\nvar GraphQLString = exports.GraphQLString = new _definition.GraphQLScalarType({\n  name: 'String',\n  description: 'The `String` scalar type represents textual data, represented as UTF-8 ' + 'character sequences. The String type is most often used by GraphQL to ' + 'represent free-form human-readable text.',\n  serialize: coerceString,\n  parseValue: coerceString,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === _kinds.Kind.STRING ? ast.value : undefined;\n  }\n});\n\nvar GraphQLBoolean = exports.GraphQLBoolean = new _definition.GraphQLScalarType({\n  name: 'Boolean',\n  description: 'The `Boolean` scalar type represents `true` or `false`.',\n  serialize: Boolean,\n  parseValue: Boolean,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === _kinds.Kind.BOOLEAN ? ast.value : undefined;\n  }\n});\n\nvar GraphQLID = exports.GraphQLID = new _definition.GraphQLScalarType({\n  name: 'ID',\n  description: 'The `ID` scalar type represents a unique identifier, often used to ' + 'refetch an object or as key for a cache. The ID type appears in a JSON ' + 'response as a String; however, it is not intended to be human-readable. ' + 'When expected as an input type, any string (such as `\"4\"`) or integer ' + '(such as `4`) input value will be accepted as an ID.',\n  serialize: String,\n  parseValue: String,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === _kinds.Kind.STRING || ast.kind === _kinds.Kind.INT ? ast.value : undefined;\n  }\n});\n\nvar specifiedScalarTypes = exports.specifiedScalarTypes = [GraphQLString, GraphQLInt, GraphQLFloat, GraphQLBoolean, GraphQLID];\n\nfunction isSpecifiedScalarType(type) {\n  return (0, _definition.isNamedType)(type) && (\n  // Would prefer to use specifiedScalarTypes.some(), however %checks needs\n  // a simple expression.\n  type.name === GraphQLString.name || type.name === GraphQLInt.name || type.name === GraphQLFloat.name || type.name === GraphQLBoolean.name || type.name === GraphQLID.name);\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/type/scalars.js\n// module id = 14\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\n\n/* eslint-disable no-redeclare */\n// $FlowFixMe workaround for: https://github.com/facebook/flow/issues/2221\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nvar objectValues = Object.values || function (obj) {\n  return Object.keys(obj).map(function (key) {\n    return obj[key];\n  });\n};\nexports.default = objectValues;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/jsutils/objectValues.js\n// module id = 15\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLError = GraphQLError;\n\nvar _printError = require('./printError');\n\nvar _location = require('../language/location');\n\n/**\n * A GraphQLError describes an Error found during the parse, validate, or\n * execute phases of performing a GraphQL operation. In addition to a message\n * and stack trace, it also includes information about the locations in a\n * GraphQL document and/or execution result that correspond to the Error.\n */\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction GraphQLError( // eslint-disable-line no-redeclare\nmessage, nodes, source, positions, path, originalError, extensions) {\n  // Compute list of blame nodes.\n  var _nodes = Array.isArray(nodes) ? nodes.length !== 0 ? nodes : undefined : nodes ? [nodes] : undefined;\n\n  // Compute locations in the source for the given nodes/positions.\n  var _source = source;\n  if (!_source && _nodes) {\n    var node = _nodes[0];\n    _source = node && node.loc && node.loc.source;\n  }\n\n  var _positions = positions;\n  if (!_positions && _nodes) {\n    _positions = _nodes.reduce(function (list, node) {\n      if (node.loc) {\n        list.push(node.loc.start);\n      }\n      return list;\n    }, []);\n  }\n  if (_positions && _positions.length === 0) {\n    _positions = undefined;\n  }\n\n  var _locations = void 0;\n  if (positions && source) {\n    _locations = positions.map(function (pos) {\n      return (0, _location.getLocation)(source, pos);\n    });\n  } else if (_nodes) {\n    _locations = _nodes.reduce(function (list, node) {\n      if (node.loc) {\n        list.push((0, _location.getLocation)(node.loc.source, node.loc.start));\n      }\n      return list;\n    }, []);\n  }\n\n  Object.defineProperties(this, {\n    message: {\n      value: message,\n      // By being enumerable, JSON.stringify will include `message` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: true,\n      writable: true\n    },\n    locations: {\n      // Coercing falsey values to undefined ensures they will not be included\n      // in JSON.stringify() when not provided.\n      value: _locations || undefined,\n      // By being enumerable, JSON.stringify will include `locations` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: true\n    },\n    path: {\n      // Coercing falsey values to undefined ensures they will not be included\n      // in JSON.stringify() when not provided.\n      value: path || undefined,\n      // By being enumerable, JSON.stringify will include `path` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: true\n    },\n    nodes: {\n      value: _nodes || undefined\n    },\n    source: {\n      value: _source || undefined\n    },\n    positions: {\n      value: _positions || undefined\n    },\n    originalError: {\n      value: originalError\n    },\n    extensions: {\n      value: extensions || originalError && originalError.extensions\n    }\n  });\n\n  // Include (non-enumerable) stack trace.\n  if (originalError && originalError.stack) {\n    Object.defineProperty(this, 'stack', {\n      value: originalError.stack,\n      writable: true,\n      configurable: true\n    });\n  } else if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, GraphQLError);\n  } else {\n    Object.defineProperty(this, 'stack', {\n      value: Error().stack,\n      writable: true,\n      configurable: true\n    });\n  }\n}\n\nGraphQLError.prototype = Object.create(Error.prototype, {\n  constructor: { value: GraphQLError },\n  name: { value: 'GraphQLError' },\n  toString: {\n    value: function toString() {\n      return (0, _printError.printError)(this);\n    }\n  }\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/error/GraphQLError.js\n// module id = 16\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = keyMap;\n\n\n/**\n * Creates a keyed JS object from an array, given a function to produce the keys\n * for each value in the array.\n *\n * This provides a convenient lookup for the array items if the key function\n * produces unique results.\n *\n *     const phoneBook = [\n *       { name: 'Jon', num: '555-1234' },\n *       { name: 'Jenny', num: '867-5309' }\n *     ]\n *\n *     // { Jon: { name: 'Jon', num: '555-1234' },\n *     //   Jenny: { name: 'Jenny', num: '867-5309' } }\n *     const entriesByName = keyMap(\n *       phoneBook,\n *       entry => entry.name\n *     )\n *\n *     // { name: 'Jenny', num: '857-6309' }\n *     const jennyEntry = entriesByName['Jenny']\n *\n */\nfunction keyMap(list, keyFn) {\n  return list.reduce(function (map, item) {\n    return map[keyFn(item)] = item, map;\n  }, Object.create(null));\n} /**\n   * Copyright (c) 2015-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   *  strict\n   */\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/jsutils/keyMap.js\n// module id = 17\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.visit = visit;\nexports.visitInParallel = visitInParallel;\nexports.visitWithTypeInfo = visitWithTypeInfo;\nexports.getVisitFn = getVisitFn;\n\n\n/**\n * A visitor is comprised of visit functions, which are called on each node\n * during the visitor's traversal.\n */\n\n\n/**\n * A visitor is provided to visit, it contains the collection of\n * relevant functions to be called during the visitor's traversal.\n */\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nvar QueryDocumentKeys = exports.QueryDocumentKeys = {\n  Name: [],\n\n  Document: ['definitions'],\n  OperationDefinition: ['name', 'variableDefinitions', 'directives', 'selectionSet'],\n  VariableDefinition: ['variable', 'type', 'defaultValue'],\n  Variable: ['name'],\n  SelectionSet: ['selections'],\n  Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],\n  Argument: ['name', 'value'],\n\n  FragmentSpread: ['name', 'directives'],\n  InlineFragment: ['typeCondition', 'directives', 'selectionSet'],\n  FragmentDefinition: ['name',\n  // Note: fragment variable definitions are experimental and may be changed\n  // or removed in the future.\n  'variableDefinitions', 'typeCondition', 'directives', 'selectionSet'],\n\n  IntValue: [],\n  FloatValue: [],\n  StringValue: [],\n  BooleanValue: [],\n  NullValue: [],\n  EnumValue: [],\n  ListValue: ['values'],\n  ObjectValue: ['fields'],\n  ObjectField: ['name', 'value'],\n\n  Directive: ['name', 'arguments'],\n\n  NamedType: ['name'],\n  ListType: ['type'],\n  NonNullType: ['type'],\n\n  SchemaDefinition: ['directives', 'operationTypes'],\n  OperationTypeDefinition: ['type'],\n\n  ScalarTypeDefinition: ['description', 'name', 'directives'],\n  ObjectTypeDefinition: ['description', 'name', 'interfaces', 'directives', 'fields'],\n  FieldDefinition: ['description', 'name', 'arguments', 'type', 'directives'],\n  InputValueDefinition: ['description', 'name', 'type', 'defaultValue', 'directives'],\n  InterfaceTypeDefinition: ['description', 'name', 'directives', 'fields'],\n  UnionTypeDefinition: ['description', 'name', 'directives', 'types'],\n  EnumTypeDefinition: ['description', 'name', 'directives', 'values'],\n  EnumValueDefinition: ['description', 'name', 'directives'],\n  InputObjectTypeDefinition: ['description', 'name', 'directives', 'fields'],\n\n  ScalarTypeExtension: ['name', 'directives'],\n  ObjectTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  InterfaceTypeExtension: ['name', 'directives', 'fields'],\n  UnionTypeExtension: ['name', 'directives', 'types'],\n  EnumTypeExtension: ['name', 'directives', 'values'],\n  InputObjectTypeExtension: ['name', 'directives', 'fields'],\n\n  DirectiveDefinition: ['description', 'name', 'arguments', 'locations']\n};\n\n/**\n * A KeyMap describes each the traversable properties of each kind of node.\n */\nvar BREAK = exports.BREAK = {};\n\n/**\n * visit() will walk through an AST using a depth first traversal, calling\n * the visitor's enter function at each node in the traversal, and calling the\n * leave function after visiting that node and all of its child nodes.\n *\n * By returning different values from the enter and leave functions, the\n * behavior of the visitor can be altered, including skipping over a sub-tree of\n * the AST (by returning false), editing the AST by returning a value or null\n * to remove the value, or to stop the whole traversal by returning BREAK.\n *\n * When using visit() to edit an AST, the original AST will not be modified, and\n * a new version of the AST with the changes applied will be returned from the\n * visit function.\n *\n *     const editedAST = visit(ast, {\n *       enter(node, key, parent, path, ancestors) {\n *         // @return\n *         //   undefined: no action\n *         //   false: skip visiting this node\n *         //   visitor.BREAK: stop visiting altogether\n *         //   null: delete this node\n *         //   any value: replace this node with the returned value\n *       },\n *       leave(node, key, parent, path, ancestors) {\n *         // @return\n *         //   undefined: no action\n *         //   false: no action\n *         //   visitor.BREAK: stop visiting altogether\n *         //   null: delete this node\n *         //   any value: replace this node with the returned value\n *       }\n *     });\n *\n * Alternatively to providing enter() and leave() functions, a visitor can\n * instead provide functions named the same as the kinds of AST nodes, or\n * enter/leave visitors at a named key, leading to four permutations of\n * visitor API:\n *\n * 1) Named visitors triggered when entering a node a specific kind.\n *\n *     visit(ast, {\n *       Kind(node) {\n *         // enter the \"Kind\" node\n *       }\n *     })\n *\n * 2) Named visitors that trigger upon entering and leaving a node of\n *    a specific kind.\n *\n *     visit(ast, {\n *       Kind: {\n *         enter(node) {\n *           // enter the \"Kind\" node\n *         }\n *         leave(node) {\n *           // leave the \"Kind\" node\n *         }\n *       }\n *     })\n *\n * 3) Generic visitors that trigger upon entering and leaving any node.\n *\n *     visit(ast, {\n *       enter(node) {\n *         // enter any node\n *       },\n *       leave(node) {\n *         // leave any node\n *       }\n *     })\n *\n * 4) Parallel visitors for entering and leaving nodes of a specific kind.\n *\n *     visit(ast, {\n *       enter: {\n *         Kind(node) {\n *           // enter the \"Kind\" node\n *         }\n *       },\n *       leave: {\n *         Kind(node) {\n *           // leave the \"Kind\" node\n *         }\n *       }\n *     })\n */\nfunction visit(root, visitor) {\n  var visitorKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : QueryDocumentKeys;\n\n  /* eslint-disable no-undef-init */\n  var stack = undefined;\n  var inArray = Array.isArray(root);\n  var keys = [root];\n  var index = -1;\n  var edits = [];\n  var node = undefined;\n  var key = undefined;\n  var parent = undefined;\n  var path = [];\n  var ancestors = [];\n  var newRoot = root;\n  /* eslint-enable no-undef-init */\n\n  do {\n    index++;\n    var isLeaving = index === keys.length;\n    var isEdited = isLeaving && edits.length !== 0;\n    if (isLeaving) {\n      key = ancestors.length === 0 ? undefined : path[path.length - 1];\n      node = parent;\n      parent = ancestors.pop();\n      if (isEdited) {\n        if (inArray) {\n          node = node.slice();\n        } else {\n          var clone = {};\n          for (var k in node) {\n            if (node.hasOwnProperty(k)) {\n              clone[k] = node[k];\n            }\n          }\n          node = clone;\n        }\n        var editOffset = 0;\n        for (var ii = 0; ii < edits.length; ii++) {\n          var editKey = edits[ii][0];\n          var editValue = edits[ii][1];\n          if (inArray) {\n            editKey -= editOffset;\n          }\n          if (inArray && editValue === null) {\n            node.splice(editKey, 1);\n            editOffset++;\n          } else {\n            node[editKey] = editValue;\n          }\n        }\n      }\n      index = stack.index;\n      keys = stack.keys;\n      edits = stack.edits;\n      inArray = stack.inArray;\n      stack = stack.prev;\n    } else {\n      key = parent ? inArray ? index : keys[index] : undefined;\n      node = parent ? parent[key] : newRoot;\n      if (node === null || node === undefined) {\n        continue;\n      }\n      if (parent) {\n        path.push(key);\n      }\n    }\n\n    var result = void 0;\n    if (!Array.isArray(node)) {\n      if (!isNode(node)) {\n        throw new Error('Invalid AST Node: ' + JSON.stringify(node));\n      }\n      var visitFn = getVisitFn(visitor, node.kind, isLeaving);\n      if (visitFn) {\n        result = visitFn.call(visitor, node, key, parent, path, ancestors);\n\n        if (result === BREAK) {\n          break;\n        }\n\n        if (result === false) {\n          if (!isLeaving) {\n            path.pop();\n            continue;\n          }\n        } else if (result !== undefined) {\n          edits.push([key, result]);\n          if (!isLeaving) {\n            if (isNode(result)) {\n              node = result;\n            } else {\n              path.pop();\n              continue;\n            }\n          }\n        }\n      }\n    }\n\n    if (result === undefined && isEdited) {\n      edits.push([key, node]);\n    }\n\n    if (isLeaving) {\n      path.pop();\n    } else {\n      stack = { inArray: inArray, index: index, keys: keys, edits: edits, prev: stack };\n      inArray = Array.isArray(node);\n      keys = inArray ? node : visitorKeys[node.kind] || [];\n      index = -1;\n      edits = [];\n      if (parent) {\n        ancestors.push(parent);\n      }\n      parent = node;\n    }\n  } while (stack !== undefined);\n\n  if (edits.length !== 0) {\n    newRoot = edits[edits.length - 1][1];\n  }\n\n  return newRoot;\n}\n\nfunction isNode(maybeNode) {\n  return Boolean(maybeNode && typeof maybeNode.kind === 'string');\n}\n\n/**\n * Creates a new visitor instance which delegates to many visitors to run in\n * parallel. Each visitor will be visited for each node before moving on.\n *\n * If a prior visitor edits a node, no following visitors will see that node.\n */\nfunction visitInParallel(visitors) {\n  var skipping = new Array(visitors.length);\n\n  return {\n    enter: function enter(node) {\n      for (var i = 0; i < visitors.length; i++) {\n        if (!skipping[i]) {\n          var fn = getVisitFn(visitors[i], node.kind, /* isLeaving */false);\n          if (fn) {\n            var result = fn.apply(visitors[i], arguments);\n            if (result === false) {\n              skipping[i] = node;\n            } else if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined) {\n              return result;\n            }\n          }\n        }\n      }\n    },\n    leave: function leave(node) {\n      for (var i = 0; i < visitors.length; i++) {\n        if (!skipping[i]) {\n          var fn = getVisitFn(visitors[i], node.kind, /* isLeaving */true);\n          if (fn) {\n            var result = fn.apply(visitors[i], arguments);\n            if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined && result !== false) {\n              return result;\n            }\n          }\n        } else if (skipping[i] === node) {\n          skipping[i] = null;\n        }\n      }\n    }\n  };\n}\n\n/**\n * Creates a new visitor instance which maintains a provided TypeInfo instance\n * along with visiting visitor.\n */\nfunction visitWithTypeInfo(typeInfo, visitor) {\n  return {\n    enter: function enter(node) {\n      typeInfo.enter(node);\n      var fn = getVisitFn(visitor, node.kind, /* isLeaving */false);\n      if (fn) {\n        var result = fn.apply(visitor, arguments);\n        if (result !== undefined) {\n          typeInfo.leave(node);\n          if (isNode(result)) {\n            typeInfo.enter(result);\n          }\n        }\n        return result;\n      }\n    },\n    leave: function leave(node) {\n      var fn = getVisitFn(visitor, node.kind, /* isLeaving */true);\n      var result = void 0;\n      if (fn) {\n        result = fn.apply(visitor, arguments);\n      }\n      typeInfo.leave(node);\n      return result;\n    }\n  };\n}\n\n/**\n * Given a visitor instance, if it is leaving or not, and a node kind, return\n * the function the visitor runtime should call.\n */\nfunction getVisitFn(visitor, kind, isLeaving) {\n  var kindVisitor = visitor[kind];\n  if (kindVisitor) {\n    if (!isLeaving && typeof kindVisitor === 'function') {\n      // { Kind() {} }\n      return kindVisitor;\n    }\n    var kindSpecificVisitor = isLeaving ? kindVisitor.leave : kindVisitor.enter;\n    if (typeof kindSpecificVisitor === 'function') {\n      // { Kind: { enter() {}, leave() {} } }\n      return kindSpecificVisitor;\n    }\n  } else {\n    var specificVisitor = isLeaving ? visitor.leave : visitor.enter;\n    if (specificVisitor) {\n      if (typeof specificVisitor === 'function') {\n        // { enter() {}, leave() {} }\n        return specificVisitor;\n      }\n      var specificKindVisitor = specificVisitor[kind];\n      if (typeof specificKindVisitor === 'function') {\n        // { enter: { Kind() {} }, leave: { Kind() {} } }\n        return specificKindVisitor;\n      }\n    }\n  }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/language/visitor.js\n// module id = 18\n// module chunks = 0","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 19\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * The set of allowed directive location values.\n */\nvar DirectiveLocation = exports.DirectiveLocation = Object.freeze({\n  // Request Definitions\n  QUERY: 'QUERY',\n  MUTATION: 'MUTATION',\n  SUBSCRIPTION: 'SUBSCRIPTION',\n  FIELD: 'FIELD',\n  FRAGMENT_DEFINITION: 'FRAGMENT_DEFINITION',\n  FRAGMENT_SPREAD: 'FRAGMENT_SPREAD',\n  INLINE_FRAGMENT: 'INLINE_FRAGMENT',\n  // Type System Definitions\n  SCHEMA: 'SCHEMA',\n  SCALAR: 'SCALAR',\n  OBJECT: 'OBJECT',\n  FIELD_DEFINITION: 'FIELD_DEFINITION',\n  ARGUMENT_DEFINITION: 'ARGUMENT_DEFINITION',\n  INTERFACE: 'INTERFACE',\n  UNION: 'UNION',\n  ENUM: 'ENUM',\n  ENUM_VALUE: 'ENUM_VALUE',\n  INPUT_OBJECT: 'INPUT_OBJECT',\n  INPUT_FIELD_DEFINITION: 'INPUT_FIELD_DEFINITION'\n});\n\n/**\n * The enum type representing the directive location values.\n */\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/language/directiveLocation.js\n// module id = 20\n// module chunks = 0","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = find;\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction find(list, predicate) {\n  for (var i = 0; i < list.length; i++) {\n    if (predicate(list[i])) {\n      return list[i];\n    }\n  }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/jsutils/find.js\n// module id = 21\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parse = parse;\nexports.parseValue = parseValue;\nexports.parseType = parseType;\nexports.parseConstValue = parseConstValue;\nexports.parseTypeReference = parseTypeReference;\nexports.parseNamedType = parseNamedType;\n\nvar _source = require('./source');\n\nvar _error = require('../error');\n\nvar _lexer = require('./lexer');\n\nvar _kinds = require('./kinds');\n\nvar _directiveLocation = require('./directiveLocation');\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\n\n\n/**\n * Configuration options to control parser behavior\n */\nfunction parse(source, options) {\n  var sourceObj = typeof source === 'string' ? new _source.Source(source) : source;\n  if (!(sourceObj instanceof _source.Source)) {\n    throw new TypeError('Must provide Source. Received: ' + String(sourceObj));\n  }\n  var lexer = (0, _lexer.createLexer)(sourceObj, options || {});\n  return parseDocument(lexer);\n}\n\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction parseValue(source, options) {\n  var sourceObj = typeof source === 'string' ? new _source.Source(source) : source;\n  var lexer = (0, _lexer.createLexer)(sourceObj, options || {});\n  expect(lexer, _lexer.TokenKind.SOF);\n  var value = parseValueLiteral(lexer, false);\n  expect(lexer, _lexer.TokenKind.EOF);\n  return value;\n}\n\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\nfunction parseType(source, options) {\n  var sourceObj = typeof source === 'string' ? new _source.Source(source) : source;\n  var lexer = (0, _lexer.createLexer)(sourceObj, options || {});\n  expect(lexer, _lexer.TokenKind.SOF);\n  var type = parseTypeReference(lexer);\n  expect(lexer, _lexer.TokenKind.EOF);\n  return type;\n}\n\n/**\n * Converts a name lex token into a name parse node.\n */\nfunction parseName(lexer) {\n  var token = expect(lexer, _lexer.TokenKind.NAME);\n  return {\n    kind: _kinds.Kind.NAME,\n    value: token.value,\n    loc: loc(lexer, token)\n  };\n}\n\n// Implements the parsing rules in the Document section.\n\n/**\n * Document : Definition+\n */\nfunction parseDocument(lexer) {\n  var start = lexer.token;\n  expect(lexer, _lexer.TokenKind.SOF);\n  var definitions = [];\n  do {\n    definitions.push(parseDefinition(lexer));\n  } while (!skip(lexer, _lexer.TokenKind.EOF));\n\n  return {\n    kind: _kinds.Kind.DOCUMENT,\n    definitions: definitions,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * Definition :\n *   - ExecutableDefinition\n *   - TypeSystemDefinition\n */\nfunction parseDefinition(lexer) {\n  if (peek(lexer, _lexer.TokenKind.NAME)) {\n    switch (lexer.token.value) {\n      case 'query':\n      case 'mutation':\n      case 'subscription':\n      case 'fragment':\n        return parseExecutableDefinition(lexer);\n      case 'schema':\n      case 'scalar':\n      case 'type':\n      case 'interface':\n      case 'union':\n      case 'enum':\n      case 'input':\n      case 'extend':\n      case 'directive':\n        // Note: The schema definition language is an experimental addition.\n        return parseTypeSystemDefinition(lexer);\n    }\n  } else if (peek(lexer, _lexer.TokenKind.BRACE_L)) {\n    return parseExecutableDefinition(lexer);\n  } else if (peekDescription(lexer)) {\n    // Note: The schema definition language is an experimental addition.\n    return parseTypeSystemDefinition(lexer);\n  }\n\n  throw unexpected(lexer);\n}\n\n/**\n * ExecutableDefinition :\n *   - OperationDefinition\n *   - FragmentDefinition\n */\nfunction parseExecutableDefinition(lexer) {\n  if (peek(lexer, _lexer.TokenKind.NAME)) {\n    switch (lexer.token.value) {\n      case 'query':\n      case 'mutation':\n      case 'subscription':\n        return parseOperationDefinition(lexer);\n\n      case 'fragment':\n        return parseFragmentDefinition(lexer);\n    }\n  } else if (peek(lexer, _lexer.TokenKind.BRACE_L)) {\n    return parseOperationDefinition(lexer);\n  }\n\n  throw unexpected(lexer);\n}\n\n// Implements the parsing rules in the Operations section.\n\n/**\n * OperationDefinition :\n *  - SelectionSet\n *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n */\nfunction parseOperationDefinition(lexer) {\n  var start = lexer.token;\n  if (peek(lexer, _lexer.TokenKind.BRACE_L)) {\n    return {\n      kind: _kinds.Kind.OPERATION_DEFINITION,\n      operation: 'query',\n      name: undefined,\n      variableDefinitions: [],\n      directives: [],\n      selectionSet: parseSelectionSet(lexer),\n      loc: loc(lexer, start)\n    };\n  }\n  var operation = parseOperationType(lexer);\n  var name = void 0;\n  if (peek(lexer, _lexer.TokenKind.NAME)) {\n    name = parseName(lexer);\n  }\n  return {\n    kind: _kinds.Kind.OPERATION_DEFINITION,\n    operation: operation,\n    name: name,\n    variableDefinitions: parseVariableDefinitions(lexer),\n    directives: parseDirectives(lexer, false),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * OperationType : one of query mutation subscription\n */\nfunction parseOperationType(lexer) {\n  var operationToken = expect(lexer, _lexer.TokenKind.NAME);\n  switch (operationToken.value) {\n    case 'query':\n      return 'query';\n    case 'mutation':\n      return 'mutation';\n    case 'subscription':\n      return 'subscription';\n  }\n\n  throw unexpected(lexer, operationToken);\n}\n\n/**\n * VariableDefinitions : ( VariableDefinition+ )\n */\nfunction parseVariableDefinitions(lexer) {\n  return peek(lexer, _lexer.TokenKind.PAREN_L) ? many(lexer, _lexer.TokenKind.PAREN_L, parseVariableDefinition, _lexer.TokenKind.PAREN_R) : [];\n}\n\n/**\n * VariableDefinition : Variable : Type DefaultValue?\n */\nfunction parseVariableDefinition(lexer) {\n  var start = lexer.token;\n  return {\n    kind: _kinds.Kind.VARIABLE_DEFINITION,\n    variable: parseVariable(lexer),\n    type: (expect(lexer, _lexer.TokenKind.COLON), parseTypeReference(lexer)),\n    defaultValue: skip(lexer, _lexer.TokenKind.EQUALS) ? parseValueLiteral(lexer, true) : undefined,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * Variable : $ Name\n */\nfunction parseVariable(lexer) {\n  var start = lexer.token;\n  expect(lexer, _lexer.TokenKind.DOLLAR);\n  return {\n    kind: _kinds.Kind.VARIABLE,\n    name: parseName(lexer),\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * SelectionSet : { Selection+ }\n */\nfunction parseSelectionSet(lexer) {\n  var start = lexer.token;\n  return {\n    kind: _kinds.Kind.SELECTION_SET,\n    selections: many(lexer, _lexer.TokenKind.BRACE_L, parseSelection, _lexer.TokenKind.BRACE_R),\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * Selection :\n *   - Field\n *   - FragmentSpread\n *   - InlineFragment\n */\nfunction parseSelection(lexer) {\n  return peek(lexer, _lexer.TokenKind.SPREAD) ? parseFragment(lexer) : parseField(lexer);\n}\n\n/**\n * Field : Alias? Name Arguments? Directives? SelectionSet?\n *\n * Alias : Name :\n */\nfunction parseField(lexer) {\n  var start = lexer.token;\n\n  var nameOrAlias = parseName(lexer);\n  var alias = void 0;\n  var name = void 0;\n  if (skip(lexer, _lexer.TokenKind.COLON)) {\n    alias = nameOrAlias;\n    name = parseName(lexer);\n  } else {\n    name = nameOrAlias;\n  }\n\n  return {\n    kind: _kinds.Kind.FIELD,\n    alias: alias,\n    name: name,\n    arguments: parseArguments(lexer, false),\n    directives: parseDirectives(lexer, false),\n    selectionSet: peek(lexer, _lexer.TokenKind.BRACE_L) ? parseSelectionSet(lexer) : undefined,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * Arguments[Const] : ( Argument[?Const]+ )\n */\nfunction parseArguments(lexer, isConst) {\n  var item = isConst ? parseConstArgument : parseArgument;\n  return peek(lexer, _lexer.TokenKind.PAREN_L) ? many(lexer, _lexer.TokenKind.PAREN_L, item, _lexer.TokenKind.PAREN_R) : [];\n}\n\n/**\n * Argument[Const] : Name : Value[?Const]\n */\nfunction parseArgument(lexer) {\n  var start = lexer.token;\n  return {\n    kind: _kinds.Kind.ARGUMENT,\n    name: parseName(lexer),\n    value: (expect(lexer, _lexer.TokenKind.COLON), parseValueLiteral(lexer, false)),\n    loc: loc(lexer, start)\n  };\n}\n\nfunction parseConstArgument(lexer) {\n  var start = lexer.token;\n  return {\n    kind: _kinds.Kind.ARGUMENT,\n    name: parseName(lexer),\n    value: (expect(lexer, _lexer.TokenKind.COLON), parseConstValue(lexer)),\n    loc: loc(lexer, start)\n  };\n}\n\n// Implements the parsing rules in the Fragments section.\n\n/**\n * Corresponds to both FragmentSpread and InlineFragment in the spec.\n *\n * FragmentSpread : ... FragmentName Directives?\n *\n * InlineFragment : ... TypeCondition? Directives? SelectionSet\n */\nfunction parseFragment(lexer) {\n  var start = lexer.token;\n  expect(lexer, _lexer.TokenKind.SPREAD);\n  if (peek(lexer, _lexer.TokenKind.NAME) && lexer.token.value !== 'on') {\n    return {\n      kind: _kinds.Kind.FRAGMENT_SPREAD,\n      name: parseFragmentName(lexer),\n      directives: parseDirectives(lexer, false),\n      loc: loc(lexer, start)\n    };\n  }\n  var typeCondition = void 0;\n  if (lexer.token.value === 'on') {\n    lexer.advance();\n    typeCondition = parseNamedType(lexer);\n  }\n  return {\n    kind: _kinds.Kind.INLINE_FRAGMENT,\n    typeCondition: typeCondition,\n    directives: parseDirectives(lexer, false),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * FragmentDefinition :\n *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n *\n * TypeCondition : NamedType\n */\nfunction parseFragmentDefinition(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'fragment');\n  // Experimental support for defining variables within fragments changes\n  // the grammar of FragmentDefinition:\n  //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n  if (lexer.options.experimentalFragmentVariables) {\n    return {\n      kind: _kinds.Kind.FRAGMENT_DEFINITION,\n      name: parseFragmentName(lexer),\n      variableDefinitions: parseVariableDefinitions(lexer),\n      typeCondition: (expectKeyword(lexer, 'on'), parseNamedType(lexer)),\n      directives: parseDirectives(lexer, false),\n      selectionSet: parseSelectionSet(lexer),\n      loc: loc(lexer, start)\n    };\n  }\n  return {\n    kind: _kinds.Kind.FRAGMENT_DEFINITION,\n    name: parseFragmentName(lexer),\n    typeCondition: (expectKeyword(lexer, 'on'), parseNamedType(lexer)),\n    directives: parseDirectives(lexer, false),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * FragmentName : Name but not `on`\n */\nfunction parseFragmentName(lexer) {\n  if (lexer.token.value === 'on') {\n    throw unexpected(lexer);\n  }\n  return parseName(lexer);\n}\n\n// Implements the parsing rules in the Values section.\n\n/**\n * Value[Const] :\n *   - [~Const] Variable\n *   - IntValue\n *   - FloatValue\n *   - StringValue\n *   - BooleanValue\n *   - NullValue\n *   - EnumValue\n *   - ListValue[?Const]\n *   - ObjectValue[?Const]\n *\n * BooleanValue : one of `true` `false`\n *\n * NullValue : `null`\n *\n * EnumValue : Name but not `true`, `false` or `null`\n */\nfunction parseValueLiteral(lexer, isConst) {\n  var token = lexer.token;\n  switch (token.kind) {\n    case _lexer.TokenKind.BRACKET_L:\n      return parseList(lexer, isConst);\n    case _lexer.TokenKind.BRACE_L:\n      return parseObject(lexer, isConst);\n    case _lexer.TokenKind.INT:\n      lexer.advance();\n      return {\n        kind: _kinds.Kind.INT,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n    case _lexer.TokenKind.FLOAT:\n      lexer.advance();\n      return {\n        kind: _kinds.Kind.FLOAT,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n    case _lexer.TokenKind.STRING:\n    case _lexer.TokenKind.BLOCK_STRING:\n      return parseStringLiteral(lexer);\n    case _lexer.TokenKind.NAME:\n      if (token.value === 'true' || token.value === 'false') {\n        lexer.advance();\n        return {\n          kind: _kinds.Kind.BOOLEAN,\n          value: token.value === 'true',\n          loc: loc(lexer, token)\n        };\n      } else if (token.value === 'null') {\n        lexer.advance();\n        return {\n          kind: _kinds.Kind.NULL,\n          loc: loc(lexer, token)\n        };\n      }\n      lexer.advance();\n      return {\n        kind: _kinds.Kind.ENUM,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n    case _lexer.TokenKind.DOLLAR:\n      if (!isConst) {\n        return parseVariable(lexer);\n      }\n      break;\n  }\n  throw unexpected(lexer);\n}\n\nfunction parseStringLiteral(lexer) {\n  var token = lexer.token;\n  lexer.advance();\n  return {\n    kind: _kinds.Kind.STRING,\n    value: token.value,\n    block: token.kind === _lexer.TokenKind.BLOCK_STRING,\n    loc: loc(lexer, token)\n  };\n}\n\nfunction parseConstValue(lexer) {\n  return parseValueLiteral(lexer, true);\n}\n\nfunction parseValueValue(lexer) {\n  return parseValueLiteral(lexer, false);\n}\n\n/**\n * ListValue[Const] :\n *   - [ ]\n *   - [ Value[?Const]+ ]\n */\nfunction parseList(lexer, isConst) {\n  var start = lexer.token;\n  var item = isConst ? parseConstValue : parseValueValue;\n  return {\n    kind: _kinds.Kind.LIST,\n    values: any(lexer, _lexer.TokenKind.BRACKET_L, item, _lexer.TokenKind.BRACKET_R),\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * ObjectValue[Const] :\n *   - { }\n *   - { ObjectField[?Const]+ }\n */\nfunction parseObject(lexer, isConst) {\n  var start = lexer.token;\n  expect(lexer, _lexer.TokenKind.BRACE_L);\n  var fields = [];\n  while (!skip(lexer, _lexer.TokenKind.BRACE_R)) {\n    fields.push(parseObjectField(lexer, isConst));\n  }\n  return {\n    kind: _kinds.Kind.OBJECT,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * ObjectField[Const] : Name : Value[?Const]\n */\nfunction parseObjectField(lexer, isConst) {\n  var start = lexer.token;\n  return {\n    kind: _kinds.Kind.OBJECT_FIELD,\n    name: parseName(lexer),\n    value: (expect(lexer, _lexer.TokenKind.COLON), parseValueLiteral(lexer, isConst)),\n    loc: loc(lexer, start)\n  };\n}\n\n// Implements the parsing rules in the Directives section.\n\n/**\n * Directives[Const] : Directive[?Const]+\n */\nfunction parseDirectives(lexer, isConst) {\n  var directives = [];\n  while (peek(lexer, _lexer.TokenKind.AT)) {\n    directives.push(parseDirective(lexer, isConst));\n  }\n  return directives;\n}\n\n/**\n * Directive[Const] : @ Name Arguments[?Const]?\n */\nfunction parseDirective(lexer, isConst) {\n  var start = lexer.token;\n  expect(lexer, _lexer.TokenKind.AT);\n  return {\n    kind: _kinds.Kind.DIRECTIVE,\n    name: parseName(lexer),\n    arguments: parseArguments(lexer, isConst),\n    loc: loc(lexer, start)\n  };\n}\n\n// Implements the parsing rules in the Types section.\n\n/**\n * Type :\n *   - NamedType\n *   - ListType\n *   - NonNullType\n */\nfunction parseTypeReference(lexer) {\n  var start = lexer.token;\n  var type = void 0;\n  if (skip(lexer, _lexer.TokenKind.BRACKET_L)) {\n    type = parseTypeReference(lexer);\n    expect(lexer, _lexer.TokenKind.BRACKET_R);\n    type = {\n      kind: _kinds.Kind.LIST_TYPE,\n      type: type,\n      loc: loc(lexer, start)\n    };\n  } else {\n    type = parseNamedType(lexer);\n  }\n  if (skip(lexer, _lexer.TokenKind.BANG)) {\n    return {\n      kind: _kinds.Kind.NON_NULL_TYPE,\n      type: type,\n      loc: loc(lexer, start)\n    };\n  }\n  return type;\n}\n\n/**\n * NamedType : Name\n */\nfunction parseNamedType(lexer) {\n  var start = lexer.token;\n  return {\n    kind: _kinds.Kind.NAMED_TYPE,\n    name: parseName(lexer),\n    loc: loc(lexer, start)\n  };\n}\n\n// Implements the parsing rules in the Type Definition section.\n\n/**\n * TypeSystemDefinition :\n *   - SchemaDefinition\n *   - TypeDefinition\n *   - TypeExtension\n *   - DirectiveDefinition\n *\n * TypeDefinition :\n *   - ScalarTypeDefinition\n *   - ObjectTypeDefinition\n *   - InterfaceTypeDefinition\n *   - UnionTypeDefinition\n *   - EnumTypeDefinition\n *   - InputObjectTypeDefinition\n */\nfunction parseTypeSystemDefinition(lexer) {\n  // Many definitions begin with a description and require a lookahead.\n  var keywordToken = peekDescription(lexer) ? lexer.lookahead() : lexer.token;\n\n  if (keywordToken.kind === _lexer.TokenKind.NAME) {\n    switch (keywordToken.value) {\n      case 'schema':\n        return parseSchemaDefinition(lexer);\n      case 'scalar':\n        return parseScalarTypeDefinition(lexer);\n      case 'type':\n        return parseObjectTypeDefinition(lexer);\n      case 'interface':\n        return parseInterfaceTypeDefinition(lexer);\n      case 'union':\n        return parseUnionTypeDefinition(lexer);\n      case 'enum':\n        return parseEnumTypeDefinition(lexer);\n      case 'input':\n        return parseInputObjectTypeDefinition(lexer);\n      case 'extend':\n        return parseTypeExtension(lexer);\n      case 'directive':\n        return parseDirectiveDefinition(lexer);\n    }\n  }\n\n  throw unexpected(lexer, keywordToken);\n}\n\nfunction peekDescription(lexer) {\n  return peek(lexer, _lexer.TokenKind.STRING) || peek(lexer, _lexer.TokenKind.BLOCK_STRING);\n}\n\n/**\n * Description : StringValue\n */\nfunction parseDescription(lexer) {\n  if (peekDescription(lexer)) {\n    return parseStringLiteral(lexer);\n  }\n}\n\n/**\n * SchemaDefinition : schema Directives[Const]? { OperationTypeDefinition+ }\n */\nfunction parseSchemaDefinition(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'schema');\n  var directives = parseDirectives(lexer, true);\n  var operationTypes = many(lexer, _lexer.TokenKind.BRACE_L, parseOperationTypeDefinition, _lexer.TokenKind.BRACE_R);\n  return {\n    kind: _kinds.Kind.SCHEMA_DEFINITION,\n    directives: directives,\n    operationTypes: operationTypes,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * OperationTypeDefinition : OperationType : NamedType\n */\nfunction parseOperationTypeDefinition(lexer) {\n  var start = lexer.token;\n  var operation = parseOperationType(lexer);\n  expect(lexer, _lexer.TokenKind.COLON);\n  var type = parseNamedType(lexer);\n  return {\n    kind: _kinds.Kind.OPERATION_TYPE_DEFINITION,\n    operation: operation,\n    type: type,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n */\nfunction parseScalarTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'scalar');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: _kinds.Kind.SCALAR_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * ObjectTypeDefinition :\n *   Description?\n *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n */\nfunction parseObjectTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'type');\n  var name = parseName(lexer);\n  var interfaces = parseImplementsInterfaces(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n  return {\n    kind: _kinds.Kind.OBJECT_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    interfaces: interfaces,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * ImplementsInterfaces :\n *   - implements `&`? NamedType\n *   - ImplementsInterfaces & NamedType\n */\nfunction parseImplementsInterfaces(lexer) {\n  var types = [];\n  if (lexer.token.value === 'implements') {\n    lexer.advance();\n    // Optional leading ampersand\n    skip(lexer, _lexer.TokenKind.AMP);\n    do {\n      types.push(parseNamedType(lexer));\n    } while (skip(lexer, _lexer.TokenKind.AMP) ||\n    // Legacy support for the SDL?\n    lexer.options.allowLegacySDLImplementsInterfaces && peek(lexer, _lexer.TokenKind.NAME));\n  }\n  return types;\n}\n\n/**\n * FieldsDefinition : { FieldDefinition+ }\n */\nfunction parseFieldsDefinition(lexer) {\n  // Legacy support for the SDL?\n  if (lexer.options.allowLegacySDLEmptyFields && peek(lexer, _lexer.TokenKind.BRACE_L) && lexer.lookahead().kind === _lexer.TokenKind.BRACE_R) {\n    lexer.advance();\n    lexer.advance();\n    return [];\n  }\n  return peek(lexer, _lexer.TokenKind.BRACE_L) ? many(lexer, _lexer.TokenKind.BRACE_L, parseFieldDefinition, _lexer.TokenKind.BRACE_R) : [];\n}\n\n/**\n * FieldDefinition :\n *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n */\nfunction parseFieldDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  var name = parseName(lexer);\n  var args = parseArgumentDefs(lexer);\n  expect(lexer, _lexer.TokenKind.COLON);\n  var type = parseTypeReference(lexer);\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: _kinds.Kind.FIELD_DEFINITION,\n    description: description,\n    name: name,\n    arguments: args,\n    type: type,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * ArgumentsDefinition : ( InputValueDefinition+ )\n */\nfunction parseArgumentDefs(lexer) {\n  if (!peek(lexer, _lexer.TokenKind.PAREN_L)) {\n    return [];\n  }\n  return many(lexer, _lexer.TokenKind.PAREN_L, parseInputValueDef, _lexer.TokenKind.PAREN_R);\n}\n\n/**\n * InputValueDefinition :\n *   - Description? Name : Type DefaultValue? Directives[Const]?\n */\nfunction parseInputValueDef(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  var name = parseName(lexer);\n  expect(lexer, _lexer.TokenKind.COLON);\n  var type = parseTypeReference(lexer);\n  var defaultValue = void 0;\n  if (skip(lexer, _lexer.TokenKind.EQUALS)) {\n    defaultValue = parseConstValue(lexer);\n  }\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: _kinds.Kind.INPUT_VALUE_DEFINITION,\n    description: description,\n    name: name,\n    type: type,\n    defaultValue: defaultValue,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * InterfaceTypeDefinition :\n *   - Description? interface Name Directives[Const]? FieldsDefinition?\n */\nfunction parseInterfaceTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'interface');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n  return {\n    kind: _kinds.Kind.INTERFACE_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * UnionTypeDefinition :\n *   - Description? union Name Directives[Const]? UnionMemberTypes?\n */\nfunction parseUnionTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'union');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var types = parseUnionMemberTypes(lexer);\n  return {\n    kind: _kinds.Kind.UNION_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    types: types,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * UnionMemberTypes :\n *   - = `|`? NamedType\n *   - UnionMemberTypes | NamedType\n */\nfunction parseUnionMemberTypes(lexer) {\n  var types = [];\n  if (skip(lexer, _lexer.TokenKind.EQUALS)) {\n    // Optional leading pipe\n    skip(lexer, _lexer.TokenKind.PIPE);\n    do {\n      types.push(parseNamedType(lexer));\n    } while (skip(lexer, _lexer.TokenKind.PIPE));\n  }\n  return types;\n}\n\n/**\n * EnumTypeDefinition :\n *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n */\nfunction parseEnumTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'enum');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var values = parseEnumValuesDefinition(lexer);\n  return {\n    kind: _kinds.Kind.ENUM_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    values: values,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * EnumValuesDefinition : { EnumValueDefinition+ }\n */\nfunction parseEnumValuesDefinition(lexer) {\n  return peek(lexer, _lexer.TokenKind.BRACE_L) ? many(lexer, _lexer.TokenKind.BRACE_L, parseEnumValueDefinition, _lexer.TokenKind.BRACE_R) : [];\n}\n\n/**\n * EnumValueDefinition : Description? EnumValue Directives[Const]?\n *\n * EnumValue : Name\n */\nfunction parseEnumValueDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: _kinds.Kind.ENUM_VALUE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * InputObjectTypeDefinition :\n *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n */\nfunction parseInputObjectTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'input');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseInputFieldsDefinition(lexer);\n  return {\n    kind: _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * InputFieldsDefinition : { InputValueDefinition+ }\n */\nfunction parseInputFieldsDefinition(lexer) {\n  return peek(lexer, _lexer.TokenKind.BRACE_L) ? many(lexer, _lexer.TokenKind.BRACE_L, parseInputValueDef, _lexer.TokenKind.BRACE_R) : [];\n}\n\n/**\n * TypeExtension :\n *   - ScalarTypeExtension\n *   - ObjectTypeExtension\n *   - InterfaceTypeExtension\n *   - UnionTypeExtension\n *   - EnumTypeExtension\n *   - InputObjectTypeDefinition\n */\nfunction parseTypeExtension(lexer) {\n  var keywordToken = lexer.lookahead();\n\n  if (keywordToken.kind === _lexer.TokenKind.NAME) {\n    switch (keywordToken.value) {\n      case 'scalar':\n        return parseScalarTypeExtension(lexer);\n      case 'type':\n        return parseObjectTypeExtension(lexer);\n      case 'interface':\n        return parseInterfaceTypeExtension(lexer);\n      case 'union':\n        return parseUnionTypeExtension(lexer);\n      case 'enum':\n        return parseEnumTypeExtension(lexer);\n      case 'input':\n        return parseInputObjectTypeExtension(lexer);\n    }\n  }\n\n  throw unexpected(lexer, keywordToken);\n}\n\n/**\n * ScalarTypeExtension :\n *   - extend scalar Name Directives[Const]\n */\nfunction parseScalarTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'scalar');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  if (directives.length === 0) {\n    throw unexpected(lexer);\n  }\n  return {\n    kind: _kinds.Kind.SCALAR_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * ObjectTypeExtension :\n *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n *  - extend type Name ImplementsInterfaces? Directives[Const]\n *  - extend type Name ImplementsInterfaces\n */\nfunction parseObjectTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'type');\n  var name = parseName(lexer);\n  var interfaces = parseImplementsInterfaces(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n  if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n    throw unexpected(lexer);\n  }\n  return {\n    kind: _kinds.Kind.OBJECT_TYPE_EXTENSION,\n    name: name,\n    interfaces: interfaces,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * InterfaceTypeExtension :\n *   - extend interface Name Directives[Const]? FieldsDefinition\n *   - extend interface Name Directives[Const]\n */\nfunction parseInterfaceTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'interface');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n  if (directives.length === 0 && fields.length === 0) {\n    throw unexpected(lexer);\n  }\n  return {\n    kind: _kinds.Kind.INTERFACE_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * UnionTypeExtension :\n *   - extend union Name Directives[Const]? UnionMemberTypes\n *   - extend union Name Directives[Const]\n */\nfunction parseUnionTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'union');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var types = parseUnionMemberTypes(lexer);\n  if (directives.length === 0 && types.length === 0) {\n    throw unexpected(lexer);\n  }\n  return {\n    kind: _kinds.Kind.UNION_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    types: types,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * EnumTypeExtension :\n *   - extend enum Name Directives[Const]? EnumValuesDefinition\n *   - extend enum Name Directives[Const]\n */\nfunction parseEnumTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'enum');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var values = parseEnumValuesDefinition(lexer);\n  if (directives.length === 0 && values.length === 0) {\n    throw unexpected(lexer);\n  }\n  return {\n    kind: _kinds.Kind.ENUM_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    values: values,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * InputObjectTypeExtension :\n *   - extend input Name Directives[Const]? InputFieldsDefinition\n *   - extend input Name Directives[Const]\n */\nfunction parseInputObjectTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'input');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseInputFieldsDefinition(lexer);\n  if (directives.length === 0 && fields.length === 0) {\n    throw unexpected(lexer);\n  }\n  return {\n    kind: _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * DirectiveDefinition :\n *   - Description? directive @ Name ArgumentsDefinition? on DirectiveLocations\n */\nfunction parseDirectiveDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'directive');\n  expect(lexer, _lexer.TokenKind.AT);\n  var name = parseName(lexer);\n  var args = parseArgumentDefs(lexer);\n  expectKeyword(lexer, 'on');\n  var locations = parseDirectiveLocations(lexer);\n  return {\n    kind: _kinds.Kind.DIRECTIVE_DEFINITION,\n    description: description,\n    name: name,\n    arguments: args,\n    locations: locations,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * DirectiveLocations :\n *   - `|`? DirectiveLocation\n *   - DirectiveLocations | DirectiveLocation\n */\nfunction parseDirectiveLocations(lexer) {\n  // Optional leading pipe\n  skip(lexer, _lexer.TokenKind.PIPE);\n  var locations = [];\n  do {\n    locations.push(parseDirectiveLocation(lexer));\n  } while (skip(lexer, _lexer.TokenKind.PIPE));\n  return locations;\n}\n\n/*\n * DirectiveLocation :\n *   - ExecutableDirectiveLocation\n *   - TypeSystemDirectiveLocation\n *\n * ExecutableDirectiveLocation : one of\n *   `QUERY`\n *   `MUTATION`\n *   `SUBSCRIPTION`\n *   `FIELD`\n *   `FRAGMENT_DEFINITION`\n *   `FRAGMENT_SPREAD`\n *   `INLINE_FRAGMENT`\n *\n * TypeSystemDirectiveLocation : one of\n *   `SCHEMA`\n *   `SCALAR`\n *   `OBJECT`\n *   `FIELD_DEFINITION`\n *   `ARGUMENT_DEFINITION`\n *   `INTERFACE`\n *   `UNION`\n *   `ENUM`\n *   `ENUM_VALUE`\n *   `INPUT_OBJECT`\n *   `INPUT_FIELD_DEFINITION`\n */\nfunction parseDirectiveLocation(lexer) {\n  var start = lexer.token;\n  var name = parseName(lexer);\n  if (_directiveLocation.DirectiveLocation.hasOwnProperty(name.value)) {\n    return name;\n  }\n  throw unexpected(lexer, start);\n}\n\n// Core parsing utility functions\n\n/**\n * Returns a location object, used to identify the place in\n * the source that created a given parsed object.\n */\nfunction loc(lexer, startToken) {\n  if (!lexer.options.noLocation) {\n    return new Loc(startToken, lexer.lastToken, lexer.source);\n  }\n}\n\nfunction Loc(startToken, endToken, source) {\n  this.start = startToken.start;\n  this.end = endToken.end;\n  this.startToken = startToken;\n  this.endToken = endToken;\n  this.source = source;\n}\n\n// Print a simplified form when appearing in JSON/util.inspect.\nLoc.prototype.toJSON = Loc.prototype.inspect = function toJSON() {\n  return { start: this.start, end: this.end };\n};\n\n/**\n * Determines if the next token is of a given kind\n */\nfunction peek(lexer, kind) {\n  return lexer.token.kind === kind;\n}\n\n/**\n * If the next token is of the given kind, return true after advancing\n * the lexer. Otherwise, do not change the parser state and return false.\n */\nfunction skip(lexer, kind) {\n  var match = lexer.token.kind === kind;\n  if (match) {\n    lexer.advance();\n  }\n  return match;\n}\n\n/**\n * If the next token is of the given kind, return that token after advancing\n * the lexer. Otherwise, do not change the parser state and throw an error.\n */\nfunction expect(lexer, kind) {\n  var token = lexer.token;\n  if (token.kind === kind) {\n    lexer.advance();\n    return token;\n  }\n  throw (0, _error.syntaxError)(lexer.source, token.start, 'Expected ' + kind + ', found ' + (0, _lexer.getTokenDesc)(token));\n}\n\n/**\n * If the next token is a keyword with the given value, return that token after\n * advancing the lexer. Otherwise, do not change the parser state and return\n * false.\n */\nfunction expectKeyword(lexer, value) {\n  var token = lexer.token;\n  if (token.kind === _lexer.TokenKind.NAME && token.value === value) {\n    lexer.advance();\n    return token;\n  }\n  throw (0, _error.syntaxError)(lexer.source, token.start, 'Expected \"' + value + '\", found ' + (0, _lexer.getTokenDesc)(token));\n}\n\n/**\n * Helper function for creating an error when an unexpected lexed token\n * is encountered.\n */\nfunction unexpected(lexer, atToken) {\n  var token = atToken || lexer.token;\n  return (0, _error.syntaxError)(lexer.source, token.start, 'Unexpected ' + (0, _lexer.getTokenDesc)(token));\n}\n\n/**\n * Returns a possibly empty list of parse nodes, determined by\n * the parseFn. This list begins with a lex token of openKind\n * and ends with a lex token of closeKind. Advances the parser\n * to the next lex token after the closing token.\n */\nfunction any(lexer, openKind, parseFn, closeKind) {\n  expect(lexer, openKind);\n  var nodes = [];\n  while (!skip(lexer, closeKind)) {\n    nodes.push(parseFn(lexer));\n  }\n  return nodes;\n}\n\n/**\n * Returns a non-empty list of parse nodes, determined by\n * the parseFn. This list begins with a lex token of openKind\n * and ends with a lex token of closeKind. Advances the parser\n * to the next lex token after the closing token.\n */\nfunction many(lexer, openKind, parseFn, closeKind) {\n  expect(lexer, openKind);\n  var nodes = [parseFn(lexer)];\n  while (!skip(lexer, closeKind)) {\n    nodes.push(parseFn(lexer));\n  }\n  return nodes;\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/language/parser.js\n// module id = 22\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TypeInfo = undefined;\n\nvar _kinds = require('../language/kinds');\n\nvar _definition = require('../type/definition');\n\nvar _introspection = require('../type/introspection');\n\nvar _typeFromAST = require('./typeFromAST');\n\nvar _find = require('../jsutils/find');\n\nvar _find2 = _interopRequireDefault(_find);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /**\n                                                                                                                                                           * Copyright (c) 2015-present, Facebook, Inc.\n                                                                                                                                                           *\n                                                                                                                                                           * This source code is licensed under the MIT license found in the\n                                                                                                                                                           * LICENSE file in the root directory of this source tree.\n                                                                                                                                                           *\n                                                                                                                                                           *  strict\n                                                                                                                                                           */\n\n/**\n * TypeInfo is a utility class which, given a GraphQL schema, can keep track\n * of the current field and type definitions at any point in a GraphQL document\n * AST during a recursive descent by calling `enter(node)` and `leave(node)`.\n */\nvar TypeInfo = exports.TypeInfo = function () {\n  function TypeInfo(schema,\n  // NOTE: this experimental optional second parameter is only needed in order\n  // to support non-spec-compliant codebases. You should never need to use it.\n  getFieldDefFn,\n  // Initial type may be provided in rare cases to facilitate traversals\n  initialType) {\n    _classCallCheck(this, TypeInfo);\n\n    this._schema = schema;\n    this._typeStack = [];\n    this._parentTypeStack = [];\n    this._inputTypeStack = [];\n    this._fieldDefStack = [];\n    this._directive = null;\n    this._argument = null;\n    this._enumValue = null;\n    this._getFieldDef = getFieldDefFn || getFieldDef;\n    if (initialType) {\n      if ((0, _definition.isInputType)(initialType)) {\n        this._inputTypeStack.push(initialType);\n      }\n      if ((0, _definition.isCompositeType)(initialType)) {\n        this._parentTypeStack.push(initialType);\n      }\n      if ((0, _definition.isOutputType)(initialType)) {\n        this._typeStack.push(initialType);\n      }\n    }\n  }\n\n  TypeInfo.prototype.getType = function getType() {\n    if (this._typeStack.length > 0) {\n      return this._typeStack[this._typeStack.length - 1];\n    }\n  };\n\n  TypeInfo.prototype.getParentType = function getParentType() {\n    if (this._parentTypeStack.length > 0) {\n      return this._parentTypeStack[this._parentTypeStack.length - 1];\n    }\n  };\n\n  TypeInfo.prototype.getInputType = function getInputType() {\n    if (this._inputTypeStack.length > 0) {\n      return this._inputTypeStack[this._inputTypeStack.length - 1];\n    }\n  };\n\n  TypeInfo.prototype.getParentInputType = function getParentInputType() {\n    if (this._inputTypeStack.length > 1) {\n      return this._inputTypeStack[this._inputTypeStack.length - 2];\n    }\n  };\n\n  TypeInfo.prototype.getFieldDef = function getFieldDef() {\n    if (this._fieldDefStack.length > 0) {\n      return this._fieldDefStack[this._fieldDefStack.length - 1];\n    }\n  };\n\n  TypeInfo.prototype.getDirective = function getDirective() {\n    return this._directive;\n  };\n\n  TypeInfo.prototype.getArgument = function getArgument() {\n    return this._argument;\n  };\n\n  TypeInfo.prototype.getEnumValue = function getEnumValue() {\n    return this._enumValue;\n  };\n\n  // Flow does not yet handle this case.\n\n\n  TypeInfo.prototype.enter = function enter(node /* ASTNode */) {\n    var schema = this._schema;\n    // Note: many of the types below are explicitly typed as \"mixed\" to drop\n    // any assumptions of a valid schema to ensure runtime types are properly\n    // checked before continuing since TypeInfo is used as part of validation\n    // which occurs before guarantees of schema and document validity.\n    switch (node.kind) {\n      case _kinds.Kind.SELECTION_SET:\n        var namedType = (0, _definition.getNamedType)(this.getType());\n        this._parentTypeStack.push((0, _definition.isCompositeType)(namedType) ? namedType : undefined);\n        break;\n      case _kinds.Kind.FIELD:\n        var parentType = this.getParentType();\n        var fieldDef = void 0;\n        var fieldType = void 0;\n        if (parentType) {\n          fieldDef = this._getFieldDef(schema, parentType, node);\n          if (fieldDef) {\n            fieldType = fieldDef.type;\n          }\n        }\n        this._fieldDefStack.push(fieldDef);\n        this._typeStack.push((0, _definition.isOutputType)(fieldType) ? fieldType : undefined);\n        break;\n      case _kinds.Kind.DIRECTIVE:\n        this._directive = schema.getDirective(node.name.value);\n        break;\n      case _kinds.Kind.OPERATION_DEFINITION:\n        var type = void 0;\n        if (node.operation === 'query') {\n          type = schema.getQueryType();\n        } else if (node.operation === 'mutation') {\n          type = schema.getMutationType();\n        } else if (node.operation === 'subscription') {\n          type = schema.getSubscriptionType();\n        }\n        this._typeStack.push((0, _definition.isObjectType)(type) ? type : undefined);\n        break;\n      case _kinds.Kind.INLINE_FRAGMENT:\n      case _kinds.Kind.FRAGMENT_DEFINITION:\n        var typeConditionAST = node.typeCondition;\n        var outputType = typeConditionAST ? (0, _typeFromAST.typeFromAST)(schema, typeConditionAST) : (0, _definition.getNamedType)(this.getType());\n        this._typeStack.push((0, _definition.isOutputType)(outputType) ? outputType : undefined);\n        break;\n      case _kinds.Kind.VARIABLE_DEFINITION:\n        var inputType = (0, _typeFromAST.typeFromAST)(schema, node.type);\n        this._inputTypeStack.push((0, _definition.isInputType)(inputType) ? inputType : undefined);\n        break;\n      case _kinds.Kind.ARGUMENT:\n        var argDef = void 0;\n        var argType = void 0;\n        var fieldOrDirective = this.getDirective() || this.getFieldDef();\n        if (fieldOrDirective) {\n          argDef = (0, _find2.default)(fieldOrDirective.args, function (arg) {\n            return arg.name === node.name.value;\n          });\n          if (argDef) {\n            argType = argDef.type;\n          }\n        }\n        this._argument = argDef;\n        this._inputTypeStack.push((0, _definition.isInputType)(argType) ? argType : undefined);\n        break;\n      case _kinds.Kind.LIST:\n        var listType = (0, _definition.getNullableType)(this.getInputType());\n        var itemType = (0, _definition.isListType)(listType) ? listType.ofType : listType;\n        this._inputTypeStack.push((0, _definition.isInputType)(itemType) ? itemType : undefined);\n        break;\n      case _kinds.Kind.OBJECT_FIELD:\n        var objectType = (0, _definition.getNamedType)(this.getInputType());\n        var inputFieldType = void 0;\n        if ((0, _definition.isInputObjectType)(objectType)) {\n          var inputField = objectType.getFields()[node.name.value];\n          if (inputField) {\n            inputFieldType = inputField.type;\n          }\n        }\n        this._inputTypeStack.push((0, _definition.isInputType)(inputFieldType) ? inputFieldType : undefined);\n        break;\n      case _kinds.Kind.ENUM:\n        var enumType = (0, _definition.getNamedType)(this.getInputType());\n        var enumValue = void 0;\n        if ((0, _definition.isEnumType)(enumType)) {\n          enumValue = enumType.getValue(node.value);\n        }\n        this._enumValue = enumValue;\n        break;\n    }\n  };\n\n  TypeInfo.prototype.leave = function leave(node) {\n    switch (node.kind) {\n      case _kinds.Kind.SELECTION_SET:\n        this._parentTypeStack.pop();\n        break;\n      case _kinds.Kind.FIELD:\n        this._fieldDefStack.pop();\n        this._typeStack.pop();\n        break;\n      case _kinds.Kind.DIRECTIVE:\n        this._directive = null;\n        break;\n      case _kinds.Kind.OPERATION_DEFINITION:\n      case _kinds.Kind.INLINE_FRAGMENT:\n      case _kinds.Kind.FRAGMENT_DEFINITION:\n        this._typeStack.pop();\n        break;\n      case _kinds.Kind.VARIABLE_DEFINITION:\n        this._inputTypeStack.pop();\n        break;\n      case _kinds.Kind.ARGUMENT:\n        this._argument = null;\n        this._inputTypeStack.pop();\n        break;\n      case _kinds.Kind.LIST:\n      case _kinds.Kind.OBJECT_FIELD:\n        this._inputTypeStack.pop();\n        break;\n      case _kinds.Kind.ENUM:\n        this._enumValue = null;\n        break;\n    }\n  };\n\n  return TypeInfo;\n}();\n\n/**\n * Not exactly the same as the executor's definition of getFieldDef, in this\n * statically evaluated environment we do not always have an Object type,\n * and need to handle Interface and Union types.\n */\n\n\nfunction getFieldDef(schema, parentType, fieldNode) {\n  var name = fieldNode.name.value;\n  if (name === _introspection.SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return _introspection.SchemaMetaFieldDef;\n  }\n  if (name === _introspection.TypeMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return _introspection.TypeMetaFieldDef;\n  }\n  if (name === _introspection.TypeNameMetaFieldDef.name && (0, _definition.isCompositeType)(parentType)) {\n    return _introspection.TypeNameMetaFieldDef;\n  }\n  if ((0, _definition.isObjectType)(parentType) || (0, _definition.isInterfaceType)(parentType)) {\n    return parentType.getFields()[name];\n  }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/utilities/TypeInfo.js\n// module id = 23\n// module chunks = 0","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = suggestionList;\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * Given an invalid input string and a list of valid options, returns a filtered\n * list of valid options sorted based on their similarity with the input.\n */\nfunction suggestionList(input, options) {\n  var optionsByDistance = Object.create(null);\n  var oLength = options.length;\n  var inputThreshold = input.length / 2;\n  for (var i = 0; i < oLength; i++) {\n    var distance = lexicalDistance(input, options[i]);\n    var threshold = Math.max(inputThreshold, options[i].length / 2, 1);\n    if (distance <= threshold) {\n      optionsByDistance[options[i]] = distance;\n    }\n  }\n  return Object.keys(optionsByDistance).sort(function (a, b) {\n    return optionsByDistance[a] - optionsByDistance[b];\n  });\n}\n\n/**\n * Computes the lexical distance between strings A and B.\n *\n * The \"distance\" between two strings is given by counting the minimum number\n * of edits needed to transform string A into string B. An edit can be an\n * insertion, deletion, or substitution of a single character, or a swap of two\n * adjacent characters.\n *\n * Includes a custom alteration from Damerau-Levenshtein to treat case changes\n * as a single edit which helps identify mis-cased values with an edit distance\n * of 1.\n *\n * This distance can be useful for detecting typos in input or sorting\n *\n * @param {string} a\n * @param {string} b\n * @return {int} distance in number of edits\n */\nfunction lexicalDistance(aStr, bStr) {\n  if (aStr === bStr) {\n    return 0;\n  }\n\n  var i = void 0;\n  var j = void 0;\n  var d = [];\n  var a = aStr.toLowerCase();\n  var b = bStr.toLowerCase();\n  var aLength = a.length;\n  var bLength = b.length;\n\n  // Any case change counts as a single edit\n  if (a === b) {\n    return 1;\n  }\n\n  for (i = 0; i <= aLength; i++) {\n    d[i] = [i];\n  }\n\n  for (j = 1; j <= bLength; j++) {\n    d[0][j] = j;\n  }\n\n  for (i = 1; i <= aLength; i++) {\n    for (j = 1; j <= bLength; j++) {\n      var cost = a[i - 1] === b[j - 1] ? 0 : 1;\n\n      d[i][j] = Math.min(d[i - 1][j] + 1, d[i][j - 1] + 1, d[i - 1][j - 1] + cost);\n\n      if (i > 1 && j > 1 && a[i - 1] === b[j - 2] && a[i - 2] === b[j - 1]) {\n        d[i][j] = Math.min(d[i][j], d[i - 2][j - 2] + cost);\n      }\n    }\n  }\n\n  return d[aLength][bLength];\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/jsutils/suggestionList.js\n// module id = 24\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateSchema = validateSchema;\nexports.assertValidSchema = assertValidSchema;\n\nvar _definition = require('./definition');\n\nvar _directives = require('./directives');\n\nvar _introspection = require('./introspection');\n\nvar _schema = require('./schema');\n\nvar _find = require('../jsutils/find');\n\nvar _find2 = _interopRequireDefault(_find);\n\nvar _invariant = require('../jsutils/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _objectValues = require('../jsutils/objectValues');\n\nvar _objectValues2 = _interopRequireDefault(_objectValues);\n\nvar _GraphQLError = require('../error/GraphQLError');\n\nvar _assertValidName = require('../utilities/assertValidName');\n\nvar _typeComparators = require('../utilities/typeComparators');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /**\n                                                                                                                                                           * Copyright (c) 2015-present, Facebook, Inc.\n                                                                                                                                                           *\n                                                                                                                                                           * This source code is licensed under the MIT license found in the\n                                                                                                                                                           * LICENSE file in the root directory of this source tree.\n                                                                                                                                                           *\n                                                                                                                                                           *  strict\n                                                                                                                                                           */\n\n/**\n * Implements the \"Type Validation\" sub-sections of the specification's\n * \"Type System\" section.\n *\n * Validation runs synchronously, returning an array of encountered errors, or\n * an empty array if no errors were encountered and the Schema is valid.\n */\nfunction validateSchema(schema) {\n  // First check to ensure the provided value is in fact a GraphQLSchema.\n  !(0, _schema.isSchema)(schema) ? (0, _invariant2.default)(0, 'Expected ' + String(schema) + ' to be a GraphQL schema.') : void 0;\n\n  // If this Schema has already been validated, return the previous results.\n  if (schema.__validationErrors) {\n    return schema.__validationErrors;\n  }\n\n  // Validate the schema, producing a list of errors.\n  var context = new SchemaValidationContext(schema);\n  validateRootTypes(context);\n  validateDirectives(context);\n  validateTypes(context);\n\n  // Persist the results of validation before returning to ensure validation\n  // does not run multiple times for this schema.\n  var errors = context.getErrors();\n  schema.__validationErrors = errors;\n  return errors;\n}\n\n/**\n * Utility function which asserts a schema is valid by throwing an error if\n * it is invalid.\n */\nfunction assertValidSchema(schema) {\n  var errors = validateSchema(schema);\n  if (errors.length !== 0) {\n    throw new Error(errors.map(function (error) {\n      return error.message;\n    }).join('\\n\\n'));\n  }\n}\n\nvar SchemaValidationContext = function () {\n  function SchemaValidationContext(schema) {\n    _classCallCheck(this, SchemaValidationContext);\n\n    this._errors = [];\n    this.schema = schema;\n  }\n\n  SchemaValidationContext.prototype.reportError = function reportError(message, nodes) {\n    var _nodes = (Array.isArray(nodes) ? nodes : [nodes]).filter(Boolean);\n    this.addError(new _GraphQLError.GraphQLError(message, _nodes));\n  };\n\n  SchemaValidationContext.prototype.addError = function addError(error) {\n    this._errors.push(error);\n  };\n\n  SchemaValidationContext.prototype.getErrors = function getErrors() {\n    return this._errors;\n  };\n\n  return SchemaValidationContext;\n}();\n\nfunction validateRootTypes(context) {\n  var schema = context.schema;\n  var queryType = schema.getQueryType();\n  if (!queryType) {\n    context.reportError('Query root type must be provided.', schema.astNode);\n  } else if (!(0, _definition.isObjectType)(queryType)) {\n    context.reportError('Query root type must be Object type, it cannot be ' + String(queryType) + '.', getOperationTypeNode(schema, queryType, 'query'));\n  }\n\n  var mutationType = schema.getMutationType();\n  if (mutationType && !(0, _definition.isObjectType)(mutationType)) {\n    context.reportError('Mutation root type must be Object type if provided, it cannot be ' + (String(mutationType) + '.'), getOperationTypeNode(schema, mutationType, 'mutation'));\n  }\n\n  var subscriptionType = schema.getSubscriptionType();\n  if (subscriptionType && !(0, _definition.isObjectType)(subscriptionType)) {\n    context.reportError('Subscription root type must be Object type if provided, it cannot be ' + (String(subscriptionType) + '.'), getOperationTypeNode(schema, subscriptionType, 'subscription'));\n  }\n}\n\nfunction getOperationTypeNode(schema, type, operation) {\n  var astNode = schema.astNode;\n  var operationTypeNode = astNode && astNode.operationTypes.find(function (operationType) {\n    return operationType.operation === operation;\n  });\n  return operationTypeNode ? operationTypeNode.type : type && type.astNode;\n}\n\nfunction validateDirectives(context) {\n  var directives = context.schema.getDirectives();\n  directives.forEach(function (directive) {\n    // Ensure all directives are in fact GraphQL directives.\n    if (!(0, _directives.isDirective)(directive)) {\n      context.reportError('Expected directive but got: ' + String(directive) + '.', directive && directive.astNode);\n      return;\n    }\n\n    // Ensure they are named correctly.\n    validateName(context, directive);\n\n    // TODO: Ensure proper locations.\n\n    // Ensure the arguments are valid.\n    var argNames = Object.create(null);\n    directive.args.forEach(function (arg) {\n      var argName = arg.name;\n\n      // Ensure they are named correctly.\n      validateName(context, arg);\n\n      // Ensure they are unique per directive.\n      if (argNames[argName]) {\n        context.reportError('Argument @' + directive.name + '(' + argName + ':) can only be defined once.', getAllDirectiveArgNodes(directive, argName));\n        return; // continue loop\n      }\n      argNames[argName] = true;\n\n      // Ensure the type is an input type.\n      if (!(0, _definition.isInputType)(arg.type)) {\n        context.reportError('The type of @' + directive.name + '(' + argName + ':) must be Input Type ' + ('but got: ' + String(arg.type) + '.'), getDirectiveArgTypeNode(directive, argName));\n      }\n    });\n  });\n}\n\nfunction validateName(context, node) {\n  // If a schema explicitly allows some legacy name which is no longer valid,\n  // allow it to be assumed valid.\n  if (context.schema.__allowedLegacyNames && context.schema.__allowedLegacyNames.indexOf(node.name) !== -1) {\n    return;\n  }\n  // Ensure names are valid, however introspection types opt out.\n  var error = (0, _assertValidName.isValidNameError)(node.name, node.astNode || undefined);\n  if (error) {\n    context.addError(error);\n  }\n}\n\nfunction validateTypes(context) {\n  var typeMap = context.schema.getTypeMap();\n  (0, _objectValues2.default)(typeMap).forEach(function (type) {\n    // Ensure all provided types are in fact GraphQL type.\n    if (!(0, _definition.isNamedType)(type)) {\n      context.reportError('Expected GraphQL named type but got: ' + String(type) + '.', type && type.astNode);\n      return;\n    }\n\n    // Ensure it is named correctly (excluding introspection types).\n    if (!(0, _introspection.isIntrospectionType)(type)) {\n      validateName(context, type);\n    }\n\n    if ((0, _definition.isObjectType)(type)) {\n      // Ensure fields are valid\n      validateFields(context, type);\n\n      // Ensure objects implement the interfaces they claim to.\n      validateObjectInterfaces(context, type);\n    } else if ((0, _definition.isInterfaceType)(type)) {\n      // Ensure fields are valid.\n      validateFields(context, type);\n    } else if ((0, _definition.isUnionType)(type)) {\n      // Ensure Unions include valid member types.\n      validateUnionMembers(context, type);\n    } else if ((0, _definition.isEnumType)(type)) {\n      // Ensure Enums have valid values.\n      validateEnumValues(context, type);\n    } else if ((0, _definition.isInputObjectType)(type)) {\n      // Ensure Input Object fields are valid.\n      validateInputFields(context, type);\n    }\n  });\n}\n\nfunction validateFields(context, type) {\n  var fields = (0, _objectValues2.default)(type.getFields());\n\n  // Objects and Interfaces both must define one or more fields.\n  if (fields.length === 0) {\n    context.reportError('Type ' + type.name + ' must define one or more fields.', getAllObjectOrInterfaceNodes(type));\n  }\n\n  fields.forEach(function (field) {\n    // Ensure they are named correctly.\n    validateName(context, field);\n\n    // Ensure they were defined at most once.\n    var fieldNodes = getAllFieldNodes(type, field.name);\n    if (fieldNodes.length > 1) {\n      context.reportError('Field ' + type.name + '.' + field.name + ' can only be defined once.', fieldNodes);\n      return; // continue loop\n    }\n\n    // Ensure the type is an output type\n    if (!(0, _definition.isOutputType)(field.type)) {\n      context.reportError('The type of ' + type.name + '.' + field.name + ' must be Output Type ' + ('but got: ' + String(field.type) + '.'), getFieldTypeNode(type, field.name));\n    }\n\n    // Ensure the arguments are valid\n    var argNames = Object.create(null);\n    field.args.forEach(function (arg) {\n      var argName = arg.name;\n\n      // Ensure they are named correctly.\n      validateName(context, arg);\n\n      // Ensure they are unique per field.\n      if (argNames[argName]) {\n        context.reportError('Field argument ' + type.name + '.' + field.name + '(' + argName + ':) can only ' + 'be defined once.', getAllFieldArgNodes(type, field.name, argName));\n      }\n      argNames[argName] = true;\n\n      // Ensure the type is an input type\n      if (!(0, _definition.isInputType)(arg.type)) {\n        context.reportError('The type of ' + type.name + '.' + field.name + '(' + argName + ':) must be Input ' + ('Type but got: ' + String(arg.type) + '.'), getFieldArgTypeNode(type, field.name, argName));\n      }\n    });\n  });\n}\n\nfunction validateObjectInterfaces(context, object) {\n  var implementedTypeNames = Object.create(null);\n  object.getInterfaces().forEach(function (iface) {\n    if (!(0, _definition.isInterfaceType)(iface)) {\n      context.reportError('Type ' + String(object) + ' must only implement Interface types, ' + ('it cannot implement ' + String(iface) + '.'), getImplementsInterfaceNode(object, iface));\n      return;\n    }\n\n    if (implementedTypeNames[iface.name]) {\n      context.reportError('Type ' + object.name + ' can only implement ' + iface.name + ' once.', getAllImplementsInterfaceNodes(object, iface));\n      return; // continue loop\n    }\n    implementedTypeNames[iface.name] = true;\n    validateObjectImplementsInterface(context, object, iface);\n  });\n}\n\nfunction validateObjectImplementsInterface(context, object, iface) {\n  var objectFieldMap = object.getFields();\n  var ifaceFieldMap = iface.getFields();\n\n  // Assert each interface field is implemented.\n  Object.keys(ifaceFieldMap).forEach(function (fieldName) {\n    var objectField = objectFieldMap[fieldName];\n    var ifaceField = ifaceFieldMap[fieldName];\n\n    // Assert interface field exists on object.\n    if (!objectField) {\n      context.reportError('Interface field ' + iface.name + '.' + fieldName + ' expected but ' + (object.name + ' does not provide it.'), [getFieldNode(iface, fieldName), object.astNode]);\n      // Continue loop over fields.\n      return;\n    }\n\n    // Assert interface field type is satisfied by object field type, by being\n    // a valid subtype. (covariant)\n    if (!(0, _typeComparators.isTypeSubTypeOf)(context.schema, objectField.type, ifaceField.type)) {\n      context.reportError('Interface field ' + iface.name + '.' + fieldName + ' expects type ' + (String(ifaceField.type) + ' but ' + object.name + '.' + fieldName + ' ') + ('is type ' + String(objectField.type) + '.'), [getFieldTypeNode(iface, fieldName), getFieldTypeNode(object, fieldName)]);\n    }\n\n    // Assert each interface field arg is implemented.\n    ifaceField.args.forEach(function (ifaceArg) {\n      var argName = ifaceArg.name;\n      var objectArg = (0, _find2.default)(objectField.args, function (arg) {\n        return arg.name === argName;\n      });\n\n      // Assert interface field arg exists on object field.\n      if (!objectArg) {\n        context.reportError('Interface field argument ' + iface.name + '.' + fieldName + '(' + argName + ':) ' + ('expected but ' + object.name + '.' + fieldName + ' does not provide it.'), [getFieldArgNode(iface, fieldName, argName), getFieldNode(object, fieldName)]);\n        // Continue loop over arguments.\n        return;\n      }\n\n      // Assert interface field arg type matches object field arg type.\n      // (invariant)\n      // TODO: change to contravariant?\n      if (!(0, _typeComparators.isEqualType)(ifaceArg.type, objectArg.type)) {\n        context.reportError('Interface field argument ' + iface.name + '.' + fieldName + '(' + argName + ':) ' + ('expects type ' + String(ifaceArg.type) + ' but ') + (object.name + '.' + fieldName + '(' + argName + ':) is type ') + (String(objectArg.type) + '.'), [getFieldArgTypeNode(iface, fieldName, argName), getFieldArgTypeNode(object, fieldName, argName)]);\n      }\n\n      // TODO: validate default values?\n    });\n\n    // Assert additional arguments must not be required.\n    objectField.args.forEach(function (objectArg) {\n      var argName = objectArg.name;\n      var ifaceArg = (0, _find2.default)(ifaceField.args, function (arg) {\n        return arg.name === argName;\n      });\n      if (!ifaceArg && (0, _definition.isNonNullType)(objectArg.type)) {\n        context.reportError('Object field argument ' + object.name + '.' + fieldName + '(' + argName + ':) ' + ('is of required type ' + String(objectArg.type) + ' but is not also ') + ('provided by the Interface field ' + iface.name + '.' + fieldName + '.'), [getFieldArgTypeNode(object, fieldName, argName), getFieldNode(iface, fieldName)]);\n      }\n    });\n  });\n}\n\nfunction validateUnionMembers(context, union) {\n  var memberTypes = union.getTypes();\n\n  if (memberTypes.length === 0) {\n    context.reportError('Union type ' + union.name + ' must define one or more member types.', union.astNode);\n  }\n\n  var includedTypeNames = Object.create(null);\n  memberTypes.forEach(function (memberType) {\n    if (includedTypeNames[memberType.name]) {\n      context.reportError('Union type ' + union.name + ' can only include type ' + (memberType.name + ' once.'), getUnionMemberTypeNodes(union, memberType.name));\n      return; // continue loop\n    }\n    includedTypeNames[memberType.name] = true;\n    if (!(0, _definition.isObjectType)(memberType)) {\n      context.reportError('Union type ' + union.name + ' can only include Object types, ' + ('it cannot include ' + String(memberType) + '.'), getUnionMemberTypeNodes(union, String(memberType)));\n    }\n  });\n}\n\nfunction validateEnumValues(context, enumType) {\n  var enumValues = enumType.getValues();\n\n  if (enumValues.length === 0) {\n    context.reportError('Enum type ' + enumType.name + ' must define one or more values.', enumType.astNode);\n  }\n\n  enumValues.forEach(function (enumValue) {\n    var valueName = enumValue.name;\n\n    // Ensure no duplicates.\n    var allNodes = getEnumValueNodes(enumType, valueName);\n    if (allNodes && allNodes.length > 1) {\n      context.reportError('Enum type ' + enumType.name + ' can include value ' + valueName + ' only once.', allNodes);\n    }\n\n    // Ensure valid name.\n    validateName(context, enumValue);\n    if (valueName === 'true' || valueName === 'false' || valueName === 'null') {\n      context.reportError('Enum type ' + enumType.name + ' cannot include value: ' + valueName + '.', enumValue.astNode);\n    }\n  });\n}\n\nfunction validateInputFields(context, inputObj) {\n  var fields = (0, _objectValues2.default)(inputObj.getFields());\n\n  if (fields.length === 0) {\n    context.reportError('Input Object type ' + inputObj.name + ' must define one or more fields.', inputObj.astNode);\n  }\n\n  // Ensure the arguments are valid\n  fields.forEach(function (field) {\n    // Ensure they are named correctly.\n    validateName(context, field);\n\n    // TODO: Ensure they are unique per field.\n\n    // Ensure the type is an input type\n    if (!(0, _definition.isInputType)(field.type)) {\n      context.reportError('The type of ' + inputObj.name + '.' + field.name + ' must be Input Type ' + ('but got: ' + String(field.type) + '.'), field.astNode && field.astNode.type);\n    }\n  });\n}\n\nfunction getAllObjectNodes(type) {\n  return type.astNode ? type.extensionASTNodes ? [type.astNode].concat(type.extensionASTNodes) : [type.astNode] : type.extensionASTNodes || [];\n}\n\nfunction getAllObjectOrInterfaceNodes(type) {\n  return type.astNode ? type.extensionASTNodes ? [type.astNode].concat(type.extensionASTNodes) : [type.astNode] : type.extensionASTNodes || [];\n}\n\nfunction getImplementsInterfaceNode(type, iface) {\n  return getAllImplementsInterfaceNodes(type, iface)[0];\n}\n\nfunction getAllImplementsInterfaceNodes(type, iface) {\n  var implementsNodes = [];\n  var astNodes = getAllObjectNodes(type);\n  for (var i = 0; i < astNodes.length; i++) {\n    var _astNode = astNodes[i];\n    if (_astNode && _astNode.interfaces) {\n      _astNode.interfaces.forEach(function (node) {\n        if (node.name.value === iface.name) {\n          implementsNodes.push(node);\n        }\n      });\n    }\n  }\n  return implementsNodes;\n}\n\nfunction getFieldNode(type, fieldName) {\n  return getAllFieldNodes(type, fieldName)[0];\n}\n\nfunction getAllFieldNodes(type, fieldName) {\n  var fieldNodes = [];\n  var astNodes = getAllObjectOrInterfaceNodes(type);\n  for (var i = 0; i < astNodes.length; i++) {\n    var _astNode2 = astNodes[i];\n    if (_astNode2 && _astNode2.fields) {\n      _astNode2.fields.forEach(function (node) {\n        if (node.name.value === fieldName) {\n          fieldNodes.push(node);\n        }\n      });\n    }\n  }\n  return fieldNodes;\n}\n\nfunction getFieldTypeNode(type, fieldName) {\n  var fieldNode = getFieldNode(type, fieldName);\n  return fieldNode && fieldNode.type;\n}\n\nfunction getFieldArgNode(type, fieldName, argName) {\n  return getAllFieldArgNodes(type, fieldName, argName)[0];\n}\n\nfunction getAllFieldArgNodes(type, fieldName, argName) {\n  var argNodes = [];\n  var fieldNode = getFieldNode(type, fieldName);\n  if (fieldNode && fieldNode.arguments) {\n    fieldNode.arguments.forEach(function (node) {\n      if (node.name.value === argName) {\n        argNodes.push(node);\n      }\n    });\n  }\n  return argNodes;\n}\n\nfunction getFieldArgTypeNode(type, fieldName, argName) {\n  var fieldArgNode = getFieldArgNode(type, fieldName, argName);\n  return fieldArgNode && fieldArgNode.type;\n}\n\nfunction getAllDirectiveArgNodes(directive, argName) {\n  var argNodes = [];\n  var directiveNode = directive.astNode;\n  if (directiveNode && directiveNode.arguments) {\n    directiveNode.arguments.forEach(function (node) {\n      if (node.name.value === argName) {\n        argNodes.push(node);\n      }\n    });\n  }\n  return argNodes;\n}\n\nfunction getDirectiveArgTypeNode(directive, argName) {\n  var argNode = getAllDirectiveArgNodes(directive, argName)[0];\n  return argNode && argNode.type;\n}\n\nfunction getUnionMemberTypeNodes(union, typeName) {\n  return union.astNode && union.astNode.types && union.astNode.types.filter(function (type) {\n    return type.name.value === typeName;\n  });\n}\n\nfunction getEnumValueNodes(enumType, valueName) {\n  return enumType.astNode && enumType.astNode.values && enumType.astNode.values.filter(function (value) {\n    return value.name.value === valueName;\n  });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/type/validate.js\n// module id = 25\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = keyValMap;\n\n\n/**\n * Creates a keyed JS object from an array, given a function to produce the keys\n * and a function to produce the values from each item in the array.\n *\n *     const phoneBook = [\n *       { name: 'Jon', num: '555-1234' },\n *       { name: 'Jenny', num: '867-5309' }\n *     ]\n *\n *     // { Jon: '555-1234', Jenny: '867-5309' }\n *     const phonesByName = keyValMap(\n *       phoneBook,\n *       entry => entry.name,\n *       entry => entry.num\n *     )\n *\n */\nfunction keyValMap(list, keyFn, valFn) {\n  return list.reduce(function (map, item) {\n    return map[keyFn(item)] = valFn(item), map;\n  }, Object.create(null));\n} /**\n   * Copyright (c) 2015-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   *  strict\n   */\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/jsutils/keyValMap.js\n// module id = 26\n// module chunks = 0","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isNullish;\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * Returns true if a value is null, undefined, or NaN.\n */\nfunction isNullish(value) {\n  return value === null || value === undefined || value !== value;\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/jsutils/isNullish.js\n// module id = 27\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isEqualType = isEqualType;\nexports.isTypeSubTypeOf = isTypeSubTypeOf;\nexports.doTypesOverlap = doTypesOverlap;\n\nvar _definition = require('../type/definition');\n\n/**\n * Provided two types, return true if the types are equal (invariant).\n */\nfunction isEqualType(typeA, typeB) {\n  // Equivalent types are equal.\n  if (typeA === typeB) {\n    return true;\n  }\n\n  // If either type is non-null, the other must also be non-null.\n  if ((0, _definition.isNonNullType)(typeA) && (0, _definition.isNonNullType)(typeB)) {\n    return isEqualType(typeA.ofType, typeB.ofType);\n  }\n\n  // If either type is a list, the other must also be a list.\n  if ((0, _definition.isListType)(typeA) && (0, _definition.isListType)(typeB)) {\n    return isEqualType(typeA.ofType, typeB.ofType);\n  }\n\n  // Otherwise the types are not equal.\n  return false;\n}\n\n/**\n * Provided a type and a super type, return true if the first type is either\n * equal or a subset of the second super type (covariant).\n */\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction isTypeSubTypeOf(schema, maybeSubType, superType) {\n  // Equivalent type is a valid subtype\n  if (maybeSubType === superType) {\n    return true;\n  }\n\n  // If superType is non-null, maybeSubType must also be non-null.\n  if ((0, _definition.isNonNullType)(superType)) {\n    if ((0, _definition.isNonNullType)(maybeSubType)) {\n      return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);\n    }\n    return false;\n  }\n  if ((0, _definition.isNonNullType)(maybeSubType)) {\n    // If superType is nullable, maybeSubType may be non-null or nullable.\n    return isTypeSubTypeOf(schema, maybeSubType.ofType, superType);\n  }\n\n  // If superType type is a list, maybeSubType type must also be a list.\n  if ((0, _definition.isListType)(superType)) {\n    if ((0, _definition.isListType)(maybeSubType)) {\n      return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);\n    }\n    return false;\n  }\n  if ((0, _definition.isListType)(maybeSubType)) {\n    // If superType is not a list, maybeSubType must also be not a list.\n    return false;\n  }\n\n  // If superType type is an abstract type, maybeSubType type may be a currently\n  // possible object type.\n  if ((0, _definition.isAbstractType)(superType) && (0, _definition.isObjectType)(maybeSubType) && schema.isPossibleType(superType, maybeSubType)) {\n    return true;\n  }\n\n  // Otherwise, the child type is not a valid subtype of the parent type.\n  return false;\n}\n\n/**\n * Provided two composite types, determine if they \"overlap\". Two composite\n * types overlap when the Sets of possible concrete types for each intersect.\n *\n * This is often used to determine if a fragment of a given type could possibly\n * be visited in a context of another type.\n *\n * This function is commutative.\n */\nfunction doTypesOverlap(schema, typeA, typeB) {\n  // Equivalent types overlap\n  if (typeA === typeB) {\n    return true;\n  }\n\n  if ((0, _definition.isAbstractType)(typeA)) {\n    if ((0, _definition.isAbstractType)(typeB)) {\n      // If both types are abstract, then determine if there is any intersection\n      // between possible concrete types of each.\n      return schema.getPossibleTypes(typeA).some(function (type) {\n        return schema.isPossibleType(typeB, type);\n      });\n    }\n    // Determine if the latter type is a possible concrete type of the former.\n    return schema.isPossibleType(typeA, typeB);\n  }\n\n  if ((0, _definition.isAbstractType)(typeB)) {\n    // Determine if the former type is a possible concrete type of the latter.\n    return schema.isPossibleType(typeB, typeA);\n  }\n\n  // Otherwise the types do not overlap.\n  return false;\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/utilities/typeComparators.js\n// module id = 28\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defaultFieldResolver = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /**\n                                                                                                                                                                                                                                                                               * Copyright (c) 2015-present, Facebook, Inc.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * This source code is licensed under the MIT license found in the\n                                                                                                                                                                                                                                                                               * LICENSE file in the root directory of this source tree.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               *  strict\n                                                                                                                                                                                                                                                                               */\n\nexports.execute = execute;\nexports.responsePathAsArray = responsePathAsArray;\nexports.addPath = addPath;\nexports.assertValidExecutionArguments = assertValidExecutionArguments;\nexports.buildExecutionContext = buildExecutionContext;\nexports.getOperationRootType = getOperationRootType;\nexports.collectFields = collectFields;\nexports.buildResolveInfo = buildResolveInfo;\nexports.resolveFieldValueOrError = resolveFieldValueOrError;\nexports.getFieldDef = getFieldDef;\n\nvar _iterall = require('iterall');\n\nvar _error = require('../error');\n\nvar _invariant = require('../jsutils/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _isInvalid = require('../jsutils/isInvalid');\n\nvar _isInvalid2 = _interopRequireDefault(_isInvalid);\n\nvar _isNullish = require('../jsutils/isNullish');\n\nvar _isNullish2 = _interopRequireDefault(_isNullish);\n\nvar _isPromise = require('../jsutils/isPromise');\n\nvar _isPromise2 = _interopRequireDefault(_isPromise);\n\nvar _memoize = require('../jsutils/memoize3');\n\nvar _memoize2 = _interopRequireDefault(_memoize);\n\nvar _promiseForObject = require('../jsutils/promiseForObject');\n\nvar _promiseForObject2 = _interopRequireDefault(_promiseForObject);\n\nvar _promiseReduce = require('../jsutils/promiseReduce');\n\nvar _promiseReduce2 = _interopRequireDefault(_promiseReduce);\n\nvar _typeFromAST = require('../utilities/typeFromAST');\n\nvar _kinds = require('../language/kinds');\n\nvar _values = require('./values');\n\nvar _definition = require('../type/definition');\n\nvar _schema = require('../type/schema');\n\nvar _introspection = require('../type/introspection');\n\nvar _directives = require('../type/directives');\n\nvar _validate = require('../type/validate');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Terminology\n *\n * \"Definitions\" are the generic name for top-level statements in the document.\n * Examples of this include:\n * 1) Operations (such as a query)\n * 2) Fragments\n *\n * \"Operations\" are a generic name for requests in the document.\n * Examples of this include:\n * 1) query,\n * 2) mutation\n *\n * \"Selections\" are the definitions that can appear legally and at\n * single level of the query. These include:\n * 1) field references e.g \"a\"\n * 2) fragment \"spreads\" e.g. \"...c\"\n * 3) inline fragment \"spreads\" e.g. \"...on Type { a }\"\n */\n\n/**\n * Data that must be available at all points during query execution.\n *\n * Namely, schema of the type system that is currently executing,\n * and the fragments defined in the query document\n */\n\n\n/**\n * The result of GraphQL execution.\n *\n *   - `errors` is included when any errors occurred as a non-empty array.\n *   - `data` is the result of a successful execution of the query.\n */\n\n\n/**\n * Implements the \"Evaluating requests\" section of the GraphQL specification.\n *\n * Returns either a synchronous ExecutionResult (if all encountered resolvers\n * are synchronous), or a Promise of an ExecutionResult that will eventually be\n * resolved and never rejected.\n *\n * If the arguments to this function do not result in a legal execution context,\n * a GraphQLError will be thrown immediately explaining the invalid input.\n *\n * Accepts either an object with named arguments, or individual arguments.\n */\n\n/* eslint-disable no-redeclare */\nfunction execute(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  /* eslint-enable no-redeclare */\n  // Extract arguments from object args if provided.\n  return arguments.length === 1 ? executeImpl(argsOrSchema.schema, argsOrSchema.document, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver) : executeImpl(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver);\n}\n\nfunction executeImpl(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  // If arguments are missing or incorrect, throw an error.\n  assertValidExecutionArguments(schema, document, variableValues);\n\n  // If a valid context cannot be created due to incorrect arguments,\n  // a \"Response\" with only errors is returned.\n  var context = buildExecutionContext(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver);\n\n  // Return early errors if execution context failed.\n  if (Array.isArray(context)) {\n    return { errors: context };\n  }\n\n  // Return a Promise that will eventually resolve to the data described by\n  // The \"Response\" section of the GraphQL specification.\n  //\n  // If errors are encountered while executing a GraphQL field, only that\n  // field and its descendants will be omitted, and sibling fields will still\n  // be executed. An execution which encounters errors will still result in a\n  // resolved Promise.\n  var data = executeOperation(context, context.operation, rootValue);\n  return buildResponse(context, data);\n}\n\n/**\n * Given a completed execution context and data, build the { errors, data }\n * response defined by the \"Response\" section of the GraphQL specification.\n */\nfunction buildResponse(context, data) {\n  if ((0, _isPromise2.default)(data)) {\n    return data.then(function (resolved) {\n      return buildResponse(context, resolved);\n    });\n  }\n  return context.errors.length === 0 ? { data: data } : { errors: context.errors, data: data };\n}\n\n/**\n * Given a ResponsePath (found in the `path` entry in the information provided\n * as the last argument to a field resolver), return an Array of the path keys.\n */\nfunction responsePathAsArray(path) {\n  var flattened = [];\n  var curr = path;\n  while (curr) {\n    flattened.push(curr.key);\n    curr = curr.prev;\n  }\n  return flattened.reverse();\n}\n\n/**\n * Given a ResponsePath and a key, return a new ResponsePath containing the\n * new key.\n */\nfunction addPath(prev, key) {\n  return { prev: prev, key: key };\n}\n\n/**\n * Essential assertions before executing to provide developer feedback for\n * improper use of the GraphQL library.\n */\nfunction assertValidExecutionArguments(schema, document, rawVariableValues) {\n  !document ? (0, _invariant2.default)(0, 'Must provide document') : void 0;\n\n  // If the schema used for execution is invalid, throw an error.\n  (0, _validate.assertValidSchema)(schema);\n\n  // Variables, if provided, must be an object.\n  !(!rawVariableValues || (typeof rawVariableValues === 'undefined' ? 'undefined' : _typeof(rawVariableValues)) === 'object') ? (0, _invariant2.default)(0, 'Variables must be provided as an Object where each property is a ' + 'variable value. Perhaps look to see if an unparsed JSON string ' + 'was provided.') : void 0;\n}\n\n/**\n * Constructs a ExecutionContext object from the arguments passed to\n * execute, which we will pass throughout the other execution methods.\n *\n * Throws a GraphQLError if a valid execution context cannot be created.\n */\nfunction buildExecutionContext(schema, document, rootValue, contextValue, rawVariableValues, operationName, fieldResolver) {\n  var errors = [];\n  var operation = void 0;\n  var hasMultipleAssumedOperations = false;\n  var fragments = Object.create(null);\n  for (var i = 0; i < document.definitions.length; i++) {\n    var definition = document.definitions[i];\n    switch (definition.kind) {\n      case _kinds.Kind.OPERATION_DEFINITION:\n        if (!operationName && operation) {\n          hasMultipleAssumedOperations = true;\n        } else if (!operationName || definition.name && definition.name.value === operationName) {\n          operation = definition;\n        }\n        break;\n      case _kinds.Kind.FRAGMENT_DEFINITION:\n        fragments[definition.name.value] = definition;\n        break;\n    }\n  }\n\n  if (!operation) {\n    if (operationName) {\n      errors.push(new _error.GraphQLError('Unknown operation named \"' + operationName + '\".'));\n    } else {\n      errors.push(new _error.GraphQLError('Must provide an operation.'));\n    }\n  } else if (hasMultipleAssumedOperations) {\n    errors.push(new _error.GraphQLError('Must provide operation name if query contains ' + 'multiple operations.'));\n  }\n\n  var variableValues = void 0;\n  if (operation) {\n    var coercedVariableValues = (0, _values.getVariableValues)(schema, operation.variableDefinitions || [], rawVariableValues || {});\n\n    if (coercedVariableValues.errors) {\n      errors.push.apply(errors, coercedVariableValues.errors);\n    } else {\n      variableValues = coercedVariableValues.coerced;\n    }\n  }\n\n  if (errors.length !== 0) {\n    return errors;\n  }\n\n  !operation ? (0, _invariant2.default)(0, 'Has operation if no errors.') : void 0;\n  !variableValues ? (0, _invariant2.default)(0, 'Has variables if no errors.') : void 0;\n\n  return {\n    schema: schema,\n    fragments: fragments,\n    rootValue: rootValue,\n    contextValue: contextValue,\n    operation: operation,\n    variableValues: variableValues,\n    fieldResolver: fieldResolver || defaultFieldResolver,\n    errors: errors\n  };\n}\n\n/**\n * Implements the \"Evaluating operations\" section of the spec.\n */\nfunction executeOperation(exeContext, operation, rootValue) {\n  var type = getOperationRootType(exeContext.schema, operation);\n  var fields = collectFields(exeContext, type, operation.selectionSet, Object.create(null), Object.create(null));\n\n  var path = undefined;\n\n  // Errors from sub-fields of a NonNull type may propagate to the top level,\n  // at which point we still log the error and null the parent field, which\n  // in this case is the entire response.\n  //\n  // Similar to completeValueCatchingError.\n  try {\n    var result = operation.operation === 'mutation' ? executeFieldsSerially(exeContext, type, rootValue, path, fields) : executeFields(exeContext, type, rootValue, path, fields);\n    if ((0, _isPromise2.default)(result)) {\n      return result.then(undefined, function (error) {\n        exeContext.errors.push(error);\n        return Promise.resolve(null);\n      });\n    }\n    return result;\n  } catch (error) {\n    exeContext.errors.push(error);\n    return null;\n  }\n}\n\n/**\n * Extracts the root type of the operation from the schema.\n */\nfunction getOperationRootType(schema, operation) {\n  switch (operation.operation) {\n    case 'query':\n      var queryType = schema.getQueryType();\n      if (!queryType) {\n        throw new _error.GraphQLError('Schema does not define the required query root type.', [operation]);\n      }\n      return queryType;\n    case 'mutation':\n      var mutationType = schema.getMutationType();\n      if (!mutationType) {\n        throw new _error.GraphQLError('Schema is not configured for mutations.', [operation]);\n      }\n      return mutationType;\n    case 'subscription':\n      var subscriptionType = schema.getSubscriptionType();\n      if (!subscriptionType) {\n        throw new _error.GraphQLError('Schema is not configured for subscriptions.', [operation]);\n      }\n      return subscriptionType;\n    default:\n      throw new _error.GraphQLError('Can only execute queries, mutations and subscriptions.', [operation]);\n  }\n}\n\n/**\n * Implements the \"Evaluating selection sets\" section of the spec\n * for \"write\" mode.\n */\nfunction executeFieldsSerially(exeContext, parentType, sourceValue, path, fields) {\n  return (0, _promiseReduce2.default)(Object.keys(fields), function (results, responseName) {\n    var fieldNodes = fields[responseName];\n    var fieldPath = addPath(path, responseName);\n    var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);\n    if (result === undefined) {\n      return results;\n    }\n    if ((0, _isPromise2.default)(result)) {\n      return result.then(function (resolvedResult) {\n        results[responseName] = resolvedResult;\n        return results;\n      });\n    }\n    results[responseName] = result;\n    return results;\n  }, Object.create(null));\n}\n\n/**\n * Implements the \"Evaluating selection sets\" section of the spec\n * for \"read\" mode.\n */\nfunction executeFields(exeContext, parentType, sourceValue, path, fields) {\n  var containsPromise = false;\n\n  var finalResults = Object.keys(fields).reduce(function (results, responseName) {\n    var fieldNodes = fields[responseName];\n    var fieldPath = addPath(path, responseName);\n    var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);\n    if (result === undefined) {\n      return results;\n    }\n    results[responseName] = result;\n    if (!containsPromise && (0, _isPromise2.default)(result)) {\n      containsPromise = true;\n    }\n    return results;\n  }, Object.create(null));\n\n  // If there are no promises, we can just return the object\n  if (!containsPromise) {\n    return finalResults;\n  }\n\n  // Otherwise, results is a map from field name to the result\n  // of resolving that field, which is possibly a promise. Return\n  // a promise that will return this same map, but with any\n  // promises replaced with the values they resolved to.\n  return (0, _promiseForObject2.default)(finalResults);\n}\n\n/**\n * Given a selectionSet, adds all of the fields in that selection to\n * the passed in map of fields, and returns it at the end.\n *\n * CollectFields requires the \"runtime type\" of an object. For a field which\n * returns an Interface or Union type, the \"runtime type\" will be the actual\n * Object type returned by that field.\n */\nfunction collectFields(exeContext, runtimeType, selectionSet, fields, visitedFragmentNames) {\n  for (var i = 0; i < selectionSet.selections.length; i++) {\n    var selection = selectionSet.selections[i];\n    switch (selection.kind) {\n      case _kinds.Kind.FIELD:\n        if (!shouldIncludeNode(exeContext, selection)) {\n          continue;\n        }\n        var name = getFieldEntryKey(selection);\n        if (!fields[name]) {\n          fields[name] = [];\n        }\n        fields[name].push(selection);\n        break;\n      case _kinds.Kind.INLINE_FRAGMENT:\n        if (!shouldIncludeNode(exeContext, selection) || !doesFragmentConditionMatch(exeContext, selection, runtimeType)) {\n          continue;\n        }\n        collectFields(exeContext, runtimeType, selection.selectionSet, fields, visitedFragmentNames);\n        break;\n      case _kinds.Kind.FRAGMENT_SPREAD:\n        var fragName = selection.name.value;\n        if (visitedFragmentNames[fragName] || !shouldIncludeNode(exeContext, selection)) {\n          continue;\n        }\n        visitedFragmentNames[fragName] = true;\n        var fragment = exeContext.fragments[fragName];\n        if (!fragment || !doesFragmentConditionMatch(exeContext, fragment, runtimeType)) {\n          continue;\n        }\n        collectFields(exeContext, runtimeType, fragment.selectionSet, fields, visitedFragmentNames);\n        break;\n    }\n  }\n  return fields;\n}\n\n/**\n * Determines if a field should be included based on the @include and @skip\n * directives, where @skip has higher precidence than @include.\n */\nfunction shouldIncludeNode(exeContext, node) {\n  var skip = (0, _values.getDirectiveValues)(_directives.GraphQLSkipDirective, node, exeContext.variableValues);\n  if (skip && skip.if === true) {\n    return false;\n  }\n\n  var include = (0, _values.getDirectiveValues)(_directives.GraphQLIncludeDirective, node, exeContext.variableValues);\n  if (include && include.if === false) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Determines if a fragment is applicable to the given type.\n */\nfunction doesFragmentConditionMatch(exeContext, fragment, type) {\n  var typeConditionNode = fragment.typeCondition;\n  if (!typeConditionNode) {\n    return true;\n  }\n  var conditionalType = (0, _typeFromAST.typeFromAST)(exeContext.schema, typeConditionNode);\n  if (conditionalType === type) {\n    return true;\n  }\n  if ((0, _definition.isAbstractType)(conditionalType)) {\n    return exeContext.schema.isPossibleType(conditionalType, type);\n  }\n  return false;\n}\n\n/**\n * Implements the logic to compute the key of a given field's entry\n */\nfunction getFieldEntryKey(node) {\n  return node.alias ? node.alias.value : node.name.value;\n}\n\n/**\n * Resolves the field on the given source object. In particular, this\n * figures out the value that the field returns by calling its resolve function,\n * then calls completeValue to complete promises, serialize scalars, or execute\n * the sub-selection-set for objects.\n */\nfunction resolveField(exeContext, parentType, source, fieldNodes, path) {\n  var fieldNode = fieldNodes[0];\n  var fieldName = fieldNode.name.value;\n\n  var fieldDef = getFieldDef(exeContext.schema, parentType, fieldName);\n  if (!fieldDef) {\n    return;\n  }\n\n  var resolveFn = fieldDef.resolve || exeContext.fieldResolver;\n\n  var info = buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path);\n\n  // Get the resolve function, regardless of if its result is normal\n  // or abrupt (error).\n  var result = resolveFieldValueOrError(exeContext, fieldDef, fieldNodes, resolveFn, source, info);\n\n  return completeValueCatchingError(exeContext, fieldDef.type, fieldNodes, info, path, result);\n}\n\nfunction buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path) {\n  // The resolve function's optional fourth argument is a collection of\n  // information about the current execution state.\n  return {\n    fieldName: fieldNodes[0].name.value,\n    fieldNodes: fieldNodes,\n    returnType: fieldDef.type,\n    parentType: parentType,\n    path: path,\n    schema: exeContext.schema,\n    fragments: exeContext.fragments,\n    rootValue: exeContext.rootValue,\n    operation: exeContext.operation,\n    variableValues: exeContext.variableValues\n  };\n}\n\n// Isolates the \"ReturnOrAbrupt\" behavior to not de-opt the `resolveField`\n// function. Returns the result of resolveFn or the abrupt-return Error object.\nfunction resolveFieldValueOrError(exeContext, fieldDef, fieldNodes, resolveFn, source, info) {\n  try {\n    // Build a JS object of arguments from the field.arguments AST, using the\n    // variables scope to fulfill any variable references.\n    // TODO: find a way to memoize, in case this field is within a List type.\n    var args = (0, _values.getArgumentValues)(fieldDef, fieldNodes[0], exeContext.variableValues);\n\n    // The resolve function's optional third argument is a context value that\n    // is provided to every resolve function within an execution. It is commonly\n    // used to represent an authenticated user, or request-specific caches.\n    var context = exeContext.contextValue;\n\n    var result = resolveFn(source, args, context, info);\n    return (0, _isPromise2.default)(result) ? result.then(undefined, asErrorInstance) : result;\n  } catch (error) {\n    return asErrorInstance(error);\n  }\n}\n\n// Sometimes a non-error is thrown, wrap it as an Error instance to ensure a\n// consistent Error interface.\nfunction asErrorInstance(error) {\n  return error instanceof Error ? error : new Error(error || undefined);\n}\n\n// This is a small wrapper around completeValue which detects and logs errors\n// in the execution context.\nfunction completeValueCatchingError(exeContext, returnType, fieldNodes, info, path, result) {\n  // If the field type is non-nullable, then it is resolved without any\n  // protection from errors, however it still properly locates the error.\n  if ((0, _definition.isNonNullType)(returnType)) {\n    return completeValueWithLocatedError(exeContext, returnType, fieldNodes, info, path, result);\n  }\n\n  // Otherwise, error protection is applied, logging the error and resolving\n  // a null value for this field if one is encountered.\n  try {\n    var completed = completeValueWithLocatedError(exeContext, returnType, fieldNodes, info, path, result);\n    if ((0, _isPromise2.default)(completed)) {\n      // If `completeValueWithLocatedError` returned a rejected promise, log\n      // the rejection error and resolve to null.\n      // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n      // to take a second callback for the error case.\n      return completed.then(undefined, function (error) {\n        exeContext.errors.push(error);\n        return Promise.resolve(null);\n      });\n    }\n    return completed;\n  } catch (error) {\n    // If `completeValueWithLocatedError` returned abruptly (threw an error),\n    // log the error and return null.\n    exeContext.errors.push(error);\n    return null;\n  }\n}\n\n// This is a small wrapper around completeValue which annotates errors with\n// location information.\nfunction completeValueWithLocatedError(exeContext, returnType, fieldNodes, info, path, result) {\n  try {\n    var completed = completeValue(exeContext, returnType, fieldNodes, info, path, result);\n    if ((0, _isPromise2.default)(completed)) {\n      return completed.then(undefined, function (error) {\n        return Promise.reject((0, _error.locatedError)(asErrorInstance(error), fieldNodes, responsePathAsArray(path)));\n      });\n    }\n    return completed;\n  } catch (error) {\n    throw (0, _error.locatedError)(asErrorInstance(error), fieldNodes, responsePathAsArray(path));\n  }\n}\n\n/**\n * Implements the instructions for completeValue as defined in the\n * \"Field entries\" section of the spec.\n *\n * If the field type is Non-Null, then this recursively completes the value\n * for the inner type. It throws a field error if that completion returns null,\n * as per the \"Nullability\" section of the spec.\n *\n * If the field type is a List, then this recursively completes the value\n * for the inner type on each item in the list.\n *\n * If the field type is a Scalar or Enum, ensures the completed value is a legal\n * value of the type by calling the `serialize` method of GraphQL type\n * definition.\n *\n * If the field is an abstract type, determine the runtime type of the value\n * and then complete based on that type\n *\n * Otherwise, the field type expects a sub-selection set, and will complete the\n * value by evaluating all sub-selections.\n */\nfunction completeValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // If result is a Promise, apply-lift over completeValue.\n  if ((0, _isPromise2.default)(result)) {\n    return result.then(function (resolved) {\n      return completeValue(exeContext, returnType, fieldNodes, info, path, resolved);\n    });\n  }\n\n  // If result is an Error, throw a located error.\n  if (result instanceof Error) {\n    throw result;\n  }\n\n  // If field type is NonNull, complete for inner type, and throw field error\n  // if result is null.\n  if ((0, _definition.isNonNullType)(returnType)) {\n    var completed = completeValue(exeContext, returnType.ofType, fieldNodes, info, path, result);\n    if (completed === null) {\n      throw new Error('Cannot return null for non-nullable field ' + info.parentType.name + '.' + info.fieldName + '.');\n    }\n    return completed;\n  }\n\n  // If result value is null-ish (null, undefined, or NaN) then return null.\n  if ((0, _isNullish2.default)(result)) {\n    return null;\n  }\n\n  // If field type is List, complete each item in the list with the inner type\n  if ((0, _definition.isListType)(returnType)) {\n    return completeListValue(exeContext, returnType, fieldNodes, info, path, result);\n  }\n\n  // If field type is a leaf type, Scalar or Enum, serialize to a valid value,\n  // returning null if serialization is not possible.\n  if ((0, _definition.isLeafType)(returnType)) {\n    return completeLeafValue(returnType, result);\n  }\n\n  // If field type is an abstract type, Interface or Union, determine the\n  // runtime Object type and complete for that type.\n  if ((0, _definition.isAbstractType)(returnType)) {\n    return completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result);\n  }\n\n  // If field type is Object, execute and complete all sub-selections.\n  if ((0, _definition.isObjectType)(returnType)) {\n    return completeObjectValue(exeContext, returnType, fieldNodes, info, path, result);\n  }\n\n  // Not reachable. All possible output types have been considered.\n  /* istanbul ignore next */\n  throw new Error('Cannot complete value of unexpected type \"' + String(returnType) + '\".');\n}\n\n/**\n * Complete a list value by completing each item in the list with the\n * inner type\n */\nfunction completeListValue(exeContext, returnType, fieldNodes, info, path, result) {\n  !(0, _iterall.isCollection)(result) ? (0, _invariant2.default)(0, 'Expected Iterable, but did not find one for field ' + info.parentType.name + '.' + info.fieldName + '.') : void 0;\n\n  // This is specified as a simple map, however we're optimizing the path\n  // where the list contains no Promises by avoiding creating another Promise.\n  var itemType = returnType.ofType;\n  var containsPromise = false;\n  var completedResults = [];\n  (0, _iterall.forEach)(result, function (item, index) {\n    // No need to modify the info object containing the path,\n    // since from here on it is not ever accessed by resolver functions.\n    var fieldPath = addPath(path, index);\n    var completedItem = completeValueCatchingError(exeContext, itemType, fieldNodes, info, fieldPath, item);\n\n    if (!containsPromise && (0, _isPromise2.default)(completedItem)) {\n      containsPromise = true;\n    }\n    completedResults.push(completedItem);\n  });\n\n  return containsPromise ? Promise.all(completedResults) : completedResults;\n}\n\n/**\n * Complete a Scalar or Enum by serializing to a valid value, returning\n * null if serialization is not possible.\n */\nfunction completeLeafValue(returnType, result) {\n  !returnType.serialize ? (0, _invariant2.default)(0, 'Missing serialize method on type') : void 0;\n  var serializedResult = returnType.serialize(result);\n  if ((0, _isInvalid2.default)(serializedResult)) {\n    throw new Error('Expected a value of type \"' + String(returnType) + '\" but ' + ('received: ' + String(result)));\n  }\n  return serializedResult;\n}\n\n/**\n * Complete a value of an abstract type by determining the runtime object type\n * of that value, then complete the value for that type.\n */\nfunction completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result) {\n  var runtimeType = returnType.resolveType ? returnType.resolveType(result, exeContext.contextValue, info) : defaultResolveTypeFn(result, exeContext.contextValue, info, returnType);\n\n  if ((0, _isPromise2.default)(runtimeType)) {\n    return runtimeType.then(function (resolvedRuntimeType) {\n      return completeObjectValue(exeContext, ensureValidRuntimeType(resolvedRuntimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);\n    });\n  }\n\n  return completeObjectValue(exeContext, ensureValidRuntimeType(runtimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);\n}\n\nfunction ensureValidRuntimeType(runtimeTypeOrName, exeContext, returnType, fieldNodes, info, result) {\n  var runtimeType = typeof runtimeTypeOrName === 'string' ? exeContext.schema.getType(runtimeTypeOrName) : runtimeTypeOrName;\n\n  if (!(0, _definition.isObjectType)(runtimeType)) {\n    throw new _error.GraphQLError('Abstract type ' + returnType.name + ' must resolve to an Object type at ' + ('runtime for field ' + info.parentType.name + '.' + info.fieldName + ' with ') + ('value \"' + String(result) + '\", received \"' + String(runtimeType) + '\". ') + ('Either the ' + returnType.name + ' type should provide a \"resolveType\" ') + 'function or each possible types should provide an ' + '\"isTypeOf\" function.', fieldNodes);\n  }\n\n  if (!exeContext.schema.isPossibleType(returnType, runtimeType)) {\n    throw new _error.GraphQLError('Runtime Object type \"' + runtimeType.name + '\" is not a possible type ' + ('for \"' + returnType.name + '\".'), fieldNodes);\n  }\n\n  return runtimeType;\n}\n\n/**\n * Complete an Object value by executing all sub-selections.\n */\nfunction completeObjectValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // If there is an isTypeOf predicate function, call it with the\n  // current result. If isTypeOf returns false, then raise an error rather\n  // than continuing execution.\n  if (returnType.isTypeOf) {\n    var isTypeOf = returnType.isTypeOf(result, exeContext.contextValue, info);\n\n    if ((0, _isPromise2.default)(isTypeOf)) {\n      return isTypeOf.then(function (resolvedIsTypeOf) {\n        if (!resolvedIsTypeOf) {\n          throw invalidReturnTypeError(returnType, result, fieldNodes);\n        }\n        return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, info, path, result);\n      });\n    }\n\n    if (!isTypeOf) {\n      throw invalidReturnTypeError(returnType, result, fieldNodes);\n    }\n  }\n\n  return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, info, path, result);\n}\n\nfunction invalidReturnTypeError(returnType, result, fieldNodes) {\n  return new _error.GraphQLError('Expected value of type \"' + returnType.name + '\" but got: ' + String(result) + '.', fieldNodes);\n}\n\nfunction collectAndExecuteSubfields(exeContext, returnType, fieldNodes, info, path, result) {\n  // Collect sub-fields to execute to complete this value.\n  var subFieldNodes = collectSubfields(exeContext, returnType, fieldNodes);\n  return executeFields(exeContext, returnType, result, path, subFieldNodes);\n}\n\n/**\n * A memoized collection of relevant subfields in the context of the return\n * type. Memoizing ensures the subfields are not repeatedly calculated, which\n * saves overhead when resolving lists of values.\n */\nvar collectSubfields = (0, _memoize2.default)(_collectSubfields);\nfunction _collectSubfields(exeContext, returnType, fieldNodes) {\n  var subFieldNodes = Object.create(null);\n  var visitedFragmentNames = Object.create(null);\n  for (var i = 0; i < fieldNodes.length; i++) {\n    var selectionSet = fieldNodes[i].selectionSet;\n    if (selectionSet) {\n      subFieldNodes = collectFields(exeContext, returnType, selectionSet, subFieldNodes, visitedFragmentNames);\n    }\n  }\n  return subFieldNodes;\n}\n\n/**\n * If a resolveType function is not given, then a default resolve behavior is\n * used which attempts two strategies:\n *\n * First, See if the provided value has a `__typename` field defined, if so, use\n * that value as name of the resolved type.\n *\n * Otherwise, test each possible type for the abstract type by calling\n * isTypeOf for the object being coerced, returning the first type that matches.\n */\nfunction defaultResolveTypeFn(value, context, info, abstractType) {\n  // First, look for `__typename`.\n  if (value !== null && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && typeof value.__typename === 'string') {\n    return value.__typename;\n  }\n\n  // Otherwise, test each possible type.\n  var possibleTypes = info.schema.getPossibleTypes(abstractType);\n  var promisedIsTypeOfResults = [];\n\n  for (var i = 0; i < possibleTypes.length; i++) {\n    var type = possibleTypes[i];\n\n    if (type.isTypeOf) {\n      var isTypeOfResult = type.isTypeOf(value, context, info);\n\n      if ((0, _isPromise2.default)(isTypeOfResult)) {\n        promisedIsTypeOfResults[i] = isTypeOfResult;\n      } else if (isTypeOfResult) {\n        return type;\n      }\n    }\n  }\n\n  if (promisedIsTypeOfResults.length) {\n    return Promise.all(promisedIsTypeOfResults).then(function (isTypeOfResults) {\n      for (var _i = 0; _i < isTypeOfResults.length; _i++) {\n        if (isTypeOfResults[_i]) {\n          return possibleTypes[_i];\n        }\n      }\n    });\n  }\n}\n\n/**\n * If a resolve function is not given, then a default resolve behavior is used\n * which takes the property of the source object of the same name as the field\n * and returns it as the result, or if it's a function, returns the result\n * of calling that function while passing along args and context.\n */\nvar defaultFieldResolver = exports.defaultFieldResolver = function defaultFieldResolver(source, args, context, info) {\n  // ensure source is a value for which property access is acceptable.\n  if ((typeof source === 'undefined' ? 'undefined' : _typeof(source)) === 'object' || typeof source === 'function') {\n    var property = source[info.fieldName];\n    if (typeof property === 'function') {\n      return source[info.fieldName](args, context, info);\n    }\n    return property;\n  }\n};\n\n/**\n * This method looks up the field on the given type defintion.\n * It has special casing for the two introspection fields, __schema\n * and __typename. __typename is special because it can always be\n * queried as a field, even in situations where no other fields\n * are allowed, like on a Union. __schema could get automatically\n * added to the query type, but that would require mutating type\n * definitions, which would cause issues.\n */\nfunction getFieldDef(schema, parentType, fieldName) {\n  if (fieldName === _introspection.SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return _introspection.SchemaMetaFieldDef;\n  } else if (fieldName === _introspection.TypeMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return _introspection.TypeMetaFieldDef;\n  } else if (fieldName === _introspection.TypeNameMetaFieldDef.name) {\n    return _introspection.TypeNameMetaFieldDef;\n  }\n  return parentType.getFields()[fieldName];\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/execution/execute.js\n// module id = 29\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getVariableValues = getVariableValues;\nexports.getArgumentValues = getArgumentValues;\nexports.getDirectiveValues = getDirectiveValues;\n\nvar _error = require('../error');\n\nvar _find = require('../jsutils/find');\n\nvar _find2 = _interopRequireDefault(_find);\n\nvar _isInvalid = require('../jsutils/isInvalid');\n\nvar _isInvalid2 = _interopRequireDefault(_isInvalid);\n\nvar _keyMap = require('../jsutils/keyMap');\n\nvar _keyMap2 = _interopRequireDefault(_keyMap);\n\nvar _coerceValue = require('../utilities/coerceValue');\n\nvar _typeFromAST = require('../utilities/typeFromAST');\n\nvar _valueFromAST = require('../utilities/valueFromAST');\n\nvar _kinds = require('../language/kinds');\n\nvar _printer = require('../language/printer');\n\nvar _definition = require('../type/definition');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Prepares an object map of variableValues of the correct type based on the\n * provided variable definitions and arbitrary input. If the input cannot be\n * parsed to match the variable definitions, a GraphQLError will be thrown.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction getVariableValues(schema, varDefNodes, inputs) {\n  var errors = [];\n  var coercedValues = {};\n  for (var i = 0; i < varDefNodes.length; i++) {\n    var varDefNode = varDefNodes[i];\n    var varName = varDefNode.variable.name.value;\n    var varType = (0, _typeFromAST.typeFromAST)(schema, varDefNode.type);\n    if (!(0, _definition.isInputType)(varType)) {\n      errors.push(new _error.GraphQLError('Variable \"$' + varName + '\" expected value of type ' + ('\"' + (0, _printer.print)(varDefNode.type) + '\" which cannot be used as an input type.'), [varDefNode.type]));\n    } else {\n      var value = inputs[varName];\n      if ((0, _isInvalid2.default)(value)) {\n        if ((0, _definition.isNonNullType)(varType)) {\n          errors.push(new _error.GraphQLError('Variable \"$' + varName + '\" of required type ' + ('\"' + String(varType) + '\" was not provided.'), [varDefNode]));\n        } else if (varDefNode.defaultValue) {\n          coercedValues[varName] = (0, _valueFromAST.valueFromAST)(varDefNode.defaultValue, varType);\n        }\n      } else {\n        var _coerced = (0, _coerceValue.coerceValue)(value, varType, varDefNode);\n        var coercionErrors = _coerced.errors;\n        if (coercionErrors) {\n          (function () {\n            var messagePrelude = 'Variable \"$' + varName + '\" got invalid value ' + JSON.stringify(value) + '; ';\n            coercionErrors.forEach(function (error) {\n              error.message = messagePrelude + error.message;\n            });\n            errors.push.apply(errors, coercionErrors);\n          })();\n        } else {\n          coercedValues[varName] = _coerced.value;\n        }\n      }\n    }\n  }\n  return errors.length === 0 ? { errors: undefined, coerced: coercedValues } : { errors: errors, coerced: undefined };\n}\n\n/**\n * Prepares an object map of argument values given a list of argument\n * definitions and list of argument AST nodes.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\nfunction getArgumentValues(def, node, variableValues) {\n  var coercedValues = {};\n  var argDefs = def.args;\n  var argNodes = node.arguments;\n  if (!argDefs || !argNodes) {\n    return coercedValues;\n  }\n  var argNodeMap = (0, _keyMap2.default)(argNodes, function (arg) {\n    return arg.name.value;\n  });\n  for (var i = 0; i < argDefs.length; i++) {\n    var argDef = argDefs[i];\n    var name = argDef.name;\n    var argType = argDef.type;\n    var argumentNode = argNodeMap[name];\n    var defaultValue = argDef.defaultValue;\n    if (!argumentNode) {\n      if (!(0, _isInvalid2.default)(defaultValue)) {\n        coercedValues[name] = defaultValue;\n      } else if ((0, _definition.isNonNullType)(argType)) {\n        throw new _error.GraphQLError('Argument \"' + name + '\" of required type ' + ('\"' + String(argType) + '\" was not provided.'), [node]);\n      }\n    } else if (argumentNode.value.kind === _kinds.Kind.VARIABLE) {\n      var variableName = argumentNode.value.name.value;\n      if (variableValues && Object.prototype.hasOwnProperty.call(variableValues, variableName) && !(0, _isInvalid2.default)(variableValues[variableName])) {\n        // Note: this does not check that this variable value is correct.\n        // This assumes that this query has been validated and the variable\n        // usage here is of the correct type.\n        coercedValues[name] = variableValues[variableName];\n      } else if (!(0, _isInvalid2.default)(defaultValue)) {\n        coercedValues[name] = defaultValue;\n      } else if ((0, _definition.isNonNullType)(argType)) {\n        throw new _error.GraphQLError('Argument \"' + name + '\" of required type \"' + String(argType) + '\" was ' + ('provided the variable \"$' + variableName + '\" which was not provided ') + 'a runtime value.', [argumentNode.value]);\n      }\n    } else {\n      var valueNode = argumentNode.value;\n      var coercedValue = (0, _valueFromAST.valueFromAST)(valueNode, argType, variableValues);\n      if ((0, _isInvalid2.default)(coercedValue)) {\n        // Note: ValuesOfCorrectType validation should catch this before\n        // execution. This is a runtime check to ensure execution does not\n        // continue with an invalid argument value.\n        throw new _error.GraphQLError('Argument \"' + name + '\" has invalid value ' + (0, _printer.print)(valueNode) + '.', [argumentNode.value]);\n      }\n      coercedValues[name] = coercedValue;\n    }\n  }\n  return coercedValues;\n}\n\n/**\n * Prepares an object map of argument values given a directive definition\n * and a AST node which may contain directives. Optionally also accepts a map\n * of variable values.\n *\n * If the directive does not exist on the node, returns undefined.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\nfunction getDirectiveValues(directiveDef, node, variableValues) {\n  var directiveNode = node.directives && (0, _find2.default)(node.directives, function (directive) {\n    return directive.name.value === directiveDef.name;\n  });\n\n  if (directiveNode) {\n    return getArgumentValues(directiveDef, directiveNode, variableValues);\n  }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/execution/values.js\n// module id = 30\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.valueFromAST = valueFromAST;\n\nvar _keyMap = require('../jsutils/keyMap');\n\nvar _keyMap2 = _interopRequireDefault(_keyMap);\n\nvar _isInvalid = require('../jsutils/isInvalid');\n\nvar _isInvalid2 = _interopRequireDefault(_isInvalid);\n\nvar _objectValues = require('../jsutils/objectValues');\n\nvar _objectValues2 = _interopRequireDefault(_objectValues);\n\nvar _kinds = require('../language/kinds');\n\nvar _definition = require('../type/definition');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Produces a JavaScript value given a GraphQL Value AST.\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * GraphQL Value literals.\n *\n * Returns `undefined` when the value could not be validly coerced according to\n * the provided type.\n *\n * | GraphQL Value        | JSON Value    |\n * | -------------------- | ------------- |\n * | Input Object         | Object        |\n * | List                 | Array         |\n * | Boolean              | Boolean       |\n * | String               | String        |\n * | Int / Float          | Number        |\n * | Enum Value           | Mixed         |\n * | NullValue            | null          |\n *\n */\nfunction valueFromAST(valueNode, type, variables) {\n  if (!valueNode) {\n    // When there is no node, then there is also no value.\n    // Importantly, this is different from returning the value null.\n    return;\n  }\n\n  if ((0, _definition.isNonNullType)(type)) {\n    if (valueNode.kind === _kinds.Kind.NULL) {\n      return; // Invalid: intentionally return no value.\n    }\n    return valueFromAST(valueNode, type.ofType, variables);\n  }\n\n  if (valueNode.kind === _kinds.Kind.NULL) {\n    // This is explicitly returning the value null.\n    return null;\n  }\n\n  if (valueNode.kind === _kinds.Kind.VARIABLE) {\n    var variableName = valueNode.name.value;\n    if (!variables || (0, _isInvalid2.default)(variables[variableName])) {\n      // No valid return value.\n      return;\n    }\n    // Note: we're not doing any checking that this variable is correct. We're\n    // assuming that this query has been validated and the variable usage here\n    // is of the correct type.\n    return variables[variableName];\n  }\n\n  if ((0, _definition.isListType)(type)) {\n    var itemType = type.ofType;\n    if (valueNode.kind === _kinds.Kind.LIST) {\n      var coercedValues = [];\n      var itemNodes = valueNode.values;\n      for (var i = 0; i < itemNodes.length; i++) {\n        if (isMissingVariable(itemNodes[i], variables)) {\n          // If an array contains a missing variable, it is either coerced to\n          // null or if the item type is non-null, it considered invalid.\n          if ((0, _definition.isNonNullType)(itemType)) {\n            return; // Invalid: intentionally return no value.\n          }\n          coercedValues.push(null);\n        } else {\n          var itemValue = valueFromAST(itemNodes[i], itemType, variables);\n          if ((0, _isInvalid2.default)(itemValue)) {\n            return; // Invalid: intentionally return no value.\n          }\n          coercedValues.push(itemValue);\n        }\n      }\n      return coercedValues;\n    }\n    var coercedValue = valueFromAST(valueNode, itemType, variables);\n    if ((0, _isInvalid2.default)(coercedValue)) {\n      return; // Invalid: intentionally return no value.\n    }\n    return [coercedValue];\n  }\n\n  if ((0, _definition.isInputObjectType)(type)) {\n    if (valueNode.kind !== _kinds.Kind.OBJECT) {\n      return; // Invalid: intentionally return no value.\n    }\n    var coercedObj = Object.create(null);\n    var fieldNodes = (0, _keyMap2.default)(valueNode.fields, function (field) {\n      return field.name.value;\n    });\n    var fields = (0, _objectValues2.default)(type.getFields());\n    for (var _i = 0; _i < fields.length; _i++) {\n      var field = fields[_i];\n      var fieldNode = fieldNodes[field.name];\n      if (!fieldNode || isMissingVariable(fieldNode.value, variables)) {\n        if (!(0, _isInvalid2.default)(field.defaultValue)) {\n          coercedObj[field.name] = field.defaultValue;\n        } else if ((0, _definition.isNonNullType)(field.type)) {\n          return; // Invalid: intentionally return no value.\n        }\n        continue;\n      }\n      var fieldValue = valueFromAST(fieldNode.value, field.type, variables);\n      if ((0, _isInvalid2.default)(fieldValue)) {\n        return; // Invalid: intentionally return no value.\n      }\n      coercedObj[field.name] = fieldValue;\n    }\n    return coercedObj;\n  }\n\n  if ((0, _definition.isEnumType)(type)) {\n    if (valueNode.kind !== _kinds.Kind.ENUM) {\n      return; // Invalid: intentionally return no value.\n    }\n    var enumValue = type.getValue(valueNode.value);\n    if (!enumValue) {\n      return; // Invalid: intentionally return no value.\n    }\n    return enumValue.value;\n  }\n\n  if ((0, _definition.isScalarType)(type)) {\n    // Scalars fulfill parsing a literal value via parseLiteral().\n    // Invalid values represent a failure to parse correctly, in which case\n    // no value is returned.\n    var result = void 0;\n    try {\n      result = type.parseLiteral(valueNode, variables);\n    } catch (_error) {\n      return; // Invalid: intentionally return no value.\n    }\n    if ((0, _isInvalid2.default)(result)) {\n      return; // Invalid: intentionally return no value.\n    }\n    return result;\n  }\n\n  /* istanbul ignore next */\n  throw new Error('Unknown type: ' + type + '.');\n}\n\n// Returns true if the provided valueNode is a variable which is not defined\n// in the set of variables.\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction isMissingVariable(valueNode, variables) {\n  return valueNode.kind === _kinds.Kind.VARIABLE && (!variables || (0, _isInvalid2.default)(variables[valueNode.name.value]));\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/utilities/valueFromAST.js\n// module id = 31\n// module chunks = 0","\"use strict\";\n// Generates a schema for graphql-js given a shorthand schema\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// TODO: document each function clearly in the code: what arguments it accepts\n// and what it outputs.\n// TODO: we should refactor this file, rename it to makeExecutableSchema, and move\n// a bunch of utility functions into a separate utitlities folder, one file per function.\nvar graphql_1 = require(\"graphql\");\nvar schemaVisitor_1 = require(\"./schemaVisitor\");\nvar deprecated_decorator_1 = require(\"deprecated-decorator\");\nvar mergeDeep_1 = require(\"./mergeDeep\");\n// @schemaDefinition: A GraphQL type schema in shorthand\n// @resolvers: Definitions for resolvers to be merged with schema\nvar SchemaError = /** @class */ (function (_super) {\n    __extends(SchemaError, _super);\n    function SchemaError(message) {\n        var _this = _super.call(this, message) || this;\n        _this.message = message;\n        Error.captureStackTrace(_this, _this.constructor);\n        return _this;\n    }\n    return SchemaError;\n}(Error));\nexports.SchemaError = SchemaError;\n// type definitions can be a string or an array of strings.\nfunction _generateSchema(typeDefinitions, resolveFunctions, logger, \n    // TODO: rename to allowUndefinedInResolve to be consistent\n    allowUndefinedInResolve, resolverValidationOptions, parseOptions) {\n    if (typeof resolverValidationOptions !== 'object') {\n        throw new SchemaError('Expected `resolverValidationOptions` to be an object');\n    }\n    if (!typeDefinitions) {\n        throw new SchemaError('Must provide typeDefs');\n    }\n    if (!resolveFunctions) {\n        throw new SchemaError('Must provide resolvers');\n    }\n    var resolvers = Array.isArray(resolveFunctions)\n        ? resolveFunctions\n            .filter(function (resolverObj) { return typeof resolverObj === 'object'; })\n            .reduce(mergeDeep_1.default, {})\n        : resolveFunctions;\n    // TODO: check that typeDefinitions is either string or array of strings\n    var schema = buildSchemaFromTypeDefinitions(typeDefinitions, parseOptions);\n    addResolveFunctionsToSchema(schema, resolvers, resolverValidationOptions);\n    assertResolveFunctionsPresent(schema, resolverValidationOptions);\n    if (!allowUndefinedInResolve) {\n        addCatchUndefinedToSchema(schema);\n    }\n    if (logger) {\n        addErrorLoggingToSchema(schema, logger);\n    }\n    return schema;\n}\nfunction makeExecutableSchema(_a) {\n    var typeDefs = _a.typeDefs, _b = _a.resolvers, resolvers = _b === void 0 ? {} : _b, connectors = _a.connectors, logger = _a.logger, _c = _a.allowUndefinedInResolve, allowUndefinedInResolve = _c === void 0 ? true : _c, _d = _a.resolverValidationOptions, resolverValidationOptions = _d === void 0 ? {} : _d, _e = _a.directiveResolvers, directiveResolvers = _e === void 0 ? null : _e, _f = _a.schemaDirectives, schemaDirectives = _f === void 0 ? null : _f, _g = _a.parseOptions, parseOptions = _g === void 0 ? {} : _g;\n    var jsSchema = _generateSchema(typeDefs, resolvers, logger, allowUndefinedInResolve, resolverValidationOptions, parseOptions);\n    if (typeof resolvers['__schema'] === 'function') {\n        // TODO a bit of a hack now, better rewrite generateSchema to attach it there.\n        // not doing that now, because I'd have to rewrite a lot of tests.\n        addSchemaLevelResolveFunction(jsSchema, resolvers['__schema']);\n    }\n    if (connectors) {\n        // connectors are optional, at least for now. That means you can just import them in the resolve\n        // function if you want.\n        attachConnectorsToContext(jsSchema, connectors);\n    }\n    if (directiveResolvers) {\n        attachDirectiveResolvers(jsSchema, directiveResolvers);\n    }\n    if (schemaDirectives) {\n        schemaVisitor_1.SchemaDirectiveVisitor.visitSchemaDirectives(jsSchema, schemaDirectives);\n    }\n    return jsSchema;\n}\nexports.makeExecutableSchema = makeExecutableSchema;\nfunction isDocumentNode(typeDefinitions) {\n    return typeDefinitions.kind !== undefined;\n}\nfunction uniq(array) {\n    return array.reduce(function (accumulator, currentValue) {\n        return accumulator.indexOf(currentValue) === -1\n            ? accumulator.concat([currentValue]) : accumulator;\n    }, []);\n}\nfunction concatenateTypeDefs(typeDefinitionsAry, calledFunctionRefs) {\n    if (calledFunctionRefs === void 0) { calledFunctionRefs = []; }\n    var resolvedTypeDefinitions = [];\n    typeDefinitionsAry.forEach(function (typeDef) {\n        if (isDocumentNode(typeDef)) {\n            typeDef = graphql_1.print(typeDef);\n        }\n        if (typeof typeDef === 'function') {\n            if (calledFunctionRefs.indexOf(typeDef) === -1) {\n                calledFunctionRefs.push(typeDef);\n                resolvedTypeDefinitions = resolvedTypeDefinitions.concat(concatenateTypeDefs(typeDef(), calledFunctionRefs));\n            }\n        }\n        else if (typeof typeDef === 'string') {\n            resolvedTypeDefinitions.push(typeDef.trim());\n        }\n        else {\n            var type = typeof typeDef;\n            throw new SchemaError(\"typeDef array must contain only strings and functions, got \" + type);\n        }\n    });\n    return uniq(resolvedTypeDefinitions.map(function (x) { return x.trim(); })).join('\\n');\n}\nexports.concatenateTypeDefs = concatenateTypeDefs;\nfunction buildSchemaFromTypeDefinitions(typeDefinitions, parseOptions) {\n    // TODO: accept only array here, otherwise interfaces get confusing.\n    var myDefinitions = typeDefinitions;\n    var astDocument;\n    if (isDocumentNode(typeDefinitions)) {\n        astDocument = typeDefinitions;\n    }\n    else if (typeof myDefinitions !== 'string') {\n        if (!Array.isArray(myDefinitions)) {\n            var type = typeof myDefinitions;\n            throw new SchemaError(\"typeDefs must be a string, array or schema AST, got \" + type);\n        }\n        myDefinitions = concatenateTypeDefs(myDefinitions);\n    }\n    if (typeof myDefinitions === 'string') {\n        astDocument = graphql_1.parse(myDefinitions, parseOptions);\n    }\n    var backcompatOptions = { commentDescriptions: true };\n    // TODO fix types https://github.com/apollographql/graphql-tools/issues/542\n    var schema = graphql_1.buildASTSchema(astDocument, backcompatOptions);\n    var extensionsAst = extractExtensionDefinitions(astDocument);\n    if (extensionsAst.definitions.length > 0) {\n        // TODO fix types https://github.com/apollographql/graphql-tools/issues/542\n        schema = graphql_1.extendSchema(schema, extensionsAst, backcompatOptions);\n    }\n    return schema;\n}\nexports.buildSchemaFromTypeDefinitions = buildSchemaFromTypeDefinitions;\n// This was changed in graphql@0.12\n// See https://github.com/apollographql/graphql-tools/pull/541\n// TODO fix types https://github.com/apollographql/graphql-tools/issues/542\nvar oldTypeExtensionDefinitionKind = 'TypeExtensionDefinition';\nvar newExtensionDefinitionKind = 'ObjectTypeExtension';\nfunction extractExtensionDefinitions(ast) {\n    var extensionDefs = ast.definitions.filter(function (def) {\n        return def.kind === oldTypeExtensionDefinitionKind ||\n            def.kind === newExtensionDefinitionKind;\n    });\n    return Object.assign({}, ast, {\n        definitions: extensionDefs,\n    });\n}\nexports.extractExtensionDefinitions = extractExtensionDefinitions;\nfunction forEachField(schema, fn) {\n    var typeMap = schema.getTypeMap();\n    Object.keys(typeMap).forEach(function (typeName) {\n        var type = typeMap[typeName];\n        // TODO: maybe have an option to include these?\n        if (!graphql_1.getNamedType(type).name.startsWith('__') &&\n            type instanceof graphql_1.GraphQLObjectType) {\n            var fields_1 = type.getFields();\n            Object.keys(fields_1).forEach(function (fieldName) {\n                var field = fields_1[fieldName];\n                fn(field, typeName, fieldName);\n            });\n        }\n    });\n}\nexports.forEachField = forEachField;\n// takes a GraphQL-JS schema and an object of connectors, then attaches\n// the connectors to the context by wrapping each query or mutation resolve\n// function with a function that attaches connectors if they don't exist.\n// attaches connectors only once to make sure they are singletons\nvar attachConnectorsToContext = deprecated_decorator_1.deprecated({\n    version: '0.7.0',\n    url: 'https://github.com/apollostack/graphql-tools/issues/140',\n}, function (schema, connectors) {\n    if (!schema || !(schema instanceof graphql_1.GraphQLSchema)) {\n        throw new Error('schema must be an instance of GraphQLSchema. ' +\n            'This error could be caused by installing more than one version of GraphQL-JS');\n    }\n    if (typeof connectors !== 'object') {\n        var connectorType = typeof connectors;\n        throw new Error(\"Expected connectors to be of type object, got \" + connectorType);\n    }\n    if (Object.keys(connectors).length === 0) {\n        throw new Error('Expected connectors to not be an empty object');\n    }\n    if (Array.isArray(connectors)) {\n        throw new Error('Expected connectors to be of type object, got Array');\n    }\n    if (schema['_apolloConnectorsAttached']) {\n        throw new Error('Connectors already attached to context, cannot attach more than once');\n    }\n    schema['_apolloConnectorsAttached'] = true;\n    var attachconnectorFn = function (root, args, ctx) {\n        if (typeof ctx !== 'object') {\n            // if in any way possible, we should throw an error when the attachconnectors\n            // function is called, not when a query is executed.\n            var contextType = typeof ctx;\n            throw new Error(\"Cannot attach connector because context is not an object: \" + contextType);\n        }\n        if (typeof ctx.connectors === 'undefined') {\n            ctx.connectors = {};\n        }\n        Object.keys(connectors).forEach(function (connectorName) {\n            var connector = connectors[connectorName];\n            if (!!connector.prototype) {\n                ctx.connectors[connectorName] = new connector(ctx);\n            }\n            else {\n                throw new Error(\"Connector must be a function or an class\");\n            }\n        });\n        return root;\n    };\n    addSchemaLevelResolveFunction(schema, attachconnectorFn);\n});\nexports.attachConnectorsToContext = attachConnectorsToContext;\n// wraps all resolve functions of query, mutation or subscription fields\n// with the provided function to simulate a root schema level resolve funciton\nfunction addSchemaLevelResolveFunction(schema, fn) {\n    // TODO test that schema is a schema, fn is a function\n    var rootTypes = [\n        schema.getQueryType(),\n        schema.getMutationType(),\n        schema.getSubscriptionType(),\n    ].filter(function (x) { return !!x; });\n    rootTypes.forEach(function (type) {\n        // XXX this should run at most once per request to simulate a true root resolver\n        // for graphql-js this is an approximation that works with queries but not mutations\n        var rootResolveFn = runAtMostOncePerRequest(fn);\n        var fields = type.getFields();\n        Object.keys(fields).forEach(function (fieldName) {\n            // XXX if the type is a subscription, a same query AST will be ran multiple times so we\n            // deactivate here the runOnce if it's a subscription. This may not be optimal though...\n            if (type === schema.getSubscriptionType()) {\n                fields[fieldName].resolve = wrapResolver(fields[fieldName].resolve, fn);\n            }\n            else {\n                fields[fieldName].resolve = wrapResolver(fields[fieldName].resolve, rootResolveFn);\n            }\n        });\n    });\n}\nexports.addSchemaLevelResolveFunction = addSchemaLevelResolveFunction;\nfunction getFieldsForType(type) {\n    if (type instanceof graphql_1.GraphQLObjectType ||\n        type instanceof graphql_1.GraphQLInterfaceType) {\n        return type.getFields();\n    }\n    else {\n        return undefined;\n    }\n}\nfunction addResolveFunctionsToSchema(schema, resolveFunctions, resolverValidationOptions) {\n    if (resolverValidationOptions === void 0) { resolverValidationOptions = {}; }\n    var _a = resolverValidationOptions.allowResolversNotInSchema, allowResolversNotInSchema = _a === void 0 ? false : _a;\n    Object.keys(resolveFunctions).forEach(function (typeName) {\n        var type = schema.getType(typeName);\n        if (!type && typeName !== '__schema') {\n            if (allowResolversNotInSchema) {\n                return;\n            }\n            throw new SchemaError(\"\\\"\" + typeName + \"\\\" defined in resolvers, but not in schema\");\n        }\n        Object.keys(resolveFunctions[typeName]).forEach(function (fieldName) {\n            if (fieldName.startsWith('__')) {\n                // this is for isTypeOf and resolveType and all the other stuff.\n                // TODO require resolveType for unions and interfaces.\n                type[fieldName.substring(2)] = resolveFunctions[typeName][fieldName];\n                return;\n            }\n            if (type instanceof graphql_1.GraphQLScalarType) {\n                type[fieldName] = resolveFunctions[typeName][fieldName];\n                return;\n            }\n            if (type instanceof graphql_1.GraphQLEnumType) {\n                if (!type.getValue(fieldName)) {\n                    throw new SchemaError(typeName + \".\" + fieldName + \" was defined in resolvers, but enum is not in schema\");\n                }\n                type.getValue(fieldName)['value'] =\n                    resolveFunctions[typeName][fieldName];\n                return;\n            }\n            var fields = getFieldsForType(type);\n            if (!fields) {\n                if (allowResolversNotInSchema) {\n                    return;\n                }\n                throw new SchemaError(typeName + \" was defined in resolvers, but it's not an object\");\n            }\n            if (!fields[fieldName]) {\n                if (allowResolversNotInSchema) {\n                    return;\n                }\n                throw new SchemaError(typeName + \".\" + fieldName + \" defined in resolvers, but not in schema\");\n            }\n            var field = fields[fieldName];\n            var fieldResolve = resolveFunctions[typeName][fieldName];\n            if (typeof fieldResolve === 'function') {\n                // for convenience. Allows shorter syntax in resolver definition file\n                setFieldProperties(field, { resolve: fieldResolve });\n            }\n            else {\n                if (typeof fieldResolve !== 'object') {\n                    throw new SchemaError(\"Resolver \" + typeName + \".\" + fieldName + \" must be object or function\");\n                }\n                setFieldProperties(field, fieldResolve);\n            }\n        });\n    });\n}\nexports.addResolveFunctionsToSchema = addResolveFunctionsToSchema;\nfunction setFieldProperties(field, propertiesObj) {\n    Object.keys(propertiesObj).forEach(function (propertyName) {\n        field[propertyName] = propertiesObj[propertyName];\n    });\n}\nfunction assertResolveFunctionsPresent(schema, resolverValidationOptions) {\n    if (resolverValidationOptions === void 0) { resolverValidationOptions = {}; }\n    var _a = resolverValidationOptions.requireResolversForArgs, requireResolversForArgs = _a === void 0 ? false : _a, _b = resolverValidationOptions.requireResolversForNonScalar, requireResolversForNonScalar = _b === void 0 ? false : _b, _c = resolverValidationOptions.requireResolversForAllFields, requireResolversForAllFields = _c === void 0 ? false : _c;\n    if (requireResolversForAllFields &&\n        (requireResolversForArgs || requireResolversForNonScalar)) {\n        throw new TypeError('requireResolversForAllFields takes precedence over the more specific assertions. ' +\n            'Please configure either requireResolversForAllFields or requireResolversForArgs / ' +\n            'requireResolversForNonScalar, but not a combination of them.');\n    }\n    forEachField(schema, function (field, typeName, fieldName) {\n        // requires a resolve function for *every* field.\n        if (requireResolversForAllFields) {\n            expectResolveFunction(field, typeName, fieldName);\n        }\n        // requires a resolve function on every field that has arguments\n        if (requireResolversForArgs && field.args.length > 0) {\n            expectResolveFunction(field, typeName, fieldName);\n        }\n        // requires a resolve function on every field that returns a non-scalar type\n        if (requireResolversForNonScalar &&\n            !(graphql_1.getNamedType(field.type) instanceof graphql_1.GraphQLScalarType)) {\n            expectResolveFunction(field, typeName, fieldName);\n        }\n    });\n}\nexports.assertResolveFunctionsPresent = assertResolveFunctionsPresent;\nfunction expectResolveFunction(field, typeName, fieldName) {\n    if (!field.resolve) {\n        console.warn(\n        // tslint:disable-next-line: max-line-length\n        \"Resolve function missing for \\\"\" + typeName + \".\" + fieldName + \"\\\". To disable this warning check https://github.com/apollostack/graphql-tools/issues/131\");\n        return;\n    }\n    if (typeof field.resolve !== 'function') {\n        throw new SchemaError(\"Resolver \\\"\" + typeName + \".\" + fieldName + \"\\\" must be a function\");\n    }\n}\nfunction addErrorLoggingToSchema(schema, logger) {\n    if (!logger) {\n        throw new Error('Must provide a logger');\n    }\n    if (typeof logger.log !== 'function') {\n        throw new Error('Logger.log must be a function');\n    }\n    forEachField(schema, function (field, typeName, fieldName) {\n        var errorHint = typeName + \".\" + fieldName;\n        field.resolve = decorateWithLogger(field.resolve, logger, errorHint);\n    });\n}\nexports.addErrorLoggingToSchema = addErrorLoggingToSchema;\n// XXX badly named function. this doesn't really wrap, it just chains resolvers...\nfunction wrapResolver(innerResolver, outerResolver) {\n    return function (obj, args, ctx, info) {\n        return Promise.resolve(outerResolver(obj, args, ctx, info)).then(function (root) {\n            if (innerResolver) {\n                return innerResolver(root, args, ctx, info);\n            }\n            return graphql_1.defaultFieldResolver(root, args, ctx, info);\n        });\n    };\n}\nfunction chainResolvers(resolvers) {\n    return function (root, args, ctx, info) {\n        return resolvers.reduce(function (prev, curResolver) {\n            if (curResolver) {\n                return curResolver(prev, args, ctx, info);\n            }\n            return graphql_1.defaultFieldResolver(prev, args, ctx, info);\n        }, root);\n    };\n}\nexports.chainResolvers = chainResolvers;\n/*\n * fn: The function to decorate with the logger\n * logger: an object instance of type Logger\n * hint: an optional hint to add to the error's message\n */\nfunction decorateWithLogger(fn, logger, hint) {\n    if (typeof fn === 'undefined') {\n        fn = graphql_1.defaultFieldResolver;\n    }\n    var logError = function (e) {\n        // TODO: clone the error properly\n        var newE = new Error();\n        newE.stack = e.stack;\n        /* istanbul ignore else: always get the hint from addErrorLoggingToSchema */\n        if (hint) {\n            newE['originalMessage'] = e.message;\n            newE['message'] = \"Error in resolver \" + hint + \"\\n\" + e.message;\n        }\n        logger.log(newE);\n    };\n    return function (root, args, ctx, info) {\n        try {\n            var result = fn(root, args, ctx, info);\n            // If the resolve function returns a Promise log any Promise rejects.\n            if (result &&\n                typeof result.then === 'function' &&\n                typeof result.catch === 'function') {\n                result.catch(function (reason) {\n                    // make sure that it's an error we're logging.\n                    var error = reason instanceof Error ? reason : new Error(reason);\n                    logError(error);\n                    // We don't want to leave an unhandled exception so pass on error.\n                    return reason;\n                });\n            }\n            return result;\n        }\n        catch (e) {\n            logError(e);\n            // we want to pass on the error, just in case.\n            throw e;\n        }\n    };\n}\nfunction addCatchUndefinedToSchema(schema) {\n    forEachField(schema, function (field, typeName, fieldName) {\n        var errorHint = typeName + \".\" + fieldName;\n        field.resolve = decorateToCatchUndefined(field.resolve, errorHint);\n    });\n}\nexports.addCatchUndefinedToSchema = addCatchUndefinedToSchema;\nfunction decorateToCatchUndefined(fn, hint) {\n    if (typeof fn === 'undefined') {\n        fn = graphql_1.defaultFieldResolver;\n    }\n    return function (root, args, ctx, info) {\n        var result = fn(root, args, ctx, info);\n        if (typeof result === 'undefined') {\n            throw new Error(\"Resolve function for \\\"\" + hint + \"\\\" returned undefined\");\n        }\n        return result;\n    };\n}\n// XXX this function only works for resolvers\n// XXX very hacky way to remember if the function\n// already ran for this request. This will only work\n// if people don't actually cache the operation.\n// if they do cache the operation, they will have to\n// manually remove the __runAtMostOnce before every request.\nfunction runAtMostOncePerRequest(fn) {\n    var value;\n    var randomNumber = Math.random();\n    return function (root, args, ctx, info) {\n        if (!info.operation['__runAtMostOnce']) {\n            info.operation['__runAtMostOnce'] = {};\n        }\n        if (!info.operation['__runAtMostOnce'][randomNumber]) {\n            info.operation['__runAtMostOnce'][randomNumber] = true;\n            value = fn(root, args, ctx, info);\n        }\n        return value;\n    };\n}\nfunction attachDirectiveResolvers(schema, directiveResolvers) {\n    if (typeof directiveResolvers !== 'object') {\n        throw new Error(\"Expected directiveResolvers to be of type object, got \" + typeof directiveResolvers);\n    }\n    if (Array.isArray(directiveResolvers)) {\n        throw new Error('Expected directiveResolvers to be of type object, got Array');\n    }\n    var schemaDirectives = Object.create(null);\n    Object.keys(directiveResolvers).forEach(function (directiveName) {\n        schemaDirectives[directiveName] = /** @class */ (function (_super) {\n            __extends(class_1, _super);\n            function class_1() {\n                return _super !== null && _super.apply(this, arguments) || this;\n            }\n            class_1.prototype.visitFieldDefinition = function (field) {\n                var _this = this;\n                var resolver = directiveResolvers[directiveName];\n                var originalResolver = field.resolve || graphql_1.defaultFieldResolver;\n                var directiveArgs = this.args;\n                field.resolve = function () {\n                    var args = [];\n                    for (var _i = 0; _i < arguments.length; _i++) {\n                        args[_i] = arguments[_i];\n                    }\n                    var source = args[0], context = args[2], info = args[3];\n                    return resolver(function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {\n                        return [2 /*return*/, originalResolver.apply(field, args)];\n                    }); }); }, source, directiveArgs, context, info);\n                };\n            };\n            return class_1;\n        }(schemaVisitor_1.SchemaDirectiveVisitor));\n    });\n    schemaVisitor_1.SchemaDirectiveVisitor.visitSchemaDirectives(schema, schemaDirectives);\n}\nexports.attachDirectiveResolvers = attachDirectiveResolvers;\n//# sourceMappingURL=schemaGenerator.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql-tools/dist/schemaGenerator.js\n// module id = 32\n// module chunks = 0","var __assign = (this && this.__assign) || Object.assign || function(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n            t[p] = s[p];\r\n    }\r\n    return t;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar lie_ts_1 = require(\"lie-ts\");\r\nvar std_query_1 = require(\"./query/std-query\");\r\nvar transaction_1 = require(\"./query/transaction\");\r\nvar really_small_events_1 = require(\"really-small-events\");\r\nvar utilities_1 = require(\"./utilities\");\r\nvar index_1 = require(\"./database/index\");\r\nvar history_plugin_1 = require(\"./history-plugin\");\r\nvar levenshtein = require(\"levenshtein-edit-distance\");\r\nvar observable_1 = require(\"./observable\");\r\nvar VERSION = 1.63;\r\n// uglifyJS fix\r\nvar str = [\"_util\"];\r\n/**\r\n * The primary abstraction class, there is no database implimintation code here.\r\n * Just events, quries and filters.\r\n *\r\n * @export\r\n * @class NanoSQLInstance\r\n */\r\nvar NanoSQLInstance = /** @class */ (function () {\r\n    function NanoSQLInstance() {\r\n        this.version = VERSION;\r\n        this._onConnectedCallBacks = [];\r\n        var t = this;\r\n        t.isConnected = false;\r\n        t.focused = true;\r\n        t._actions = {};\r\n        t._views = {};\r\n        t.dataModels = {};\r\n        t._events = [\"*\", \"change\", \"delete\", \"upsert\", \"drop\", \"select\", \"error\", \"peer-change\"];\r\n        t._hasEvents = {};\r\n        t.tableNames = [];\r\n        t.plugins = [];\r\n        t.hasPK = {};\r\n        t.skipPurge = {};\r\n        t.toRowFns = {};\r\n        t.tablePKs = {};\r\n        t.toColFns = {};\r\n        t.toColRules = {};\r\n        t.rowFilters = {};\r\n        t.peers = [];\r\n        t.peerEvents = [];\r\n        t.pid = utilities_1.uuid();\r\n        t._randoms = [];\r\n        // t._queryPool = [];\r\n        // t._queryPtr = 0;\r\n        t._randomPtr = 0;\r\n        t.hasAnyEvents = false;\r\n        for (var i = 0; i < 1000; i++) {\r\n            t._randoms.push(utilities_1.random16Bits());\r\n            // t._queryPool.push(new _NanoSQLQuery(t));\r\n        }\r\n        t._callbacks = {};\r\n        t._callbacks[\"*\"] = new really_small_events_1.ReallySmallEvents();\r\n        t.iB = new index_1.NanoSQLDefaultBackend();\r\n        var instanceConnectArgs = {\r\n            models: {},\r\n            actions: {},\r\n            views: {},\r\n            config: {},\r\n            parent: this\r\n        };\r\n        if (t.iB.willConnect) {\r\n            t.iB.willConnect(instanceConnectArgs, function () {\r\n                if (t.iB.didConnect) {\r\n                    t.iB.didConnect(instanceConnectArgs, function () {\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n    NanoSQLInstance.prototype.rowFilter = function (callback) {\r\n        this.rowFilters[this.sTable] = callback;\r\n        return this;\r\n    };\r\n    NanoSQLInstance.prototype.toColumn = function (columnFns) {\r\n        if (!this.toColFns[this.sTable]) {\r\n            this.toColFns[this.sTable] = {};\r\n        }\r\n        this.toColFns[this.sTable] = columnFns;\r\n        return this;\r\n    };\r\n    NanoSQLInstance.prototype.toRow = function (columnFns) {\r\n        if (!this.toRowFns[this.sTable]) {\r\n            this.toRowFns[this.sTable] = {};\r\n        }\r\n        this.toRowFns[this.sTable] = columnFns;\r\n        return this;\r\n    };\r\n    /**\r\n     * nanoSQL generates 50 random 16 bit strings on every launch.\r\n     * If you don't need true randomness you can use this function to get a psudorandom 16 bit string.\r\n     * Performance is orders of a magnitude faster since no random number generator is needed.\r\n     *\r\n     * @returns {string}\r\n     * @memberof NanoSQLInstance\r\n     */\r\n    NanoSQLInstance.prototype.fastRand = function () {\r\n        this._randomPtr++;\r\n        if (this._randomPtr >= this._randoms.length) {\r\n            this._randomPtr = 0;\r\n        }\r\n        return this._randoms[this._randomPtr];\r\n    };\r\n    /**\r\n     * Changes the table pointer to a new table.\r\n     *\r\n     * @param {string} [table]\r\n     * @returns {NanoSQLInstance}\r\n     *\r\n     * @memberOf NanoSQLInstance\r\n     */\r\n    NanoSQLInstance.prototype.table = function (table) {\r\n        if (table)\r\n            this.sTable = table;\r\n        return this;\r\n    };\r\n    NanoSQLInstance.prototype.getPeers = function () {\r\n        return JSON.parse(localStorage.getItem(\"nsql-peers-\" + this.id) || \"[]\");\r\n    };\r\n    /**\r\n     * Inits the backend database for use.\r\n     *\r\n     * Optionally include a custom database driver, otherwise the built in memory driver will be used.\r\n     *\r\n     * @param {NanoSQLBackend} [backend]\r\n     * @returns {(Promise<Object | string>)}\r\n     *\r\n     * @memberOf NanoSQLInstance\r\n     */\r\n    NanoSQLInstance.prototype.connect = function () {\r\n        var _this = this;\r\n        var t = this;\r\n        return new utilities_1.Promise(function (res, rej) {\r\n            var connectArgs = {\r\n                models: t.dataModels,\r\n                actions: t._actions,\r\n                views: t._views,\r\n                config: t._config,\r\n                parent: _this,\r\n            };\r\n            connectArgs.models[str[0]] = [\r\n                { key: \"key\", type: \"string\", props: [\"pk\", \"ai\"] },\r\n                { key: \"value\", type: \"any\" }\r\n            ];\r\n            // if history is enabled, turn on the built in history plugin\r\n            if (t._config && t._config.history) {\r\n                _this.use(new history_plugin_1._NanoSQLHistoryPlugin(t._config.historyMode));\r\n            }\r\n            // If the db mode is not set to disable, add default store to the end of the plugin chain\r\n            if (!t._config || t._config.mode !== false) {\r\n                _this.use(new index_1.NanoSQLDefaultBackend());\r\n            }\r\n            if (typeof window !== \"undefined\" && _this._config && _this._config.peer) {\r\n                _this.peerMode = true;\r\n            }\r\n            utilities_1.fastCHAIN(t.plugins, function (p, i, nextP) {\r\n                if (p.willConnect) {\r\n                    p.willConnect(connectArgs, function (newArgs) {\r\n                        connectArgs = newArgs;\r\n                        nextP();\r\n                    });\r\n                }\r\n                else {\r\n                    nextP();\r\n                }\r\n            }).then(function () {\r\n                t.dataModels = connectArgs.models;\r\n                t._actions = connectArgs.actions;\r\n                t._views = connectArgs.views;\r\n                t._config = connectArgs.config;\r\n                Object.keys(t.dataModels).forEach(function (table) {\r\n                    var hasWild = false;\r\n                    t.dataModels[table] = t.dataModels[table].filter(function (model) {\r\n                        if (model.key === \"*\" && model.type === \"*\") {\r\n                            hasWild = true;\r\n                            return false;\r\n                        }\r\n                        return true;\r\n                    });\r\n                    t.skipPurge[table] = hasWild;\r\n                });\r\n                t.plugins.forEach(function (plugin) {\r\n                    if (plugin.didExec) {\r\n                        t.pluginHasDidExec = true;\r\n                    }\r\n                });\r\n                t.tableNames = Object.keys(t.dataModels);\r\n                var completeConnect = function () {\r\n                    utilities_1.fastALL(t.plugins, function (p, i, nextP) {\r\n                        if (p.getId && !_this.id) {\r\n                            _this.id = p.getId();\r\n                        }\r\n                        if (p.didConnect) {\r\n                            p.didConnect(connectArgs, function () {\r\n                                nextP();\r\n                            });\r\n                        }\r\n                        else {\r\n                            nextP();\r\n                        }\r\n                    }).then(function () {\r\n                        // handle peer features with other browser windows/tabs\r\n                        if (_this.peerMode) {\r\n                            var counter_1 = 0;\r\n                            if (!_this.id) {\r\n                                _this.id = _this.pid;\r\n                            }\r\n                            // Append this peer to the network\r\n                            _this.peers = _this.getPeers();\r\n                            _this.peers.unshift(_this.pid);\r\n                            localStorage.setItem(\"nsql-peers-\" + _this.id, JSON.stringify(_this.peers));\r\n                            // When localstorage changes we may need to possibly update the peer list\r\n                            // or possibly respond to an event from another peer\r\n                            window.addEventListener(\"storage\", function (e) {\r\n                                // peer list updated\r\n                                if (e.key === \"nsql-peers-\" + _this.id) {\r\n                                    _this.peers = _this.getPeers();\r\n                                }\r\n                                // recieved event from another peer\r\n                                if (e.key && e.key.indexOf(_this.pid + \".\") === 0) {\r\n                                    localStorage.removeItem(e.key);\r\n                                    var ev_1 = JSON.parse(e.newValue || \"{}\");\r\n                                    _this.peerEvents.push(ev_1.query.queryID || \"\");\r\n                                    _this.triggerEvent(__assign({}, ev_1, { types: [\"peer-change\"] }));\r\n                                    lie_ts_1.setFast(function () {\r\n                                        _this.triggerEvent(ev_1);\r\n                                    });\r\n                                }\r\n                                // the \"master\" peer checks to make sure all peers have been\r\n                                // cleaning up their mess every 50 requests, if they aren't they\r\n                                // are removed. Keeps localStorage from filling up accidentally.\r\n                                counter_1++;\r\n                                if (counter_1 > 50 && _this.peers[0] === _this.pid) {\r\n                                    counter_1 = 0;\r\n                                    var len = localStorage.length;\r\n                                    var peerKeys_1 = {};\r\n                                    while (len--) {\r\n                                        var key = localStorage.key(len);\r\n                                        // only grab events\r\n                                        var keyMatch = key ? key.match(/\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{8}/gmi) : null;\r\n                                        if (key && keyMatch) {\r\n                                            var peerID = (keyMatch || [\"\"])[0];\r\n                                            if (!peerKeys_1[peerID]) {\r\n                                                peerKeys_1[peerID] = [];\r\n                                            }\r\n                                            peerKeys_1[peerID].push(key);\r\n                                        }\r\n                                    }\r\n                                    Object.keys(peerKeys_1).forEach(function (peerID) {\r\n                                        // purge peers that aren't cleaning up their mess (and thus probably gone)\r\n                                        if (peerKeys_1[peerID].length > 10) {\r\n                                            _this.peers = _this.peers.filter(function (p) { return p !== peerID; });\r\n                                            peerKeys_1[peerID].forEach(function (key) {\r\n                                                localStorage.removeItem(key);\r\n                                            });\r\n                                            localStorage.setItem(\"nsql-peers-\" + _this.id, JSON.stringify(_this.peers));\r\n                                        }\r\n                                    });\r\n                                }\r\n                            });\r\n                            window.onblur = function () {\r\n                                _this.focused = false;\r\n                            };\r\n                            // on focus we set this nsql to focused and move it's peer position\r\n                            // to the front\r\n                            window.onfocus = function () {\r\n                                // set this peer to master on focus\r\n                                _this.peers = _this.peers.filter(function (p) { return p !== _this.pid; });\r\n                                _this.peers.unshift(_this.pid);\r\n                                localStorage.setItem(\"nsql-peers-\" + _this.id, JSON.stringify(_this.peers));\r\n                                _this.focused = true;\r\n                            };\r\n                            // send events to the peer network\r\n                            exports.nSQL(\"*\").on(\"change\", function (ev) {\r\n                                var idxOf = _this.peerEvents.indexOf(ev.query.queryID || \"\");\r\n                                if (idxOf !== -1) {\r\n                                    _this.peerEvents.splice(idxOf, 1);\r\n                                    return;\r\n                                }\r\n                                _this.peers.filter(function (p) { return p !== _this.pid; }).forEach(function (p) {\r\n                                    localStorage.setItem(p + \".\" + ev.query.queryID, JSON.stringify(ev));\r\n                                });\r\n                            });\r\n                            // Remove self from peer network\r\n                            window.addEventListener(\"beforeunload\", function () {\r\n                                _this.peers = _this.peers.filter(function (p) { return p !== _this.pid; });\r\n                                localStorage.setItem(\"nsql-peers-\" + _this.id, JSON.stringify(_this.peers));\r\n                                return false;\r\n                            });\r\n                        }\r\n                        t.isConnected = true;\r\n                        if (t._onConnectedCallBacks.length) {\r\n                            t._onConnectedCallBacks.forEach(function (cb) { return cb(); });\r\n                            t._onConnectedCallBacks = [];\r\n                        }\r\n                        res(t.tableNames);\r\n                    });\r\n                };\r\n                var updateVersion = function (rebuildIDX) {\r\n                    t.query(\"upsert\", { key: \"version\", value: t.version }).manualExec({ table: \"_util\" }).then(function () {\r\n                        if (rebuildIDX) {\r\n                            t.extend(\"beforeConn\", \"rebuild_idx\").then(function () {\r\n                                completeConnect();\r\n                            });\r\n                        }\r\n                        else {\r\n                            completeConnect();\r\n                        }\r\n                    });\r\n                };\r\n                t.query(\"select\").where([\"key\", \"=\", \"version\"]).manualExec({ table: \"_util\" }).then(function (rows) {\r\n                    if (!rows.length) {\r\n                        // new database or an old one that needs indexes rebuilt\r\n                        updateVersion(true);\r\n                    }\r\n                    else {\r\n                        if (rows[0].value <= 1.21) { // secondary indexes need to be rebuilt before 1.21\r\n                            updateVersion(true);\r\n                        }\r\n                        else if (rows[0].value < VERSION) {\r\n                            updateVersion(false);\r\n                        }\r\n                        else {\r\n                            completeConnect();\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Get all actions for a given table\r\n     * =\r\n     * @param {string} table\r\n     * @returns\r\n     * @memberof NanoSQLInstance\r\n     */\r\n    NanoSQLInstance.prototype.getActions = function (table) {\r\n        return this._actions[table].map(function (a) {\r\n            return {\r\n                name: a.name,\r\n                args: a.args\r\n            };\r\n        });\r\n    };\r\n    /**\r\n     * Get all views for a given table\r\n     *\r\n     * @param {string} table\r\n     * @returns\r\n     * @memberof NanoSQLInstance\r\n     */\r\n    NanoSQLInstance.prototype.getViews = function (table) {\r\n        return this._views[table].map(function (a) {\r\n            return {\r\n                name: a.name,\r\n                args: a.args\r\n            };\r\n        });\r\n    };\r\n    /**\r\n     * Grab a copy of the database config object.\r\n     *\r\n     * @returns\r\n     * @memberof NanoSQLInstance\r\n     */\r\n    NanoSQLInstance.prototype.getConfig = function () {\r\n        return this._config || {};\r\n    };\r\n    /**\r\n     * Set the action/view filter function.  Called *before* the action/view is sent to the datastore\r\n     *\r\n     * @param {IActionViewMod} filterFunc\r\n     * @returns\r\n     *\r\n     * @memberOf NanoSQLInstance\r\n     */\r\n    NanoSQLInstance.prototype.avFilter = function (filterFunc) {\r\n        this._AVMod = filterFunc;\r\n        return this;\r\n    };\r\n    NanoSQLInstance.prototype.use = function (plugin) {\r\n        return this.plugins.push(plugin), this;\r\n    };\r\n    /**\r\n     * Adds an event listener to the selected database table.\r\n     *\r\n     * @param {(\"change\"|\"delete\"|\"upsert\"|\"drop\"|\"select\"|\"error\")} actions\r\n     * @param {Function} callBack\r\n     * @returns {NanoSQLInstance}\r\n     *\r\n     * @memberOf NanoSQLInstance\r\n     */\r\n    NanoSQLInstance.prototype.on = function (actions, callBack) {\r\n        var t = this;\r\n        var l = t.sTable;\r\n        var i = t._events.length;\r\n        var a = actions.split(\" \");\r\n        if (Array.isArray(l))\r\n            return this;\r\n        if (!t._callbacks[l]) { // Handle the event handler being called before the database has connected\r\n            t._callbacks[l] = new really_small_events_1.ReallySmallEvents();\r\n        }\r\n        i = a.length;\r\n        while (i--) {\r\n            if (t._events.indexOf(a[i]) !== -1) {\r\n                t._callbacks[l].on(a[i], callBack);\r\n            }\r\n        }\r\n        return t._refreshEventChecker();\r\n    };\r\n    /**\r\n     * Remove a specific event handler from being triggered anymore.\r\n     *\r\n     * @param {Function} callBack\r\n     * @returns {NanoSQLInstance}\r\n     *\r\n     * @memberOf NanoSQLInstance\r\n     */\r\n    NanoSQLInstance.prototype.off = function (actions, callBack) {\r\n        var t = this;\r\n        var a = actions.split(\" \");\r\n        var i = a.length;\r\n        var l = t.sTable;\r\n        if (Array.isArray(l))\r\n            return this;\r\n        while (i--) {\r\n            if (t._events.indexOf(a[i]) !== -1) {\r\n                t._callbacks[l].off(a[i], callBack);\r\n            }\r\n        }\r\n        return t._refreshEventChecker();\r\n    };\r\n    NanoSQLInstance.prototype._refreshEventChecker = function () {\r\n        var _this = this;\r\n        this._hasEvents = {};\r\n        Object.keys(this._callbacks).concat([\"*\"]).forEach(function (table) {\r\n            _this._hasEvents[table] = _this._events.reduce(function (prev, cur) {\r\n                return prev + (_this._callbacks[table] && _this._callbacks[table].eventListeners[cur] ? _this._callbacks[table].eventListeners[cur].length : 0);\r\n            }, 0) > 0;\r\n        });\r\n        this.hasAnyEvents = false;\r\n        Object.keys(this._hasEvents).forEach(function (key) {\r\n            _this.hasAnyEvents = _this.hasAnyEvents || _this._hasEvents[key];\r\n        });\r\n        return this;\r\n    };\r\n    /**\r\n     * Declare the data model for the current selected table.\r\n     *\r\n     * Please reference the DataModel interface for how to impliment this, a quick example:\r\n     *\r\n     * ```ts\r\n     * .model([\r\n     *  {key:\"id\",type:\"int\",props:[\"ai\",\"pk\"]} //auto incriment and primary key\r\n     *  {key:\"name\",type:\"string\"}\r\n     * ])\r\n     * ```\r\n     *\r\n     * @param {Array<DataModel>} dataModel\r\n     * @returns {NanoSQLInstance}\r\n     *\r\n     * @memberOf NanoSQLInstance\r\n     */\r\n    NanoSQLInstance.prototype.model = function (dataModel, props, ignoreSanityCheck) {\r\n        var _this = this;\r\n        var t = this;\r\n        var l = t.sTable;\r\n        if (Array.isArray(l))\r\n            return this;\r\n        if (!t._callbacks[l]) {\r\n            t._callbacks[l] = new really_small_events_1.ReallySmallEvents();\r\n        }\r\n        var hasPK = false;\r\n        if (!ignoreSanityCheck) {\r\n            // validate table name and data model\r\n            var types = [\"string\", \"safestr\", \"timeId\", \"timeIdms\", \"uuid\", \"int\", \"float\", \"number\", \"array\", \"map\", \"bool\", \"blob\", \"any\"];\r\n            if (types.indexOf(l.replace(/\\W/gmi, \"\")) !== -1 || l.indexOf(\"_\") === 0 || l.match(/[\\(\\)\\]\\[\\.]/g) !== null) {\r\n                throw Error(\"Invalid Table Name! https://docs.nanosql.io/setup/data-models\");\r\n            }\r\n            (dataModel || []).forEach(function (model) {\r\n                if (model.key.match(/[\\(\\)\\]\\[\\.]/g) !== null || model.key.indexOf(\"_\") === 0) {\r\n                    throw Error(\"Invalid Data Model! https://docs.nanosql.io/setup/data-models\");\r\n                }\r\n            });\r\n        }\r\n        t.toColRules[l] = {};\r\n        (dataModel || []).forEach(function (model) {\r\n            if (model.props) {\r\n                model.props.forEach(function (prop) {\r\n                    // old format: from=>fn(arg1, arg2);\r\n                    if (prop.indexOf(\"from=>\") !== -1 && prop.indexOf(\"(\") !== -1) {\r\n                        var fnName = prop.replace(\"from=>\", \"\").split(\"(\").shift();\r\n                        var fnArgs = prop.replace(\"from=>\", \"\").split(\"(\").pop().replace(\")\", \"\").split(\",\").map(function (c) { return c.trim(); });\r\n                        t.toColRules[l][model.key] = [fnName].concat(fnArgs);\r\n                    }\r\n                    // new format: toColumn.fn(arg1, arg2);\r\n                    if (prop.indexOf(\"toColumn.\") === 0) {\r\n                        var fnName = prop.replace(/toColumn\\.(.*)\\(.*\\)/gmi, \"$1\");\r\n                        var fnArgs = prop.replace(/toColumn\\..*\\((.*)\\)/gmi, \"$1\").split(\",\").map(function (c) { return c.trim(); });\r\n                        t.toColRules[l][model.key] = [fnName].concat(fnArgs);\r\n                    }\r\n                });\r\n            }\r\n            if (model.props && utilities_1.intersect([\"pk\", \"pk()\"], model.props)) {\r\n                _this.tablePKs[l] = model.key;\r\n                hasPK = true;\r\n            }\r\n        });\r\n        this.hasPK[l] = hasPK;\r\n        if (!hasPK) {\r\n            this.tablePKs[l] = \"_id_\";\r\n            dataModel.unshift({ key: \"_id_\", type: \"uuid\", props: [\"pk()\"] });\r\n        }\r\n        t.dataModels[l] = dataModel;\r\n        t._views[l] = [];\r\n        t._actions[l] = [];\r\n        return t;\r\n    };\r\n    /**\r\n     * Declare the views for the current selected table.  Must be called before connect()\r\n     *\r\n     * Views are created like this:\r\n     *\r\n     * ```ts\r\n     * .views([\r\n     *  {\r\n     *      name:\"view-name\",\r\n     *      args: [\"array\",\"of\",\"arguments\"],\r\n     *      call: function(args) {\r\n     *          // Because of our \"args\" array the args input of this function will look like this:\r\n     *          // NanoSQL will not let any other arguments into this function.\r\n     *          args:{\r\n     *              array:'',\r\n     *              of:'',\r\n     *              arguments:''\r\n     *          }\r\n     *          //We can use them in our query\r\n     *          return this.query('select').where(['name','IN',args.array]).exec();\r\n     *      }\r\n     *  }\r\n     * ])\r\n     * ```\r\n     *\r\n     * Then later in your app..\r\n     *\r\n     * ```ts\r\n     * NanoSQL(\"users\").getView(\"view-name\",{array:'',of:\"\",arguments:\"\"}).then(function(result) {\r\n     *  console.log(result) <=== result of your view will be there.\r\n     * })\r\n     * ```\r\n     *\r\n     * Optionally you can type cast the arguments at run time typescript style, just add the types after the arguments in the array.  Like this:\r\n     *\r\n     * ```ts\r\n     * .views[{\r\n     *      name:...\r\n     *      args:[\"name:string\",\"balance:float\",\"active:bool\"]\r\n     *      call:...\r\n     * }]\r\n     * ```\r\n     *\r\n     * NanoSQL will force the arguments passed into the function to those types.\r\n     *\r\n     * Possible types are string, bool, float, int, map, array and bool.\r\n     *\r\n     * @param {Array<ActionOrView>} viewArray\r\n     * @returns {NanoSQLInstance}\r\n     *\r\n     * @memberOf NanoSQLInstance\r\n     */\r\n    NanoSQLInstance.prototype.views = function (viewArray) {\r\n        if (Array.isArray(this.sTable))\r\n            return this;\r\n        return this._views[this.sTable] = viewArray, this;\r\n    };\r\n    /**\r\n     * Execute a specific view.  Refernece the \"views\" function for more description.\r\n     *\r\n     * Example:\r\n     * ```ts\r\n     * NanoSQL(\"users\").getView('view-name',{foo:\"bar\"}).then(function(result) {\r\n     *  console.log(result) <== view result.\r\n     * })\r\n     * ```\r\n     *\r\n     * @param {string} viewName\r\n     * @param {any} viewArgs\r\n     * @returns {(Promise<Array<Object>>)}\r\n     *\r\n     * @memberOf NanoSQLInstance\r\n     */\r\n    NanoSQLInstance.prototype.getView = function (viewName, viewArgs) {\r\n        if (viewArgs === void 0) { viewArgs = {}; }\r\n        if (Array.isArray(this.sTable))\r\n            return new utilities_1.Promise(function (res, rej) { return rej(); });\r\n        return this._doAV(\"View\", this._views[this.sTable], viewName, viewArgs);\r\n    };\r\n    /**\r\n     * Declare the actions for the current selected table.  Must be called before connect()\r\n     *\r\n     * Actions are created like this:\r\n     * ```ts\r\n     * .actions([\r\n     *  {\r\n     *      name:\"action-name\",\r\n     *      args: [\"array\",\"of\",\"arguments\"],\r\n     *      call: function(args) {\r\n     *          // Because of our \"args\" array the args input of this function will look like this:\r\n     *          // NanoSQL will not let any other arguments into this function.\r\n     *          args:{\r\n     *              array:'',\r\n     *              of:'',\r\n     *              arguments:''\r\n     *          }\r\n     *          //We can use them in our query\r\n     *          return this.query(\"upsert\",{balance:0}).where(['name','IN',args.array]).exec();\r\n     *      }\r\n     *  }\r\n     * ])\r\n     * ```\r\n     *\r\n     * Then later in your app..\r\n     *\r\n     * ```ts\r\n     * NanoSQL(\"users\").doAction(\"action-name\",{array:'',of:\"\",arguments:\"\"}).then(function(result) {\r\n     *  console.log(result) <=== result of your view will be there.\r\n     * })\r\n     * ```\r\n     *\r\n     * Optionally you can type cast the arguments at run time typescript style, just add the types after the arguments in the array.  Like this:\r\n     * ```ts\r\n     * .actions[{\r\n     *      name:...\r\n     *      args:[\"name:string\",\"balance:float\",\"active:bool\"]\r\n     *      call:...\r\n     * }]\r\n     * ```\r\n     *\r\n     * NanoSQL will force the arguments passed into the function to those types.\r\n     *\r\n     * Possible types are string, bool, float, int, map, array and bool.\r\n     *\r\n     * @param {Array<ActionOrView>} actionArray\r\n     * @returns {NanoSQLInstance}\r\n     *\r\n     * @memberOf NanoSQLInstance\r\n     */\r\n    NanoSQLInstance.prototype.actions = function (actionArray) {\r\n        if (Array.isArray(this.sTable))\r\n            return this;\r\n        return this._actions[this.sTable] = actionArray, this;\r\n    };\r\n    /**\r\n     * Init an action for the current selected table. Reference the \"actions\" method for more info.\r\n     *\r\n     * Example:\r\n     * ```ts\r\n     * NanoSQL(\"users\").doAction('action-name',{foo:\"bar\"}).then(function(result) {\r\n     *      console.log(result) <== result of your action\r\n     * });\r\n     * ```\r\n     *\r\n     * @param {string} actionName\r\n     * @param {any} actionArgs\r\n     * @returns {(Promise<Array<Object>>)}\r\n     *\r\n     * @memberOf NanoSQLInstance\r\n     */\r\n    NanoSQLInstance.prototype.doAction = function (actionName, actionArgs) {\r\n        if (Array.isArray(this.sTable))\r\n            return new utilities_1.Promise(function (res, rej) { return rej(); });\r\n        return this._doAV(\"Action\", this._actions[this.sTable], actionName, actionArgs);\r\n    };\r\n    /**\r\n     * Adds a query filter to every request.\r\n     *\r\n     * @param {(args: DBExec, complete:(args: DBExec) => void) => void} callBack\r\n     *\r\n     * @memberOf NanoSQLInstance\r\n     */\r\n    NanoSQLInstance.prototype.queryFilter = function (callBack) {\r\n        this.queryMod = callBack;\r\n        return this;\r\n    };\r\n    /**\r\n     * Internal function to fire action/views.\r\n     *\r\n     * @private\r\n     * @param {(\"Action\"|\"View\")} AVType\r\n     * @param {ActionOrView[]} AVList\r\n     * @param {string} AVName\r\n     * @param {*} AVargs\r\n     * @returns {(Promise<Array<DBRow>|NanoSQLInstance>)}\r\n     *\r\n     * @memberOf NanoSQLInstance\r\n     */\r\n    NanoSQLInstance.prototype._doAV = function (AVType, AVList, AVName, AVargs) {\r\n        var _this = this;\r\n        var t = this;\r\n        var selAV = AVList.reduce(function (prev, cur) {\r\n            if (cur.name === AVName)\r\n                return cur;\r\n            return prev;\r\n        }, null);\r\n        if (!selAV) {\r\n            return new utilities_1.Promise(function (res, rej) { return rej(\"Action/View Not Found!\"); });\r\n        }\r\n        t._activeAV = AVName;\r\n        if (t._AVMod) {\r\n            return new utilities_1.Promise(function (res, rej) {\r\n                t._AVMod(_this.sTable, AVType, t._activeAV || \"\", AVargs, function (args) {\r\n                    selAV.call(selAV.args ? utilities_1.cleanArgs(selAV.args, args) : {}, t).then(res).catch(rej);\r\n                }, function (err) {\r\n                    rej(err);\r\n                });\r\n            });\r\n        }\r\n        else {\r\n            return selAV.call(selAV.args ? utilities_1.cleanArgs(selAV.args, AVargs) : {}, t);\r\n        }\r\n    };\r\n    /**\r\n     * Start a query into the current selected table.\r\n     * Possibl querys are \"select\", \"upsert\", \"delete\", and \"drop\";\r\n     *\r\n     * ### Select\r\n     *\r\n     * Select is used to pull a set of rows or other data from the table.\r\n     * When you use select the optional second argument of the query is an array of strings that allow you to show only specific columns.\r\n     *\r\n     * Examples:\r\n     * ```ts\r\n     * .query(\"select\") // No arguments, select all columns\r\n     * .query(\"select\",['username']) // only get the username column\r\n     * .query(\"select\",[\"username\",\"balance\"]) //Get two columns, username and balance.\r\n     * .query(\"select\",[\"count(*)\"]) //Get the length of records in the database\r\n     * ```\r\n     *\r\n     * ### Upsert\r\n     *\r\n     * Upsert is used to add or modify data in the database.\r\n     * If the primary key rows are null or undefined, the data will always be added in a new row. Otherwise, you might be updating existing rows.\r\n     * The second argument of the query with upserts is always an Object of the data to upsert.\r\n     *\r\n     * Examples:\r\n     * ```ts\r\n     * .query(\"upsert\",{id:1, username:\"Scott\"}) //If row ID 1 exists, set the username to scott, otherwise create a new row with this data.\r\n     * .query(\"upsert\",{username:\"Scott\"}) //Add a new row to the db with this username in the row.\r\n     * .query(\"upsert\",{balance:-35}).where([\"balance\",\"<\",0]) // If you use a WHERE statement this data will be applied to the rows found with the where statement.\r\n     * ```\r\n     *\r\n     * ### Delete\r\n     *\r\n     * Delete is used to remove data from the database.\r\n     * It works exactly like select, except it removes data instead of selecting it.  The second argument is an array of columns to clear.  If no second argument is passed, the entire row is deleted.\r\n     * If no where argument is passed, the entire table is dropped\r\n     *\r\n     * Examples:\r\n     * ```ts\r\n     * .query(\"delete\",['balance']) //Clear the contents of the balance column on ALL rows.\r\n     * .query(\"delete\",['comments']).where([\"accountType\",\"=\",\"spammer\"]) // If a where statment is passed you'll only clear the columns of the rows selected by the where statement.\r\n     * .query(\"delete\").where([\"balance\",\"<\",0]) // remove all rows with a balance less than zero\r\n     * .query(\"delete\") // Same as drop statement\r\n     * ```\r\n     *\r\n     * ### Drop\r\n     *\r\n     * Drop is used to completely clear the contents of a database.  There are no arguments.\r\n     *\r\n     * Drop Examples:\r\n     * ```ts\r\n     * .query(\"drop\")\r\n     * ```\r\n     *\r\n     * @param {(\"select\"|\"upsert\"|\"delete\"|\"drop\")} action\r\n     * @param {any} [args]\r\n     * @returns {NanoSQLInstance}\r\n     *\r\n     * @memberOf NanoSQLInstance\r\n     */\r\n    NanoSQLInstance.prototype.query = function (action, args) {\r\n        /*let t = this;\r\n        t._queryPtr++;\r\n        if (t._queryPtr > t._queryPool.length - 1) {\r\n            t._queryPtr = 0;\r\n        }\r\n        const av = t._activeAV;\r\n        t._activeAV = undefined;\r\n        return t._queryPool[t._queryPtr].set(t.sTable, action.toLowerCase(), args, av);*/\r\n        var t = this;\r\n        var av = t._activeAV;\r\n        t._activeAV = undefined;\r\n        return new std_query_1._NanoSQLQuery(this, this.sTable, action, args, av);\r\n    };\r\n    NanoSQLInstance.prototype.onConnected = function (callback) {\r\n        if (this.isConnected) {\r\n            callback();\r\n        }\r\n        else {\r\n            this._onConnectedCallBacks.push(callback);\r\n        }\r\n    };\r\n    /**\r\n     * Trigger a database event\r\n     *\r\n     * @param {DatabaseEvent} eventData\r\n     *\r\n     * @memberOf NanoSQLInstance\r\n     */\r\n    NanoSQLInstance.prototype.triggerEvent = function (eventData) {\r\n        var t = this;\r\n        if (t._hasEvents[\"*\"] || t._hasEvents[eventData.table]) {\r\n            if (eventData.table === \"*\")\r\n                return this;\r\n            lie_ts_1.setFast(function () {\r\n                var c;\r\n                eventData.types.forEach(function (type) {\r\n                    // trigger wildcard\r\n                    t._callbacks[\"*\"].trigger(type, eventData, t);\r\n                    t._callbacks[\"*\"].trigger(\"*\", eventData, t);\r\n                    // trigger specific table\r\n                    if (eventData.table && t._callbacks[eventData.table]) {\r\n                        t._callbacks[eventData.table].trigger(type, eventData, t);\r\n                    }\r\n                });\r\n            });\r\n        }\r\n        return t;\r\n    };\r\n    /**\r\n     * Returns a default object for the current table's data model, useful for forms.\r\n     *\r\n     * The optional argument lets you pass in an object to over write the data model's defaults as desired.\r\n     *\r\n     * Examples:\r\n     *\r\n     * ```ts\r\n     * console.log(NanoSQL(\"users\").default()) <= {username:\"none\", id:undefined, age: 0}\r\n     * console.log(NanoSQL(\"users\").default({username:\"defalt\"})) <= {username:\"default\", id:undefined, age: 0}\r\n     * ```\r\n     *\r\n     * DO NOT use this inside upsert commands like `.query(\"upsert\",NanoSQL(\"users\").defalt({userObj}))..`.\r\n     * The database defaults are already applied through the upsert path, you'll be doing double work.\r\n     *\r\n     * Only use this to pull default values into a form in your UI or similar situation.\r\n     *\r\n     * @param {*} [replaceObj]\r\n     * @returns {{[key: string]: any}}\r\n     *\r\n     * @memberOf NanoSQLInstance\r\n     */\r\n    NanoSQLInstance.prototype.default = function (replaceObj) {\r\n        var newObj = {};\r\n        var t = this;\r\n        if (Array.isArray(t.sTable))\r\n            return {};\r\n        t.dataModels[t.sTable].forEach(function (m) {\r\n            // set key to object argument or the default value in the data model\r\n            newObj[m.key] = (replaceObj && replaceObj[m.key]) ? replaceObj[m.key] : m.default;\r\n            // Generate default value from type, eg int = 0, string = \"\"\r\n            if (newObj[m.key] === undefined) {\r\n                newObj[m.key] = utilities_1.cast(m.type, null);\r\n            }\r\n        });\r\n        return newObj;\r\n    };\r\n    /**\r\n     * Get the raw contents of the database, provides all tables.\r\n     *\r\n     * Optionally pass in the tables to export.  If no tables are provided then all tables will be dumped.\r\n     *\r\n     * @returns\r\n     * @memberof NanoSQLInstance\r\n     */\r\n    NanoSQLInstance.prototype.rawDump = function (tables) {\r\n        var _this = this;\r\n        return new utilities_1.Promise(function (res, rej) {\r\n            var result = {};\r\n            utilities_1.fastCHAIN(_this.plugins, function (plugin, i, next) {\r\n                if (plugin.dumpTables) {\r\n                    plugin.dumpTables(tables).then(function (tables) {\r\n                        result = __assign({}, result, tables);\r\n                        next(result);\r\n                    });\r\n                }\r\n                else {\r\n                    next();\r\n                }\r\n            }).then(function () {\r\n                res(result);\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Import table data directly into the datatabase.\r\n     * Signifincatly faster than .loadJS but doesn't do type checking, indexing or anything else fancy.\r\n     *\r\n     * @param {{[table: string]: DBRow[]}} tables\r\n     * @returns\r\n     * @memberof NanoSQLInstance\r\n     */\r\n    NanoSQLInstance.prototype.rawImport = function (tables, onProgress) {\r\n        var _this = this;\r\n        return new utilities_1.Promise(function (res, rej) {\r\n            utilities_1.fastCHAIN(_this.plugins, function (plugin, i, next) {\r\n                if (plugin.importTables) {\r\n                    plugin.importTables(tables, onProgress || (function (c) { })).then(next);\r\n                }\r\n                else {\r\n                    next();\r\n                }\r\n            }).then(function () {\r\n                res();\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Request disconnect from all databases.\r\n     *\r\n     * @returns\r\n     * @memberof NanoSQLInstance\r\n     */\r\n    NanoSQLInstance.prototype.disconnect = function () {\r\n        return utilities_1.fastCHAIN(this.plugins, function (plugin, i, next) {\r\n            if (plugin.willDisconnect) {\r\n                plugin.willDisconnect(next);\r\n            }\r\n            else {\r\n                next();\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Executes a transaction against the database, batching all the queries together.\r\n     *\r\n     * @param {((\r\n     *         db: (table?: string) => {\r\n     *             query: (action: \"select\"|\"upsert\"|\"delete\"|\"drop\"|\"show tables\"|\"describe\", args?: any) => _NanoSQLTransactionQuery;\r\n     *             updateORM: (action: \"add\"|\"delete\"|\"drop\"|\"set\", column?: string, relationIDs?: any[]) => _NanoSQLTransactionORMQuery|undefined;\r\n     *         }, complete: () => void) => void)} initTransaction\r\n     * @returns {Promise<any>}\r\n     *\r\n     * @memberof NanoSQLInstance\r\n     */\r\n    NanoSQLInstance.prototype.doTransaction = function (initTransaction) {\r\n        var _this = this;\r\n        var t = this;\r\n        var queries = [];\r\n        var transactionID = utilities_1.random16Bits().toString(16);\r\n        return new utilities_1.Promise(function (resolve, reject) {\r\n            if (!t.plugins.length) {\r\n                reject(\"nSQL: Nothing to do, no plugins!\");\r\n                return;\r\n            }\r\n            var run = function () {\r\n                utilities_1.fastCHAIN(t.plugins, function (p, i, nextP) {\r\n                    if (p.transactionBegin) {\r\n                        p.transactionBegin(transactionID, nextP);\r\n                    }\r\n                    else {\r\n                        nextP();\r\n                    }\r\n                }).then(function () {\r\n                    if (Array.isArray(t.sTable))\r\n                        return;\r\n                    initTransaction(function (table) {\r\n                        var ta = table || t.sTable;\r\n                        return {\r\n                            query: function (action, args) {\r\n                                return new transaction_1._NanoSQLTransactionQuery(action, args, ta, queries, transactionID);\r\n                            }\r\n                        };\r\n                    }, function () {\r\n                        var tables = [];\r\n                        utilities_1.fastCHAIN(queries, function (quer, i, nextQuery) {\r\n                            tables.push(quer.table);\r\n                            t.query(quer.action, quer.actionArgs).manualExec(__assign({}, quer, { table: quer.table, transaction: true, queryID: transactionID })).then(nextQuery);\r\n                        }).then(function (results) {\r\n                            utilities_1.fastCHAIN(_this.plugins, function (p, i, nextP) {\r\n                                if (p.transactionEnd) {\r\n                                    p.transactionEnd(transactionID, nextP);\r\n                                }\r\n                                else {\r\n                                    nextP();\r\n                                }\r\n                            }).then(function () {\r\n                                tables.filter(function (val, idx, self) {\r\n                                    return self.indexOf(val) === idx;\r\n                                }).forEach(function (table) {\r\n                                    if (table.indexOf(\"_\") !== 0) {\r\n                                        t.triggerEvent({\r\n                                            query: queries[0],\r\n                                            table: table,\r\n                                            time: new Date().getTime(),\r\n                                            result: results,\r\n                                            types: [\"transaction\"],\r\n                                            actionOrView: \"\",\r\n                                            notes: [],\r\n                                            transactionID: transactionID,\r\n                                            affectedRowPKS: [],\r\n                                            affectedRows: []\r\n                                        });\r\n                                    }\r\n                                });\r\n                                resolve(results);\r\n                            });\r\n                        });\r\n                    });\r\n                });\r\n            };\r\n            if (_this.isConnected) {\r\n                run();\r\n            }\r\n            else {\r\n                _this.onConnected(run);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Configure the database driver, must be called before the connect() method.\r\n     *\r\n     * @param {any} args\r\n     * @returns {NanoSQLInstance}\r\n     *\r\n     * @memberOf NanoSQLInstance\r\n     */\r\n    NanoSQLInstance.prototype.config = function (args) {\r\n        this._config = args;\r\n        return this;\r\n    };\r\n    /**\r\n     * Init obvserable query.\r\n     *\r\n     * Usage:\r\n     * ```ts\r\n     * nSQL()\r\n     * .observable(() => nSQL(\"message\").query(\"select\").emit())\r\n     * .filter((rows, idx) => rows.length > 0)\r\n     * .subscribe((rows, event) => {\r\n     *\r\n     * });\r\n     *\r\n     * ```\r\n     *\r\n     * @template T\r\n     * @param {((ev?: DatabaseEvent) => IdbQueryExec|undefined)} getQuery\r\n     * @param {string[]} [tablesToListen]\r\n     * @returns {Observer<T>}\r\n     * @memberof NanoSQLInstance\r\n     */\r\n    NanoSQLInstance.prototype.observable = function (getQuery, tablesToListen) {\r\n        return new observable_1.Observer(this, getQuery, tablesToListen || []);\r\n    };\r\n    /**\r\n     * Perform a custom action supported by the database driver.\r\n     *\r\n     * @param {...Array<any>} args\r\n     * @returns {*}\r\n     *\r\n     * @memberOf NanoSQLInstance\r\n     */\r\n    NanoSQLInstance.prototype.extend = function () {\r\n        var _this = this;\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        var t = this;\r\n        return new utilities_1.Promise(function (res, rej) {\r\n            var run = function () {\r\n                if (t.plugins.length) { // Query Mode\r\n                    var newArgs_1 = args;\r\n                    var result_1 = [];\r\n                    utilities_1.fastCHAIN(t.plugins, function (p, i, nextP) {\r\n                        if (p.extend) {\r\n                            p.extend(function (nArgs, newResult) {\r\n                                newArgs_1 = nArgs;\r\n                                result_1 = newResult;\r\n                                nextP();\r\n                            }, newArgs_1, result_1);\r\n                        }\r\n                        else {\r\n                            nextP();\r\n                        }\r\n                    }).then(function () {\r\n                        res(result_1);\r\n                    });\r\n                }\r\n                else {\r\n                    rej(\"No plugins!\");\r\n                }\r\n            };\r\n            if (args[0] === \"beforeConn\") {\r\n                args.shift();\r\n                run();\r\n                return;\r\n            }\r\n            if (_this.isConnected) {\r\n                run();\r\n            }\r\n            else {\r\n                _this.onConnected(run);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Load JSON directly into the DB.\r\n     * JSON must be an array of maps, like this:\r\n     * ```ts\r\n     * [\r\n     *  {\"name\":\"billy\",\"age\":20},\r\n     *  {\"name\":\"johnny\":\"age\":30}\r\n     * ]\r\n     * ```\r\n     *\r\n     * Rows must align with the data model.  Row data that isn't in the data model will be ignored.\r\n     *\r\n     * @param {string} table\r\n     * @param {Array<Object>} rows\r\n     * @returns {Promise<Array<Object>>}\r\n     *\r\n     * @memberOf NanoSQLInstance\r\n     */\r\n    NanoSQLInstance.prototype.loadJS = function (table, rows, useTransaction, onProgress) {\r\n        var _this = this;\r\n        var t = this;\r\n        if (useTransaction) {\r\n            return t.doTransaction(function (db, complete) {\r\n                rows.forEach(function (row) {\r\n                    db(table).query(\"upsert\", row).exec();\r\n                });\r\n                complete();\r\n            });\r\n        }\r\n        else {\r\n            return new utilities_1.Promise(function (res, rej) {\r\n                utilities_1.fastCHAIN(rows, function (row, i, nextRow) {\r\n                    if (onProgress)\r\n                        onProgress(Math.round(((i + 1) / rows.length) * 10000) / 100);\r\n                    _this.query(\"upsert\", row).manualExec({ table: table }).then(nextRow);\r\n                }).then(function (rows) {\r\n                    res(rows.map(function (r) { return r.shift(); }));\r\n                });\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Convert a JSON array of objects to a CSV.\r\n     *\r\n     * @param {any[]} json\r\n     * @param {boolean} [printHeaders]\r\n     * @param {string[]} [useHeaders]\r\n     * @returns {string}\r\n     * @memberof NanoSQLInstance\r\n     */\r\n    NanoSQLInstance.prototype.JSONtoCSV = function (json, printHeaders, useHeaders) {\r\n        var csv = [];\r\n        if (!json.length) {\r\n            return \"\";\r\n        }\r\n        var columnHeaders = [];\r\n        if (useHeaders) {\r\n            // use provided headers (much faster)\r\n            columnHeaders = useHeaders;\r\n        }\r\n        else {\r\n            // auto detect headers\r\n            json.forEach(function (json) {\r\n                columnHeaders = utilities_1.removeDuplicates(Object.keys(json).concat(columnHeaders));\r\n            });\r\n        }\r\n        if (printHeaders) {\r\n            csv.push(columnHeaders.join(\",\"));\r\n        }\r\n        json.forEach(function (row) {\r\n            csv.push(columnHeaders.map(function (k) {\r\n                if (row[k] === null || row[k] === undefined) {\r\n                    return \"\";\r\n                }\r\n                if (typeof row[k] === \"string\") {\r\n                    // tslint:disable-next-line\r\n                    return \"\\\"\" + (row[k]).replace(/\\\"/g, '\\\"\\\"') + \"\\\"\";\r\n                }\r\n                if (typeof row[k] === \"boolean\") {\r\n                    return row[k] === true ? \"true\" : \"false\";\r\n                }\r\n                // tslint:disable-next-line\r\n                return typeof row[k] === \"object\" ? \"\\\"\" + JSON.stringify(row[k]).replace(/\\\"/g, '\\'') + \"\\\"\" : row[k];\r\n            }).join(\",\"));\r\n        });\r\n        return csv.join(\"\\r\\n\");\r\n    };\r\n    /**\r\n     * Convert a CSV to array of JSON objects\r\n     *\r\n     * @param {string} csv\r\n     * @param {(row: any) => any} [rowMap]\r\n     * @returns {*}\r\n     * @memberof NanoSQLInstance\r\n     */\r\n    NanoSQLInstance.prototype.CSVtoJSON = function (csv, rowMap) {\r\n        var t = this;\r\n        var fields = [];\r\n        return csv.split(/\\r?\\n|\\r|\\t/gm).map(function (v, k) {\r\n            if (k === 0) {\r\n                fields = v.split(\",\");\r\n                return undefined;\r\n            }\r\n            else {\r\n                var record = {};\r\n                var row_1 = v.match(/(,)|([\"|\\[|\\{].*?[\"|\\]|\\}]|[^\",\\s]+)(?=\\s*,|\\s*$)/g) || [];\r\n                var fits = false;\r\n                if (row_1[0] === \",\") {\r\n                    row_1.unshift(\"\");\r\n                }\r\n                var _loop_1 = function () {\r\n                    var doBreak = false;\r\n                    row_1.forEach(function (val, i) {\r\n                        if (doBreak)\r\n                            return;\r\n                        if (val === \",\") {\r\n                            if (typeof row_1[i + 1] === \"undefined\" || row_1[i + 1] === \",\") {\r\n                                doBreak = true;\r\n                                row_1.splice(i + 1, 0, \"\");\r\n                            }\r\n                        }\r\n                    });\r\n                    if (!doBreak) {\r\n                        fits = true;\r\n                    }\r\n                    else {\r\n                        return \"break\";\r\n                    }\r\n                };\r\n                while (!fits) {\r\n                    var state_1 = _loop_1();\r\n                    if (state_1 === \"break\")\r\n                        break;\r\n                }\r\n                row_1 = row_1.filter(function (v, i) { return i % 2 === 0; });\r\n                var i = fields.length;\r\n                while (i--) {\r\n                    if (row_1[i]) {\r\n                        if (row_1[i] === \"true\" || row_1[i] === \"false\") {\r\n                            record[fields[i]] = row_1[i] === \"true\";\r\n                        }\r\n                        else if (row_1[i].indexOf(\"{\") === 1 || row_1[i].indexOf(\"[\") === 1) {\r\n                            // tslint:disable-next-line\r\n                            record[fields[i]] = JSON.parse(row_1[i].slice(1, row_1[i].length - 1).replace(/'/gm, '\\\"'));\r\n                            // tslint:disable-next-line\r\n                        }\r\n                        else if (row_1[i].indexOf('\"') === 0) {\r\n                            record[fields[i]] = row_1[i].slice(1, row_1[i].length - 1).replace(/\\\"\\\"/gmi, \"\\\"\");\r\n                        }\r\n                        else {\r\n                            record[fields[i]] = row_1[i];\r\n                        }\r\n                    }\r\n                }\r\n                if (rowMap) {\r\n                    return rowMap(record);\r\n                }\r\n                return record;\r\n            }\r\n        }).filter(function (r) { return r; });\r\n    };\r\n    /**\r\n     * Load a CSV file into the DB.  Headers must exist and will be used to identify what columns to attach the data to.\r\n     *\r\n     * This function performs a bunch of upserts, so expect appropriate behavior based on the primary key.\r\n     *\r\n     * Rows must align with the data model.  Row data that isn't in the data model will be ignored.\r\n     *\r\n     * @param {string} csv\r\n     * @returns {(Promise<Array<Object>>)}\r\n     *\r\n     * @memberOf NanoSQLInstance\r\n     */\r\n    NanoSQLInstance.prototype.loadCSV = function (table, csv, useTransaction, rowMap, onProgress) {\r\n        var _this = this;\r\n        var t = this;\r\n        var rowData = this.CSVtoJSON(csv, rowMap);\r\n        if (useTransaction) {\r\n            return t.doTransaction(function (db, complete) {\r\n                rowData.forEach(function (row) {\r\n                    db(table).query(\"upsert\", row).exec();\r\n                });\r\n                complete();\r\n            });\r\n        }\r\n        else {\r\n            return new utilities_1.Promise(function (res, rej) {\r\n                utilities_1.fastCHAIN(rowData, function (row, i, nextRow) {\r\n                    if (onProgress)\r\n                        onProgress(Math.round(((i + 1) / rowData.length) * 10000) / 100);\r\n                    _this.query(\"upsert\", row).manualExec({ table: table }).then(nextRow);\r\n                }).then(function (rows) {\r\n                    res(rows.map(function (r) { return r.shift(); }));\r\n                });\r\n            });\r\n        }\r\n    };\r\n    NanoSQLInstance.earthRadius = 6371;\r\n    return NanoSQLInstance;\r\n}());\r\nexports.NanoSQLInstance = NanoSQLInstance;\r\nvar wordLevenshtienCache = {};\r\nNanoSQLInstance.whereFunctions = {\r\n    levenshtein: function (row, isJoin, word, column) {\r\n        var val = utilities_1.objQuery(column, row, isJoin) || \"\";\r\n        var key = val + \"::\" + word;\r\n        if (!wordLevenshtienCache[key]) {\r\n            wordLevenshtienCache[key] = levenshtein(val, word);\r\n        }\r\n        return wordLevenshtienCache[key];\r\n    },\r\n    crow: function (row, isJoin, lat, lon, latColumn, lonColumn) {\r\n        var latCol = latColumn || \"lat\";\r\n        var lonCol = lonColumn || \"lon\";\r\n        var latVal = utilities_1.objQuery(latCol, row, isJoin);\r\n        var lonVal = utilities_1.objQuery(lonCol, row, isJoin);\r\n        return utilities_1.crowDistance(latVal, lonVal, lat, lon, NanoSQLInstance.earthRadius);\r\n    },\r\n    sum: function (row, isJoin) {\r\n        var columns = [];\r\n        for (var _i = 2; _i < arguments.length; _i++) {\r\n            columns[_i - 2] = arguments[_i];\r\n        }\r\n        return columns.reduce(function (prev, cur) {\r\n            var val = utilities_1.objQuery(cur, row, isJoin) || 0;\r\n            if (Array.isArray(val)) {\r\n                return prev + val.reduce(function (p, c) { return p + parseFloat(c || 0); }, 0);\r\n            }\r\n            return prev + parseFloat(val);\r\n        }, 0);\r\n    },\r\n    avg: function (row, isJoin) {\r\n        var columns = [];\r\n        for (var _i = 2; _i < arguments.length; _i++) {\r\n            columns[_i - 2] = arguments[_i];\r\n        }\r\n        var numRecords = 0;\r\n        var total = columns.reduce(function (prev, cur) {\r\n            var val = utilities_1.objQuery(cur, row, isJoin) || 0;\r\n            if (Array.isArray(val)) {\r\n                numRecords += val.length;\r\n                return prev + val.reduce(function (p, c) { return p + parseFloat(c || 0); }, 0);\r\n            }\r\n            numRecords++;\r\n            return prev + parseFloat(val);\r\n        }, 0);\r\n        return total / numRecords;\r\n    }\r\n};\r\nNanoSQLInstance.functions = {\r\n    COUNT: {\r\n        type: \"A\",\r\n        call: function (rows, complete, isJoin, column) {\r\n            if (column && column !== \"*\") {\r\n                complete(rows.filter(function (r) { return utilities_1.objQuery(column, r, isJoin); }).length);\r\n            }\r\n            else {\r\n                complete(rows.length);\r\n            }\r\n        }\r\n    },\r\n    MAX: {\r\n        type: \"A\",\r\n        call: function (rows, complete, isJoin, column) {\r\n            if (rows.length) {\r\n                var max_1 = utilities_1.objQuery(column, rows[0]) || 0;\r\n                rows.forEach(function (r) {\r\n                    var v = utilities_1.objQuery(column, r, isJoin);\r\n                    if (utilities_1.objQuery(column, r) > max_1) {\r\n                        max_1 = utilities_1.objQuery(column, r, isJoin);\r\n                    }\r\n                });\r\n                complete(max_1);\r\n            }\r\n            else {\r\n                complete(0);\r\n            }\r\n        }\r\n    },\r\n    MIN: {\r\n        type: \"A\",\r\n        call: function (rows, complete, isJoin, column) {\r\n            if (rows.length) {\r\n                var min_1 = utilities_1.objQuery(column, rows[0], isJoin) || 0;\r\n                rows.forEach(function (r) {\r\n                    var v = utilities_1.objQuery(column, r, isJoin);\r\n                    if (v < min_1) {\r\n                        min_1 = v;\r\n                    }\r\n                });\r\n                complete(min_1);\r\n            }\r\n            else {\r\n                complete(0);\r\n            }\r\n        }\r\n    },\r\n    AVG: {\r\n        type: \"A\",\r\n        call: function (rows, complete, isJoin, column) {\r\n            complete(rows.reduce(function (prev, cur) { return prev + (utilities_1.objQuery(column, cur, isJoin) || 0); }, 0) / rows.length);\r\n        }\r\n    },\r\n    SUM: {\r\n        type: \"A\",\r\n        call: function (rows, complete, isJoin, column) {\r\n            complete(rows.reduce(function (prev, cur) { return prev + (utilities_1.objQuery(column, cur, isJoin) || 0); }, 0));\r\n        }\r\n    },\r\n    LOWER: {\r\n        type: \"S\",\r\n        call: function (rows, complete, isJoin, column) {\r\n            complete(rows.map(function (r) {\r\n                return String(utilities_1.objQuery(column, r, isJoin)).toLowerCase();\r\n            }));\r\n        }\r\n    },\r\n    UPPER: {\r\n        type: \"S\",\r\n        call: function (rows, complete, isJoin, column) {\r\n            complete(rows.map(function (r) {\r\n                return String(utilities_1.objQuery(column, r, isJoin)).toUpperCase();\r\n            }));\r\n        }\r\n    },\r\n    CAST: {\r\n        type: \"S\",\r\n        call: function (rows, complete, isJoin, column, type) {\r\n            complete(rows.map(function (r) {\r\n                return utilities_1.cast(type, utilities_1.objQuery(column, r, isJoin));\r\n            }));\r\n        }\r\n    },\r\n    ABS: {\r\n        type: \"S\",\r\n        call: function (rows, complete, isJoin, column) {\r\n            complete(rows.map(function (r) {\r\n                return Math.abs(utilities_1.objQuery(column, r, isJoin));\r\n            }));\r\n        }\r\n    },\r\n    CEIL: {\r\n        type: \"S\",\r\n        call: function (rows, complete, isJoin, column) {\r\n            complete(rows.map(function (r) {\r\n                return Math.ceil(utilities_1.objQuery(column, r, isJoin));\r\n            }));\r\n        }\r\n    },\r\n    POW: {\r\n        type: \"S\",\r\n        call: function (rows, complete, isJoin, column, power) {\r\n            complete(rows.map(function (r) {\r\n                return Math.pow(utilities_1.objQuery(column, r, isJoin), parseInt(power));\r\n            }));\r\n        }\r\n    },\r\n    ROUND: {\r\n        type: \"S\",\r\n        call: function (rows, complete, isJoin, column) {\r\n            complete(rows.map(function (r) {\r\n                return Math.round(utilities_1.objQuery(column, r, isJoin));\r\n            }));\r\n        }\r\n    },\r\n    SQRT: {\r\n        type: \"S\",\r\n        call: function (rows, complete, isJoin, column) {\r\n            complete(rows.map(function (r) {\r\n                return Math.sqrt(utilities_1.objQuery(column, r, isJoin));\r\n            }));\r\n        }\r\n    }\r\n};\r\n/**\r\n * @internal\r\n */\r\nvar _NanoSQLStatic = new NanoSQLInstance();\r\nexports.nSQL = function (setTablePointer) {\r\n    return _NanoSQLStatic.table(setTablePointer);\r\n};\r\nif (typeof window !== \"undefined\") {\r\n    window[\"nano-sql\"] = {\r\n        nSQL: exports.nSQL,\r\n        NanoSQLInstance: NanoSQLInstance\r\n    };\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/nano-sql/lib/index.js\n// module id = 33\n// module chunks = 0","Object.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utilities_1 = require(\"../utilities\");\r\n/**\r\n * Optimized in memory index used for each table.\r\n * Even if you're not using auto incriment, the index will gaurantee to maintain a sorted order of keys.\r\n * Exchanges a reduced write performance for increased read performance.\r\n *\r\n * @export\r\n * @class DatabaseIndex\r\n */\r\nvar DatabaseIndex = /** @class */ (function () {\r\n    function DatabaseIndex() {\r\n        this._sorted = [];\r\n        this._exists = {};\r\n        this.ai = 1;\r\n        this.sortIndex = true;\r\n        this.doAI = false;\r\n    }\r\n    DatabaseIndex.prototype.clone = function (skipEvent) {\r\n        if (this._changeCB && !skipEvent)\r\n            this._changeCB(this._ta, \"drop\", null);\r\n        var idx = new DatabaseIndex();\r\n        idx.doAI = this.doAI;\r\n        idx.ai = this.ai;\r\n        idx.sortIndex = this.sortIndex;\r\n        idx._changeCB = this._changeCB;\r\n        idx._ta = this._ta;\r\n        idx.pkType = this.pkType;\r\n        if (skipEvent) {\r\n            this.set([]);\r\n        }\r\n        return idx;\r\n    };\r\n    DatabaseIndex.prototype.onChange = function (table, cb) {\r\n        this._ta = table;\r\n        this._changeCB = cb;\r\n    };\r\n    DatabaseIndex.prototype.set = function (index) {\r\n        var _this = this;\r\n        this._sorted = index || [];\r\n        this._exists = {};\r\n        this._sorted.forEach(function (s, i) {\r\n            _this._exists[String(s)] = true;\r\n        });\r\n        if (this.doAI && this._sorted.length) {\r\n            this.ai = this._sorted[this._sorted.length - 1] + 1;\r\n        }\r\n    };\r\n    DatabaseIndex.prototype.getLocation = function (key, startIdx) {\r\n        var idx = this.indexOf(key);\r\n        if (idx !== -1) {\r\n            return idx;\r\n        }\r\n        if (this.sortIndex) {\r\n            return utilities_1.binarySearch(this._sorted, key, startIdx);\r\n        }\r\n        else {\r\n            return utilities_1.binarySearch(this._sorted.sort(function (a, b) { return a > b ? 1 : -1; }), key, startIdx);\r\n        }\r\n    };\r\n    DatabaseIndex.prototype.add = function (key, skipEvent) {\r\n        if (this._exists[String(key)])\r\n            return;\r\n        if (this._changeCB && !skipEvent)\r\n            this._changeCB(this._ta, \"add\", key);\r\n        this._exists[String(key)] = true;\r\n        if (skipEvent && [\"number\", \"int\", \"float\"].indexOf(this.pkType) !== -1) {\r\n            key = parseFloat(key);\r\n        }\r\n        if (!this.doAI) {\r\n            if (this.sortIndex) {\r\n                var idx = utilities_1.binarySearch(this._sorted, key);\r\n                this._sorted.splice(idx, 0, key);\r\n            }\r\n            else {\r\n                this._sorted.push(key);\r\n            }\r\n        }\r\n        else {\r\n            this.ai++;\r\n            this._sorted.push(key);\r\n        }\r\n    };\r\n    DatabaseIndex.prototype.keys = function () {\r\n        return this._sorted;\r\n    };\r\n    DatabaseIndex.prototype.exists = function (key) {\r\n        return this._exists[String(key)] ? true : false;\r\n    };\r\n    DatabaseIndex.prototype.indexOf = function (key) {\r\n        if (!this._exists[String(key)])\r\n            return -1;\r\n        return this.sortIndex ? utilities_1.binarySearch(this._sorted, key) : this._sorted.indexOf(key);\r\n    };\r\n    DatabaseIndex.prototype.remove = function (key, skipEvent) {\r\n        if (this._changeCB && !skipEvent)\r\n            this._changeCB(this._ta, \"rm\", key);\r\n        if (skipEvent && [\"number\", \"int\", \"float\"].indexOf(this.pkType) !== -1) {\r\n            key = parseFloat(key);\r\n        }\r\n        if (this._exists[String(key)]) {\r\n            var idx = this.indexOf(key);\r\n            this._exists[String(key)] = false;\r\n            this._sorted.splice(idx, 1);\r\n        }\r\n    };\r\n    return DatabaseIndex;\r\n}());\r\nexports.DatabaseIndex = DatabaseIndex;\r\nexports.syncPeerIndex = function (nSQL, idx) {\r\n    if (nSQL.peerMode) {\r\n        Object.keys(idx).forEach(function (table) {\r\n            idx[table].onChange(table, function (table, type, data) {\r\n                nSQL.peers.filter(function (p) { return p !== nSQL.pid; }).forEach(function (peer) {\r\n                    localStorage.setItem(peer + \"::\" + utilities_1.random16Bits().toString(16), type + \",\" + table + \",\" + (data || \"\"));\r\n                });\r\n            });\r\n        });\r\n        window.addEventListener(\"storage\", function (e) {\r\n            if (e.key && e.key.indexOf(nSQL.pid + \"::\") !== -1) {\r\n                var data = (e.newValue || \"\").split(\",\");\r\n                localStorage.removeItem(e.key);\r\n                switch (data[0]) {\r\n                    case \"rm\":\r\n                        idx[data[1]].remove(data[2], true);\r\n                        break;\r\n                    case \"add\":\r\n                        idx[data[1]].add(data[2], true);\r\n                        break;\r\n                    case \"drop\":\r\n                        idx[data[1]].clone(true);\r\n                        break;\r\n                }\r\n            }\r\n        });\r\n    }\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/nano-sql/lib/database/db-idx.js\n// module id = 34\n// module chunks = 0","export * from './link';\nexport { createOperation, makePromise, toPromise, fromPromise, fromError, } from './linkUtils';\nimport Observable from 'zen-observable-ts';\nexport { Observable };\n//# sourceMappingURL=index.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/apollo-link/lib/index.js\n// module id = 35\n// module chunks = 0","import { Observable } from './zenObservable';\nexport * from './zenObservable';\nexport default Observable;\n//# sourceMappingURL=index.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/zen-observable-ts/lib/index.js\n// module id = 36\n// module chunks = 0","var __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nexport function isScalarValue(value) {\n    return ['StringValue', 'BooleanValue', 'EnumValue'].indexOf(value.kind) > -1;\n}\nexport function isNumberValue(value) {\n    return ['IntValue', 'FloatValue'].indexOf(value.kind) > -1;\n}\nfunction isStringValue(value) {\n    return value.kind === 'StringValue';\n}\nfunction isBooleanValue(value) {\n    return value.kind === 'BooleanValue';\n}\nfunction isIntValue(value) {\n    return value.kind === 'IntValue';\n}\nfunction isFloatValue(value) {\n    return value.kind === 'FloatValue';\n}\nfunction isVariable(value) {\n    return value.kind === 'Variable';\n}\nfunction isObjectValue(value) {\n    return value.kind === 'ObjectValue';\n}\nfunction isListValue(value) {\n    return value.kind === 'ListValue';\n}\nfunction isEnumValue(value) {\n    return value.kind === 'EnumValue';\n}\nfunction isNullValue(value) {\n    return value.kind === 'NullValue';\n}\nexport function valueToObjectRepresentation(argObj, name, value, variables) {\n    if (isIntValue(value) || isFloatValue(value)) {\n        argObj[name.value] = Number(value.value);\n    }\n    else if (isBooleanValue(value) || isStringValue(value)) {\n        argObj[name.value] = value.value;\n    }\n    else if (isObjectValue(value)) {\n        var nestedArgObj_1 = {};\n        value.fields.map(function (obj) {\n            return valueToObjectRepresentation(nestedArgObj_1, obj.name, obj.value, variables);\n        });\n        argObj[name.value] = nestedArgObj_1;\n    }\n    else if (isVariable(value)) {\n        var variableValue = (variables || {})[value.name.value];\n        argObj[name.value] = variableValue;\n    }\n    else if (isListValue(value)) {\n        argObj[name.value] = value.values.map(function (listValue) {\n            var nestedArgArrayObj = {};\n            valueToObjectRepresentation(nestedArgArrayObj, name, listValue, variables);\n            return nestedArgArrayObj[name.value];\n        });\n    }\n    else if (isEnumValue(value)) {\n        argObj[name.value] = value.value;\n    }\n    else if (isNullValue(value)) {\n        argObj[name.value] = null;\n    }\n    else {\n        throw new Error(\"The inline argument \\\"\" + name.value + \"\\\" of kind \\\"\" + value.kind + \"\\\" is not supported.\\n                    Use variables instead of inline arguments to overcome this limitation.\");\n    }\n}\nexport function storeKeyNameFromField(field, variables) {\n    var directivesObj = null;\n    if (field.directives) {\n        directivesObj = {};\n        field.directives.forEach(function (directive) {\n            directivesObj[directive.name.value] = {};\n            if (directive.arguments) {\n                directive.arguments.forEach(function (_a) {\n                    var name = _a.name, value = _a.value;\n                    return valueToObjectRepresentation(directivesObj[directive.name.value], name, value, variables);\n                });\n            }\n        });\n    }\n    var argObj = null;\n    if (field.arguments && field.arguments.length) {\n        argObj = {};\n        field.arguments.forEach(function (_a) {\n            var name = _a.name, value = _a.value;\n            return valueToObjectRepresentation(argObj, name, value, variables);\n        });\n    }\n    return getStoreKeyName(field.name.value, argObj, directivesObj);\n}\nvar KNOWN_DIRECTIVES = [\n    'connection',\n    'include',\n    'skip',\n    'client',\n    'rest',\n    'export',\n];\nexport function getStoreKeyName(fieldName, args, directives) {\n    if (directives &&\n        directives['connection'] &&\n        directives['connection']['key']) {\n        if (directives['connection']['filter'] &&\n            directives['connection']['filter'].length > 0) {\n            var filterKeys = directives['connection']['filter']\n                ? directives['connection']['filter']\n                : [];\n            filterKeys.sort();\n            var queryArgs_1 = args;\n            var filteredArgs_1 = {};\n            filterKeys.forEach(function (key) {\n                filteredArgs_1[key] = queryArgs_1[key];\n            });\n            return directives['connection']['key'] + \"(\" + JSON.stringify(filteredArgs_1) + \")\";\n        }\n        else {\n            return directives['connection']['key'];\n        }\n    }\n    var completeFieldName = fieldName;\n    if (args) {\n        var stringifiedArgs = JSON.stringify(args);\n        completeFieldName += \"(\" + stringifiedArgs + \")\";\n    }\n    if (directives) {\n        Object.keys(directives).forEach(function (key) {\n            if (KNOWN_DIRECTIVES.indexOf(key) !== -1)\n                return;\n            if (directives[key] && Object.keys(directives[key]).length) {\n                completeFieldName += \"@\" + key + \"(\" + JSON.stringify(directives[key]) + \")\";\n            }\n            else {\n                completeFieldName += \"@\" + key;\n            }\n        });\n    }\n    return completeFieldName;\n}\nexport function argumentsObjectFromField(field, variables) {\n    if (field.arguments && field.arguments.length) {\n        var argObj_1 = {};\n        field.arguments.forEach(function (_a) {\n            var name = _a.name, value = _a.value;\n            return valueToObjectRepresentation(argObj_1, name, value, variables);\n        });\n        return argObj_1;\n    }\n    return null;\n}\nexport function resultKeyNameFromField(field) {\n    return field.alias ? field.alias.value : field.name.value;\n}\nexport function isField(selection) {\n    return selection.kind === 'Field';\n}\nexport function isInlineFragment(selection) {\n    return selection.kind === 'InlineFragment';\n}\nexport function isIdValue(idObject) {\n    return idObject && idObject.type === 'id';\n}\nexport function toIdValue(idConfig, generated) {\n    if (generated === void 0) { generated = false; }\n    return __assign({ type: 'id', generated: generated }, (typeof idConfig === 'string'\n        ? { id: idConfig, typename: undefined }\n        : idConfig));\n}\nexport function isJsonValue(jsonObject) {\n    return (jsonObject != null &&\n        typeof jsonObject === 'object' &&\n        jsonObject.type === 'json');\n}\nfunction defaultValueFromVariable(node) {\n    throw new Error(\"Variable nodes are not supported by valueFromNode\");\n}\n/**\n * Evaluate a ValueNode and yield its value in its natural JS form.\n */\nexport function valueFromNode(node, onVariable) {\n    if (onVariable === void 0) { onVariable = defaultValueFromVariable; }\n    switch (node.kind) {\n        case 'Variable':\n            return onVariable(node);\n        case 'NullValue':\n            return null;\n        case 'IntValue':\n            return parseInt(node.value);\n        case 'FloatValue':\n            return parseFloat(node.value);\n        case 'ListValue':\n            return node.values.map(function (v) { return valueFromNode(v, onVariable); });\n        case 'ObjectValue': {\n            var value = {};\n            for (var _i = 0, _a = node.fields; _i < _a.length; _i++) {\n                var field = _a[_i];\n                value[field.name.value] = valueFromNode(field.value, onVariable);\n            }\n            return value;\n        }\n        default:\n            return node.value;\n    }\n}\n//# sourceMappingURL=storeUtils.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/apollo-utilities/lib/storeUtils.js\n// module id = 37\n// module chunks = 0","export function getEnv() {\n    if (typeof process !== 'undefined' && process.env.NODE_ENV) {\n        return process.env.NODE_ENV;\n    }\n    // default environment\n    return 'development';\n}\nexport function isEnv(env) {\n    return getEnv() === env;\n}\nexport function isProduction() {\n    return isEnv('production') === true;\n}\nexport function isDevelopment() {\n    return isEnv('development') === true;\n}\nexport function isTest() {\n    return isEnv('test') === true;\n}\n//# sourceMappingURL=environment.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/apollo-utilities/lib/util/environment.js\n// module id = 38\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = process && process.env.NODE_ENV !== 'production' ? // eslint-disable-next-line no-shadow\nfunction instanceOf(value, constructor) {\n  if (value instanceof constructor) {\n    return true;\n  }\n  if (value) {\n    var valueClass = value.constructor;\n    var className = constructor.name;\n    if (valueClass && valueClass.name === className) {\n      throw new Error('Cannot use ' + className + ' \"' + value + '\" from another module or realm.\\n\\nEnsure that there is only one instance of \"graphql\" in the node_modules\\ndirectory. If different versions of \"graphql\" are the dependencies of other\\nrelied on modules, use \"resolutions\" to ensure only one version is installed.\\n\\nhttps://yarnpkg.com/en/docs/selective-version-resolutions\\n\\nDuplicate \"graphql\" modules cannot be used at the same time since different\\nversions may have different capabilities and behavior. The data from one\\nversion used in the function from another could produce confusing and\\nspurious results.');\n    }\n  }\n  return false;\n} : // eslint-disable-next-line no-shadow\nfunction instanceOf(value, constructor) {\n  return value instanceof constructor;\n}; /**\n    * Copyright (c) 2015-present, Facebook, Inc.\n    *\n    * This source code is licensed under the MIT license found in the\n    * LICENSE file in the root directory of this source tree.\n    *\n    *  strict\n    */\n\n/**\n * A replacement for instanceof which includes an error warning when multi-realm\n * constructors are detected.\n */\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/jsutils/instanceOf.js\n// module id = 39\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /**\n                                                                                                                                                                                                                                                                               * Copyright (c) 2015-present, Facebook, Inc.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * This source code is licensed under the MIT license found in the\n                                                                                                                                                                                                                                                                               * LICENSE file in the root directory of this source tree.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               *  strict\n                                                                                                                                                                                                                                                                               */\n\nexports.astFromValue = astFromValue;\n\nvar _iterall = require('iterall');\n\nvar _isNullish = require('../jsutils/isNullish');\n\nvar _isNullish2 = _interopRequireDefault(_isNullish);\n\nvar _isInvalid = require('../jsutils/isInvalid');\n\nvar _isInvalid2 = _interopRequireDefault(_isInvalid);\n\nvar _objectValues = require('../jsutils/objectValues');\n\nvar _objectValues2 = _interopRequireDefault(_objectValues);\n\nvar _kinds = require('../language/kinds');\n\nvar _definition = require('../type/definition');\n\nvar _scalars = require('../type/scalars');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Produces a GraphQL Value AST given a JavaScript value.\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * JavaScript values.\n *\n * | JSON Value    | GraphQL Value        |\n * | ------------- | -------------------- |\n * | Object        | Input Object         |\n * | Array         | List                 |\n * | Boolean       | Boolean              |\n * | String        | String / Enum Value  |\n * | Number        | Int / Float          |\n * | Mixed         | Enum Value           |\n * | null          | NullValue            |\n *\n */\nfunction astFromValue(value, type) {\n  if ((0, _definition.isNonNullType)(type)) {\n    var astValue = astFromValue(value, type.ofType);\n    if (astValue && astValue.kind === _kinds.Kind.NULL) {\n      return null;\n    }\n    return astValue;\n  }\n\n  // only explicit null, not undefined, NaN\n  if (value === null) {\n    return { kind: _kinds.Kind.NULL };\n  }\n\n  // undefined, NaN\n  if ((0, _isInvalid2.default)(value)) {\n    return null;\n  }\n\n  // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but\n  // the value is not an array, convert the value using the list's item type.\n  if ((0, _definition.isListType)(type)) {\n    var itemType = type.ofType;\n    if ((0, _iterall.isCollection)(value)) {\n      var valuesNodes = [];\n      (0, _iterall.forEach)(value, function (item) {\n        var itemNode = astFromValue(item, itemType);\n        if (itemNode) {\n          valuesNodes.push(itemNode);\n        }\n      });\n      return { kind: _kinds.Kind.LIST, values: valuesNodes };\n    }\n    return astFromValue(value, itemType);\n  }\n\n  // Populate the fields of the input object by creating ASTs from each value\n  // in the JavaScript object according to the fields in the input type.\n  if ((0, _definition.isInputObjectType)(type)) {\n    if (value === null || (typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object') {\n      return null;\n    }\n    var fields = (0, _objectValues2.default)(type.getFields());\n    var fieldNodes = [];\n    fields.forEach(function (field) {\n      var fieldValue = astFromValue(value[field.name], field.type);\n      if (fieldValue) {\n        fieldNodes.push({\n          kind: _kinds.Kind.OBJECT_FIELD,\n          name: { kind: _kinds.Kind.NAME, value: field.name },\n          value: fieldValue\n        });\n      }\n    });\n    return { kind: _kinds.Kind.OBJECT, fields: fieldNodes };\n  }\n\n  if ((0, _definition.isScalarType)(type) || (0, _definition.isEnumType)(type)) {\n    // Since value is an internally represented value, it must be serialized\n    // to an externally represented value before converting into an AST.\n    var serialized = type.serialize(value);\n    if ((0, _isNullish2.default)(serialized)) {\n      return null;\n    }\n\n    // Others serialize based on their corresponding JavaScript scalar types.\n    if (typeof serialized === 'boolean') {\n      return { kind: _kinds.Kind.BOOLEAN, value: serialized };\n    }\n\n    // JavaScript numbers can be Int or Float values.\n    if (typeof serialized === 'number') {\n      var stringNum = String(serialized);\n      return integerStringRegExp.test(stringNum) ? { kind: _kinds.Kind.INT, value: stringNum } : { kind: _kinds.Kind.FLOAT, value: stringNum };\n    }\n\n    if (typeof serialized === 'string') {\n      // Enum types use Enum literals.\n      if ((0, _definition.isEnumType)(type)) {\n        return { kind: _kinds.Kind.ENUM, value: serialized };\n      }\n\n      // ID types can use Int literals.\n      if (type === _scalars.GraphQLID && integerStringRegExp.test(serialized)) {\n        return { kind: _kinds.Kind.INT, value: serialized };\n      }\n\n      return {\n        kind: _kinds.Kind.STRING,\n        value: serialized\n      };\n    }\n\n    throw new TypeError('Cannot convert value to AST: ' + String(serialized));\n  }\n\n  /* istanbul ignore next */\n  throw new Error('Unknown type: ' + type + '.');\n}\n\n/**\n * IntValue:\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit ( Digit+ )?\n */\nvar integerStringRegExp = /^-?(0|[1-9][0-9]*)$/;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/utilities/astFromValue.js\n// module id = 40\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getLocation = getLocation;\n\n\n/**\n * Takes a Source and a UTF-8 character offset, and returns the corresponding\n * line and column as a SourceLocation.\n */\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction getLocation(source, position) {\n  var lineRegexp = /\\r\\n|[\\n\\r]/g;\n  var line = 1;\n  var column = position + 1;\n  var match = void 0;\n  while ((match = lineRegexp.exec(source.body)) && match.index < position) {\n    line += 1;\n    column = position + 1 - (match.index + match[0].length);\n  }\n  return { line: line, column: column };\n}\n\n/**\n * Represents a location in a Source.\n */\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/language/location.js\n// module id = 41\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TokenKind = undefined;\nexports.createLexer = createLexer;\nexports.getTokenDesc = getTokenDesc;\n\nvar _error = require('../error');\n\nvar _blockStringValue = require('./blockStringValue');\n\nvar _blockStringValue2 = _interopRequireDefault(_blockStringValue);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Given a Source object, this returns a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction createLexer(source, options) {\n  var startOfFileToken = new Tok(TokenKind.SOF, 0, 0, 0, 0, null);\n  var lexer = {\n    source: source,\n    options: options,\n    lastToken: startOfFileToken,\n    token: startOfFileToken,\n    line: 1,\n    lineStart: 0,\n    advance: advanceLexer,\n    lookahead: lookahead\n  };\n  return lexer;\n}\n\nfunction advanceLexer() {\n  this.lastToken = this.token;\n  var token = this.token = this.lookahead();\n  return token;\n}\n\nfunction lookahead() {\n  var token = this.token;\n  if (token.kind !== TokenKind.EOF) {\n    do {\n      // Note: next is only mutable during parsing, so we cast to allow this.\n      token = token.next || (token.next = readToken(this, token));\n    } while (token.kind === TokenKind.COMMENT);\n  }\n  return token;\n}\n\n/**\n * The return type of createLexer.\n */\n\n\n/**\n * An exported enum describing the different kinds of tokens that the\n * lexer emits.\n */\nvar TokenKind = exports.TokenKind = Object.freeze({\n  SOF: '<SOF>',\n  EOF: '<EOF>',\n  BANG: '!',\n  DOLLAR: '$',\n  AMP: '&',\n  PAREN_L: '(',\n  PAREN_R: ')',\n  SPREAD: '...',\n  COLON: ':',\n  EQUALS: '=',\n  AT: '@',\n  BRACKET_L: '[',\n  BRACKET_R: ']',\n  BRACE_L: '{',\n  PIPE: '|',\n  BRACE_R: '}',\n  NAME: 'Name',\n  INT: 'Int',\n  FLOAT: 'Float',\n  STRING: 'String',\n  BLOCK_STRING: 'BlockString',\n  COMMENT: 'Comment'\n});\n\n/**\n * The enum type representing the token kinds values.\n */\n\n\n/**\n * A helper function to describe a token as a string for debugging\n */\nfunction getTokenDesc(token) {\n  var value = token.value;\n  return value ? token.kind + ' \"' + value + '\"' : token.kind;\n}\n\nvar charCodeAt = String.prototype.charCodeAt;\nvar slice = String.prototype.slice;\n\n/**\n * Helper function for constructing the Token object.\n */\nfunction Tok(kind, start, end, line, column, prev, value) {\n  this.kind = kind;\n  this.start = start;\n  this.end = end;\n  this.line = line;\n  this.column = column;\n  this.value = value;\n  this.prev = prev;\n  this.next = null;\n}\n\n// Print a simplified form when appearing in JSON/util.inspect.\nTok.prototype.toJSON = Tok.prototype.inspect = function toJSON() {\n  return {\n    kind: this.kind,\n    value: this.value,\n    line: this.line,\n    column: this.column\n  };\n};\n\nfunction printCharCode(code) {\n  return (\n    // NaN/undefined represents access beyond the end of the file.\n    isNaN(code) ? TokenKind.EOF : // Trust JSON for ASCII.\n    code < 0x007f ? JSON.stringify(String.fromCharCode(code)) : // Otherwise print the escaped form.\n    '\"\\\\u' + ('00' + code.toString(16).toUpperCase()).slice(-4) + '\"'\n  );\n}\n\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace and comments until it finds the next lexable\n * token, then lexes punctuators immediately or calls the appropriate helper\n * function for more complicated tokens.\n */\nfunction readToken(lexer, prev) {\n  var source = lexer.source;\n  var body = source.body;\n  var bodyLength = body.length;\n\n  var pos = positionAfterWhitespace(body, prev.end, lexer);\n  var line = lexer.line;\n  var col = 1 + pos - lexer.lineStart;\n\n  if (pos >= bodyLength) {\n    return new Tok(TokenKind.EOF, bodyLength, bodyLength, line, col, prev);\n  }\n\n  var code = charCodeAt.call(body, pos);\n\n  // SourceCharacter\n  if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n    throw (0, _error.syntaxError)(source, pos, 'Cannot contain the invalid character ' + printCharCode(code) + '.');\n  }\n\n  switch (code) {\n    // !\n    case 33:\n      return new Tok(TokenKind.BANG, pos, pos + 1, line, col, prev);\n    // #\n    case 35:\n      return readComment(source, pos, line, col, prev);\n    // $\n    case 36:\n      return new Tok(TokenKind.DOLLAR, pos, pos + 1, line, col, prev);\n    // &\n    case 38:\n      return new Tok(TokenKind.AMP, pos, pos + 1, line, col, prev);\n    // (\n    case 40:\n      return new Tok(TokenKind.PAREN_L, pos, pos + 1, line, col, prev);\n    // )\n    case 41:\n      return new Tok(TokenKind.PAREN_R, pos, pos + 1, line, col, prev);\n    // .\n    case 46:\n      if (charCodeAt.call(body, pos + 1) === 46 && charCodeAt.call(body, pos + 2) === 46) {\n        return new Tok(TokenKind.SPREAD, pos, pos + 3, line, col, prev);\n      }\n      break;\n    // :\n    case 58:\n      return new Tok(TokenKind.COLON, pos, pos + 1, line, col, prev);\n    // =\n    case 61:\n      return new Tok(TokenKind.EQUALS, pos, pos + 1, line, col, prev);\n    // @\n    case 64:\n      return new Tok(TokenKind.AT, pos, pos + 1, line, col, prev);\n    // [\n    case 91:\n      return new Tok(TokenKind.BRACKET_L, pos, pos + 1, line, col, prev);\n    // ]\n    case 93:\n      return new Tok(TokenKind.BRACKET_R, pos, pos + 1, line, col, prev);\n    // {\n    case 123:\n      return new Tok(TokenKind.BRACE_L, pos, pos + 1, line, col, prev);\n    // |\n    case 124:\n      return new Tok(TokenKind.PIPE, pos, pos + 1, line, col, prev);\n    // }\n    case 125:\n      return new Tok(TokenKind.BRACE_R, pos, pos + 1, line, col, prev);\n    // A-Z _ a-z\n    case 65:\n    case 66:\n    case 67:\n    case 68:\n    case 69:\n    case 70:\n    case 71:\n    case 72:\n    case 73:\n    case 74:\n    case 75:\n    case 76:\n    case 77:\n    case 78:\n    case 79:\n    case 80:\n    case 81:\n    case 82:\n    case 83:\n    case 84:\n    case 85:\n    case 86:\n    case 87:\n    case 88:\n    case 89:\n    case 90:\n    case 95:\n    case 97:\n    case 98:\n    case 99:\n    case 100:\n    case 101:\n    case 102:\n    case 103:\n    case 104:\n    case 105:\n    case 106:\n    case 107:\n    case 108:\n    case 109:\n    case 110:\n    case 111:\n    case 112:\n    case 113:\n    case 114:\n    case 115:\n    case 116:\n    case 117:\n    case 118:\n    case 119:\n    case 120:\n    case 121:\n    case 122:\n      return readName(source, pos, line, col, prev);\n    // - 0-9\n    case 45:\n    case 48:\n    case 49:\n    case 50:\n    case 51:\n    case 52:\n    case 53:\n    case 54:\n    case 55:\n    case 56:\n    case 57:\n      return readNumber(source, pos, code, line, col, prev);\n    // \"\n    case 34:\n      if (charCodeAt.call(body, pos + 1) === 34 && charCodeAt.call(body, pos + 2) === 34) {\n        return readBlockString(source, pos, line, col, prev);\n      }\n      return readString(source, pos, line, col, prev);\n  }\n\n  throw (0, _error.syntaxError)(source, pos, unexpectedCharacterMessage(code));\n}\n\n/**\n * Report a message that an unexpected character was encountered.\n */\nfunction unexpectedCharacterMessage(code) {\n  if (code === 39) {\n    // '\n    return \"Unexpected single quote character ('), did you mean to use \" + 'a double quote (\")?';\n  }\n\n  return 'Cannot parse the unexpected character ' + printCharCode(code) + '.';\n}\n\n/**\n * Reads from body starting at startPosition until it finds a non-whitespace\n * or commented character, then returns the position of that character for\n * lexing.\n */\nfunction positionAfterWhitespace(body, startPosition, lexer) {\n  var bodyLength = body.length;\n  var position = startPosition;\n  while (position < bodyLength) {\n    var code = charCodeAt.call(body, position);\n    // tab | space | comma | BOM\n    if (code === 9 || code === 32 || code === 44 || code === 0xfeff) {\n      ++position;\n    } else if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (charCodeAt.call(body, position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else {\n      break;\n    }\n  }\n  return position;\n}\n\n/**\n * Reads a comment token from the source file.\n *\n * #[\\u0009\\u0020-\\uFFFF]*\n */\nfunction readComment(source, start, line, col, prev) {\n  var body = source.body;\n  var code = void 0;\n  var position = start;\n\n  do {\n    code = charCodeAt.call(body, ++position);\n  } while (code !== null && (\n  // SourceCharacter but not LineTerminator\n  code > 0x001f || code === 0x0009));\n\n  return new Tok(TokenKind.COMMENT, start, position, line, col, prev, slice.call(body, start + 1, position));\n}\n\n/**\n * Reads a number token from the source file, either a float\n * or an int depending on whether a decimal point appears.\n *\n * Int:   -?(0|[1-9][0-9]*)\n * Float: -?(0|[1-9][0-9]*)(\\.[0-9]+)?((E|e)(+|-)?[0-9]+)?\n */\nfunction readNumber(source, start, firstCode, line, col, prev) {\n  var body = source.body;\n  var code = firstCode;\n  var position = start;\n  var isFloat = false;\n\n  if (code === 45) {\n    // -\n    code = charCodeAt.call(body, ++position);\n  }\n\n  if (code === 48) {\n    // 0\n    code = charCodeAt.call(body, ++position);\n    if (code >= 48 && code <= 57) {\n      throw (0, _error.syntaxError)(source, position, 'Invalid number, unexpected digit after 0: ' + printCharCode(code) + '.');\n    }\n  } else {\n    position = readDigits(source, position, code);\n    code = charCodeAt.call(body, position);\n  }\n\n  if (code === 46) {\n    // .\n    isFloat = true;\n\n    code = charCodeAt.call(body, ++position);\n    position = readDigits(source, position, code);\n    code = charCodeAt.call(body, position);\n  }\n\n  if (code === 69 || code === 101) {\n    // E e\n    isFloat = true;\n\n    code = charCodeAt.call(body, ++position);\n    if (code === 43 || code === 45) {\n      // + -\n      code = charCodeAt.call(body, ++position);\n    }\n    position = readDigits(source, position, code);\n  }\n\n  return new Tok(isFloat ? TokenKind.FLOAT : TokenKind.INT, start, position, line, col, prev, slice.call(body, start, position));\n}\n\n/**\n * Returns the new position in the source after reading digits.\n */\nfunction readDigits(source, start, firstCode) {\n  var body = source.body;\n  var position = start;\n  var code = firstCode;\n  if (code >= 48 && code <= 57) {\n    // 0 - 9\n    do {\n      code = charCodeAt.call(body, ++position);\n    } while (code >= 48 && code <= 57); // 0 - 9\n    return position;\n  }\n  throw (0, _error.syntaxError)(source, position, 'Invalid number, expected digit but got: ' + printCharCode(code) + '.');\n}\n\n/**\n * Reads a string token from the source file.\n *\n * \"([^\"\\\\\\u000A\\u000D]|(\\\\(u[0-9a-fA-F]{4}|[\"\\\\/bfnrt])))*\"\n */\nfunction readString(source, start, line, col, prev) {\n  var body = source.body;\n  var position = start + 1;\n  var chunkStart = position;\n  var code = 0;\n  var value = '';\n\n  while (position < body.length && (code = charCodeAt.call(body, position)) !== null &&\n  // not LineTerminator\n  code !== 0x000a && code !== 0x000d) {\n    // Closing Quote (\")\n    if (code === 34) {\n      value += slice.call(body, chunkStart, position);\n      return new Tok(TokenKind.STRING, start, position + 1, line, col, prev, value);\n    }\n\n    // SourceCharacter\n    if (code < 0x0020 && code !== 0x0009) {\n      throw (0, _error.syntaxError)(source, position, 'Invalid character within String: ' + printCharCode(code) + '.');\n    }\n\n    ++position;\n    if (code === 92) {\n      // \\\n      value += slice.call(body, chunkStart, position - 1);\n      code = charCodeAt.call(body, position);\n      switch (code) {\n        case 34:\n          value += '\"';\n          break;\n        case 47:\n          value += '/';\n          break;\n        case 92:\n          value += '\\\\';\n          break;\n        case 98:\n          value += '\\b';\n          break;\n        case 102:\n          value += '\\f';\n          break;\n        case 110:\n          value += '\\n';\n          break;\n        case 114:\n          value += '\\r';\n          break;\n        case 116:\n          value += '\\t';\n          break;\n        case 117:\n          // u\n          var charCode = uniCharCode(charCodeAt.call(body, position + 1), charCodeAt.call(body, position + 2), charCodeAt.call(body, position + 3), charCodeAt.call(body, position + 4));\n          if (charCode < 0) {\n            throw (0, _error.syntaxError)(source, position, 'Invalid character escape sequence: ' + ('\\\\u' + body.slice(position + 1, position + 5) + '.'));\n          }\n          value += String.fromCharCode(charCode);\n          position += 4;\n          break;\n        default:\n          throw (0, _error.syntaxError)(source, position, 'Invalid character escape sequence: \\\\' + String.fromCharCode(code) + '.');\n      }\n      ++position;\n      chunkStart = position;\n    }\n  }\n\n  throw (0, _error.syntaxError)(source, position, 'Unterminated string.');\n}\n\n/**\n * Reads a block string token from the source file.\n *\n * \"\"\"(\"?\"?(\\\\\"\"\"|\\\\(?!=\"\"\")|[^\"\\\\]))*\"\"\"\n */\nfunction readBlockString(source, start, line, col, prev) {\n  var body = source.body;\n  var position = start + 3;\n  var chunkStart = position;\n  var code = 0;\n  var rawValue = '';\n\n  while (position < body.length && (code = charCodeAt.call(body, position)) !== null) {\n    // Closing Triple-Quote (\"\"\")\n    if (code === 34 && charCodeAt.call(body, position + 1) === 34 && charCodeAt.call(body, position + 2) === 34) {\n      rawValue += slice.call(body, chunkStart, position);\n      return new Tok(TokenKind.BLOCK_STRING, start, position + 3, line, col, prev, (0, _blockStringValue2.default)(rawValue));\n    }\n\n    // SourceCharacter\n    if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n      throw (0, _error.syntaxError)(source, position, 'Invalid character within String: ' + printCharCode(code) + '.');\n    }\n\n    // Escape Triple-Quote (\\\"\"\")\n    if (code === 92 && charCodeAt.call(body, position + 1) === 34 && charCodeAt.call(body, position + 2) === 34 && charCodeAt.call(body, position + 3) === 34) {\n      rawValue += slice.call(body, chunkStart, position) + '\"\"\"';\n      position += 4;\n      chunkStart = position;\n    } else {\n      ++position;\n    }\n  }\n\n  throw (0, _error.syntaxError)(source, position, 'Unterminated string.');\n}\n\n/**\n * Converts four hexidecimal chars to the integer that the\n * string represents. For example, uniCharCode('0','0','0','f')\n * will return 15, and uniCharCode('0','0','f','f') returns 255.\n *\n * Returns a negative number on error, if a char was invalid.\n *\n * This is implemented by noting that char2hex() returns -1 on error,\n * which means the result of ORing the char2hex() will also be negative.\n */\nfunction uniCharCode(a, b, c, d) {\n  return char2hex(a) << 12 | char2hex(b) << 8 | char2hex(c) << 4 | char2hex(d);\n}\n\n/**\n * Converts a hex character to its integer value.\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 on error.\n */\nfunction char2hex(a) {\n  return a >= 48 && a <= 57 ? a - 48 // 0-9\n  : a >= 65 && a <= 70 ? a - 55 // A-F\n  : a >= 97 && a <= 102 ? a - 87 // a-f\n  : -1;\n}\n\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * [_A-Za-z][_0-9A-Za-z]*\n */\nfunction readName(source, start, line, col, prev) {\n  var body = source.body;\n  var bodyLength = body.length;\n  var position = start + 1;\n  var code = 0;\n  while (position !== bodyLength && (code = charCodeAt.call(body, position)) !== null && (code === 95 || // _\n  code >= 48 && code <= 57 || // 0-9\n  code >= 65 && code <= 90 || // A-Z\n  code >= 97 && code <= 122) // a-z\n  ) {\n    ++position;\n  }\n  return new Tok(TokenKind.NAME, start, position, line, col, prev, slice.call(body, start, position));\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/language/lexer.js\n// module id = 42\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = quotedOrList;\n\nvar _orList = require('./orList');\n\nvar _orList2 = _interopRequireDefault(_orList);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Given [ A, B, C ] return '\"A\", \"B\", or \"C\"'.\n */\nfunction quotedOrList(items) {\n  return (0, _orList2.default)(items.map(function (item) {\n    return '\"' + item + '\"';\n  }));\n} /**\n   * Copyright (c) 2015-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   *  strict\n   */\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/jsutils/quotedOrList.js\n// module id = 43\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = orList;\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nvar MAX_LENGTH = 5;\n\n/**\n * Given [ A, B, C ] return 'A, B, or C'.\n */\nfunction orList(items) {\n  var selected = items.slice(0, MAX_LENGTH);\n  return selected.reduce(function (list, quoted, index) {\n    return list + (selected.length > 2 ? ', ' : ' ') + (index === selected.length - 1 ? 'or ' : '') + quoted;\n  });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/jsutils/orList.js\n// module id = 44\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.badValueMessage = badValueMessage;\nexports.requiredFieldMessage = requiredFieldMessage;\nexports.unknownFieldMessage = unknownFieldMessage;\nexports.ValuesOfCorrectType = ValuesOfCorrectType;\n\nvar _error = require('../../error');\n\nvar _printer = require('../../language/printer');\n\nvar _definition = require('../../type/definition');\n\nvar _isInvalid = require('../../jsutils/isInvalid');\n\nvar _isInvalid2 = _interopRequireDefault(_isInvalid);\n\nvar _keyMap = require('../../jsutils/keyMap');\n\nvar _keyMap2 = _interopRequireDefault(_keyMap);\n\nvar _orList = require('../../jsutils/orList');\n\nvar _orList2 = _interopRequireDefault(_orList);\n\nvar _suggestionList = require('../../jsutils/suggestionList');\n\nvar _suggestionList2 = _interopRequireDefault(_suggestionList);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction badValueMessage(typeName, valueName, message) {\n  return 'Expected type ' + typeName + ', found ' + valueName + (message ? '; ' + message : '.');\n}\n\nfunction requiredFieldMessage(typeName, fieldName, fieldTypeName) {\n  return 'Field ' + typeName + '.' + fieldName + ' of required type ' + (fieldTypeName + ' was not provided.');\n}\n\nfunction unknownFieldMessage(typeName, fieldName, message) {\n  return 'Field \"' + fieldName + '\" is not defined by type ' + typeName + (message ? '; ' + message : '.');\n}\n\n/**\n * Value literals of correct type\n *\n * A GraphQL document is only valid if all value literals are of the type\n * expected at their position.\n */\nfunction ValuesOfCorrectType(context) {\n  return {\n    NullValue: function NullValue(node) {\n      var type = context.getInputType();\n      if ((0, _definition.isNonNullType)(type)) {\n        context.reportError(new _error.GraphQLError(badValueMessage(String(type), (0, _printer.print)(node)), node));\n      }\n    },\n    ListValue: function ListValue(node) {\n      // Note: TypeInfo will traverse into a list's item type, so look to the\n      // parent input type to check if it is a list.\n      var type = (0, _definition.getNullableType)(context.getParentInputType());\n      if (!(0, _definition.isListType)(type)) {\n        isValidScalar(context, node);\n        return false; // Don't traverse further.\n      }\n    },\n    ObjectValue: function ObjectValue(node) {\n      var type = (0, _definition.getNamedType)(context.getInputType());\n      if (!(0, _definition.isInputObjectType)(type)) {\n        isValidScalar(context, node);\n        return false; // Don't traverse further.\n      }\n      // Ensure every required field exists.\n      var inputFields = type.getFields();\n      var fieldNodeMap = (0, _keyMap2.default)(node.fields, function (field) {\n        return field.name.value;\n      });\n      Object.keys(inputFields).forEach(function (fieldName) {\n        var fieldType = inputFields[fieldName].type;\n        var fieldNode = fieldNodeMap[fieldName];\n        if (!fieldNode && (0, _definition.isNonNullType)(fieldType)) {\n          context.reportError(new _error.GraphQLError(requiredFieldMessage(type.name, fieldName, String(fieldType)), node));\n        }\n      });\n    },\n    ObjectField: function ObjectField(node) {\n      var parentType = (0, _definition.getNamedType)(context.getParentInputType());\n      var fieldType = context.getInputType();\n      if (!fieldType && (0, _definition.isInputObjectType)(parentType)) {\n        var suggestions = (0, _suggestionList2.default)(node.name.value, Object.keys(parentType.getFields()));\n        var didYouMean = suggestions.length !== 0 ? 'Did you mean ' + (0, _orList2.default)(suggestions) + '?' : undefined;\n        context.reportError(new _error.GraphQLError(unknownFieldMessage(parentType.name, node.name.value, didYouMean), node));\n      }\n    },\n    EnumValue: function EnumValue(node) {\n      var type = (0, _definition.getNamedType)(context.getInputType());\n      if (!(0, _definition.isEnumType)(type)) {\n        isValidScalar(context, node);\n      } else if (!type.getValue(node.value)) {\n        context.reportError(new _error.GraphQLError(badValueMessage(type.name, (0, _printer.print)(node), enumTypeSuggestion(type, node)), node));\n      }\n    },\n\n    IntValue: function IntValue(node) {\n      return isValidScalar(context, node);\n    },\n    FloatValue: function FloatValue(node) {\n      return isValidScalar(context, node);\n    },\n    StringValue: function StringValue(node) {\n      return isValidScalar(context, node);\n    },\n    BooleanValue: function BooleanValue(node) {\n      return isValidScalar(context, node);\n    }\n  };\n}\n\n/**\n * Any value literal may be a valid representation of a Scalar, depending on\n * that scalar type.\n */\nfunction isValidScalar(context, node) {\n  // Report any error at the full type expected by the location.\n  var locationType = context.getInputType();\n  if (!locationType) {\n    return;\n  }\n\n  var type = (0, _definition.getNamedType)(locationType);\n\n  if (!(0, _definition.isScalarType)(type)) {\n    context.reportError(new _error.GraphQLError(badValueMessage(String(locationType), (0, _printer.print)(node), enumTypeSuggestion(type, node)), node));\n    return;\n  }\n\n  // Scalars determine if a literal value is valid via parseLiteral() which\n  // may throw or return an invalid value to indicate failure.\n  try {\n    var parseResult = type.parseLiteral(node, undefined /* variables */);\n    if ((0, _isInvalid2.default)(parseResult)) {\n      context.reportError(new _error.GraphQLError(badValueMessage(String(locationType), (0, _printer.print)(node)), node));\n    }\n  } catch (error) {\n    // Ensure a reference to the original error is maintained.\n    context.reportError(new _error.GraphQLError(badValueMessage(String(locationType), (0, _printer.print)(node), error.message), node, undefined, undefined, undefined, error));\n  }\n}\n\nfunction enumTypeSuggestion(type, node) {\n  if ((0, _definition.isEnumType)(type)) {\n    var suggestions = (0, _suggestionList2.default)((0, _printer.print)(node), type.getValues().map(function (value) {\n      return value.name;\n    }));\n    if (suggestions.length !== 0) {\n      return 'Did you mean the enum value ' + (0, _orList2.default)(suggestions) + '?';\n    }\n  }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/rules/ValuesOfCorrectType.js\n// module id = 45\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _error = require('../error');\n\nvar _visitor = require('../language/visitor');\n\nvar _kinds = require('../language/kinds');\n\nvar _schema = require('../type/schema');\n\nvar _TypeInfo = require('../utilities/TypeInfo');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /**\n                                                                                                                                                           * Copyright (c) 2015-present, Facebook, Inc.\n                                                                                                                                                           *\n                                                                                                                                                           * This source code is licensed under the MIT license found in the\n                                                                                                                                                           * LICENSE file in the root directory of this source tree.\n                                                                                                                                                           *\n                                                                                                                                                           *  strict\n                                                                                                                                                           */\n\n/**\n * An instance of this class is passed as the \"this\" context to all validators,\n * allowing access to commonly useful contextual information from within a\n * validation rule.\n */\nvar ValidationContext = function () {\n  function ValidationContext(schema, ast, typeInfo) {\n    _classCallCheck(this, ValidationContext);\n\n    this._schema = schema;\n    this._ast = ast;\n    this._typeInfo = typeInfo;\n    this._errors = [];\n    this._fragmentSpreads = new Map();\n    this._recursivelyReferencedFragments = new Map();\n    this._variableUsages = new Map();\n    this._recursiveVariableUsages = new Map();\n  }\n\n  ValidationContext.prototype.reportError = function reportError(error) {\n    this._errors.push(error);\n  };\n\n  ValidationContext.prototype.getErrors = function getErrors() {\n    return this._errors;\n  };\n\n  ValidationContext.prototype.getSchema = function getSchema() {\n    return this._schema;\n  };\n\n  ValidationContext.prototype.getDocument = function getDocument() {\n    return this._ast;\n  };\n\n  ValidationContext.prototype.getFragment = function getFragment(name) {\n    var fragments = this._fragments;\n    if (!fragments) {\n      this._fragments = fragments = this.getDocument().definitions.reduce(function (frags, statement) {\n        if (statement.kind === _kinds.Kind.FRAGMENT_DEFINITION) {\n          frags[statement.name.value] = statement;\n        }\n        return frags;\n      }, Object.create(null));\n    }\n    return fragments[name];\n  };\n\n  ValidationContext.prototype.getFragmentSpreads = function getFragmentSpreads(node) {\n    var spreads = this._fragmentSpreads.get(node);\n    if (!spreads) {\n      spreads = [];\n      var setsToVisit = [node];\n      while (setsToVisit.length !== 0) {\n        var set = setsToVisit.pop();\n        for (var i = 0; i < set.selections.length; i++) {\n          var selection = set.selections[i];\n          if (selection.kind === _kinds.Kind.FRAGMENT_SPREAD) {\n            spreads.push(selection);\n          } else if (selection.selectionSet) {\n            setsToVisit.push(selection.selectionSet);\n          }\n        }\n      }\n      this._fragmentSpreads.set(node, spreads);\n    }\n    return spreads;\n  };\n\n  ValidationContext.prototype.getRecursivelyReferencedFragments = function getRecursivelyReferencedFragments(operation) {\n    var fragments = this._recursivelyReferencedFragments.get(operation);\n    if (!fragments) {\n      fragments = [];\n      var collectedNames = Object.create(null);\n      var nodesToVisit = [operation.selectionSet];\n      while (nodesToVisit.length !== 0) {\n        var _node = nodesToVisit.pop();\n        var spreads = this.getFragmentSpreads(_node);\n        for (var i = 0; i < spreads.length; i++) {\n          var fragName = spreads[i].name.value;\n          if (collectedNames[fragName] !== true) {\n            collectedNames[fragName] = true;\n            var fragment = this.getFragment(fragName);\n            if (fragment) {\n              fragments.push(fragment);\n              nodesToVisit.push(fragment.selectionSet);\n            }\n          }\n        }\n      }\n      this._recursivelyReferencedFragments.set(operation, fragments);\n    }\n    return fragments;\n  };\n\n  ValidationContext.prototype.getVariableUsages = function getVariableUsages(node) {\n    var usages = this._variableUsages.get(node);\n    if (!usages) {\n      var newUsages = [];\n      var typeInfo = new _TypeInfo.TypeInfo(this._schema);\n      (0, _visitor.visit)(node, (0, _visitor.visitWithTypeInfo)(typeInfo, {\n        VariableDefinition: function VariableDefinition() {\n          return false;\n        },\n        Variable: function Variable(variable) {\n          newUsages.push({ node: variable, type: typeInfo.getInputType() });\n        }\n      }));\n      usages = newUsages;\n      this._variableUsages.set(node, usages);\n    }\n    return usages;\n  };\n\n  ValidationContext.prototype.getRecursiveVariableUsages = function getRecursiveVariableUsages(operation) {\n    var usages = this._recursiveVariableUsages.get(operation);\n    if (!usages) {\n      usages = this.getVariableUsages(operation);\n      var fragments = this.getRecursivelyReferencedFragments(operation);\n      for (var i = 0; i < fragments.length; i++) {\n        Array.prototype.push.apply(usages, this.getVariableUsages(fragments[i]));\n      }\n      this._recursiveVariableUsages.set(operation, usages);\n    }\n    return usages;\n  };\n\n  ValidationContext.prototype.getType = function getType() {\n    return this._typeInfo.getType();\n  };\n\n  ValidationContext.prototype.getParentType = function getParentType() {\n    return this._typeInfo.getParentType();\n  };\n\n  ValidationContext.prototype.getInputType = function getInputType() {\n    return this._typeInfo.getInputType();\n  };\n\n  ValidationContext.prototype.getParentInputType = function getParentInputType() {\n    return this._typeInfo.getParentInputType();\n  };\n\n  ValidationContext.prototype.getFieldDef = function getFieldDef() {\n    return this._typeInfo.getFieldDef();\n  };\n\n  ValidationContext.prototype.getDirective = function getDirective() {\n    return this._typeInfo.getDirective();\n  };\n\n  ValidationContext.prototype.getArgument = function getArgument() {\n    return this._typeInfo.getArgument();\n  };\n\n  return ValidationContext;\n}();\n\nexports.default = ValidationContext;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/ValidationContext.js\n// module id = 46\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /**\n                                                                                                                                                                                                                                                                               * Copyright (c) 2015-present, Facebook, Inc.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * This source code is licensed under the MIT license found in the\n                                                                                                                                                                                                                                                                               * LICENSE file in the root directory of this source tree.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               *  strict\n                                                                                                                                                                                                                                                                               */\n\nexports.coerceValue = coerceValue;\n\nvar _iterall = require('iterall');\n\nvar _isInvalid = require('../jsutils/isInvalid');\n\nvar _isInvalid2 = _interopRequireDefault(_isInvalid);\n\nvar _isNullish = require('../jsutils/isNullish');\n\nvar _isNullish2 = _interopRequireDefault(_isNullish);\n\nvar _orList = require('../jsutils/orList');\n\nvar _orList2 = _interopRequireDefault(_orList);\n\nvar _suggestionList = require('../jsutils/suggestionList');\n\nvar _suggestionList2 = _interopRequireDefault(_suggestionList);\n\nvar _error = require('../error');\n\nvar _definition = require('../type/definition');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Coerces a JavaScript value given a GraphQL Type.\n *\n * Returns either a value which is valid for the provided type or a list of\n * encountered coercion errors.\n *\n */\nfunction coerceValue(value, type, blameNode, path) {\n  // A value must be provided if the type is non-null.\n  if ((0, _definition.isNonNullType)(type)) {\n    if ((0, _isNullish2.default)(value)) {\n      return ofErrors([coercionError('Expected non-nullable type ' + String(type) + ' not to be null', blameNode, path)]);\n    }\n    return coerceValue(value, type.ofType, blameNode, path);\n  }\n\n  if ((0, _isNullish2.default)(value)) {\n    // Explicitly return the value null.\n    return ofValue(null);\n  }\n\n  if ((0, _definition.isScalarType)(type)) {\n    // Scalars determine if a value is valid via parseValue(), which can\n    // throw to indicate failure. If it throws, maintain a reference to\n    // the original error.\n    try {\n      var parseResult = type.parseValue(value);\n      if ((0, _isInvalid2.default)(parseResult)) {\n        return ofErrors([coercionError('Expected type ' + type.name, blameNode, path)]);\n      }\n      return ofValue(parseResult);\n    } catch (error) {\n      return ofErrors([coercionError('Expected type ' + type.name, blameNode, path, error.message, error)]);\n    }\n  }\n\n  if ((0, _definition.isEnumType)(type)) {\n    if (typeof value === 'string') {\n      var enumValue = type.getValue(value);\n      if (enumValue) {\n        return ofValue(enumValue.value);\n      }\n    }\n    var suggestions = (0, _suggestionList2.default)(String(value), type.getValues().map(function (enumValue) {\n      return enumValue.name;\n    }));\n    var didYouMean = suggestions.length !== 0 ? 'did you mean ' + (0, _orList2.default)(suggestions) + '?' : undefined;\n    return ofErrors([coercionError('Expected type ' + type.name, blameNode, path, didYouMean)]);\n  }\n\n  if ((0, _definition.isListType)(type)) {\n    var itemType = type.ofType;\n    if ((0, _iterall.isCollection)(value)) {\n      var _errors = void 0;\n      var coercedValue = [];\n      (0, _iterall.forEach)(value, function (itemValue, index) {\n        var coercedItem = coerceValue(itemValue, itemType, blameNode, atPath(path, index));\n        if (coercedItem.errors) {\n          _errors = add(_errors, coercedItem.errors);\n        } else if (!_errors) {\n          coercedValue.push(coercedItem.value);\n        }\n      });\n      return _errors ? ofErrors(_errors) : ofValue(coercedValue);\n    }\n    // Lists accept a non-list value as a list of one.\n    var coercedItem = coerceValue(value, itemType, blameNode);\n    return coercedItem.errors ? coercedItem : ofValue([coercedItem.value]);\n  }\n\n  if ((0, _definition.isInputObjectType)(type)) {\n    if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object') {\n      return ofErrors([coercionError('Expected type ' + type.name + ' to be an object', blameNode, path)]);\n    }\n    var _errors2 = void 0;\n    var _coercedValue = {};\n    var fields = type.getFields();\n\n    // Ensure every defined field is valid.\n    for (var fieldName in fields) {\n      if (hasOwnProperty.call(fields, fieldName)) {\n        var field = fields[fieldName];\n        var fieldValue = value[fieldName];\n        if ((0, _isInvalid2.default)(fieldValue)) {\n          if (!(0, _isInvalid2.default)(field.defaultValue)) {\n            _coercedValue[fieldName] = field.defaultValue;\n          } else if ((0, _definition.isNonNullType)(field.type)) {\n            _errors2 = add(_errors2, coercionError('Field ' + printPath(atPath(path, fieldName)) + ' of required ' + ('type ' + String(field.type) + ' was not provided'), blameNode));\n          }\n        } else {\n          var coercedField = coerceValue(fieldValue, field.type, blameNode, atPath(path, fieldName));\n          if (coercedField.errors) {\n            _errors2 = add(_errors2, coercedField.errors);\n          } else if (!_errors2) {\n            _coercedValue[fieldName] = coercedField.value;\n          }\n        }\n      }\n    }\n\n    // Ensure every provided field is defined.\n    for (var _fieldName in value) {\n      if (hasOwnProperty.call(value, _fieldName)) {\n        if (!fields[_fieldName]) {\n          var _suggestions = (0, _suggestionList2.default)(_fieldName, Object.keys(fields));\n          var _didYouMean = _suggestions.length !== 0 ? 'did you mean ' + (0, _orList2.default)(_suggestions) + '?' : undefined;\n          _errors2 = add(_errors2, coercionError('Field \"' + _fieldName + '\" is not defined by type ' + type.name, blameNode, path, _didYouMean));\n        }\n      }\n    }\n\n    return _errors2 ? ofErrors(_errors2) : ofValue(_coercedValue);\n  }\n\n  /* istanbul ignore next */\n  throw new Error('Unexpected type: ' + type + '.');\n}\n\nfunction ofValue(value) {\n  return { errors: undefined, value: value };\n}\n\nfunction ofErrors(errors) {\n  return { errors: errors, value: undefined };\n}\n\nfunction add(errors, moreErrors) {\n  return (errors || []).concat(moreErrors);\n}\n\nfunction atPath(prev, key) {\n  return { prev: prev, key: key };\n}\n\nfunction coercionError(message, blameNode, path, subMessage, originalError) {\n  var pathStr = printPath(path);\n  // Return a GraphQLError instance\n  return new _error.GraphQLError(message + (pathStr ? ' at ' + pathStr : '') + (subMessage ? '; ' + subMessage : '.'), blameNode, undefined, undefined, undefined, originalError);\n}\n\n// Build a string describing the path into the value where the error was found\nfunction printPath(path) {\n  var pathStr = '';\n  var currentPath = path;\n  while (currentPath) {\n    pathStr = (typeof currentPath.key === 'string' ? '.' + currentPath.key : '[' + String(currentPath.key) + ']') + pathStr;\n    currentPath = currentPath.prev;\n  }\n  return pathStr ? 'value' + pathStr : '';\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/utilities/coerceValue.js\n// module id = 47\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar graphql_1 = require(\"graphql\");\nfunction resolveFromParentTypename(parent, schema) {\n    var parentTypename = parent['__typename'];\n    if (!parentTypename) {\n        throw new Error('Did not fetch typename for object, unable to resolve interface.');\n    }\n    var resolvedType = schema.getType(parentTypename);\n    if (!(resolvedType instanceof graphql_1.GraphQLObjectType)) {\n        throw new Error('__typename did not match an object type: ' + parentTypename);\n    }\n    return resolvedType;\n}\nexports.default = resolveFromParentTypename;\n//# sourceMappingURL=resolveFromParentTypename.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql-tools/dist/stitching/resolveFromParentTypename.js\n// module id = 48\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar graphql_1 = require(\"graphql\");\nvar error_1 = require(\"graphql/error\");\nvar ERROR_SYMBOL;\nif ((typeof global !== 'undefined' && 'Symbol' in global) ||\n    (typeof window !== 'undefined' && 'Symbol' in window)) {\n    ERROR_SYMBOL = Symbol('subSchemaErrors');\n}\nelse {\n    ERROR_SYMBOL = '@@__subSchemaErrors';\n}\nexports.ErrorSymbol = ERROR_SYMBOL;\nfunction annotateWithChildrenErrors(object, childrenErrors) {\n    if (childrenErrors && childrenErrors.length > 0) {\n        if (Array.isArray(object)) {\n            var byIndex_1 = {};\n            childrenErrors.forEach(function (error) {\n                if (!error.path) {\n                    return;\n                }\n                var index = error.path[1];\n                var current = byIndex_1[index] || [];\n                current.push(__assign({}, error, { path: error.path.slice(1) }));\n                byIndex_1[index] = current;\n            });\n            return object.map(function (item, index) {\n                return annotateWithChildrenErrors(item, byIndex_1[index]);\n            });\n        }\n        else {\n            return __assign({}, object, (_a = {}, _a[ERROR_SYMBOL] = childrenErrors.map(function (error) { return (__assign({}, error, error.path ? { path: error.path.slice(1) } : {})); }), _a));\n        }\n    }\n    else {\n        return object;\n    }\n    var _a;\n}\nexports.annotateWithChildrenErrors = annotateWithChildrenErrors;\nfunction getErrorsFromParent(object, fieldName) {\n    var errors = (object && object[ERROR_SYMBOL]) || [];\n    var childrenErrors = [];\n    for (var _i = 0, errors_1 = errors; _i < errors_1.length; _i++) {\n        var error = errors_1[_i];\n        if ((!error.path) || (error.path.length === 1 && error.path[0] === fieldName)) {\n            return {\n                kind: 'OWN',\n                error: error,\n            };\n        }\n        else if (error.path[0] === fieldName) {\n            childrenErrors.push(error);\n        }\n    }\n    return {\n        kind: 'CHILDREN',\n        errors: childrenErrors,\n    };\n}\nexports.getErrorsFromParent = getErrorsFromParent;\nvar CombinedError = /** @class */ (function (_super) {\n    __extends(CombinedError, _super);\n    function CombinedError(message, errors) {\n        var _this = _super.call(this, message) || this;\n        _this.errors = errors;\n        return _this;\n    }\n    return CombinedError;\n}(Error));\nfunction checkResultAndHandleErrors(result, info, responseKey) {\n    if (!responseKey) {\n        responseKey = info.fieldNodes[0].alias\n            ? info.fieldNodes[0].alias.value\n            : info.fieldName;\n    }\n    if (result.errors && (!result.data || result.data[responseKey] == null)) {\n        // apollo-link-http & http-link-dataloader need the\n        // result property to be passed through for better error handling.\n        // If there is only one error, which contains a result property, pass the error through\n        var newError = result.errors.length === 1 && hasResult(result.errors[0])\n            ? result.errors[0]\n            : new CombinedError(concatErrors(result.errors), result.errors);\n        throw error_1.locatedError(newError, info.fieldNodes, graphql_1.responsePathAsArray(info.path));\n    }\n    else {\n        var resultObject = result.data[responseKey];\n        if (result.errors) {\n            resultObject = annotateWithChildrenErrors(resultObject, result.errors);\n        }\n        return resultObject;\n    }\n}\nexports.checkResultAndHandleErrors = checkResultAndHandleErrors;\nfunction concatErrors(errors) {\n    return errors.map(function (error) { return error.message; }).join('\\n');\n}\nfunction hasResult(error) {\n    return error.result || (error.originalError && error.originalError.result);\n}\n//# sourceMappingURL=errors.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql-tools/dist/stitching/errors.js\n// module id = 49\n// module chunks = 0","export var Observable = require('zen-observable');\n//# sourceMappingURL=zenObservable.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/zen-observable-ts/lib/zenObservable.js\n// module id = 50\n// module chunks = 0","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nimport { getOperationName } from 'apollo-utilities';\nimport Observable from 'zen-observable-ts';\nimport { print } from 'graphql/language/printer';\nexport function validateOperation(operation) {\n    var OPERATION_FIELDS = [\n        'query',\n        'operationName',\n        'variables',\n        'extensions',\n        'context',\n    ];\n    for (var _i = 0, _a = Object.keys(operation); _i < _a.length; _i++) {\n        var key = _a[_i];\n        if (OPERATION_FIELDS.indexOf(key) < 0) {\n            throw new Error(\"illegal argument: \" + key);\n        }\n    }\n    return operation;\n}\nvar LinkError = (function (_super) {\n    __extends(LinkError, _super);\n    function LinkError(message, link) {\n        var _this = _super.call(this, message) || this;\n        _this.link = link;\n        return _this;\n    }\n    return LinkError;\n}(Error));\nexport { LinkError };\nexport function isTerminating(link) {\n    return link.request.length <= 1;\n}\nexport function toPromise(observable) {\n    var completed = false;\n    return new Promise(function (resolve, reject) {\n        observable.subscribe({\n            next: function (data) {\n                if (completed) {\n                    console.warn(\"Promise Wrapper does not support multiple results from Observable\");\n                }\n                else {\n                    completed = true;\n                    resolve(data);\n                }\n            },\n            error: reject,\n        });\n    });\n}\nexport var makePromise = toPromise;\nexport function fromPromise(promise) {\n    return new Observable(function (observer) {\n        promise\n            .then(function (value) {\n            observer.next(value);\n            observer.complete();\n        })\n            .catch(observer.error.bind(observer));\n    });\n}\nexport function fromError(errorValue) {\n    return new Observable(function (observer) {\n        observer.error(errorValue);\n    });\n}\nexport function transformOperation(operation) {\n    var transformedOperation = {\n        variables: operation.variables || {},\n        extensions: operation.extensions || {},\n        operationName: operation.operationName,\n        query: operation.query,\n    };\n    if (!transformedOperation.operationName) {\n        transformedOperation.operationName =\n            typeof transformedOperation.query !== 'string'\n                ? getOperationName(transformedOperation.query)\n                : '';\n    }\n    return transformedOperation;\n}\nexport function createOperation(starting, operation) {\n    var context = __assign({}, starting);\n    var setContext = function (next) {\n        if (typeof next === 'function') {\n            context = __assign({}, context, next(context));\n        }\n        else {\n            context = __assign({}, context, next);\n        }\n    };\n    var getContext = function () { return (__assign({}, context)); };\n    Object.defineProperty(operation, 'setContext', {\n        enumerable: false,\n        value: setContext,\n    });\n    Object.defineProperty(operation, 'getContext', {\n        enumerable: false,\n        value: getContext,\n    });\n    Object.defineProperty(operation, 'toKey', {\n        enumerable: false,\n        value: function () { return getKey(operation); },\n    });\n    return operation;\n}\nexport function getKey(operation) {\n    return print(operation.query) + \"|\" + JSON.stringify(operation.variables) + \"|\" + operation.operationName;\n}\n//# sourceMappingURL=linkUtils.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/apollo-link/lib/linkUtils.js\n// module id = 51\n// module chunks = 0","import { assign } from './util/assign';\nimport { valueToObjectRepresentation } from './storeUtils';\nexport function getMutationDefinition(doc) {\n    checkDocument(doc);\n    var mutationDef = doc.definitions.filter(function (definition) {\n        return definition.kind === 'OperationDefinition' &&\n            definition.operation === 'mutation';\n    })[0];\n    if (!mutationDef) {\n        throw new Error('Must contain a mutation definition.');\n    }\n    return mutationDef;\n}\n// Checks the document for errors and throws an exception if there is an error.\nexport function checkDocument(doc) {\n    if (doc.kind !== 'Document') {\n        throw new Error(\"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\");\n    }\n    var operations = doc.definitions\n        .filter(function (d) { return d.kind !== 'FragmentDefinition'; })\n        .map(function (definition) {\n        if (definition.kind !== 'OperationDefinition') {\n            throw new Error(\"Schema type definitions not allowed in queries. Found: \\\"\" + definition.kind + \"\\\"\");\n        }\n        return definition;\n    });\n    if (operations.length > 1) {\n        throw new Error(\"Ambiguous GraphQL document: contains \" + operations.length + \" operations\");\n    }\n}\nexport function getOperationDefinition(doc) {\n    checkDocument(doc);\n    return doc.definitions.filter(function (definition) { return definition.kind === 'OperationDefinition'; })[0];\n}\nexport function getOperationDefinitionOrDie(document) {\n    var def = getOperationDefinition(document);\n    if (!def) {\n        throw new Error(\"GraphQL document is missing an operation\");\n    }\n    return def;\n}\nexport function getOperationName(doc) {\n    return (doc.definitions\n        .filter(function (definition) {\n        return definition.kind === 'OperationDefinition' && definition.name;\n    })\n        .map(function (x) { return x.name.value; })[0] || null);\n}\n// Returns the FragmentDefinitions from a particular document as an array\nexport function getFragmentDefinitions(doc) {\n    return doc.definitions.filter(function (definition) { return definition.kind === 'FragmentDefinition'; });\n}\nexport function getQueryDefinition(doc) {\n    var queryDef = getOperationDefinition(doc);\n    if (!queryDef || queryDef.operation !== 'query') {\n        throw new Error('Must contain a query definition.');\n    }\n    return queryDef;\n}\nexport function getFragmentDefinition(doc) {\n    if (doc.kind !== 'Document') {\n        throw new Error(\"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\");\n    }\n    if (doc.definitions.length > 1) {\n        throw new Error('Fragment must have exactly one definition.');\n    }\n    var fragmentDef = doc.definitions[0];\n    if (fragmentDef.kind !== 'FragmentDefinition') {\n        throw new Error('Must be a fragment definition.');\n    }\n    return fragmentDef;\n}\n/**\n * Returns the first operation definition found in this document.\n * If no operation definition is found, the first fragment definition will be returned.\n * If no definitions are found, an error will be thrown.\n */\nexport function getMainDefinition(queryDoc) {\n    checkDocument(queryDoc);\n    var fragmentDefinition;\n    for (var _i = 0, _a = queryDoc.definitions; _i < _a.length; _i++) {\n        var definition = _a[_i];\n        if (definition.kind === 'OperationDefinition') {\n            var operation = definition.operation;\n            if (operation === 'query' ||\n                operation === 'mutation' ||\n                operation === 'subscription') {\n                return definition;\n            }\n        }\n        if (definition.kind === 'FragmentDefinition' && !fragmentDefinition) {\n            // we do this because we want to allow multiple fragment definitions\n            // to precede an operation definition.\n            fragmentDefinition = definition;\n        }\n    }\n    if (fragmentDefinition) {\n        return fragmentDefinition;\n    }\n    throw new Error('Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.');\n}\n// Utility function that takes a list of fragment definitions and makes a hash out of them\n// that maps the name of the fragment to the fragment definition.\nexport function createFragmentMap(fragments) {\n    if (fragments === void 0) { fragments = []; }\n    var symTable = {};\n    fragments.forEach(function (fragment) {\n        symTable[fragment.name.value] = fragment;\n    });\n    return symTable;\n}\nexport function getDefaultValues(definition) {\n    if (definition &&\n        definition.variableDefinitions &&\n        definition.variableDefinitions.length) {\n        var defaultValues = definition.variableDefinitions\n            .filter(function (_a) {\n            var defaultValue = _a.defaultValue;\n            return defaultValue;\n        })\n            .map(function (_a) {\n            var variable = _a.variable, defaultValue = _a.defaultValue;\n            var defaultValueObj = {};\n            valueToObjectRepresentation(defaultValueObj, variable.name, defaultValue);\n            return defaultValueObj;\n        });\n        return assign.apply(void 0, [{}].concat(defaultValues));\n    }\n    return {};\n}\n/**\n * Returns the names of all variables declared by the operation.\n */\nexport function variablesInOperation(operation) {\n    var names = new Set();\n    if (operation.variableDefinitions) {\n        for (var _i = 0, _a = operation.variableDefinitions; _i < _a.length; _i++) {\n            var definition = _a[_i];\n            names.add(definition.variable.name.value);\n        }\n    }\n    return names;\n}\n//# sourceMappingURL=getFromAST.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/apollo-utilities/lib/getFromAST.js\n// module id = 52\n// module chunks = 0","export function assign(target) {\n    var sources = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        sources[_i - 1] = arguments[_i];\n    }\n    sources.forEach(function (source) {\n        if (typeof source === 'undefined' || source === null) {\n            return;\n        }\n        Object.keys(source).forEach(function (key) {\n            target[key] = source[key];\n        });\n    });\n    return target;\n}\n//# sourceMappingURL=assign.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/apollo-utilities/lib/util/assign.js\n// module id = 53\n// module chunks = 0","/**\n * Deeply clones a value to create a new instance.\n */\nexport function cloneDeep(value) {\n    // If the value is an array, create a new array where every item has been cloned.\n    if (Array.isArray(value)) {\n        return value.map(function (item) { return cloneDeep(item); });\n    }\n    // If the value is an object, go through all of the object’s properties and add them to a new\n    // object.\n    if (value !== null && typeof value === 'object') {\n        var nextValue = {};\n        for (var key in value) {\n            if (value.hasOwnProperty(key)) {\n                nextValue[key] = cloneDeep(value[key]);\n            }\n        }\n        return nextValue;\n    }\n    // Otherwise this is some primitive value and it is therefore immutable so we can just return it\n    // directly.\n    return value;\n}\n//# sourceMappingURL=cloneDeep.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/apollo-utilities/lib/util/cloneDeep.js\n// module id = 54\n// module chunks = 0","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/process/browser.js\n// module id = 55\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getOperationAST = getOperationAST;\n\nvar _kinds = require('../language/kinds');\n\n/**\n * Returns an operation AST given a document AST and optionally an operation\n * name. If a name is not provided, an operation is only returned if only one is\n * provided in the document.\n */\nfunction getOperationAST(documentAST, operationName) {\n  var operation = null;\n  for (var i = 0; i < documentAST.definitions.length; i++) {\n    var definition = documentAST.definitions[i];\n    if (definition.kind === _kinds.Kind.OPERATION_DEFINITION) {\n      if (!operationName) {\n        // If no operation name was provided, only return an Operation if there\n        // is one defined in the document. Upon encountering the second, return\n        // null.\n        if (operation) {\n          return null;\n        }\n        operation = definition;\n      } else if (definition.name && definition.name.value === operationName) {\n        return definition;\n      }\n    }\n  }\n  return operation;\n} /**\n   * Copyright (c) 2015-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   *  strict\n   */\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/utilities/getOperationAST.js\n// module id = 56\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.valueFromASTUntyped = valueFromASTUntyped;\n\nvar _keyValMap = require('../jsutils/keyValMap');\n\nvar _keyValMap2 = _interopRequireDefault(_keyValMap);\n\nvar _isInvalid = require('../jsutils/isInvalid');\n\nvar _isInvalid2 = _interopRequireDefault(_isInvalid);\n\nvar _kinds = require('../language/kinds');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Produces a JavaScript value given a GraphQL Value AST.\n *\n * Unlike `valueFromAST()`, no type is provided. The resulting JavaScript value\n * will reflect the provided GraphQL value AST.\n *\n * | GraphQL Value        | JavaScript Value |\n * | -------------------- | ---------------- |\n * | Input Object         | Object           |\n * | List                 | Array            |\n * | Boolean              | Boolean          |\n * | String / Enum        | String           |\n * | Int / Float          | Number           |\n * | Null                 | null             |\n *\n */\nfunction valueFromASTUntyped(valueNode, variables) {\n  switch (valueNode.kind) {\n    case _kinds.Kind.NULL:\n      return null;\n    case _kinds.Kind.INT:\n      return parseInt(valueNode.value, 10);\n    case _kinds.Kind.FLOAT:\n      return parseFloat(valueNode.value);\n    case _kinds.Kind.STRING:\n    case _kinds.Kind.ENUM:\n    case _kinds.Kind.BOOLEAN:\n      return valueNode.value;\n    case _kinds.Kind.LIST:\n      return valueNode.values.map(function (node) {\n        return valueFromASTUntyped(node, variables);\n      });\n    case _kinds.Kind.OBJECT:\n      return (0, _keyValMap2.default)(valueNode.fields, function (field) {\n        return field.name.value;\n      }, function (field) {\n        return valueFromASTUntyped(field.value, variables);\n      });\n    case _kinds.Kind.VARIABLE:\n      var variableName = valueNode.name.value;\n      return variables && !(0, _isInvalid2.default)(variables[variableName]) ? variables[variableName] : undefined;\n  }\n  /* istanbul ignore next */\n  throw new Error('Unexpected value kind: ' + valueNode.kind);\n} /**\n   * Copyright (c) 2015-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   *  strict\n   */\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/utilities/valueFromASTUntyped.js\n// module id = 57\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.printError = printError;\n\nvar _location = require('../language/location');\n\n/**\n * Prints a GraphQLError to a string, representing useful location information\n * about the error's position in the source.\n */\nfunction printError(error) {\n  var printedLocations = [];\n  if (error.nodes) {\n    error.nodes.forEach(function (node) {\n      if (node.loc) {\n        printedLocations.push(highlightSourceAtLocation(node.loc.source, (0, _location.getLocation)(node.loc.source, node.loc.start)));\n      }\n    });\n  } else if (error.source && error.locations) {\n    var source = error.source;\n    error.locations.forEach(function (location) {\n      printedLocations.push(highlightSourceAtLocation(source, location));\n    });\n  }\n  return printedLocations.length === 0 ? error.message : [error.message].concat(printedLocations).join('\\n\\n') + '\\n';\n}\n\n/**\n * Render a helpful description of the location of the error in the GraphQL\n * Source document.\n */\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction highlightSourceAtLocation(source, location) {\n  var line = location.line;\n  var lineOffset = source.locationOffset.line - 1;\n  var columnOffset = getColumnOffset(source, location);\n  var contextLine = line + lineOffset;\n  var contextColumn = location.column + columnOffset;\n  var prevLineNum = (contextLine - 1).toString();\n  var lineNum = contextLine.toString();\n  var nextLineNum = (contextLine + 1).toString();\n  var padLen = nextLineNum.length;\n  var lines = source.body.split(/\\r\\n|[\\n\\r]/g);\n  lines[0] = whitespace(source.locationOffset.column - 1) + lines[0];\n  var outputLines = [source.name + ' (' + contextLine + ':' + contextColumn + ')', line >= 2 && lpad(padLen, prevLineNum) + ': ' + lines[line - 2], lpad(padLen, lineNum) + ': ' + lines[line - 1], whitespace(2 + padLen + contextColumn - 1) + '^', line < lines.length && lpad(padLen, nextLineNum) + ': ' + lines[line]];\n  return outputLines.filter(Boolean).join('\\n');\n}\n\nfunction getColumnOffset(source, location) {\n  return location.line === 1 ? source.locationOffset.column - 1 : 0;\n}\n\nfunction whitespace(len) {\n  return Array(len + 1).join(' ');\n}\n\nfunction lpad(len, str) {\n  return whitespace(len - str.length) + str;\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/error/printError.js\n// module id = 58\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assertValidName = assertValidName;\nexports.isValidNameError = isValidNameError;\n\nvar _GraphQLError = require('../error/GraphQLError');\n\nvar _invariant = require('../jsutils/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nvar NAME_RX = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n\n/**\n * Upholds the spec rules about naming.\n */\nfunction assertValidName(name) {\n  var error = isValidNameError(name);\n  if (error) {\n    throw error;\n  }\n  return name;\n}\n\n/**\n * Returns an Error if a name is invalid.\n */\nfunction isValidNameError(name, node) {\n  !(typeof name === 'string') ? (0, _invariant2.default)(0, 'Expected string') : void 0;\n  if (name.length > 1 && name[0] === '_' && name[1] === '_') {\n    return new _GraphQLError.GraphQLError('Name \"' + name + '\" must not begin with \"__\", which is reserved by ' + 'GraphQL introspection.', node);\n  }\n  if (!NAME_RX.test(name)) {\n    return new _GraphQLError.GraphQLError('Names must match /^[_a-zA-Z][_a-zA-Z0-9]*$/ but \"' + name + '\" does not.', node);\n  }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/utilities/assertValidName.js\n// module id = 59\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Source = undefined;\n\nvar _invariant = require('../jsutils/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /**\n                                                                                                                                                           * Copyright (c) 2015-present, Facebook, Inc.\n                                                                                                                                                           *\n                                                                                                                                                           * This source code is licensed under the MIT license found in the\n                                                                                                                                                           * LICENSE file in the root directory of this source tree.\n                                                                                                                                                           *\n                                                                                                                                                           *  strict\n                                                                                                                                                           */\n\n/**\n * A representation of source input to GraphQL.\n * `name` and `locationOffset` are optional. They are useful for clients who\n * store GraphQL documents in source files; for example, if the GraphQL input\n * starts at line 40 in a file named Foo.graphql, it might be useful for name to\n * be \"Foo.graphql\" and location to be `{ line: 40, column: 0 }`.\n * line and column in locationOffset are 1-indexed\n */\nvar Source = exports.Source = function Source(body, name, locationOffset) {\n  _classCallCheck(this, Source);\n\n  this.body = body;\n  this.name = name || 'GraphQL request';\n  this.locationOffset = locationOffset || { line: 1, column: 1 };\n  !(this.locationOffset.line > 0) ? (0, _invariant2.default)(0, 'line in locationOffset is 1-indexed and must be positive') : void 0;\n  !(this.locationOffset.column > 0) ? (0, _invariant2.default)(0, 'column in locationOffset is 1-indexed and must be positive') : void 0;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/language/source.js\n// module id = 60\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.locatedError = locatedError;\n\nvar _GraphQLError = require('./GraphQLError');\n\n/**\n * Given an arbitrary Error, presumably thrown while attempting to execute a\n * GraphQL operation, produce a new GraphQLError aware of the location in the\n * document responsible for the original Error.\n */\nfunction locatedError(originalError, nodes, path) {\n  // Note: this uses a brand-check to support GraphQL errors originating from\n  // other contexts.\n  // $FlowFixMe(>=0.68.0)\n  if (originalError && Array.isArray(originalError.path)) {\n    return originalError;\n  }\n\n  return new _GraphQLError.GraphQLError(originalError && originalError.message, originalError && originalError.nodes || nodes, originalError && originalError.source, originalError && originalError.positions, path, originalError);\n} /**\n   * Copyright (c) 2015-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   *  strict\n   */\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/error/locatedError.js\n// module id = 61\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = blockStringValue;\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * Produces the value of a block string from its parsed raw value, similar to\n * Coffeescript's block string, Python's docstring trim or Ruby's strip_heredoc.\n *\n * This implements the GraphQL spec's BlockStringValue() static algorithm.\n */\nfunction blockStringValue(rawString) {\n  // Expand a block string's raw value into independent lines.\n  var lines = rawString.split(/\\r\\n|[\\n\\r]/g);\n\n  // Remove common indentation from all lines but first.\n  var commonIndent = null;\n  for (var i = 1; i < lines.length; i++) {\n    var line = lines[i];\n    var indent = leadingWhitespace(line);\n    if (indent < line.length && (commonIndent === null || indent < commonIndent)) {\n      commonIndent = indent;\n      if (commonIndent === 0) {\n        break;\n      }\n    }\n  }\n\n  if (commonIndent) {\n    for (var _i = 1; _i < lines.length; _i++) {\n      lines[_i] = lines[_i].slice(commonIndent);\n    }\n  }\n\n  // Remove leading and trailing blank lines.\n  while (lines.length > 0 && isBlank(lines[0])) {\n    lines.shift();\n  }\n  while (lines.length > 0 && isBlank(lines[lines.length - 1])) {\n    lines.pop();\n  }\n\n  // Return a string of the lines joined with U+000A.\n  return lines.join('\\n');\n}\n\nfunction leadingWhitespace(str) {\n  var i = 0;\n  while (i < str.length && (str[i] === ' ' || str[i] === '\\t')) {\n    i++;\n  }\n  return i;\n}\n\nfunction isBlank(str) {\n  return leadingWhitespace(str) === str.length;\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/language/blockStringValue.js\n// module id = 62\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validate = validate;\n\nvar _invariant = require('../jsutils/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _error = require('../error');\n\nvar _visitor = require('../language/visitor');\n\nvar _schema = require('../type/schema');\n\nvar _validate = require('../type/validate');\n\nvar _TypeInfo = require('../utilities/TypeInfo');\n\nvar _specifiedRules = require('./specifiedRules');\n\nvar _ValidationContext = require('./ValidationContext');\n\nvar _ValidationContext2 = _interopRequireDefault(_ValidationContext);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Implements the \"Validation\" section of the spec.\n *\n * Validation runs synchronously, returning an array of encountered errors, or\n * an empty array if no errors were encountered and the document is valid.\n *\n * A list of specific validation rules may be provided. If not provided, the\n * default list of rules defined by the GraphQL specification will be used.\n *\n * Each validation rules is a function which returns a visitor\n * (see the language/visitor API). Visitor methods are expected to return\n * GraphQLErrors, or Arrays of GraphQLErrors when invalid.\n *\n * Optionally a custom TypeInfo instance may be provided. If not provided, one\n * will be created from the provided schema.\n */\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction validate(schema, ast, rules, typeInfo) {\n  !ast ? (0, _invariant2.default)(0, 'Must provide document') : void 0;\n  // If the schema used for validation is invalid, throw an error.\n  (0, _validate.assertValidSchema)(schema);\n  return visitUsingRules(schema, typeInfo || new _TypeInfo.TypeInfo(schema), ast, rules || _specifiedRules.specifiedRules);\n}\n\n/**\n * This uses a specialized visitor which runs multiple visitors in parallel,\n * while maintaining the visitor skip and break API.\n *\n * @internal\n */\nfunction visitUsingRules(schema, typeInfo, documentAST, rules) {\n  var context = new _ValidationContext2.default(schema, documentAST, typeInfo);\n  var visitors = rules.map(function (rule) {\n    return rule(context);\n  });\n  // Visit the whole document with each instance of all provided rules.\n  (0, _visitor.visit)(documentAST, (0, _visitor.visitWithTypeInfo)(typeInfo, (0, _visitor.visitInParallel)(visitors)));\n  return context.getErrors();\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/validate.js\n// module id = 63\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.specifiedRules = undefined;\n\nvar _ExecutableDefinitions = require('./rules/ExecutableDefinitions');\n\nvar _UniqueOperationNames = require('./rules/UniqueOperationNames');\n\nvar _LoneAnonymousOperation = require('./rules/LoneAnonymousOperation');\n\nvar _SingleFieldSubscriptions = require('./rules/SingleFieldSubscriptions');\n\nvar _KnownTypeNames = require('./rules/KnownTypeNames');\n\nvar _FragmentsOnCompositeTypes = require('./rules/FragmentsOnCompositeTypes');\n\nvar _VariablesAreInputTypes = require('./rules/VariablesAreInputTypes');\n\nvar _ScalarLeafs = require('./rules/ScalarLeafs');\n\nvar _FieldsOnCorrectType = require('./rules/FieldsOnCorrectType');\n\nvar _UniqueFragmentNames = require('./rules/UniqueFragmentNames');\n\nvar _KnownFragmentNames = require('./rules/KnownFragmentNames');\n\nvar _NoUnusedFragments = require('./rules/NoUnusedFragments');\n\nvar _PossibleFragmentSpreads = require('./rules/PossibleFragmentSpreads');\n\nvar _NoFragmentCycles = require('./rules/NoFragmentCycles');\n\nvar _UniqueVariableNames = require('./rules/UniqueVariableNames');\n\nvar _NoUndefinedVariables = require('./rules/NoUndefinedVariables');\n\nvar _NoUnusedVariables = require('./rules/NoUnusedVariables');\n\nvar _KnownDirectives = require('./rules/KnownDirectives');\n\nvar _UniqueDirectivesPerLocation = require('./rules/UniqueDirectivesPerLocation');\n\nvar _KnownArgumentNames = require('./rules/KnownArgumentNames');\n\nvar _UniqueArgumentNames = require('./rules/UniqueArgumentNames');\n\nvar _ValuesOfCorrectType = require('./rules/ValuesOfCorrectType');\n\nvar _ProvidedNonNullArguments = require('./rules/ProvidedNonNullArguments');\n\nvar _VariablesDefaultValueAllowed = require('./rules/VariablesDefaultValueAllowed');\n\nvar _VariablesInAllowedPosition = require('./rules/VariablesInAllowedPosition');\n\nvar _OverlappingFieldsCanBeMerged = require('./rules/OverlappingFieldsCanBeMerged');\n\nvar _UniqueInputFieldNames = require('./rules/UniqueInputFieldNames');\n\n/**\n * This set includes all validation rules defined by the GraphQL spec.\n *\n * The order of the rules in this list has been adjusted to lead to the\n * most clear output when encountering multiple validation errors.\n */\n\n\n// Spec Section: \"Field Selection Merging\"\n\n\n// Spec Section: \"Variables Default Value Is Allowed\"\n\n\n// Spec Section: \"Value Type Correctness\"\n\n\n// Spec Section: \"Argument Names\"\n\n\n// Spec Section: \"Directives Are Defined\"\n\n\n// Spec Section: \"All Variable Used Defined\"\n\n\n// Spec Section: \"Fragments must not form cycles\"\n\n\n// Spec Section: \"Fragments must be used\"\n\n\n// Spec Section: \"Fragment Name Uniqueness\"\n\n\n// Spec Section: \"Leaf Field Selections\"\n\n\n// Spec Section: \"Fragments on Composite Types\"\n\n\n// Spec Section: \"Subscriptions with Single Root Field\"\n\n\n// Spec Section: \"Operation Name Uniqueness\"\nvar specifiedRules = exports.specifiedRules = [_ExecutableDefinitions.ExecutableDefinitions, _UniqueOperationNames.UniqueOperationNames, _LoneAnonymousOperation.LoneAnonymousOperation, _SingleFieldSubscriptions.SingleFieldSubscriptions, _KnownTypeNames.KnownTypeNames, _FragmentsOnCompositeTypes.FragmentsOnCompositeTypes, _VariablesAreInputTypes.VariablesAreInputTypes, _ScalarLeafs.ScalarLeafs, _FieldsOnCorrectType.FieldsOnCorrectType, _UniqueFragmentNames.UniqueFragmentNames, _KnownFragmentNames.KnownFragmentNames, _NoUnusedFragments.NoUnusedFragments, _PossibleFragmentSpreads.PossibleFragmentSpreads, _NoFragmentCycles.NoFragmentCycles, _UniqueVariableNames.UniqueVariableNames, _NoUndefinedVariables.NoUndefinedVariables, _NoUnusedVariables.NoUnusedVariables, _KnownDirectives.KnownDirectives, _UniqueDirectivesPerLocation.UniqueDirectivesPerLocation, _KnownArgumentNames.KnownArgumentNames, _UniqueArgumentNames.UniqueArgumentNames, _ValuesOfCorrectType.ValuesOfCorrectType, _ProvidedNonNullArguments.ProvidedNonNullArguments, _VariablesDefaultValueAllowed.VariablesDefaultValueAllowed, _VariablesInAllowedPosition.VariablesInAllowedPosition, _OverlappingFieldsCanBeMerged.OverlappingFieldsCanBeMerged, _UniqueInputFieldNames.UniqueInputFieldNames];\n\n// Spec Section: \"Input Object Field Uniqueness\"\n\n\n// Spec Section: \"All Variable Usages Are Allowed\"\n\n\n// Spec Section: \"Argument Optionality\"\n\n\n// Spec Section: \"Argument Uniqueness\"\n\n\n// Spec Section: \"Directives Are Unique Per Location\"\n\n\n// Spec Section: \"All Variables Used\"\n\n\n// Spec Section: \"Variable Uniqueness\"\n\n\n// Spec Section: \"Fragment spread is possible\"\n\n\n// Spec Section: \"Fragment spread target defined\"\n\n\n// Spec Section: \"Field Selections on Objects, Interfaces, and Unions Types\"\n\n\n// Spec Section: \"Variables are Input Types\"\n\n\n// Spec Section: \"Fragment Spread Type Existence\"\n\n\n// Spec Section: \"Lone Anonymous Operation\"\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n// Spec Section: \"Executable Definitions\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/specifiedRules.js\n// module id = 64\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.duplicateOperationNameMessage = duplicateOperationNameMessage;\nexports.UniqueOperationNames = UniqueOperationNames;\n\nvar _error = require('../../error');\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction duplicateOperationNameMessage(operationName) {\n  return 'There can be only one operation named \"' + operationName + '\".';\n}\n\n/**\n * Unique operation names\n *\n * A GraphQL document is only valid if all defined operations have unique names.\n */\nfunction UniqueOperationNames(context) {\n  var knownOperationNames = Object.create(null);\n  return {\n    OperationDefinition: function OperationDefinition(node) {\n      var operationName = node.name;\n      if (operationName) {\n        if (knownOperationNames[operationName.value]) {\n          context.reportError(new _error.GraphQLError(duplicateOperationNameMessage(operationName.value), [knownOperationNames[operationName.value], operationName]));\n        } else {\n          knownOperationNames[operationName.value] = operationName;\n        }\n      }\n      return false;\n    },\n\n    FragmentDefinition: function FragmentDefinition() {\n      return false;\n    }\n  };\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/rules/UniqueOperationNames.js\n// module id = 65\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.anonOperationNotAloneMessage = anonOperationNotAloneMessage;\nexports.LoneAnonymousOperation = LoneAnonymousOperation;\n\nvar _error = require('../../error');\n\nvar _kinds = require('../../language/kinds');\n\nfunction anonOperationNotAloneMessage() {\n  return 'This anonymous operation must be the only defined operation.';\n}\n\n/**\n * Lone anonymous operation\n *\n * A GraphQL document is only valid if when it contains an anonymous operation\n * (the query short-hand) that it contains only that one operation definition.\n */\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction LoneAnonymousOperation(context) {\n  var operationCount = 0;\n  return {\n    Document: function Document(node) {\n      operationCount = node.definitions.filter(function (definition) {\n        return definition.kind === _kinds.Kind.OPERATION_DEFINITION;\n      }).length;\n    },\n    OperationDefinition: function OperationDefinition(node) {\n      if (!node.name && operationCount > 1) {\n        context.reportError(new _error.GraphQLError(anonOperationNotAloneMessage(), [node]));\n      }\n    }\n  };\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/rules/LoneAnonymousOperation.js\n// module id = 66\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.singleFieldOnlyMessage = singleFieldOnlyMessage;\nexports.SingleFieldSubscriptions = SingleFieldSubscriptions;\n\nvar _error = require('../../error');\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction singleFieldOnlyMessage(name) {\n  return (name ? 'Subscription \"' + name + '\" ' : 'Anonymous Subscription ') + 'must select only one top level field.';\n}\n\n/**\n * Subscriptions must only include one field.\n *\n * A GraphQL subscription is valid only if it contains a single root field.\n */\nfunction SingleFieldSubscriptions(context) {\n  return {\n    OperationDefinition: function OperationDefinition(node) {\n      if (node.operation === 'subscription') {\n        if (node.selectionSet.selections.length !== 1) {\n          context.reportError(new _error.GraphQLError(singleFieldOnlyMessage(node.name && node.name.value), node.selectionSet.selections.slice(1)));\n        }\n      }\n    }\n  };\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/rules/SingleFieldSubscriptions.js\n// module id = 67\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.unknownTypeMessage = unknownTypeMessage;\nexports.KnownTypeNames = KnownTypeNames;\n\nvar _error = require('../../error');\n\nvar _suggestionList = require('../../jsutils/suggestionList');\n\nvar _suggestionList2 = _interopRequireDefault(_suggestionList);\n\nvar _quotedOrList = require('../../jsutils/quotedOrList');\n\nvar _quotedOrList2 = _interopRequireDefault(_quotedOrList);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction unknownTypeMessage(typeName, suggestedTypes) {\n  var message = 'Unknown type \"' + typeName + '\".';\n  if (suggestedTypes.length) {\n    message += ' Did you mean ' + (0, _quotedOrList2.default)(suggestedTypes) + '?';\n  }\n  return message;\n}\n\n/**\n * Known type names\n *\n * A GraphQL document is only valid if referenced types (specifically\n * variable definitions and fragment conditions) are defined by the type schema.\n */\nfunction KnownTypeNames(context) {\n  return {\n    // TODO: when validating IDL, re-enable these. Experimental version does not\n    // add unreferenced types, resulting in false-positive errors. Squelched\n    // errors for now.\n    ObjectTypeDefinition: function ObjectTypeDefinition() {\n      return false;\n    },\n    InterfaceTypeDefinition: function InterfaceTypeDefinition() {\n      return false;\n    },\n    UnionTypeDefinition: function UnionTypeDefinition() {\n      return false;\n    },\n    InputObjectTypeDefinition: function InputObjectTypeDefinition() {\n      return false;\n    },\n    NamedType: function NamedType(node) {\n      var schema = context.getSchema();\n      var typeName = node.name.value;\n      var type = schema.getType(typeName);\n      if (!type) {\n        context.reportError(new _error.GraphQLError(unknownTypeMessage(typeName, (0, _suggestionList2.default)(typeName, Object.keys(schema.getTypeMap()))), [node]));\n      }\n    }\n  };\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/rules/KnownTypeNames.js\n// module id = 68\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.inlineFragmentOnNonCompositeErrorMessage = inlineFragmentOnNonCompositeErrorMessage;\nexports.fragmentOnNonCompositeErrorMessage = fragmentOnNonCompositeErrorMessage;\nexports.FragmentsOnCompositeTypes = FragmentsOnCompositeTypes;\n\nvar _error = require('../../error');\n\nvar _printer = require('../../language/printer');\n\nvar _definition = require('../../type/definition');\n\nvar _typeFromAST = require('../../utilities/typeFromAST');\n\nfunction inlineFragmentOnNonCompositeErrorMessage(type) {\n  return 'Fragment cannot condition on non composite type \"' + String(type) + '\".';\n} /**\n   * Copyright (c) 2015-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   *  strict\n   */\n\nfunction fragmentOnNonCompositeErrorMessage(fragName, type) {\n  return 'Fragment \"' + fragName + '\" cannot condition on non composite ' + ('type \"' + String(type) + '\".');\n}\n\n/**\n * Fragments on composite type\n *\n * Fragments use a type condition to determine if they apply, since fragments\n * can only be spread into a composite type (object, interface, or union), the\n * type condition must also be a composite type.\n */\nfunction FragmentsOnCompositeTypes(context) {\n  return {\n    InlineFragment: function InlineFragment(node) {\n      var typeCondition = node.typeCondition;\n      if (typeCondition) {\n        var type = (0, _typeFromAST.typeFromAST)(context.getSchema(), typeCondition);\n        if (type && !(0, _definition.isCompositeType)(type)) {\n          context.reportError(new _error.GraphQLError(inlineFragmentOnNonCompositeErrorMessage((0, _printer.print)(typeCondition)), [typeCondition]));\n        }\n      }\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      var type = (0, _typeFromAST.typeFromAST)(context.getSchema(), node.typeCondition);\n      if (type && !(0, _definition.isCompositeType)(type)) {\n        context.reportError(new _error.GraphQLError(fragmentOnNonCompositeErrorMessage(node.name.value, (0, _printer.print)(node.typeCondition)), [node.typeCondition]));\n      }\n    }\n  };\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js\n// module id = 69\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.nonInputTypeOnVarMessage = nonInputTypeOnVarMessage;\nexports.VariablesAreInputTypes = VariablesAreInputTypes;\n\nvar _error = require('../../error');\n\nvar _printer = require('../../language/printer');\n\nvar _definition = require('../../type/definition');\n\nvar _typeFromAST = require('../../utilities/typeFromAST');\n\nfunction nonInputTypeOnVarMessage(variableName, typeName) {\n  return 'Variable \"$' + variableName + '\" cannot be non-input type \"' + typeName + '\".';\n}\n\n/**\n * Variables are input types\n *\n * A GraphQL operation is only valid if all the variables it defines are of\n * input types (scalar, enum, or input object).\n */\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction VariablesAreInputTypes(context) {\n  return {\n    VariableDefinition: function VariableDefinition(node) {\n      var type = (0, _typeFromAST.typeFromAST)(context.getSchema(), node.type);\n\n      // If the variable type is not an input type, return an error.\n      if (type && !(0, _definition.isInputType)(type)) {\n        var variableName = node.variable.name.value;\n        context.reportError(new _error.GraphQLError(nonInputTypeOnVarMessage(variableName, (0, _printer.print)(node.type)), [node.type]));\n      }\n    }\n  };\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/rules/VariablesAreInputTypes.js\n// module id = 70\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.noSubselectionAllowedMessage = noSubselectionAllowedMessage;\nexports.requiredSubselectionMessage = requiredSubselectionMessage;\nexports.ScalarLeafs = ScalarLeafs;\n\nvar _error = require('../../error');\n\nvar _definition = require('../../type/definition');\n\nfunction noSubselectionAllowedMessage(fieldName, type) {\n  return 'Field \"' + fieldName + '\" must not have a selection since ' + ('type \"' + String(type) + '\" has no subfields.');\n} /**\n   * Copyright (c) 2015-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   *  strict\n   */\n\nfunction requiredSubselectionMessage(fieldName, type) {\n  return 'Field \"' + fieldName + '\" of type \"' + String(type) + '\" must have a ' + ('selection of subfields. Did you mean \"' + fieldName + ' { ... }\"?');\n}\n\n/**\n * Scalar leafs\n *\n * A GraphQL document is valid only if all leaf fields (fields without\n * sub selections) are of scalar or enum types.\n */\nfunction ScalarLeafs(context) {\n  return {\n    Field: function Field(node) {\n      var type = context.getType();\n      var selectionSet = node.selectionSet;\n      if (type) {\n        if ((0, _definition.isLeafType)((0, _definition.getNamedType)(type))) {\n          if (selectionSet) {\n            context.reportError(new _error.GraphQLError(noSubselectionAllowedMessage(node.name.value, type), [selectionSet]));\n          }\n        } else if (!selectionSet) {\n          context.reportError(new _error.GraphQLError(requiredSubselectionMessage(node.name.value, type), [node]));\n        }\n      }\n    }\n  };\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/rules/ScalarLeafs.js\n// module id = 71\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.undefinedFieldMessage = undefinedFieldMessage;\nexports.FieldsOnCorrectType = FieldsOnCorrectType;\n\nvar _error = require('../../error');\n\nvar _suggestionList = require('../../jsutils/suggestionList');\n\nvar _suggestionList2 = _interopRequireDefault(_suggestionList);\n\nvar _quotedOrList = require('../../jsutils/quotedOrList');\n\nvar _quotedOrList2 = _interopRequireDefault(_quotedOrList);\n\nvar _definition = require('../../type/definition');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction undefinedFieldMessage(fieldName, type, suggestedTypeNames, suggestedFieldNames) {\n  var message = 'Cannot query field \"' + fieldName + '\" on type \"' + type + '\".';\n  if (suggestedTypeNames.length !== 0) {\n    var suggestions = (0, _quotedOrList2.default)(suggestedTypeNames);\n    message += ' Did you mean to use an inline fragment on ' + suggestions + '?';\n  } else if (suggestedFieldNames.length !== 0) {\n    message += ' Did you mean ' + (0, _quotedOrList2.default)(suggestedFieldNames) + '?';\n  }\n  return message;\n}\n\n/**\n * Fields on correct type\n *\n * A GraphQL document is only valid if all fields selected are defined by the\n * parent type, or are an allowed meta field such as __typename.\n */\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction FieldsOnCorrectType(context) {\n  return {\n    Field: function Field(node) {\n      var type = context.getParentType();\n      if (type) {\n        var fieldDef = context.getFieldDef();\n        if (!fieldDef) {\n          // This field doesn't exist, lets look for suggestions.\n          var schema = context.getSchema();\n          var fieldName = node.name.value;\n          // First determine if there are any suggested types to condition on.\n          var suggestedTypeNames = getSuggestedTypeNames(schema, type, fieldName);\n          // If there are no suggested types, then perhaps this was a typo?\n          var suggestedFieldNames = suggestedTypeNames.length !== 0 ? [] : getSuggestedFieldNames(schema, type, fieldName);\n\n          // Report an error, including helpful suggestions.\n          context.reportError(new _error.GraphQLError(undefinedFieldMessage(fieldName, type.name, suggestedTypeNames, suggestedFieldNames), [node]));\n        }\n      }\n    }\n  };\n}\n\n/**\n * Go through all of the implementations of type, as well as the interfaces\n * that they implement. If any of those types include the provided field,\n * suggest them, sorted by how often the type is referenced,  starting\n * with Interfaces.\n */\nfunction getSuggestedTypeNames(schema, type, fieldName) {\n  if ((0, _definition.isAbstractType)(type)) {\n    var suggestedObjectTypes = [];\n    var interfaceUsageCount = Object.create(null);\n    schema.getPossibleTypes(type).forEach(function (possibleType) {\n      if (!possibleType.getFields()[fieldName]) {\n        return;\n      }\n      // This object type defines this field.\n      suggestedObjectTypes.push(possibleType.name);\n      possibleType.getInterfaces().forEach(function (possibleInterface) {\n        if (!possibleInterface.getFields()[fieldName]) {\n          return;\n        }\n        // This interface type defines this field.\n        interfaceUsageCount[possibleInterface.name] = (interfaceUsageCount[possibleInterface.name] || 0) + 1;\n      });\n    });\n\n    // Suggest interface types based on how common they are.\n    var suggestedInterfaceTypes = Object.keys(interfaceUsageCount).sort(function (a, b) {\n      return interfaceUsageCount[b] - interfaceUsageCount[a];\n    });\n\n    // Suggest both interface and object types.\n    return suggestedInterfaceTypes.concat(suggestedObjectTypes);\n  }\n\n  // Otherwise, must be an Object type, which does not have possible fields.\n  return [];\n}\n\n/**\n * For the field name provided, determine if there are any similar field names\n * that may be the result of a typo.\n */\nfunction getSuggestedFieldNames(schema, type, fieldName) {\n  if ((0, _definition.isObjectType)(type) || (0, _definition.isInterfaceType)(type)) {\n    var possibleFieldNames = Object.keys(type.getFields());\n    return (0, _suggestionList2.default)(fieldName, possibleFieldNames);\n  }\n  // Otherwise, must be a Union type, which does not define fields.\n  return [];\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/rules/FieldsOnCorrectType.js\n// module id = 72\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.duplicateFragmentNameMessage = duplicateFragmentNameMessage;\nexports.UniqueFragmentNames = UniqueFragmentNames;\n\nvar _error = require('../../error');\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction duplicateFragmentNameMessage(fragName) {\n  return 'There can be only one fragment named \"' + fragName + '\".';\n}\n\n/**\n * Unique fragment names\n *\n * A GraphQL document is only valid if all defined fragments have unique names.\n */\nfunction UniqueFragmentNames(context) {\n  var knownFragmentNames = Object.create(null);\n  return {\n    OperationDefinition: function OperationDefinition() {\n      return false;\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      var fragmentName = node.name.value;\n      if (knownFragmentNames[fragmentName]) {\n        context.reportError(new _error.GraphQLError(duplicateFragmentNameMessage(fragmentName), [knownFragmentNames[fragmentName], node.name]));\n      } else {\n        knownFragmentNames[fragmentName] = node.name;\n      }\n      return false;\n    }\n  };\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/rules/UniqueFragmentNames.js\n// module id = 73\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.unknownFragmentMessage = unknownFragmentMessage;\nexports.KnownFragmentNames = KnownFragmentNames;\n\nvar _error = require('../../error');\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction unknownFragmentMessage(fragName) {\n  return 'Unknown fragment \"' + fragName + '\".';\n}\n\n/**\n * Known fragment names\n *\n * A GraphQL document is only valid if all `...Fragment` fragment spreads refer\n * to fragments defined in the same document.\n */\nfunction KnownFragmentNames(context) {\n  return {\n    FragmentSpread: function FragmentSpread(node) {\n      var fragmentName = node.name.value;\n      var fragment = context.getFragment(fragmentName);\n      if (!fragment) {\n        context.reportError(new _error.GraphQLError(unknownFragmentMessage(fragmentName), [node.name]));\n      }\n    }\n  };\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/rules/KnownFragmentNames.js\n// module id = 74\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.unusedFragMessage = unusedFragMessage;\nexports.NoUnusedFragments = NoUnusedFragments;\n\nvar _error = require('../../error');\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction unusedFragMessage(fragName) {\n  return 'Fragment \"' + fragName + '\" is never used.';\n}\n\n/**\n * No unused fragments\n *\n * A GraphQL document is only valid if all fragment definitions are spread\n * within operations, or spread within other fragments spread within operations.\n */\nfunction NoUnusedFragments(context) {\n  var operationDefs = [];\n  var fragmentDefs = [];\n\n  return {\n    OperationDefinition: function OperationDefinition(node) {\n      operationDefs.push(node);\n      return false;\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      fragmentDefs.push(node);\n      return false;\n    },\n\n    Document: {\n      leave: function leave() {\n        var fragmentNameUsed = Object.create(null);\n        operationDefs.forEach(function (operation) {\n          context.getRecursivelyReferencedFragments(operation).forEach(function (fragment) {\n            fragmentNameUsed[fragment.name.value] = true;\n          });\n        });\n\n        fragmentDefs.forEach(function (fragmentDef) {\n          var fragName = fragmentDef.name.value;\n          if (fragmentNameUsed[fragName] !== true) {\n            context.reportError(new _error.GraphQLError(unusedFragMessage(fragName), [fragmentDef]));\n          }\n        });\n      }\n    }\n  };\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/rules/NoUnusedFragments.js\n// module id = 75\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.typeIncompatibleSpreadMessage = typeIncompatibleSpreadMessage;\nexports.typeIncompatibleAnonSpreadMessage = typeIncompatibleAnonSpreadMessage;\nexports.PossibleFragmentSpreads = PossibleFragmentSpreads;\n\nvar _error = require('../../error');\n\nvar _typeComparators = require('../../utilities/typeComparators');\n\nvar _typeFromAST = require('../../utilities/typeFromAST');\n\nvar _definition = require('../../type/definition');\n\nfunction typeIncompatibleSpreadMessage(fragName, parentType, fragType) {\n  return 'Fragment \"' + fragName + '\" cannot be spread here as objects of ' + ('type \"' + String(parentType) + '\" can never be of type \"' + String(fragType) + '\".');\n} /**\n   * Copyright (c) 2015-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   *  strict\n   */\n\nfunction typeIncompatibleAnonSpreadMessage(parentType, fragType) {\n  return 'Fragment cannot be spread here as objects of ' + ('type \"' + String(parentType) + '\" can never be of type \"' + String(fragType) + '\".');\n}\n\n/**\n * Possible fragment spread\n *\n * A fragment spread is only valid if the type condition could ever possibly\n * be true: if there is a non-empty intersection of the possible parent types,\n * and possible types which pass the type condition.\n */\nfunction PossibleFragmentSpreads(context) {\n  return {\n    InlineFragment: function InlineFragment(node) {\n      var fragType = context.getType();\n      var parentType = context.getParentType();\n      if ((0, _definition.isCompositeType)(fragType) && (0, _definition.isCompositeType)(parentType) && !(0, _typeComparators.doTypesOverlap)(context.getSchema(), fragType, parentType)) {\n        context.reportError(new _error.GraphQLError(typeIncompatibleAnonSpreadMessage(parentType, fragType), [node]));\n      }\n    },\n    FragmentSpread: function FragmentSpread(node) {\n      var fragName = node.name.value;\n      var fragType = getFragmentType(context, fragName);\n      var parentType = context.getParentType();\n      if (fragType && parentType && !(0, _typeComparators.doTypesOverlap)(context.getSchema(), fragType, parentType)) {\n        context.reportError(new _error.GraphQLError(typeIncompatibleSpreadMessage(fragName, parentType, fragType), [node]));\n      }\n    }\n  };\n}\n\nfunction getFragmentType(context, name) {\n  var frag = context.getFragment(name);\n  if (frag) {\n    var type = (0, _typeFromAST.typeFromAST)(context.getSchema(), frag.typeCondition);\n    if ((0, _definition.isCompositeType)(type)) {\n      return type;\n    }\n  }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/rules/PossibleFragmentSpreads.js\n// module id = 76\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.cycleErrorMessage = cycleErrorMessage;\nexports.NoFragmentCycles = NoFragmentCycles;\n\nvar _error = require('../../error');\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction cycleErrorMessage(fragName, spreadNames) {\n  var via = spreadNames.length ? ' via ' + spreadNames.join(', ') : '';\n  return 'Cannot spread fragment \"' + fragName + '\" within itself' + via + '.';\n}\n\nfunction NoFragmentCycles(context) {\n  // Tracks already visited fragments to maintain O(N) and to ensure that cycles\n  // are not redundantly reported.\n  var visitedFrags = Object.create(null);\n\n  // Array of AST nodes used to produce meaningful errors\n  var spreadPath = [];\n\n  // Position in the spread path\n  var spreadPathIndexByName = Object.create(null);\n\n  return {\n    OperationDefinition: function OperationDefinition() {\n      return false;\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      if (!visitedFrags[node.name.value]) {\n        detectCycleRecursive(node);\n      }\n      return false;\n    }\n  };\n\n  // This does a straight-forward DFS to find cycles.\n  // It does not terminate when a cycle was found but continues to explore\n  // the graph to find all possible cycles.\n  function detectCycleRecursive(fragment) {\n    var fragmentName = fragment.name.value;\n    visitedFrags[fragmentName] = true;\n\n    var spreadNodes = context.getFragmentSpreads(fragment.selectionSet);\n    if (spreadNodes.length === 0) {\n      return;\n    }\n\n    spreadPathIndexByName[fragmentName] = spreadPath.length;\n\n    for (var i = 0; i < spreadNodes.length; i++) {\n      var spreadNode = spreadNodes[i];\n      var spreadName = spreadNode.name.value;\n      var cycleIndex = spreadPathIndexByName[spreadName];\n\n      if (cycleIndex === undefined) {\n        spreadPath.push(spreadNode);\n        if (!visitedFrags[spreadName]) {\n          var spreadFragment = context.getFragment(spreadName);\n          if (spreadFragment) {\n            detectCycleRecursive(spreadFragment);\n          }\n        }\n        spreadPath.pop();\n      } else {\n        var cyclePath = spreadPath.slice(cycleIndex);\n        context.reportError(new _error.GraphQLError(cycleErrorMessage(spreadName, cyclePath.map(function (s) {\n          return s.name.value;\n        })), cyclePath.concat(spreadNode)));\n      }\n    }\n\n    spreadPathIndexByName[fragmentName] = undefined;\n  }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/rules/NoFragmentCycles.js\n// module id = 77\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.duplicateVariableMessage = duplicateVariableMessage;\nexports.UniqueVariableNames = UniqueVariableNames;\n\nvar _error = require('../../error');\n\nfunction duplicateVariableMessage(variableName) {\n  return 'There can be only one variable named \"' + variableName + '\".';\n}\n\n/**\n * Unique variable names\n *\n * A GraphQL operation is only valid if all its variables are uniquely named.\n */\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction UniqueVariableNames(context) {\n  var knownVariableNames = Object.create(null);\n  return {\n    OperationDefinition: function OperationDefinition() {\n      knownVariableNames = Object.create(null);\n    },\n    VariableDefinition: function VariableDefinition(node) {\n      var variableName = node.variable.name.value;\n      if (knownVariableNames[variableName]) {\n        context.reportError(new _error.GraphQLError(duplicateVariableMessage(variableName), [knownVariableNames[variableName], node.variable.name]));\n      } else {\n        knownVariableNames[variableName] = node.variable.name;\n      }\n    }\n  };\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/rules/UniqueVariableNames.js\n// module id = 78\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.undefinedVarMessage = undefinedVarMessage;\nexports.NoUndefinedVariables = NoUndefinedVariables;\n\nvar _error = require('../../error');\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction undefinedVarMessage(varName, opName) {\n  return opName ? 'Variable \"$' + varName + '\" is not defined by operation \"' + opName + '\".' : 'Variable \"$' + varName + '\" is not defined.';\n}\n\n/**\n * No undefined variables\n *\n * A GraphQL operation is only valid if all variables encountered, both directly\n * and via fragment spreads, are defined by that operation.\n */\nfunction NoUndefinedVariables(context) {\n  var variableNameDefined = Object.create(null);\n\n  return {\n    OperationDefinition: {\n      enter: function enter() {\n        variableNameDefined = Object.create(null);\n      },\n      leave: function leave(operation) {\n        var usages = context.getRecursiveVariableUsages(operation);\n\n        usages.forEach(function (_ref) {\n          var node = _ref.node;\n\n          var varName = node.name.value;\n          if (variableNameDefined[varName] !== true) {\n            context.reportError(new _error.GraphQLError(undefinedVarMessage(varName, operation.name && operation.name.value), [node, operation]));\n          }\n        });\n      }\n    },\n    VariableDefinition: function VariableDefinition(node) {\n      variableNameDefined[node.variable.name.value] = true;\n    }\n  };\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/rules/NoUndefinedVariables.js\n// module id = 79\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.unusedVariableMessage = unusedVariableMessage;\nexports.NoUnusedVariables = NoUnusedVariables;\n\nvar _error = require('../../error');\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction unusedVariableMessage(varName, opName) {\n  return opName ? 'Variable \"$' + varName + '\" is never used in operation \"' + opName + '\".' : 'Variable \"$' + varName + '\" is never used.';\n}\n\n/**\n * No unused variables\n *\n * A GraphQL operation is only valid if all variables defined by an operation\n * are used, either directly or within a spread fragment.\n */\nfunction NoUnusedVariables(context) {\n  var variableDefs = [];\n\n  return {\n    OperationDefinition: {\n      enter: function enter() {\n        variableDefs = [];\n      },\n      leave: function leave(operation) {\n        var variableNameUsed = Object.create(null);\n        var usages = context.getRecursiveVariableUsages(operation);\n        var opName = operation.name ? operation.name.value : null;\n\n        usages.forEach(function (_ref) {\n          var node = _ref.node;\n\n          variableNameUsed[node.name.value] = true;\n        });\n\n        variableDefs.forEach(function (variableDef) {\n          var variableName = variableDef.variable.name.value;\n          if (variableNameUsed[variableName] !== true) {\n            context.reportError(new _error.GraphQLError(unusedVariableMessage(variableName, opName), [variableDef]));\n          }\n        });\n      }\n    },\n    VariableDefinition: function VariableDefinition(def) {\n      variableDefs.push(def);\n    }\n  };\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/rules/NoUnusedVariables.js\n// module id = 80\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.unknownDirectiveMessage = unknownDirectiveMessage;\nexports.misplacedDirectiveMessage = misplacedDirectiveMessage;\nexports.KnownDirectives = KnownDirectives;\n\nvar _error = require('../../error');\n\nvar _find = require('../../jsutils/find');\n\nvar _find2 = _interopRequireDefault(_find);\n\nvar _kinds = require('../../language/kinds');\n\nvar _directiveLocation = require('../../language/directiveLocation');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction unknownDirectiveMessage(directiveName) {\n  return 'Unknown directive \"' + directiveName + '\".';\n} /**\n   * Copyright (c) 2015-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   *  strict\n   */\n\nfunction misplacedDirectiveMessage(directiveName, location) {\n  return 'Directive \"' + directiveName + '\" may not be used on ' + location + '.';\n}\n\n/**\n * Known directives\n *\n * A GraphQL document is only valid if all `@directives` are known by the\n * schema and legally positioned.\n */\nfunction KnownDirectives(context) {\n  return {\n    Directive: function Directive(node, key, parent, path, ancestors) {\n      var directiveDef = (0, _find2.default)(context.getSchema().getDirectives(), function (def) {\n        return def.name === node.name.value;\n      });\n      if (!directiveDef) {\n        context.reportError(new _error.GraphQLError(unknownDirectiveMessage(node.name.value), [node]));\n        return;\n      }\n      var candidateLocation = getDirectiveLocationForASTPath(ancestors);\n      if (candidateLocation && directiveDef.locations.indexOf(candidateLocation) === -1) {\n        context.reportError(new _error.GraphQLError(misplacedDirectiveMessage(node.name.value, candidateLocation), [node]));\n      }\n    }\n  };\n}\n\nfunction getDirectiveLocationForASTPath(ancestors) {\n  var appliedTo = ancestors[ancestors.length - 1];\n  if (!Array.isArray(appliedTo)) {\n    switch (appliedTo.kind) {\n      case _kinds.Kind.OPERATION_DEFINITION:\n        switch (appliedTo.operation) {\n          case 'query':\n            return _directiveLocation.DirectiveLocation.QUERY;\n          case 'mutation':\n            return _directiveLocation.DirectiveLocation.MUTATION;\n          case 'subscription':\n            return _directiveLocation.DirectiveLocation.SUBSCRIPTION;\n        }\n        break;\n      case _kinds.Kind.FIELD:\n        return _directiveLocation.DirectiveLocation.FIELD;\n      case _kinds.Kind.FRAGMENT_SPREAD:\n        return _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD;\n      case _kinds.Kind.INLINE_FRAGMENT:\n        return _directiveLocation.DirectiveLocation.INLINE_FRAGMENT;\n      case _kinds.Kind.FRAGMENT_DEFINITION:\n        return _directiveLocation.DirectiveLocation.FRAGMENT_DEFINITION;\n      case _kinds.Kind.SCHEMA_DEFINITION:\n        return _directiveLocation.DirectiveLocation.SCHEMA;\n      case _kinds.Kind.SCALAR_TYPE_DEFINITION:\n      case _kinds.Kind.SCALAR_TYPE_EXTENSION:\n        return _directiveLocation.DirectiveLocation.SCALAR;\n      case _kinds.Kind.OBJECT_TYPE_DEFINITION:\n      case _kinds.Kind.OBJECT_TYPE_EXTENSION:\n        return _directiveLocation.DirectiveLocation.OBJECT;\n      case _kinds.Kind.FIELD_DEFINITION:\n        return _directiveLocation.DirectiveLocation.FIELD_DEFINITION;\n      case _kinds.Kind.INTERFACE_TYPE_DEFINITION:\n      case _kinds.Kind.INTERFACE_TYPE_EXTENSION:\n        return _directiveLocation.DirectiveLocation.INTERFACE;\n      case _kinds.Kind.UNION_TYPE_DEFINITION:\n      case _kinds.Kind.UNION_TYPE_EXTENSION:\n        return _directiveLocation.DirectiveLocation.UNION;\n      case _kinds.Kind.ENUM_TYPE_DEFINITION:\n      case _kinds.Kind.ENUM_TYPE_EXTENSION:\n        return _directiveLocation.DirectiveLocation.ENUM;\n      case _kinds.Kind.ENUM_VALUE_DEFINITION:\n        return _directiveLocation.DirectiveLocation.ENUM_VALUE;\n      case _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION:\n      case _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION:\n        return _directiveLocation.DirectiveLocation.INPUT_OBJECT;\n      case _kinds.Kind.INPUT_VALUE_DEFINITION:\n        var parentNode = ancestors[ancestors.length - 3];\n        return parentNode.kind === _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION ? _directiveLocation.DirectiveLocation.INPUT_FIELD_DEFINITION : _directiveLocation.DirectiveLocation.ARGUMENT_DEFINITION;\n    }\n  }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/rules/KnownDirectives.js\n// module id = 81\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.duplicateDirectiveMessage = duplicateDirectiveMessage;\nexports.UniqueDirectivesPerLocation = UniqueDirectivesPerLocation;\n\nvar _error = require('../../error');\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction duplicateDirectiveMessage(directiveName) {\n  return 'The directive \"' + directiveName + '\" can only be used once at ' + 'this location.';\n}\n\n/**\n * Unique directive names per location\n *\n * A GraphQL document is only valid if all directives at a given location\n * are uniquely named.\n */\nfunction UniqueDirectivesPerLocation(context) {\n  return {\n    // Many different AST nodes may contain directives. Rather than listing\n    // them all, just listen for entering any node, and check to see if it\n    // defines any directives.\n    enter: function enter(node) {\n      // Flow can't refine that node.directives will only contain directives,\n      var directives = node.directives;\n      if (directives) {\n        var knownDirectives = Object.create(null);\n        directives.forEach(function (directive) {\n          var directiveName = directive.name.value;\n          if (knownDirectives[directiveName]) {\n            context.reportError(new _error.GraphQLError(duplicateDirectiveMessage(directiveName), [knownDirectives[directiveName], directive]));\n          } else {\n            knownDirectives[directiveName] = directive;\n          }\n        });\n      }\n    }\n  };\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/rules/UniqueDirectivesPerLocation.js\n// module id = 82\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.unknownArgMessage = unknownArgMessage;\nexports.unknownDirectiveArgMessage = unknownDirectiveArgMessage;\nexports.KnownArgumentNames = KnownArgumentNames;\n\nvar _error = require('../../error');\n\nvar _suggestionList = require('../../jsutils/suggestionList');\n\nvar _suggestionList2 = _interopRequireDefault(_suggestionList);\n\nvar _quotedOrList = require('../../jsutils/quotedOrList');\n\nvar _quotedOrList2 = _interopRequireDefault(_quotedOrList);\n\nvar _kinds = require('../../language/kinds');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction unknownArgMessage(argName, fieldName, typeName, suggestedArgs) {\n  var message = 'Unknown argument \"' + argName + '\" on field \"' + fieldName + '\" of ' + ('type \"' + typeName + '\".');\n  if (suggestedArgs.length) {\n    message += ' Did you mean ' + (0, _quotedOrList2.default)(suggestedArgs) + '?';\n  }\n  return message;\n} /**\n   * Copyright (c) 2015-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   *  strict\n   */\n\nfunction unknownDirectiveArgMessage(argName, directiveName, suggestedArgs) {\n  var message = 'Unknown argument \"' + argName + '\" on directive \"@' + directiveName + '\".';\n  if (suggestedArgs.length) {\n    message += ' Did you mean ' + (0, _quotedOrList2.default)(suggestedArgs) + '?';\n  }\n  return message;\n}\n\n/**\n * Known argument names\n *\n * A GraphQL field is only valid if all supplied arguments are defined by\n * that field.\n */\nfunction KnownArgumentNames(context) {\n  return {\n    Argument: function Argument(node, key, parent, path, ancestors) {\n      var argDef = context.getArgument();\n      if (!argDef) {\n        var argumentOf = ancestors[ancestors.length - 1];\n        if (argumentOf.kind === _kinds.Kind.FIELD) {\n          var fieldDef = context.getFieldDef();\n          var parentType = context.getParentType();\n          if (fieldDef && parentType) {\n            context.reportError(new _error.GraphQLError(unknownArgMessage(node.name.value, fieldDef.name, parentType.name, (0, _suggestionList2.default)(node.name.value, fieldDef.args.map(function (arg) {\n              return arg.name;\n            }))), [node]));\n          }\n        } else if (argumentOf.kind === _kinds.Kind.DIRECTIVE) {\n          var directive = context.getDirective();\n          if (directive) {\n            context.reportError(new _error.GraphQLError(unknownDirectiveArgMessage(node.name.value, directive.name, (0, _suggestionList2.default)(node.name.value, directive.args.map(function (arg) {\n              return arg.name;\n            }))), [node]));\n          }\n        }\n      }\n    }\n  };\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/rules/KnownArgumentNames.js\n// module id = 83\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.duplicateArgMessage = duplicateArgMessage;\nexports.UniqueArgumentNames = UniqueArgumentNames;\n\nvar _error = require('../../error');\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction duplicateArgMessage(argName) {\n  return 'There can be only one argument named \"' + argName + '\".';\n}\n\n/**\n * Unique argument names\n *\n * A GraphQL field or directive is only valid if all supplied arguments are\n * uniquely named.\n */\nfunction UniqueArgumentNames(context) {\n  var knownArgNames = Object.create(null);\n  return {\n    Field: function Field() {\n      knownArgNames = Object.create(null);\n    },\n    Directive: function Directive() {\n      knownArgNames = Object.create(null);\n    },\n    Argument: function Argument(node) {\n      var argName = node.name.value;\n      if (knownArgNames[argName]) {\n        context.reportError(new _error.GraphQLError(duplicateArgMessage(argName), [knownArgNames[argName], node.name]));\n      } else {\n        knownArgNames[argName] = node.name;\n      }\n      return false;\n    }\n  };\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/rules/UniqueArgumentNames.js\n// module id = 84\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.missingFieldArgMessage = missingFieldArgMessage;\nexports.missingDirectiveArgMessage = missingDirectiveArgMessage;\nexports.ProvidedNonNullArguments = ProvidedNonNullArguments;\n\nvar _error = require('../../error');\n\nvar _keyMap = require('../../jsutils/keyMap');\n\nvar _keyMap2 = _interopRequireDefault(_keyMap);\n\nvar _definition = require('../../type/definition');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction missingFieldArgMessage(fieldName, argName, type) {\n  return 'Field \"' + fieldName + '\" argument \"' + argName + '\" of type ' + ('\"' + String(type) + '\" is required but not provided.');\n}\n\nfunction missingDirectiveArgMessage(directiveName, argName, type) {\n  return 'Directive \"@' + directiveName + '\" argument \"' + argName + '\" of type ' + ('\"' + String(type) + '\" is required but not provided.');\n}\n\n/**\n * Provided required arguments\n *\n * A field or directive is only valid if all required (non-null) field arguments\n * have been provided.\n */\nfunction ProvidedNonNullArguments(context) {\n  return {\n    Field: {\n      // Validate on leave to allow for deeper errors to appear first.\n      leave: function leave(node) {\n        var fieldDef = context.getFieldDef();\n        if (!fieldDef) {\n          return false;\n        }\n        var argNodes = node.arguments || [];\n\n        var argNodeMap = (0, _keyMap2.default)(argNodes, function (arg) {\n          return arg.name.value;\n        });\n        fieldDef.args.forEach(function (argDef) {\n          var argNode = argNodeMap[argDef.name];\n          if (!argNode && (0, _definition.isNonNullType)(argDef.type)) {\n            context.reportError(new _error.GraphQLError(missingFieldArgMessage(node.name.value, argDef.name, argDef.type), [node]));\n          }\n        });\n      }\n    },\n\n    Directive: {\n      // Validate on leave to allow for deeper errors to appear first.\n      leave: function leave(node) {\n        var directiveDef = context.getDirective();\n        if (!directiveDef) {\n          return false;\n        }\n        var argNodes = node.arguments || [];\n\n        var argNodeMap = (0, _keyMap2.default)(argNodes, function (arg) {\n          return arg.name.value;\n        });\n        directiveDef.args.forEach(function (argDef) {\n          var argNode = argNodeMap[argDef.name];\n          if (!argNode && (0, _definition.isNonNullType)(argDef.type)) {\n            context.reportError(new _error.GraphQLError(missingDirectiveArgMessage(node.name.value, argDef.name, argDef.type), [node]));\n          }\n        });\n      }\n    }\n  };\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/rules/ProvidedNonNullArguments.js\n// module id = 85\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defaultForRequiredVarMessage = defaultForRequiredVarMessage;\nexports.VariablesDefaultValueAllowed = VariablesDefaultValueAllowed;\n\nvar _error = require('../../error');\n\nvar _definition = require('../../type/definition');\n\nfunction defaultForRequiredVarMessage(varName, type, guessType) {\n  return 'Variable \"$' + varName + '\" of type \"' + String(type) + '\" is required and ' + 'will not use the default value. ' + ('Perhaps you meant to use type \"' + String(guessType) + '\".');\n}\n\n/**\n * Variable's default value is allowed\n *\n * A GraphQL document is only valid if all variable default values are allowed\n * due to a variable not being required.\n */\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction VariablesDefaultValueAllowed(context) {\n  return {\n    VariableDefinition: function VariableDefinition(node) {\n      var name = node.variable.name.value;\n      var defaultValue = node.defaultValue;\n      var type = context.getInputType();\n      if ((0, _definition.isNonNullType)(type) && defaultValue) {\n        context.reportError(new _error.GraphQLError(defaultForRequiredVarMessage(name, type, type.ofType), [defaultValue]));\n      }\n      return false; // Do not traverse further.\n    },\n\n    SelectionSet: function SelectionSet() {\n      return false;\n    },\n    FragmentDefinition: function FragmentDefinition() {\n      return false;\n    }\n  };\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/rules/VariablesDefaultValueAllowed.js\n// module id = 86\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.badVarPosMessage = badVarPosMessage;\nexports.VariablesInAllowedPosition = VariablesInAllowedPosition;\n\nvar _error = require('../../error');\n\nvar _definition = require('../../type/definition');\n\nvar _typeComparators = require('../../utilities/typeComparators');\n\nvar _typeFromAST = require('../../utilities/typeFromAST');\n\nfunction badVarPosMessage(varName, varType, expectedType) {\n  return 'Variable \"$' + varName + '\" of type \"' + String(varType) + '\" used in ' + ('position expecting type \"' + String(expectedType) + '\".');\n}\n\n/**\n * Variables passed to field arguments conform to type\n */\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction VariablesInAllowedPosition(context) {\n  var varDefMap = Object.create(null);\n\n  return {\n    OperationDefinition: {\n      enter: function enter() {\n        varDefMap = Object.create(null);\n      },\n      leave: function leave(operation) {\n        var usages = context.getRecursiveVariableUsages(operation);\n\n        usages.forEach(function (_ref) {\n          var node = _ref.node,\n              type = _ref.type;\n\n          var varName = node.name.value;\n          var varDef = varDefMap[varName];\n          if (varDef && type) {\n            // A var type is allowed if it is the same or more strict (e.g. is\n            // a subtype of) than the expected type. It can be more strict if\n            // the variable type is non-null when the expected type is nullable.\n            // If both are list types, the variable item type can be more strict\n            // than the expected item type (contravariant).\n            var schema = context.getSchema();\n            var varType = (0, _typeFromAST.typeFromAST)(schema, varDef.type);\n            if (varType && !(0, _typeComparators.isTypeSubTypeOf)(schema, effectiveType(varType, varDef), type)) {\n              context.reportError(new _error.GraphQLError(badVarPosMessage(varName, varType, type), [varDef, node]));\n            }\n          }\n        });\n      }\n    },\n    VariableDefinition: function VariableDefinition(node) {\n      varDefMap[node.variable.name.value] = node;\n    }\n  };\n}\n\n// If a variable definition has a default value, it's effectively non-null.\nfunction effectiveType(varType, varDef) {\n  return !varDef.defaultValue || (0, _definition.isNonNullType)(varType) ? varType : (0, _definition.GraphQLNonNull)(varType);\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/rules/VariablesInAllowedPosition.js\n// module id = 87\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fieldsConflictMessage = fieldsConflictMessage;\nexports.OverlappingFieldsCanBeMerged = OverlappingFieldsCanBeMerged;\n\nvar _error = require('../../error');\n\nvar _find = require('../../jsutils/find');\n\nvar _find2 = _interopRequireDefault(_find);\n\nvar _kinds = require('../../language/kinds');\n\nvar _printer = require('../../language/printer');\n\nvar _definition = require('../../type/definition');\n\nvar _typeFromAST = require('../../utilities/typeFromAST');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /**\n                                                                                                                                                           * Copyright (c) 2015-present, Facebook, Inc.\n                                                                                                                                                           *\n                                                                                                                                                           * This source code is licensed under the MIT license found in the\n                                                                                                                                                           * LICENSE file in the root directory of this source tree.\n                                                                                                                                                           *\n                                                                                                                                                           *  strict\n                                                                                                                                                           */\n\nfunction fieldsConflictMessage(responseName, reason) {\n  return 'Fields \"' + responseName + '\" conflict because ' + reasonMessage(reason) + '. Use different aliases on the fields to fetch both if this was ' + 'intentional.';\n}\n\nfunction reasonMessage(reason) {\n  if (Array.isArray(reason)) {\n    return reason.map(function (_ref) {\n      var responseName = _ref[0],\n          subreason = _ref[1];\n      return 'subfields \"' + responseName + '\" conflict because ' + reasonMessage(subreason);\n    }).join(' and ');\n  }\n  return reason;\n}\n\n/**\n * Overlapping fields can be merged\n *\n * A selection set is only valid if all fields (including spreading any\n * fragments) either correspond to distinct response names or can be merged\n * without ambiguity.\n */\nfunction OverlappingFieldsCanBeMerged(context) {\n  // A memoization for when two fragments are compared \"between\" each other for\n  // conflicts. Two fragments may be compared many times, so memoizing this can\n  // dramatically improve the performance of this validator.\n  var comparedFragmentPairs = new PairSet();\n\n  // A cache for the \"field map\" and list of fragment names found in any given\n  // selection set. Selection sets may be asked for this information multiple\n  // times, so this improves the performance of this validator.\n  var cachedFieldsAndFragmentNames = new Map();\n\n  return {\n    SelectionSet: function SelectionSet(selectionSet) {\n      var conflicts = findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, context.getParentType(), selectionSet);\n      conflicts.forEach(function (_ref2) {\n        var _ref2$ = _ref2[0],\n            responseName = _ref2$[0],\n            reason = _ref2$[1],\n            fields1 = _ref2[1],\n            fields2 = _ref2[2];\n        return context.reportError(new _error.GraphQLError(fieldsConflictMessage(responseName, reason), fields1.concat(fields2)));\n      });\n    }\n  };\n}\n// Field name and reason.\n\n// Reason is a string, or a nested list of conflicts.\n\n// Tuple defining a field node in a context.\n\n// Map of array of those.\n\n\n/**\n * Algorithm:\n *\n * Conflicts occur when two fields exist in a query which will produce the same\n * response name, but represent differing values, thus creating a conflict.\n * The algorithm below finds all conflicts via making a series of comparisons\n * between fields. In order to compare as few fields as possible, this makes\n * a series of comparisons \"within\" sets of fields and \"between\" sets of fields.\n *\n * Given any selection set, a collection produces both a set of fields by\n * also including all inline fragments, as well as a list of fragments\n * referenced by fragment spreads.\n *\n * A) Each selection set represented in the document first compares \"within\" its\n * collected set of fields, finding any conflicts between every pair of\n * overlapping fields.\n * Note: This is the *only time* that a the fields \"within\" a set are compared\n * to each other. After this only fields \"between\" sets are compared.\n *\n * B) Also, if any fragment is referenced in a selection set, then a\n * comparison is made \"between\" the original set of fields and the\n * referenced fragment.\n *\n * C) Also, if multiple fragments are referenced, then comparisons\n * are made \"between\" each referenced fragment.\n *\n * D) When comparing \"between\" a set of fields and a referenced fragment, first\n * a comparison is made between each field in the original set of fields and\n * each field in the the referenced set of fields.\n *\n * E) Also, if any fragment is referenced in the referenced selection set,\n * then a comparison is made \"between\" the original set of fields and the\n * referenced fragment (recursively referring to step D).\n *\n * F) When comparing \"between\" two fragments, first a comparison is made between\n * each field in the first referenced set of fields and each field in the the\n * second referenced set of fields.\n *\n * G) Also, any fragments referenced by the first must be compared to the\n * second, and any fragments referenced by the second must be compared to the\n * first (recursively referring to step F).\n *\n * H) When comparing two fields, if both have selection sets, then a comparison\n * is made \"between\" both selection sets, first comparing the set of fields in\n * the first selection set with the set of fields in the second.\n *\n * I) Also, if any fragment is referenced in either selection set, then a\n * comparison is made \"between\" the other set of fields and the\n * referenced fragment.\n *\n * J) Also, if two fragments are referenced in both selection sets, then a\n * comparison is made \"between\" the two fragments.\n *\n */\n\n// Find all conflicts found \"within\" a selection set, including those found\n// via spreading in fragments. Called when visiting each SelectionSet in the\n// GraphQL Document.\nfunction findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentType, selectionSet) {\n  var conflicts = [];\n\n  var _getFieldsAndFragment = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet),\n      fieldMap = _getFieldsAndFragment[0],\n      fragmentNames = _getFieldsAndFragment[1];\n\n  // (A) Find find all conflicts \"within\" the fields of this selection set.\n  // Note: this is the *only place* `collectConflictsWithin` is called.\n\n\n  collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, fieldMap);\n\n  if (fragmentNames.length !== 0) {\n    // (B) Then collect conflicts between these fields and those represented by\n    // each spread fragment name found.\n    var comparedFragments = Object.create(null);\n    for (var i = 0; i < fragmentNames.length; i++) {\n      collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, comparedFragmentPairs, false, fieldMap, fragmentNames[i]);\n      // (C) Then compare this fragment with all other fragments found in this\n      // selection set to collect conflicts between fragments spread together.\n      // This compares each item in the list of fragment names to every other\n      // item in that same list (except for itself).\n      for (var j = i + 1; j < fragmentNames.length; j++) {\n        collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, fragmentNames[i], fragmentNames[j]);\n      }\n    }\n  }\n  return conflicts;\n}\n\n// Collect all conflicts found between a set of fields and a fragment reference\n// including via spreading in any nested fragments.\nfunction collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fragmentName) {\n  // Memoize so a fragment is not compared for conflicts more than once.\n  if (comparedFragments[fragmentName]) {\n    return;\n  }\n  comparedFragments[fragmentName] = true;\n\n  var fragment = context.getFragment(fragmentName);\n  if (!fragment) {\n    return;\n  }\n\n  var _getReferencedFieldsA = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment),\n      fieldMap2 = _getReferencedFieldsA[0],\n      fragmentNames2 = _getReferencedFieldsA[1];\n\n  // Do not compare a fragment's fieldMap to itself.\n\n\n  if (fieldMap === fieldMap2) {\n    return;\n  }\n\n  // (D) First collect any conflicts between the provided collection of fields\n  // and the collection of fields represented by the given fragment.\n  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fieldMap2);\n\n  // (E) Then collect any conflicts between the provided collection of fields\n  // and any fragment names found in the given fragment.\n  for (var i = 0; i < fragmentNames2.length; i++) {\n    collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fragmentNames2[i]);\n  }\n}\n\n// Collect all conflicts found between two fragments, including via spreading in\n// any nested fragments.\nfunction collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, fragmentName2) {\n  // No need to compare a fragment to itself.\n  if (fragmentName1 === fragmentName2) {\n    return;\n  }\n\n  // Memoize so two fragments are not compared for conflicts more than once.\n  if (comparedFragmentPairs.has(fragmentName1, fragmentName2, areMutuallyExclusive)) {\n    return;\n  }\n  comparedFragmentPairs.add(fragmentName1, fragmentName2, areMutuallyExclusive);\n\n  var fragment1 = context.getFragment(fragmentName1);\n  var fragment2 = context.getFragment(fragmentName2);\n  if (!fragment1 || !fragment2) {\n    return;\n  }\n\n  var _getReferencedFieldsA2 = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment1),\n      fieldMap1 = _getReferencedFieldsA2[0],\n      fragmentNames1 = _getReferencedFieldsA2[1];\n\n  var _getReferencedFieldsA3 = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment2),\n      fieldMap2 = _getReferencedFieldsA3[0],\n      fragmentNames2 = _getReferencedFieldsA3[1];\n\n  // (F) First, collect all conflicts between these two collections of fields\n  // (not including any nested fragments).\n\n\n  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fieldMap2);\n\n  // (G) Then collect conflicts between the first fragment and any nested\n  // fragments spread in the second fragment.\n  for (var j = 0; j < fragmentNames2.length; j++) {\n    collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, fragmentNames2[j]);\n  }\n\n  // (G) Then collect conflicts between the second fragment and any nested\n  // fragments spread in the first fragment.\n  for (var i = 0; i < fragmentNames1.length; i++) {\n    collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentNames1[i], fragmentName2);\n  }\n}\n\n// Find all conflicts found between two selection sets, including those found\n// via spreading in fragments. Called when determining if conflicts exist\n// between the sub-fields of two overlapping fields.\nfunction findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, parentType1, selectionSet1, parentType2, selectionSet2) {\n  var conflicts = [];\n\n  var _getFieldsAndFragment2 = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType1, selectionSet1),\n      fieldMap1 = _getFieldsAndFragment2[0],\n      fragmentNames1 = _getFieldsAndFragment2[1];\n\n  var _getFieldsAndFragment3 = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType2, selectionSet2),\n      fieldMap2 = _getFieldsAndFragment3[0],\n      fragmentNames2 = _getFieldsAndFragment3[1];\n\n  // (H) First, collect all conflicts between these two collections of field.\n\n\n  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fieldMap2);\n\n  // (I) Then collect conflicts between the first collection of fields and\n  // those referenced by each fragment name associated with the second.\n  if (fragmentNames2.length !== 0) {\n    var comparedFragments = Object.create(null);\n    for (var j = 0; j < fragmentNames2.length; j++) {\n      collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fragmentNames2[j]);\n    }\n  }\n\n  // (I) Then collect conflicts between the second collection of fields and\n  // those referenced by each fragment name associated with the first.\n  if (fragmentNames1.length !== 0) {\n    var _comparedFragments = Object.create(null);\n    for (var i = 0; i < fragmentNames1.length; i++) {\n      collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, _comparedFragments, comparedFragmentPairs, areMutuallyExclusive, fieldMap2, fragmentNames1[i]);\n    }\n  }\n\n  // (J) Also collect conflicts between any fragment names by the first and\n  // fragment names by the second. This compares each item in the first set of\n  // names to each item in the second set of names.\n  for (var _i = 0; _i < fragmentNames1.length; _i++) {\n    for (var _j = 0; _j < fragmentNames2.length; _j++) {\n      collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentNames1[_i], fragmentNames2[_j]);\n    }\n  }\n  return conflicts;\n}\n\n// Collect all Conflicts \"within\" one collection of fields.\nfunction collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, fieldMap) {\n  // A field map is a keyed collection, where each key represents a response\n  // name and the value at that key is a list of all fields which provide that\n  // response name. For every response name, if there are multiple fields, they\n  // must be compared to find a potential conflict.\n  Object.keys(fieldMap).forEach(function (responseName) {\n    var fields = fieldMap[responseName];\n    // This compares every field in the list to every other field in this list\n    // (except to itself). If the list only has one item, nothing needs to\n    // be compared.\n    if (fields.length > 1) {\n      for (var i = 0; i < fields.length; i++) {\n        for (var j = i + 1; j < fields.length; j++) {\n          var conflict = findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, // within one collection is never mutually exclusive\n          responseName, fields[i], fields[j]);\n          if (conflict) {\n            conflicts.push(conflict);\n          }\n        }\n      }\n    }\n  });\n}\n\n// Collect all Conflicts between two collections of fields. This is similar to,\n// but different from the `collectConflictsWithin` function above. This check\n// assumes that `collectConflictsWithin` has already been called on each\n// provided collection of fields. This is true because this validator traverses\n// each individual selection set.\nfunction collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, fieldMap1, fieldMap2) {\n  // A field map is a keyed collection, where each key represents a response\n  // name and the value at that key is a list of all fields which provide that\n  // response name. For any response name which appears in both provided field\n  // maps, each field from the first field map must be compared to every field\n  // in the second field map to find potential conflicts.\n  Object.keys(fieldMap1).forEach(function (responseName) {\n    var fields2 = fieldMap2[responseName];\n    if (fields2) {\n      var fields1 = fieldMap1[responseName];\n      for (var i = 0; i < fields1.length; i++) {\n        for (var j = 0; j < fields2.length; j++) {\n          var conflict = findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, responseName, fields1[i], fields2[j]);\n          if (conflict) {\n            conflicts.push(conflict);\n          }\n        }\n      }\n    }\n  });\n}\n\n// Determines if there is a conflict between two particular fields, including\n// comparing their sub-fields.\nfunction findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, responseName, field1, field2) {\n  var parentType1 = field1[0],\n      node1 = field1[1],\n      def1 = field1[2];\n  var parentType2 = field2[0],\n      node2 = field2[1],\n      def2 = field2[2];\n\n  // If it is known that two fields could not possibly apply at the same\n  // time, due to the parent types, then it is safe to permit them to diverge\n  // in aliased field or arguments used as they will not present any ambiguity\n  // by differing.\n  // It is known that two parent types could never overlap if they are\n  // different Object types. Interface or Union types might overlap - if not\n  // in the current state of the schema, then perhaps in some future version,\n  // thus may not safely diverge.\n\n  var areMutuallyExclusive = parentFieldsAreMutuallyExclusive || parentType1 !== parentType2 && (0, _definition.isObjectType)(parentType1) && (0, _definition.isObjectType)(parentType2);\n\n  // The return type for each field.\n  var type1 = def1 && def1.type;\n  var type2 = def2 && def2.type;\n\n  if (!areMutuallyExclusive) {\n    // Two aliases must refer to the same field.\n    var name1 = node1.name.value;\n    var name2 = node2.name.value;\n    if (name1 !== name2) {\n      return [[responseName, name1 + ' and ' + name2 + ' are different fields'], [node1], [node2]];\n    }\n\n    // Two field calls must have the same arguments.\n    if (!sameArguments(node1.arguments || [], node2.arguments || [])) {\n      return [[responseName, 'they have differing arguments'], [node1], [node2]];\n    }\n  }\n\n  if (type1 && type2 && doTypesConflict(type1, type2)) {\n    return [[responseName, 'they return conflicting types ' + String(type1) + ' and ' + String(type2)], [node1], [node2]];\n  }\n\n  // Collect and compare sub-fields. Use the same \"visited fragment names\" list\n  // for both collections so fields in a fragment reference are never\n  // compared to themselves.\n  var selectionSet1 = node1.selectionSet;\n  var selectionSet2 = node2.selectionSet;\n  if (selectionSet1 && selectionSet2) {\n    var conflicts = findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, (0, _definition.getNamedType)(type1), selectionSet1, (0, _definition.getNamedType)(type2), selectionSet2);\n    return subfieldConflicts(conflicts, responseName, node1, node2);\n  }\n}\n\nfunction sameArguments(arguments1, arguments2) {\n  if (arguments1.length !== arguments2.length) {\n    return false;\n  }\n  return arguments1.every(function (argument1) {\n    var argument2 = (0, _find2.default)(arguments2, function (argument) {\n      return argument.name.value === argument1.name.value;\n    });\n    if (!argument2) {\n      return false;\n    }\n    return sameValue(argument1.value, argument2.value);\n  });\n}\n\nfunction sameValue(value1, value2) {\n  return !value1 && !value2 || (0, _printer.print)(value1) === (0, _printer.print)(value2);\n}\n\n// Two types conflict if both types could not apply to a value simultaneously.\n// Composite types are ignored as their individual field types will be compared\n// later recursively. However List and Non-Null types must match.\nfunction doTypesConflict(type1, type2) {\n  if ((0, _definition.isListType)(type1)) {\n    return (0, _definition.isListType)(type2) ? doTypesConflict(type1.ofType, type2.ofType) : true;\n  }\n  if ((0, _definition.isListType)(type2)) {\n    return true;\n  }\n  if ((0, _definition.isNonNullType)(type1)) {\n    return (0, _definition.isNonNullType)(type2) ? doTypesConflict(type1.ofType, type2.ofType) : true;\n  }\n  if ((0, _definition.isNonNullType)(type2)) {\n    return true;\n  }\n  if ((0, _definition.isLeafType)(type1) || (0, _definition.isLeafType)(type2)) {\n    return type1 !== type2;\n  }\n  return false;\n}\n\n// Given a selection set, return the collection of fields (a mapping of response\n// name to field nodes and definitions) as well as a list of fragment names\n// referenced via fragment spreads.\nfunction getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet) {\n  var cached = cachedFieldsAndFragmentNames.get(selectionSet);\n  if (!cached) {\n    var nodeAndDefs = Object.create(null);\n    var fragmentNames = Object.create(null);\n    _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames);\n    cached = [nodeAndDefs, Object.keys(fragmentNames)];\n    cachedFieldsAndFragmentNames.set(selectionSet, cached);\n  }\n  return cached;\n}\n\n// Given a reference to a fragment, return the represented collection of fields\n// as well as a list of nested fragment names referenced via fragment spreads.\nfunction getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment) {\n  // Short-circuit building a type from the node if possible.\n  var cached = cachedFieldsAndFragmentNames.get(fragment.selectionSet);\n  if (cached) {\n    return cached;\n  }\n\n  var fragmentType = (0, _typeFromAST.typeFromAST)(context.getSchema(), fragment.typeCondition);\n  return getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragmentType, fragment.selectionSet);\n}\n\nfunction _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames) {\n  for (var i = 0; i < selectionSet.selections.length; i++) {\n    var selection = selectionSet.selections[i];\n    switch (selection.kind) {\n      case _kinds.Kind.FIELD:\n        var fieldName = selection.name.value;\n        var fieldDef = void 0;\n        if ((0, _definition.isObjectType)(parentType) || (0, _definition.isInterfaceType)(parentType)) {\n          fieldDef = parentType.getFields()[fieldName];\n        }\n        var responseName = selection.alias ? selection.alias.value : fieldName;\n        if (!nodeAndDefs[responseName]) {\n          nodeAndDefs[responseName] = [];\n        }\n        nodeAndDefs[responseName].push([parentType, selection, fieldDef]);\n        break;\n      case _kinds.Kind.FRAGMENT_SPREAD:\n        fragmentNames[selection.name.value] = true;\n        break;\n      case _kinds.Kind.INLINE_FRAGMENT:\n        var typeCondition = selection.typeCondition;\n        var inlineFragmentType = typeCondition ? (0, _typeFromAST.typeFromAST)(context.getSchema(), typeCondition) : parentType;\n        _collectFieldsAndFragmentNames(context, inlineFragmentType, selection.selectionSet, nodeAndDefs, fragmentNames);\n        break;\n    }\n  }\n}\n\n// Given a series of Conflicts which occurred between two sub-fields, generate\n// a single Conflict.\nfunction subfieldConflicts(conflicts, responseName, node1, node2) {\n  if (conflicts.length > 0) {\n    return [[responseName, conflicts.map(function (_ref3) {\n      var reason = _ref3[0];\n      return reason;\n    })], conflicts.reduce(function (allFields, _ref4) {\n      var fields1 = _ref4[1];\n      return allFields.concat(fields1);\n    }, [node1]), conflicts.reduce(function (allFields, _ref5) {\n      var fields2 = _ref5[2];\n      return allFields.concat(fields2);\n    }, [node2])];\n  }\n}\n\n/**\n * A way to keep track of pairs of things when the ordering of the pair does\n * not matter. We do this by maintaining a sort of double adjacency sets.\n */\n\nvar PairSet = function () {\n  function PairSet() {\n    _classCallCheck(this, PairSet);\n\n    this._data = Object.create(null);\n  }\n\n  PairSet.prototype.has = function has(a, b, areMutuallyExclusive) {\n    var first = this._data[a];\n    var result = first && first[b];\n    if (result === undefined) {\n      return false;\n    }\n    // areMutuallyExclusive being false is a superset of being true,\n    // hence if we want to know if this PairSet \"has\" these two with no\n    // exclusivity, we have to ensure it was added as such.\n    if (areMutuallyExclusive === false) {\n      return result === false;\n    }\n    return true;\n  };\n\n  PairSet.prototype.add = function add(a, b, areMutuallyExclusive) {\n    _pairSetAdd(this._data, a, b, areMutuallyExclusive);\n    _pairSetAdd(this._data, b, a, areMutuallyExclusive);\n  };\n\n  return PairSet;\n}();\n\nfunction _pairSetAdd(data, a, b, areMutuallyExclusive) {\n  var map = data[a];\n  if (!map) {\n    map = Object.create(null);\n    data[a] = map;\n  }\n  map[b] = areMutuallyExclusive;\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js\n// module id = 88\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.duplicateInputFieldMessage = duplicateInputFieldMessage;\nexports.UniqueInputFieldNames = UniqueInputFieldNames;\n\nvar _error = require('../../error');\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction duplicateInputFieldMessage(fieldName) {\n  return 'There can be only one input field named \"' + fieldName + '\".';\n}\n\n/**\n * Unique input field names\n *\n * A GraphQL input object value is only valid if all supplied fields are\n * uniquely named.\n */\nfunction UniqueInputFieldNames(context) {\n  var knownNameStack = [];\n  var knownNames = Object.create(null);\n\n  return {\n    ObjectValue: {\n      enter: function enter() {\n        knownNameStack.push(knownNames);\n        knownNames = Object.create(null);\n      },\n      leave: function leave() {\n        knownNames = knownNameStack.pop();\n      }\n    },\n    ObjectField: function ObjectField(node) {\n      var fieldName = node.name.value;\n      if (knownNames[fieldName]) {\n        context.reportError(new _error.GraphQLError(duplicateInputFieldMessage(fieldName), [knownNames[fieldName], node.name]));\n      } else {\n        knownNames[fieldName] = node.name;\n      }\n      return false;\n    }\n  };\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/rules/UniqueInputFieldNames.js\n// module id = 89\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isPromise;\n\n\n// eslint-disable-next-line no-redeclare\nfunction isPromise(value) {\n  return Boolean(value && typeof value.then === 'function');\n} /**\n   * Copyright (c) 2015-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   *  strict\n   */\n\n/**\n * Returns true if the value acts like a Promise, i.e. has a \"then\" function,\n * otherwise returns false.\n */\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/jsutils/isPromise.js\n// module id = 90\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getIntrospectionQuery = getIntrospectionQuery;\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction getIntrospectionQuery(options) {\n  var descriptions = !(options && options.descriptions === false);\n  return '\\n    query IntrospectionQuery {\\n      __schema {\\n        queryType { name }\\n        mutationType { name }\\n        subscriptionType { name }\\n        types {\\n          ...FullType\\n        }\\n        directives {\\n          name\\n          ' + (descriptions ? 'description' : '') + '\\n          locations\\n          args {\\n            ...InputValue\\n          }\\n        }\\n      }\\n    }\\n\\n    fragment FullType on __Type {\\n      kind\\n      name\\n      ' + (descriptions ? 'description' : '') + '\\n      fields(includeDeprecated: true) {\\n        name\\n        ' + (descriptions ? 'description' : '') + '\\n        args {\\n          ...InputValue\\n        }\\n        type {\\n          ...TypeRef\\n        }\\n        isDeprecated\\n        deprecationReason\\n      }\\n      inputFields {\\n        ...InputValue\\n      }\\n      interfaces {\\n        ...TypeRef\\n      }\\n      enumValues(includeDeprecated: true) {\\n        name\\n        ' + (descriptions ? 'description' : '') + '\\n        isDeprecated\\n        deprecationReason\\n      }\\n      possibleTypes {\\n        ...TypeRef\\n      }\\n    }\\n\\n    fragment InputValue on __InputValue {\\n      name\\n      ' + (descriptions ? 'description' : '') + '\\n      type { ...TypeRef }\\n      defaultValue\\n    }\\n\\n    fragment TypeRef on __Type {\\n      kind\\n      name\\n      ofType {\\n        kind\\n        name\\n        ofType {\\n          kind\\n          name\\n          ofType {\\n            kind\\n            name\\n            ofType {\\n              kind\\n              name\\n              ofType {\\n                kind\\n                name\\n                ofType {\\n                  kind\\n                  name\\n                  ofType {\\n                    kind\\n                    name\\n                  }\\n                }\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  ';\n}\n\nvar introspectionQuery = exports.introspectionQuery = getIntrospectionQuery();\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/utilities/introspectionQuery.js\n// module id = 91\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ASTDefinitionBuilder = undefined;\nexports.buildASTSchema = buildASTSchema;\nexports.getDescription = getDescription;\nexports.buildSchema = buildSchema;\n\nvar _keyMap = require('../jsutils/keyMap');\n\nvar _keyMap2 = _interopRequireDefault(_keyMap);\n\nvar _keyValMap = require('../jsutils/keyValMap');\n\nvar _keyValMap2 = _interopRequireDefault(_keyValMap);\n\nvar _valueFromAST = require('./valueFromAST');\n\nvar _blockStringValue = require('../language/blockStringValue');\n\nvar _blockStringValue2 = _interopRequireDefault(_blockStringValue);\n\nvar _lexer = require('../language/lexer');\n\nvar _parser = require('../language/parser');\n\nvar _values = require('../execution/values');\n\nvar _kinds = require('../language/kinds');\n\nvar _definition = require('../type/definition');\n\nvar _directives = require('../type/directives');\n\nvar _introspection = require('../type/introspection');\n\nvar _scalars = require('../type/scalars');\n\nvar _schema = require('../type/schema');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /**\n                                                                                                                                                           * Copyright (c) 2015-present, Facebook, Inc.\n                                                                                                                                                           *\n                                                                                                                                                           * This source code is licensed under the MIT license found in the\n                                                                                                                                                           * LICENSE file in the root directory of this source tree.\n                                                                                                                                                           *\n                                                                                                                                                           *  strict\n                                                                                                                                                           */\n\nfunction buildWrappedType(innerType, inputTypeNode) {\n  if (inputTypeNode.kind === _kinds.Kind.LIST_TYPE) {\n    return (0, _definition.GraphQLList)(buildWrappedType(innerType, inputTypeNode.type));\n  }\n  if (inputTypeNode.kind === _kinds.Kind.NON_NULL_TYPE) {\n    var wrappedType = buildWrappedType(innerType, inputTypeNode.type);\n    return (0, _definition.GraphQLNonNull)((0, _definition.assertNullableType)(wrappedType));\n  }\n  return innerType;\n}\n\nfunction getNamedTypeNode(typeNode) {\n  var namedType = typeNode;\n  while (namedType.kind === _kinds.Kind.LIST_TYPE || namedType.kind === _kinds.Kind.NON_NULL_TYPE) {\n    namedType = namedType.type;\n  }\n  return namedType;\n}\n\n/**\n * This takes the ast of a schema document produced by the parse function in\n * src/language/parser.js.\n *\n * If no schema definition is provided, then it will look for types named Query\n * and Mutation.\n *\n * Given that AST it constructs a GraphQLSchema. The resulting schema\n * has no resolve methods, so execution will use default resolvers.\n *\n * Accepts options as a second argument:\n *\n *    - commentDescriptions:\n *        Provide true to use preceding comments as the description.\n *\n */\nfunction buildASTSchema(ast, options) {\n  if (!ast || ast.kind !== _kinds.Kind.DOCUMENT) {\n    throw new Error('Must provide a document ast.');\n  }\n\n  var schemaDef = void 0;\n\n  var typeDefs = [];\n  var nodeMap = Object.create(null);\n  var directiveDefs = [];\n  for (var i = 0; i < ast.definitions.length; i++) {\n    var d = ast.definitions[i];\n    switch (d.kind) {\n      case _kinds.Kind.SCHEMA_DEFINITION:\n        if (schemaDef) {\n          throw new Error('Must provide only one schema definition.');\n        }\n        schemaDef = d;\n        break;\n      case _kinds.Kind.SCALAR_TYPE_DEFINITION:\n      case _kinds.Kind.OBJECT_TYPE_DEFINITION:\n      case _kinds.Kind.INTERFACE_TYPE_DEFINITION:\n      case _kinds.Kind.ENUM_TYPE_DEFINITION:\n      case _kinds.Kind.UNION_TYPE_DEFINITION:\n      case _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION:\n        var typeName = d.name.value;\n        if (nodeMap[typeName]) {\n          throw new Error('Type \"' + typeName + '\" was defined more than once.');\n        }\n        typeDefs.push(d);\n        nodeMap[typeName] = d;\n        break;\n      case _kinds.Kind.DIRECTIVE_DEFINITION:\n        directiveDefs.push(d);\n        break;\n    }\n  }\n\n  var operationTypes = schemaDef ? getOperationTypes(schemaDef) : {\n    query: nodeMap.Query,\n    mutation: nodeMap.Mutation,\n    subscription: nodeMap.Subscription\n  };\n\n  var definitionBuilder = new ASTDefinitionBuilder(nodeMap, options, function (typeRef) {\n    throw new Error('Type \"' + typeRef.name.value + '\" not found in document.');\n  });\n\n  var types = definitionBuilder.buildTypes(typeDefs);\n  var directives = directiveDefs.map(function (def) {\n    return definitionBuilder.buildDirective(def);\n  });\n\n  // If specified directives were not explicitly declared, add them.\n  if (!directives.some(function (directive) {\n    return directive.name === 'skip';\n  })) {\n    directives.push(_directives.GraphQLSkipDirective);\n  }\n\n  if (!directives.some(function (directive) {\n    return directive.name === 'include';\n  })) {\n    directives.push(_directives.GraphQLIncludeDirective);\n  }\n\n  if (!directives.some(function (directive) {\n    return directive.name === 'deprecated';\n  })) {\n    directives.push(_directives.GraphQLDeprecatedDirective);\n  }\n\n  // Note: While this could make early assertions to get the correctly\n  // typed values below, that would throw immediately while type system\n  // validation with validateSchema() will produce more actionable results.\n  return new _schema.GraphQLSchema({\n    query: operationTypes.query ? definitionBuilder.buildType(operationTypes.query) : null,\n    mutation: operationTypes.mutation ? definitionBuilder.buildType(operationTypes.mutation) : null,\n    subscription: operationTypes.subscription ? definitionBuilder.buildType(operationTypes.subscription) : null,\n    types: types,\n    directives: directives,\n    astNode: schemaDef,\n    assumeValid: options && options.assumeValid,\n    allowedLegacyNames: options && options.allowedLegacyNames\n  });\n\n  function getOperationTypes(schema) {\n    var opTypes = {};\n    schema.operationTypes.forEach(function (operationType) {\n      var typeName = operationType.type.name.value;\n      var operation = operationType.operation;\n      if (opTypes[operation]) {\n        throw new Error('Must provide only one ' + operation + ' type in schema.');\n      }\n      if (!nodeMap[typeName]) {\n        throw new Error('Specified ' + operation + ' type \"' + typeName + '\" not found in document.');\n      }\n      opTypes[operation] = operationType.type;\n    });\n    return opTypes;\n  }\n}\n\nvar ASTDefinitionBuilder = exports.ASTDefinitionBuilder = function () {\n  function ASTDefinitionBuilder(typeDefinitionsMap, options, resolveType) {\n    _classCallCheck(this, ASTDefinitionBuilder);\n\n    this._typeDefinitionsMap = typeDefinitionsMap;\n    this._options = options;\n    this._resolveType = resolveType;\n    // Initialize to the GraphQL built in scalars and introspection types.\n    this._cache = (0, _keyMap2.default)(_scalars.specifiedScalarTypes.concat(_introspection.introspectionTypes), function (type) {\n      return type.name;\n    });\n  }\n\n  ASTDefinitionBuilder.prototype.buildTypes = function buildTypes(nodes) {\n    var _this = this;\n\n    return nodes.map(function (node) {\n      return _this.buildType(node);\n    });\n  };\n\n  ASTDefinitionBuilder.prototype.buildType = function buildType(node) {\n    var typeName = node.name.value;\n    if (!this._cache[typeName]) {\n      if (node.kind === _kinds.Kind.NAMED_TYPE) {\n        var defNode = this._typeDefinitionsMap[typeName];\n        this._cache[typeName] = defNode ? this._makeSchemaDef(defNode) : this._resolveType(node);\n      } else {\n        this._cache[typeName] = this._makeSchemaDef(node);\n      }\n    }\n    return this._cache[typeName];\n  };\n\n  ASTDefinitionBuilder.prototype._buildWrappedType = function _buildWrappedType(typeNode) {\n    var typeDef = this.buildType(getNamedTypeNode(typeNode));\n    return buildWrappedType(typeDef, typeNode);\n  };\n\n  ASTDefinitionBuilder.prototype.buildDirective = function buildDirective(directiveNode) {\n    return new _directives.GraphQLDirective({\n      name: directiveNode.name.value,\n      description: getDescription(directiveNode, this._options),\n      locations: directiveNode.locations.map(function (node) {\n        return node.value;\n      }),\n      args: directiveNode.arguments && this._makeInputValues(directiveNode.arguments),\n      astNode: directiveNode\n    });\n  };\n\n  ASTDefinitionBuilder.prototype.buildField = function buildField(field) {\n    return {\n      // Note: While this could make assertions to get the correctly typed\n      // value, that would throw immediately while type system validation\n      // with validateSchema() will produce more actionable results.\n      type: this._buildWrappedType(field.type),\n      description: getDescription(field, this._options),\n      args: field.arguments && this._makeInputValues(field.arguments),\n      deprecationReason: getDeprecationReason(field),\n      astNode: field\n    };\n  };\n\n  ASTDefinitionBuilder.prototype._makeSchemaDef = function _makeSchemaDef(def) {\n    switch (def.kind) {\n      case _kinds.Kind.OBJECT_TYPE_DEFINITION:\n        return this._makeTypeDef(def);\n      case _kinds.Kind.INTERFACE_TYPE_DEFINITION:\n        return this._makeInterfaceDef(def);\n      case _kinds.Kind.ENUM_TYPE_DEFINITION:\n        return this._makeEnumDef(def);\n      case _kinds.Kind.UNION_TYPE_DEFINITION:\n        return this._makeUnionDef(def);\n      case _kinds.Kind.SCALAR_TYPE_DEFINITION:\n        return this._makeScalarDef(def);\n      case _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION:\n        return this._makeInputObjectDef(def);\n      default:\n        throw new Error('Type kind \"' + def.kind + '\" not supported.');\n    }\n  };\n\n  ASTDefinitionBuilder.prototype._makeTypeDef = function _makeTypeDef(def) {\n    var _this2 = this;\n\n    var typeName = def.name.value;\n    var interfaces = def.interfaces;\n    return new _definition.GraphQLObjectType({\n      name: typeName,\n      description: getDescription(def, this._options),\n      fields: function fields() {\n        return _this2._makeFieldDefMap(def);\n      },\n      // Note: While this could make early assertions to get the correctly\n      // typed values, that would throw immediately while type system\n      // validation with validateSchema() will produce more actionable results.\n      interfaces: interfaces ? function () {\n        return _this2.buildTypes(interfaces);\n      } : [],\n      astNode: def\n    });\n  };\n\n  ASTDefinitionBuilder.prototype._makeFieldDefMap = function _makeFieldDefMap(def) {\n    var _this3 = this;\n\n    return def.fields ? (0, _keyValMap2.default)(def.fields, function (field) {\n      return field.name.value;\n    }, function (field) {\n      return _this3.buildField(field);\n    }) : {};\n  };\n\n  ASTDefinitionBuilder.prototype._makeInputValues = function _makeInputValues(values) {\n    var _this4 = this;\n\n    return (0, _keyValMap2.default)(values, function (value) {\n      return value.name.value;\n    }, function (value) {\n      // Note: While this could make assertions to get the correctly typed\n      // value, that would throw immediately while type system validation\n      var type = _this4._buildWrappedType(value.type);\n      return {\n        type: type,\n        description: getDescription(value, _this4._options),\n        defaultValue: (0, _valueFromAST.valueFromAST)(value.defaultValue, type),\n        astNode: value\n      };\n    });\n  };\n\n  ASTDefinitionBuilder.prototype._makeInterfaceDef = function _makeInterfaceDef(def) {\n    var _this5 = this;\n\n    return new _definition.GraphQLInterfaceType({\n      name: def.name.value,\n      description: getDescription(def, this._options),\n      fields: function fields() {\n        return _this5._makeFieldDefMap(def);\n      },\n      astNode: def\n    });\n  };\n\n  ASTDefinitionBuilder.prototype._makeEnumDef = function _makeEnumDef(def) {\n    var _this6 = this;\n\n    return new _definition.GraphQLEnumType({\n      name: def.name.value,\n      description: getDescription(def, this._options),\n      values: def.values ? (0, _keyValMap2.default)(def.values, function (enumValue) {\n        return enumValue.name.value;\n      }, function (enumValue) {\n        return {\n          description: getDescription(enumValue, _this6._options),\n          deprecationReason: getDeprecationReason(enumValue),\n          astNode: enumValue\n        };\n      }) : {},\n      astNode: def\n    });\n  };\n\n  ASTDefinitionBuilder.prototype._makeUnionDef = function _makeUnionDef(def) {\n    return new _definition.GraphQLUnionType({\n      name: def.name.value,\n      description: getDescription(def, this._options),\n      // Note: While this could make assertions to get the correctly typed\n      // values below, that would throw immediately while type system\n      // validation with validateSchema() will produce more actionable results.\n      types: def.types ? this.buildTypes(def.types) : [],\n      astNode: def\n    });\n  };\n\n  ASTDefinitionBuilder.prototype._makeScalarDef = function _makeScalarDef(def) {\n    return new _definition.GraphQLScalarType({\n      name: def.name.value,\n      description: getDescription(def, this._options),\n      astNode: def,\n      serialize: function serialize(value) {\n        return value;\n      }\n    });\n  };\n\n  ASTDefinitionBuilder.prototype._makeInputObjectDef = function _makeInputObjectDef(def) {\n    var _this7 = this;\n\n    return new _definition.GraphQLInputObjectType({\n      name: def.name.value,\n      description: getDescription(def, this._options),\n      fields: function fields() {\n        return def.fields ? _this7._makeInputValues(def.fields) : {};\n      },\n      astNode: def\n    });\n  };\n\n  return ASTDefinitionBuilder;\n}();\n\n/**\n * Given a field or enum value node, returns the string value for the\n * deprecation reason.\n */\n\n\nfunction getDeprecationReason(node) {\n  var deprecated = (0, _values.getDirectiveValues)(_directives.GraphQLDeprecatedDirective, node);\n  return deprecated && deprecated.reason;\n}\n\n/**\n * Given an ast node, returns its string description.\n *\n * Accepts options as a second argument:\n *\n *    - commentDescriptions:\n *        Provide true to use preceding comments as the description.\n *\n */\nfunction getDescription(node, options) {\n  if (node.description) {\n    return node.description.value;\n  }\n  if (options && options.commentDescriptions) {\n    var rawValue = getLeadingCommentBlock(node);\n    if (rawValue !== undefined) {\n      return (0, _blockStringValue2.default)('\\n' + rawValue);\n    }\n  }\n}\n\nfunction getLeadingCommentBlock(node) {\n  var loc = node.loc;\n  if (!loc) {\n    return;\n  }\n  var comments = [];\n  var token = loc.startToken.prev;\n  while (token && token.kind === _lexer.TokenKind.COMMENT && token.next && token.prev && token.line + 1 === token.next.line && token.line !== token.prev.line) {\n    var value = String(token.value);\n    comments.push(value);\n    token = token.prev;\n  }\n  return comments.reverse().join('\\n');\n}\n\n/**\n * A helper function to build a GraphQLSchema directly from a source\n * document.\n */\nfunction buildSchema(source, options) {\n  return buildASTSchema((0, _parser.parse)(source, options), options);\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/utilities/buildASTSchema.js\n// module id = 92\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar graphql_1 = require(\"graphql\");\nvar values_1 = require(\"graphql/execution/values\");\nvar hasOwn = Object.prototype.hasOwnProperty;\n// Abstract base class of any visitor implementation, defining the available\n// visitor methods along with their parameter types, and providing a static\n// helper function for determining whether a subclass implements a given\n// visitor method, as opposed to inheriting one of the stubs defined here.\nvar SchemaVisitor = /** @class */ (function () {\n    function SchemaVisitor() {\n    }\n    // Determine if this SchemaVisitor (sub)class implements a particular\n    // visitor method.\n    SchemaVisitor.implementsVisitorMethod = function (methodName) {\n        if (!methodName.startsWith('visit')) {\n            return false;\n        }\n        var method = this.prototype[methodName];\n        if (typeof method !== 'function') {\n            return false;\n        }\n        if (this === SchemaVisitor) {\n            // The SchemaVisitor class implements every visitor method.\n            return true;\n        }\n        var stub = SchemaVisitor.prototype[methodName];\n        if (method === stub) {\n            // If this.prototype[methodName] was just inherited from SchemaVisitor,\n            // then this class does not really implement the method.\n            return false;\n        }\n        return true;\n    };\n    // Concrete subclasses of SchemaVisitor should override one or more of these\n    // visitor methods, in order to express their interest in handling certain\n    // schema types/locations. Each method may return null to remove the given\n    // type from the schema, a non-null value of the same type to update the\n    // type in the schema, or nothing to leave the type as it was.\n    /* tslint:disable:no-empty */\n    SchemaVisitor.prototype.visitSchema = function (schema) { };\n    SchemaVisitor.prototype.visitScalar = function (scalar) { };\n    SchemaVisitor.prototype.visitObject = function (object) { };\n    SchemaVisitor.prototype.visitFieldDefinition = function (field, details) { };\n    SchemaVisitor.prototype.visitArgumentDefinition = function (argument, details) { };\n    SchemaVisitor.prototype.visitInterface = function (iface) { };\n    SchemaVisitor.prototype.visitUnion = function (union) { };\n    SchemaVisitor.prototype.visitEnum = function (type) { };\n    SchemaVisitor.prototype.visitEnumValue = function (value, details) { };\n    SchemaVisitor.prototype.visitInputObject = function (object) { };\n    SchemaVisitor.prototype.visitInputFieldDefinition = function (field, details) { };\n    return SchemaVisitor;\n}());\nexports.SchemaVisitor = SchemaVisitor;\n// Generic function for visiting GraphQLSchema objects.\nfunction visitSchema(schema, \n    // To accommodate as many different visitor patterns as possible, the\n    // visitSchema function does not simply accept a single instance of the\n    // SchemaVisitor class, but instead accepts a function that takes the\n    // current VisitableSchemaType object and the name of a visitor method and\n    // returns an array of SchemaVisitor instances that implement the visitor\n    // method and have an interest in handling the given VisitableSchemaType\n    // object. In the simplest case, this function can always return an array\n    // containing a single visitor object, without even looking at the type or\n    // methodName parameters. In other cases, this function might sometimes\n    // return an empty array to indicate there are no visitors that should be\n    // applied to the given VisitableSchemaType object. For an example of a\n    // visitor pattern that benefits from this abstraction, see the\n    // SchemaDirectiveVisitor class below.\n    visitorSelector) {\n    // Helper function that calls visitorSelector and applies the resulting\n    // visitors to the given type, with arguments [type, ...args].\n    function callMethod(methodName, type) {\n        var args = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            args[_i - 2] = arguments[_i];\n        }\n        visitorSelector(type, methodName).every(function (visitor) {\n            var newType = visitor[methodName].apply(visitor, [type].concat(args));\n            if (typeof newType === 'undefined') {\n                // Keep going without modifying type.\n                return true;\n            }\n            if (methodName === 'visitSchema' ||\n                type instanceof graphql_1.GraphQLSchema) {\n                throw new Error(\"Method \" + methodName + \" cannot replace schema with \" + newType);\n            }\n            if (newType === null) {\n                // Stop the loop and return null form callMethod, which will cause\n                // the type to be removed from the schema.\n                type = null;\n                return false;\n            }\n            // Update type to the new type returned by the visitor method, so that\n            // later directives will see the new type, and callMethod will return\n            // the final type.\n            type = newType;\n        });\n        // If there were no directives for this type object, or if all visitor\n        // methods returned nothing, type will be returned unmodified.\n        return type;\n    }\n    // Recursive helper function that calls any appropriate visitor methods for\n    // each object in the schema, then traverses the object's children (if any).\n    function visit(type) {\n        if (type instanceof graphql_1.GraphQLSchema) {\n            // Unlike the other types, the root GraphQLSchema object cannot be\n            // replaced by visitor methods, because that would make life very hard\n            // for SchemaVisitor subclasses that rely on the original schema object.\n            callMethod('visitSchema', type);\n            updateEachKey(type.getTypeMap(), function (namedType, typeName) {\n                if (!typeName.startsWith('__')) {\n                    // Call visit recursively to let it determine which concrete\n                    // subclass of GraphQLNamedType we found in the type map. Because\n                    // we're using updateEachKey, the result of visit(namedType) may\n                    // cause the type to be removed or replaced.\n                    return visit(namedType);\n                }\n            });\n            return type;\n        }\n        if (type instanceof graphql_1.GraphQLObjectType) {\n            // Note that callMethod('visitObject', type) may not actually call any\n            // methods, if there are no @directive annotations associated with this\n            // type, or if this SchemaDirectiveVisitor subclass does not override\n            // the visitObject method.\n            var newObject = callMethod('visitObject', type);\n            if (newObject) {\n                visitFields(newObject);\n            }\n            return newObject;\n        }\n        if (type instanceof graphql_1.GraphQLInterfaceType) {\n            var newInterface = callMethod('visitInterface', type);\n            if (newInterface) {\n                visitFields(newInterface);\n            }\n            return newInterface;\n        }\n        if (type instanceof graphql_1.GraphQLInputObjectType) {\n            var newInputObject_1 = callMethod('visitInputObject', type);\n            if (newInputObject_1) {\n                updateEachKey(newInputObject_1.getFields(), function (field) {\n                    // Since we call a different method for input object fields, we\n                    // can't reuse the visitFields function here.\n                    return callMethod('visitInputFieldDefinition', field, {\n                        objectType: newInputObject_1,\n                    });\n                });\n            }\n            return newInputObject_1;\n        }\n        if (type instanceof graphql_1.GraphQLScalarType) {\n            return callMethod('visitScalar', type);\n        }\n        if (type instanceof graphql_1.GraphQLUnionType) {\n            return callMethod('visitUnion', type);\n        }\n        if (type instanceof graphql_1.GraphQLEnumType) {\n            var newEnum_1 = callMethod('visitEnum', type);\n            if (newEnum_1) {\n                updateEachKey(newEnum_1.getValues(), function (value) {\n                    return callMethod('visitEnumValue', value, {\n                        enumType: newEnum_1,\n                    });\n                });\n            }\n            return newEnum_1;\n        }\n        throw new Error(\"Unexpected schema type: \" + type);\n    }\n    function visitFields(type) {\n        updateEachKey(type.getFields(), function (field) {\n            // It would be nice if we could call visit(field) recursively here, but\n            // GraphQLField is merely a type, not a value that can be detected using\n            // an instanceof check, so we have to visit the fields in this lexical\n            // context, so that TypeScript can validate the call to\n            // visitFieldDefinition.\n            var newField = callMethod('visitFieldDefinition', field, {\n                // While any field visitor needs a reference to the field object, some\n                // field visitors may also need to know the enclosing (parent) type,\n                // perhaps to determine if the parent is a GraphQLObjectType or a\n                // GraphQLInterfaceType. To obtain a reference to the parent, a\n                // visitor method can have a second parameter, which will be an object\n                // with an .objectType property referring to the parent.\n                objectType: type,\n            });\n            if (newField && newField.args) {\n                updateEachKey(newField.args, function (arg) {\n                    return callMethod('visitArgumentDefinition', arg, {\n                        // Like visitFieldDefinition, visitArgumentDefinition takes a\n                        // second parameter that provides additional context, namely the\n                        // parent .field and grandparent .objectType. Remember that the\n                        // current GraphQLSchema is always available via this.schema.\n                        field: newField,\n                        objectType: type,\n                    });\n                });\n            }\n            return newField;\n        });\n    }\n    visit(schema);\n    // Return the original schema for convenience, even though it cannot have\n    // been replaced or removed by the code above.\n    return schema;\n}\nexports.visitSchema = visitSchema;\n// Update any references to named schema types that disagree with the named\n// types found in schema.getTypeMap().\nfunction healSchema(schema) {\n    heal(schema);\n    return schema;\n    function heal(type) {\n        if (type instanceof graphql_1.GraphQLSchema) {\n            var originalTypeMap_1 = type.getTypeMap();\n            var actualNamedTypeMap_1 = Object.create(null);\n            // If any of the .name properties of the GraphQLNamedType objects in\n            // schema.getTypeMap() have changed, the keys of the type map need to\n            // be updated accordingly.\n            each(originalTypeMap_1, function (namedType, typeName) {\n                if (typeName.startsWith('__')) {\n                    return;\n                }\n                var actualName = namedType.name;\n                if (actualName.startsWith('__')) {\n                    return;\n                }\n                if (hasOwn.call(actualNamedTypeMap_1, actualName)) {\n                    throw new Error(\"Duplicate schema type name \" + actualName);\n                }\n                actualNamedTypeMap_1[actualName] = namedType;\n                // Note: we are deliberately leaving namedType in the schema by its\n                // original name (which might be different from actualName), so that\n                // references by that name can be healed.\n            });\n            // Now add back every named type by its actual name.\n            each(actualNamedTypeMap_1, function (namedType, typeName) {\n                originalTypeMap_1[typeName] = namedType;\n            });\n            // Directive declaration argument types can refer to named types.\n            each(type.getDirectives(), function (decl) {\n                if (decl.args) {\n                    each(decl.args, function (arg) {\n                        arg.type = healType(arg.type);\n                    });\n                }\n            });\n            each(originalTypeMap_1, function (namedType, typeName) {\n                if (!typeName.startsWith('__')) {\n                    heal(namedType);\n                }\n            });\n            updateEachKey(originalTypeMap_1, function (namedType, typeName) {\n                // Dangling references to renamed types should remain in the schema\n                // during healing, but must be removed now, so that the following\n                // invariant holds for all names: schema.getType(name).name === name\n                if (!typeName.startsWith('__') &&\n                    !hasOwn.call(actualNamedTypeMap_1, typeName)) {\n                    return null;\n                }\n            });\n        }\n        else if (type instanceof graphql_1.GraphQLObjectType) {\n            healFields(type);\n            each(type.getInterfaces(), function (iface) { return heal(iface); });\n        }\n        else if (type instanceof graphql_1.GraphQLInterfaceType) {\n            healFields(type);\n        }\n        else if (type instanceof graphql_1.GraphQLInputObjectType) {\n            each(type.getFields(), function (field) {\n                field.type = healType(field.type);\n            });\n        }\n        else if (type instanceof graphql_1.GraphQLScalarType) {\n            // Nothing to do.\n        }\n        else if (type instanceof graphql_1.GraphQLUnionType) {\n            updateEachKey(type.getTypes(), function (t) { return healType(t); });\n        }\n        else if (type instanceof graphql_1.GraphQLEnumType) {\n            // Nothing to do.\n        }\n        else {\n            throw new Error(\"Unexpected schema type: \" + type);\n        }\n    }\n    function healFields(type) {\n        each(type.getFields(), function (field) {\n            field.type = healType(field.type);\n            if (field.args) {\n                each(field.args, function (arg) {\n                    arg.type = healType(arg.type);\n                });\n            }\n        });\n    }\n    function healType(type) {\n        if (type instanceof graphql_1.GraphQLList ||\n            type instanceof graphql_1.GraphQLNonNull) {\n            // Unwrap the two known wrapper types:\n            // https://github.com/graphql/graphql-js/blob/master/src/type/wrappers.js\n            type.ofType = healType(type.ofType);\n        }\n        else if (graphql_1.isNamedType(type)) {\n            // If a type annotation on a field or an argument or a union member is\n            // any `GraphQLNamedType` with a `name`, then it must end up identical\n            // to `schema.getType(name)`, since `schema.getTypeMap()` is the source\n            // of truth for all named schema types.\n            var namedType = type;\n            var officialType = schema.getType(namedType.name);\n            if (officialType && namedType !== officialType) {\n                return officialType;\n            }\n        }\n        return type;\n    }\n}\nexports.healSchema = healSchema;\n// This class represents a reusable implementation of a @directive that may\n// appear in a GraphQL schema written in Schema Definition Language.\n//\n// By overriding one or more visit{Object,Union,...} methods, a subclass\n// registers interest in certain schema types, such as GraphQLObjectType,\n// GraphQLUnionType, etc. When SchemaDirectiveVisitor.visitSchemaDirectives is\n// called with a GraphQLSchema object and a map of visitor subclasses, the\n// overidden methods of those subclasses allow the visitors to obtain\n// references to any type objects that have @directives attached to them,\n// enabling visitors to inspect or modify the schema as appropriate.\n//\n// For example, if a directive called @rest(url: \"...\") appears after a field\n// definition, a SchemaDirectiveVisitor subclass could provide meaning to that\n// directive by overriding the visitFieldDefinition method (which receives a\n// GraphQLField parameter), and then the body of that visitor method could\n// manipulate the field's resolver function to fetch data from a REST endpoint\n// described by the url argument passed to the @rest directive:\n//\n//   const typeDefs = `\n//   type Query {\n//     people: [Person] @rest(url: \"/api/v1/people\")\n//   }`;\n//\n//   const schema = makeExecutableSchema({ typeDefs });\n//\n//   SchemaDirectiveVisitor.visitSchemaDirectives(schema, {\n//     rest: class extends SchemaDirectiveVisitor {\n//       public visitFieldDefinition(field: GraphQLField<any, any>) {\n//         const { url } = this.args;\n//         field.resolve = () => fetch(url);\n//       }\n//     }\n//   });\n//\n// The subclass in this example is defined as an anonymous class expression,\n// for brevity. A truly reusable SchemaDirectiveVisitor would most likely be\n// defined in a library using a named class declaration, and then exported for\n// consumption by other modules and packages.\n//\n// See below for a complete list of overridable visitor methods, their\n// parameter types, and more details about the properties exposed by instances\n// of the SchemaDirectiveVisitor class.\nvar SchemaDirectiveVisitor = /** @class */ (function (_super) {\n    __extends(SchemaDirectiveVisitor, _super);\n    // Mark the constructor protected to enforce passing SchemaDirectiveVisitor\n    // subclasses (not instances) to visitSchemaDirectives.\n    function SchemaDirectiveVisitor(config) {\n        var _this = _super.call(this) || this;\n        _this.name = config.name;\n        _this.args = config.args;\n        _this.visitedType = config.visitedType;\n        _this.schema = config.schema;\n        _this.context = config.context;\n        return _this;\n    }\n    // Override this method to return a custom GraphQLDirective (or modify one\n    // already present in the schema) to enforce argument types, provide default\n    // argument values, or specify schema locations where this @directive may\n    // appear. By default, any declaration found in the schema will be returned.\n    SchemaDirectiveVisitor.getDirectiveDeclaration = function (directiveName, schema) {\n        return schema.getDirective(directiveName);\n    };\n    // Call SchemaDirectiveVisitor.visitSchemaDirectives to visit every\n    // @directive in the schema and create an appropriate SchemaDirectiveVisitor\n    // instance to visit the object decorated by the @directive.\n    SchemaDirectiveVisitor.visitSchemaDirectives = function (schema, directiveVisitors, \n        // Optional context object that will be available to all visitor instances\n        // via this.context. Defaults to an empty null-prototype object.\n        context) {\n        // Optional context object that will be available to all visitor instances\n        // via this.context. Defaults to an empty null-prototype object.\n        if (context === void 0) { context = Object.create(null); }\n        // If the schema declares any directives for public consumption, record\n        // them here so that we can properly coerce arguments when/if we encounter\n        // an occurrence of the directive while walking the schema below.\n        var declaredDirectives = this.getDeclaredDirectives(schema, directiveVisitors);\n        // Map from directive names to lists of SchemaDirectiveVisitor instances\n        // created while visiting the schema.\n        var createdVisitors = Object.create(null);\n        Object.keys(directiveVisitors).forEach(function (directiveName) {\n            createdVisitors[directiveName] = [];\n        });\n        function visitorSelector(type, methodName) {\n            var visitors = [];\n            var directiveNodes = type.astNode && type.astNode.directives;\n            if (!directiveNodes) {\n                return visitors;\n            }\n            directiveNodes.forEach(function (directiveNode) {\n                var directiveName = directiveNode.name.value;\n                if (!hasOwn.call(directiveVisitors, directiveName)) {\n                    return;\n                }\n                var visitorClass = directiveVisitors[directiveName];\n                // Avoid creating visitor objects if visitorClass does not override\n                // the visitor method named by methodName.\n                if (!visitorClass.implementsVisitorMethod(methodName)) {\n                    return;\n                }\n                var decl = declaredDirectives[directiveName];\n                var args;\n                if (decl) {\n                    // If this directive was explicitly declared, use the declared\n                    // argument types (and any default values) to check, coerce, and/or\n                    // supply default values for the given arguments.\n                    args = values_1.getArgumentValues(decl, directiveNode);\n                }\n                else {\n                    // If this directive was not explicitly declared, just convert the\n                    // argument nodes to their corresponding JavaScript values.\n                    args = Object.create(null);\n                    directiveNode.arguments.forEach(function (arg) {\n                        args[arg.name.value] = valueFromASTUntyped(arg.value);\n                    });\n                }\n                // As foretold in comments near the top of the visitSchemaDirectives\n                // method, this is where instances of the SchemaDirectiveVisitor class\n                // get created and assigned names. While subclasses could override the\n                // constructor method, the constructor is marked as protected, so\n                // these are the only arguments that will ever be passed.\n                visitors.push(new visitorClass({\n                    name: directiveName,\n                    args: args,\n                    visitedType: type,\n                    schema: schema,\n                    context: context,\n                }));\n            });\n            if (visitors.length > 0) {\n                visitors.forEach(function (visitor) {\n                    createdVisitors[visitor.name].push(visitor);\n                });\n            }\n            return visitors;\n        }\n        visitSchema(schema, visitorSelector);\n        // Automatically update any references to named schema types replaced\n        // during the traversal, so implementors don't have to worry about that.\n        healSchema(schema);\n        return createdVisitors;\n    };\n    SchemaDirectiveVisitor.getDeclaredDirectives = function (schema, directiveVisitors) {\n        var declaredDirectives = Object.create(null);\n        each(schema.getDirectives(), function (decl) {\n            declaredDirectives[decl.name] = decl;\n        });\n        // If the visitor subclass overrides getDirectiveDeclaration, and it\n        // returns a non-null GraphQLDirective, use that instead of any directive\n        // declared in the schema itself. Reasoning: if a SchemaDirectiveVisitor\n        // goes to the trouble of implementing getDirectiveDeclaration, it should\n        // be able to rely on that implementation.\n        each(directiveVisitors, function (visitorClass, directiveName) {\n            var decl = visitorClass.getDirectiveDeclaration(directiveName, schema);\n            if (decl) {\n                declaredDirectives[directiveName] = decl;\n            }\n        });\n        each(declaredDirectives, function (decl, name) {\n            if (!hasOwn.call(directiveVisitors, name)) {\n                // SchemaDirectiveVisitors.visitSchemaDirectives might be called\n                // multiple times with partial directiveVisitors maps, so it's not\n                // necessarily an error for directiveVisitors to be missing an\n                // implementation of a directive that was declared in the schema.\n                return;\n            }\n            var visitorClass = directiveVisitors[name];\n            each(decl.locations, function (loc) {\n                var visitorMethodName = directiveLocationToVisitorMethodName(loc);\n                if (SchemaVisitor.implementsVisitorMethod(visitorMethodName) &&\n                    !visitorClass.implementsVisitorMethod(visitorMethodName)) {\n                    // While visitor subclasses may implement extra visitor methods,\n                    // it's definitely a mistake if the GraphQLDirective declares itself\n                    // applicable to certain schema locations, and the visitor subclass\n                    // does not implement all the corresponding methods.\n                    throw new Error(\"SchemaDirectiveVisitor for @\" + name + \" must implement \" + visitorMethodName + \" method\");\n                }\n            });\n        });\n        return declaredDirectives;\n    };\n    return SchemaDirectiveVisitor;\n}(SchemaVisitor));\nexports.SchemaDirectiveVisitor = SchemaDirectiveVisitor;\n// Convert a string like \"FIELD_DEFINITION\" to \"visitFieldDefinition\".\nfunction directiveLocationToVisitorMethodName(loc) {\n    return 'visit' + loc.replace(/([^_]*)_?/g, function (wholeMatch, part) {\n        return part.charAt(0).toUpperCase() + part.slice(1).toLowerCase();\n    });\n}\nfunction each(arrayOrObject, callback) {\n    Object.keys(arrayOrObject).forEach(function (key) {\n        callback(arrayOrObject[key], key);\n    });\n}\n// A more powerful version of each that has the ability to replace or remove\n// array or object keys.\nfunction updateEachKey(arrayOrObject, \n    // The callback can return nothing to leave the key untouched, null to remove\n    // the key from the array or object, or a non-null V to replace the value.\n    callback) {\n    var deletedCount = 0;\n    Object.keys(arrayOrObject).forEach(function (key) {\n        var result = callback(arrayOrObject[key], key);\n        if (typeof result === 'undefined') {\n            return;\n        }\n        if (result === null) {\n            delete arrayOrObject[key];\n            deletedCount++;\n            return;\n        }\n        arrayOrObject[key] = result;\n    });\n    if (deletedCount > 0 && Array.isArray(arrayOrObject)) {\n        // Remove any holes from the array due to deleted elements.\n        arrayOrObject.splice(0).forEach(function (elem) {\n            arrayOrObject.push(elem);\n        });\n    }\n}\n// Similar to the graphql-js function of the same name, slightly simplified:\n// https://github.com/graphql/graphql-js/blob/master/src/utilities/valueFromASTUntyped.js\nfunction valueFromASTUntyped(valueNode) {\n    switch (valueNode.kind) {\n        case graphql_1.Kind.NULL:\n            return null;\n        case graphql_1.Kind.INT:\n            return parseInt(valueNode.value, 10);\n        case graphql_1.Kind.FLOAT:\n            return parseFloat(valueNode.value);\n        case graphql_1.Kind.STRING:\n        case graphql_1.Kind.ENUM:\n        case graphql_1.Kind.BOOLEAN:\n            return valueNode.value;\n        case graphql_1.Kind.LIST:\n            return valueNode.values.map(valueFromASTUntyped);\n        case graphql_1.Kind.OBJECT:\n            var obj_1 = Object.create(null);\n            valueNode.fields.forEach(function (field) {\n                obj_1[field.name.value] = valueFromASTUntyped(field.value);\n            });\n            return obj_1;\n        /* istanbul ignore next */\n        default:\n            throw new Error('Unexpected value kind: ' + valueNode.kind);\n    }\n}\n//# sourceMappingURL=schemaVisitor.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql-tools/dist/schemaVisitor.js\n// module id = 93\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction mergeDeep(target, source) {\n    var output = Object.assign({}, target);\n    if (isObject(target) && isObject(source)) {\n        Object.keys(source).forEach(function (key) {\n            if (isObject(source[key])) {\n                if (!(key in target)) {\n                    Object.assign(output, (_a = {}, _a[key] = source[key], _a));\n                }\n                else {\n                    output[key] = mergeDeep(target[key], source[key]);\n                }\n            }\n            else {\n                Object.assign(output, (_b = {}, _b[key] = source[key], _b));\n            }\n            var _a, _b;\n        });\n    }\n    return output;\n}\nexports.default = mergeDeep;\nfunction isObject(item) {\n    return item && typeof item === 'object' && !Array.isArray(item);\n}\n//# sourceMappingURL=mergeDeep.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql-tools/dist/mergeDeep.js\n// module id = 94\n// module chunks = 0","// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\n\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\nvar getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues.bind(crypto)) ||\n                      (typeof(msCrypto) != 'undefined' && msCrypto.getRandomValues.bind(msCrypto));\nif (getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n\n  module.exports = function whatwgRNG() {\n    getRandomValues(rnds8);\n    return rnds8;\n  };\n} else {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var rnds = new Array(16);\n\n  module.exports = function mathRNG() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/uuid/lib/rng-browser.js\n// module id = 95\n// module chunks = 0","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  return bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]];\n}\n\nmodule.exports = bytesToUuid;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/uuid/lib/bytesToUuid.js\n// module id = 96\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar apollo_link_1 = require(\"apollo-link\");\nvar apollo_link_2 = require(\"apollo-link\");\nexports.execute = apollo_link_2.execute;\nfunction linkToFetcher(link) {\n    return function (fetcherOperation) {\n        return apollo_link_1.makePromise(apollo_link_1.execute(link, fetcherOperation));\n    };\n}\nexports.default = linkToFetcher;\n//# sourceMappingURL=linkToFetcher.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql-tools/dist/stitching/linkToFetcher.js\n// module id = 97\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction isEmptyObject(obj) {\n    if (!obj) {\n        return true;\n    }\n    for (var key in obj) {\n        if (Object.hasOwnProperty.call(obj, key)) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.default = isEmptyObject;\n//# sourceMappingURL=isEmptyObject.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql-tools/dist/isEmptyObject.js\n// module id = 98\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar graphql_1 = require(\"graphql\");\nvar error_1 = require(\"graphql/error\");\nvar errors_1 = require(\"./errors\");\n// Resolver that knows how to:\n// a) handle aliases for proxied schemas\n// b) handle errors from proxied schemas\nvar defaultMergedResolver = function (parent, args, context, info) {\n    var responseKey = info.fieldNodes[0].alias\n        ? info.fieldNodes[0].alias.value\n        : info.fieldName;\n    var errorResult = errors_1.getErrorsFromParent(parent, responseKey);\n    if (errorResult.kind === 'OWN') {\n        throw error_1.locatedError(new Error(errorResult.error.message), info.fieldNodes, graphql_1.responsePathAsArray(info.path));\n    }\n    else if (parent) {\n        var result = parent[responseKey];\n        // subscription result mapping\n        if (!result && parent.data && parent.data[responseKey]) {\n            result = parent.data[responseKey];\n        }\n        if (errorResult.errors) {\n            result = errors_1.annotateWithChildrenErrors(result, errorResult.errors);\n        }\n        return result;\n    }\n    else {\n        return null;\n    }\n};\nexports.default = defaultMergedResolver;\n//# sourceMappingURL=defaultMergedResolver.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql-tools/dist/stitching/defaultMergedResolver.js\n// module id = 99\n// module chunks = 0","\"use strict\";\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar graphql_1 = require(\"graphql\");\nvar errors_1 = require(\"./errors\");\nfunction delegateToSchema(schema, fragmentReplacements, operation, fieldName, args, context, info) {\n    return __awaiter(this, void 0, void 0, function () {\n        var type, graphqlDoc, errors, operationDefinition, variableValues, _i, _a, definition, key, actualKey, result;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    if (operation === 'mutation') {\n                        type = schema.getMutationType();\n                    }\n                    else if (operation === 'subscription') {\n                        type = schema.getSubscriptionType();\n                    }\n                    else {\n                        type = schema.getQueryType();\n                    }\n                    if (!type) return [3 /*break*/, 3];\n                    graphqlDoc = createDocument(schema, fragmentReplacements, type, fieldName, operation, info.fieldNodes, info.fragments, info.operation.variableDefinitions);\n                    errors = graphql_1.validate(schema, graphqlDoc);\n                    if (errors.length > 0) {\n                        throw errors;\n                    }\n                    operationDefinition = graphqlDoc.definitions.find(function (_a) {\n                        var kind = _a.kind;\n                        return kind === graphql_1.Kind.OPERATION_DEFINITION;\n                    });\n                    variableValues = {};\n                    if (operationDefinition &&\n                        operationDefinition.kind === graphql_1.Kind.OPERATION_DEFINITION &&\n                        operationDefinition.variableDefinitions &&\n                        Array.isArray(operationDefinition.variableDefinitions)) {\n                        for (_i = 0, _a = operationDefinition.variableDefinitions; _i < _a.length; _i++) {\n                            definition = _a[_i];\n                            key = definition.variable.name.value;\n                            actualKey = key.startsWith('_') ? key.slice(1) : key;\n                            variableValues[key] = args[actualKey] != null ? args[actualKey] : info.variableValues[key];\n                        }\n                    }\n                    if (!(operation === 'query' || operation === 'mutation')) return [3 /*break*/, 2];\n                    return [4 /*yield*/, graphql_1.execute(schema, graphqlDoc, info.rootValue, context, variableValues)];\n                case 1:\n                    result = _b.sent();\n                    return [2 /*return*/, errors_1.checkResultAndHandleErrors(result, info, fieldName)];\n                case 2:\n                    if (operation === 'subscription') {\n                        return [2 /*return*/, graphql_1.subscribe(schema, graphqlDoc, info.rootValue, context, variableValues)];\n                    }\n                    _b.label = 3;\n                case 3: throw new Error('Could not forward to merged schema');\n            }\n        });\n    });\n}\nexports.default = delegateToSchema;\nfunction createDocument(schema, fragmentReplacements, type, rootFieldName, operation, selections, fragments, variableDefinitions) {\n    var rootField = type.getFields()[rootFieldName];\n    var newVariables = [];\n    var rootSelectionSet = {\n        kind: graphql_1.Kind.SELECTION_SET,\n        // (XXX) This (wrongly) assumes only having one fieldNode\n        selections: selections.map(function (selection) {\n            if (selection.kind === graphql_1.Kind.FIELD) {\n                var _a = processRootField(selection, rootFieldName, rootField), newSelection = _a.selection, variables = _a.variables;\n                newVariables.push.apply(newVariables, variables);\n                return newSelection;\n            }\n            else {\n                return selection;\n            }\n        }),\n    };\n    var newVariableDefinitions = [];\n    newVariables.forEach(function (_a) {\n        var arg = _a.arg, variable = _a.variable;\n        if (newVariableDefinitions.find(function (newVarDef) { return newVarDef.variable.name.value === variable; })) {\n            return;\n        }\n        var argDef = rootField.args.find(function (rootArg) { return rootArg.name === arg; });\n        if (!argDef) {\n            throw new Error('Unexpected missing arg');\n        }\n        var typeName = typeToAst(argDef.type);\n        newVariableDefinitions.push({\n            kind: graphql_1.Kind.VARIABLE_DEFINITION,\n            variable: {\n                kind: graphql_1.Kind.VARIABLE,\n                name: {\n                    kind: graphql_1.Kind.NAME,\n                    value: variable,\n                },\n            },\n            type: typeName,\n        });\n    });\n    var _a = filterSelectionSetDeep(schema, fragmentReplacements, type, rootSelectionSet, fragments), selectionSet = _a.selectionSet, processedFragments = _a.fragments, usedVariables = _a.usedVariables;\n    var operationDefinition = {\n        kind: graphql_1.Kind.OPERATION_DEFINITION,\n        operation: operation,\n        variableDefinitions: (variableDefinitions || []).filter(function (variableDefinition) {\n            return usedVariables.indexOf(variableDefinition.variable.name.value) !== -1;\n        }).concat(newVariableDefinitions),\n        selectionSet: selectionSet,\n    };\n    var newDoc = {\n        kind: graphql_1.Kind.DOCUMENT,\n        definitions: [operationDefinition].concat(processedFragments),\n    };\n    return newDoc;\n}\nexports.createDocument = createDocument;\nfunction processRootField(selection, rootFieldName, rootField) {\n    var existingArguments = selection.arguments || [];\n    var existingArgumentNames = existingArguments.map(function (arg) { return arg.name.value; });\n    var allowedArguments = rootField.args.map(function (arg) { return arg.name; });\n    var missingArgumentNames = difference(allowedArguments, existingArgumentNames);\n    var extraArguments = difference(existingArgumentNames, allowedArguments);\n    var filteredExistingArguments = existingArguments.filter(function (arg) { return extraArguments.indexOf(arg.name.value) === -1; });\n    var variables = [];\n    var missingArguments = missingArgumentNames.map(function (name) {\n        // (XXX): really needs better var generation\n        var variableName = \"_\" + name;\n        variables.push({\n            arg: name,\n            variable: variableName,\n        });\n        return {\n            kind: graphql_1.Kind.ARGUMENT,\n            name: {\n                kind: graphql_1.Kind.NAME,\n                value: name,\n            },\n            value: {\n                kind: graphql_1.Kind.VARIABLE,\n                name: {\n                    kind: graphql_1.Kind.NAME,\n                    value: variableName,\n                },\n            },\n        };\n    });\n    return {\n        selection: {\n            kind: graphql_1.Kind.FIELD,\n            alias: null,\n            arguments: filteredExistingArguments.concat(missingArguments),\n            selectionSet: selection.selectionSet,\n            name: {\n                kind: graphql_1.Kind.NAME,\n                value: rootFieldName,\n            },\n        },\n        variables: variables,\n    };\n}\nfunction filterSelectionSetDeep(schema, fragmentReplacements, type, selectionSet, fragments) {\n    var validFragments = [];\n    Object.keys(fragments).forEach(function (fragmentName) {\n        var fragment = fragments[fragmentName];\n        var typeName = fragment.typeCondition.name.value;\n        var innerType = schema.getType(typeName);\n        if (innerType) {\n            validFragments.push(fragment);\n        }\n    });\n    var _a = filterSelectionSet(schema, fragmentReplacements, type, selectionSet, validFragments), newSelectionSet = _a.selectionSet, remainingFragments = _a.usedFragments, usedVariables = _a.usedVariables;\n    var newFragments = {};\n    // (XXX): So this will break if we have a fragment that only has link fields\n    while (remainingFragments.length > 0) {\n        var name_1 = remainingFragments.pop();\n        if (newFragments[name_1]) {\n            continue;\n        }\n        else {\n            var nextFragment = fragments[name_1];\n            if (!name_1) {\n                throw new Error(\"Could not find fragment \" + name_1);\n            }\n            var typeName = nextFragment.typeCondition.name.value;\n            var innerType = schema.getType(typeName);\n            if (!innerType) {\n                continue;\n            }\n            var _b = filterSelectionSet(schema, fragmentReplacements, innerType, nextFragment.selectionSet, validFragments), fragmentSelectionSet = _b.selectionSet, fragmentUsedFragments = _b.usedFragments, fragmentUsedVariables = _b.usedVariables;\n            remainingFragments = union(remainingFragments, fragmentUsedFragments);\n            usedVariables = union(usedVariables, fragmentUsedVariables);\n            newFragments[name_1] = {\n                kind: graphql_1.Kind.FRAGMENT_DEFINITION,\n                name: {\n                    kind: graphql_1.Kind.NAME,\n                    value: name_1,\n                },\n                typeCondition: nextFragment.typeCondition,\n                selectionSet: fragmentSelectionSet,\n            };\n        }\n    }\n    var newFragmentValues = Object.keys(newFragments).map(function (name) { return newFragments[name]; });\n    return {\n        selectionSet: newSelectionSet,\n        fragments: newFragmentValues,\n        usedVariables: usedVariables,\n    };\n}\nfunction filterSelectionSet(schema, fragmentReplacements, type, selectionSet, validFragments) {\n    var usedFragments = [];\n    var usedVariables = [];\n    var typeStack = [type];\n    var filteredSelectionSet = graphql_1.visit(selectionSet, (_a = {},\n        _a[graphql_1.Kind.FIELD] = {\n            enter: function (node) {\n                var parentType = resolveType(typeStack[typeStack.length - 1]);\n                if (parentType instanceof graphql_1.GraphQLObjectType ||\n                    parentType instanceof graphql_1.GraphQLInterfaceType) {\n                    var fields = parentType.getFields();\n                    var field = node.name.value === '__typename'\n                        ? graphql_1.TypeNameMetaFieldDef\n                        : fields[node.name.value];\n                    if (!field) {\n                        return null;\n                    }\n                    else {\n                        typeStack.push(field.type);\n                    }\n                }\n                else if (parentType instanceof graphql_1.GraphQLUnionType &&\n                    node.name.value === '__typename') {\n                    typeStack.push(graphql_1.TypeNameMetaFieldDef.type);\n                }\n            },\n            leave: function () {\n                typeStack.pop();\n            },\n        },\n        _a[graphql_1.Kind.SELECTION_SET] = function (node) {\n            var parentType = resolveType(typeStack[typeStack.length - 1]);\n            var parentTypeName = parentType.name;\n            var selections = node.selections;\n            if ((parentType instanceof graphql_1.GraphQLInterfaceType ||\n                parentType instanceof graphql_1.GraphQLUnionType) &&\n                !selections.find(function (_) {\n                    return _.kind === graphql_1.Kind.FIELD &&\n                        _.name.value === '__typename';\n                })) {\n                selections = selections.concat({\n                    kind: graphql_1.Kind.FIELD,\n                    name: {\n                        kind: graphql_1.Kind.NAME,\n                        value: '__typename',\n                    },\n                });\n            }\n            if (fragmentReplacements[parentTypeName]) {\n                selections.forEach(function (selection) {\n                    if (selection.kind === graphql_1.Kind.FIELD) {\n                        var name_2 = selection.name.value;\n                        var fragment = fragmentReplacements[parentTypeName][name_2];\n                        if (fragment) {\n                            selections = selections.concat(fragment);\n                        }\n                    }\n                });\n            }\n            if (selections !== node.selections) {\n                return __assign({}, node, { selections: selections });\n            }\n        },\n        _a[graphql_1.Kind.FRAGMENT_SPREAD] = function (node) {\n            var fragmentFiltered = validFragments.filter(function (frg) { return frg.name.value === node.name.value; });\n            var fragment = fragmentFiltered[0];\n            if (fragment) {\n                if (fragment.typeCondition) {\n                    var innerType = schema.getType(fragment.typeCondition.name.value);\n                    var parentType = resolveType(typeStack[typeStack.length - 1]);\n                    if (!implementsAbstractType(parentType, innerType)) {\n                        return null;\n                    }\n                }\n                usedFragments.push(node.name.value);\n                return;\n            }\n            else {\n                return null;\n            }\n        },\n        _a[graphql_1.Kind.INLINE_FRAGMENT] = {\n            enter: function (node) {\n                if (node.typeCondition) {\n                    var innerType = schema.getType(node.typeCondition.name.value);\n                    var parentType = resolveType(typeStack[typeStack.length - 1]);\n                    if (implementsAbstractType(parentType, innerType)) {\n                        typeStack.push(innerType);\n                    }\n                    else {\n                        return null;\n                    }\n                }\n            },\n            leave: function (node) {\n                if (node.typeCondition) {\n                    var innerType = schema.getType(node.typeCondition.name.value);\n                    if (innerType) {\n                        typeStack.pop();\n                    }\n                    else {\n                        return null;\n                    }\n                }\n            },\n        },\n        _a[graphql_1.Kind.VARIABLE] = function (node) {\n            usedVariables.push(node.name.value);\n        },\n        _a));\n    return {\n        selectionSet: filteredSelectionSet,\n        usedFragments: usedFragments,\n        usedVariables: usedVariables,\n    };\n    var _a;\n}\nfunction resolveType(type) {\n    var lastType = type;\n    while (lastType instanceof graphql_1.GraphQLNonNull ||\n        lastType instanceof graphql_1.GraphQLList) {\n        lastType = lastType.ofType;\n    }\n    return lastType;\n}\nfunction implementsAbstractType(parent, child, bail) {\n    if (bail === void 0) { bail = false; }\n    if (parent === child) {\n        return true;\n    }\n    else if (parent instanceof graphql_1.GraphQLInterfaceType &&\n        child instanceof graphql_1.GraphQLObjectType) {\n        return child.getInterfaces().indexOf(parent) !== -1;\n    }\n    else if (parent instanceof graphql_1.GraphQLInterfaceType &&\n        child instanceof graphql_1.GraphQLInterfaceType) {\n        return true;\n    }\n    else if (parent instanceof graphql_1.GraphQLUnionType &&\n        child instanceof graphql_1.GraphQLObjectType) {\n        return parent.getTypes().indexOf(child) !== -1;\n    }\n    else if (parent instanceof graphql_1.GraphQLObjectType && !bail) {\n        return implementsAbstractType(child, parent, true);\n    }\n    return false;\n}\nfunction typeToAst(type) {\n    if (type instanceof graphql_1.GraphQLNonNull) {\n        var innerType = typeToAst(type.ofType);\n        if (innerType.kind === graphql_1.Kind.LIST_TYPE ||\n            innerType.kind === graphql_1.Kind.NAMED_TYPE) {\n            return {\n                kind: graphql_1.Kind.NON_NULL_TYPE,\n                type: innerType,\n            };\n        }\n        else {\n            throw new Error('Incorrent inner non-null type');\n        }\n    }\n    else if (type instanceof graphql_1.GraphQLList) {\n        return {\n            kind: graphql_1.Kind.LIST_TYPE,\n            type: typeToAst(type.ofType),\n        };\n    }\n    else {\n        return {\n            kind: graphql_1.Kind.NAMED_TYPE,\n            name: {\n                kind: graphql_1.Kind.NAME,\n                value: type.toString(),\n            },\n        };\n    }\n}\nfunction union() {\n    var arrays = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        arrays[_i] = arguments[_i];\n    }\n    var cache = {};\n    var result = [];\n    arrays.forEach(function (array) {\n        array.forEach(function (item) {\n            if (!cache[item]) {\n                cache[item] = true;\n                result.push(item);\n            }\n        });\n    });\n    return result;\n}\nfunction difference(from) {\n    var arrays = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        arrays[_i - 1] = arguments[_i];\n    }\n    var cache = {};\n    arrays.forEach(function (array) {\n        array.forEach(function (item) {\n            cache[item] = true;\n        });\n    });\n    return from.filter(function (item) { return !cache[item]; });\n}\n//# sourceMappingURL=delegateToSchema.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql-tools/dist/stitching/delegateToSchema.js\n// module id = 100\n// module chunks = 0","'use strict';\n\nmodule.exports = levenshtein;\n\n/* eslint-disable no-nested-ternary */\n\nvar cache = [];\nvar codes = [];\n\nfunction levenshtein(value, other, insensitive) {\n  var length;\n  var lengthOther;\n  var code;\n  var result;\n  var distance;\n  var distanceOther;\n  var index;\n  var indexOther;\n\n  if (value === other) {\n    return 0;\n  }\n\n  length = value.length;\n  lengthOther = other.length;\n\n  if (length === 0) {\n    return lengthOther;\n  }\n\n  if (lengthOther === 0) {\n    return length;\n  }\n\n  if (insensitive) {\n    value = value.toLowerCase();\n    other = other.toLowerCase();\n  }\n\n  index = 0;\n\n  while (index < length) {\n    codes[index] = value.charCodeAt(index);\n    cache[index] = ++index;\n  }\n\n  indexOther = 0;\n\n  while (indexOther < lengthOther) {\n    code = other.charCodeAt(indexOther);\n    result = distance = indexOther++;\n    index = -1;\n\n    while (++index < length) {\n      distanceOther = code === codes[index] ? distance : distance + 1;\n      distance = cache[index];\n      cache[index] = result = distance > result ?\n        distanceOther > result ? result + 1 : distanceOther :\n        distanceOther > distance ? distance + 1 : distanceOther;\n    }\n  }\n\n  return result;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/levenshtein-edit-distance/index.js\n// module id = 101\n// module chunks = 0","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/events/events.js\n// module id = 102\n// module chunks = 0","import { createWorker, handleSubscriptions } from 'apollo-link-webworker';\n\nimport { schema } from './graphql/schema';\nimport { pubsub } from './graphql/subscriptions';\nimport { context } from './graphql/client-context';\n\ncreateWorker({\n  schema,\n  context\n});\n\nself.onmessage = message => handleSubscriptions({\n  self,\n  message,\n  schema,\n  context,\n  pubsub,\n});\n\n\n\n// WEBPACK FOOTER //\n// ./src/worker.ts","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('apollo-link'), require('subscriptions-transport-ws'), require('promise-worker'), require('graphql'), require('iterall')) :\n\ttypeof define === 'function' && define.amd ? define(['exports', 'apollo-link', 'subscriptions-transport-ws', 'promise-worker', 'graphql', 'iterall'], factory) :\n\t(factory((global.webWorkerLink = {}),global.apolloLink,global.subscriptionsTransportWs,global.PromiseWorker,global.graphql,global.iterall));\n}(this, (function (exports,apolloLink,subscriptionsTransportWs,PromiseWorker,graphql,iterall) { 'use strict';\n\nPromiseWorker = PromiseWorker && PromiseWorker.hasOwnProperty('default') ? PromiseWorker['default'] : PromiseWorker;\n\nvar GQL_START = 'start';\nvar GQL_DATA = 'data';\nvar GQL_ERROR = 'error';\nvar GQL_COMPLETE = 'complete';\n\nvar MessageTypes = Object.freeze({\n\tGQL_START: GQL_START,\n\tGQL_DATA: GQL_DATA,\n\tGQL_ERROR: GQL_ERROR,\n\tGQL_COMPLETE: GQL_COMPLETE\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\n\n\n\n\n\n\n\n\n\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n\n\n\n\nvar defineProperty = function (obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};\n\n\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\n\n\n\n\n\n\n\n\n\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nvar PromiseWorkerLink = function (_ApolloLink) {\n  inherits(PromiseWorkerLink, _ApolloLink);\n\n  function PromiseWorkerLink(_ref) {\n    var worker = _ref.worker;\n    classCallCheck(this, PromiseWorkerLink);\n\n    var _this = possibleConstructorReturn(this, (PromiseWorkerLink.__proto__ || Object.getPrototypeOf(PromiseWorkerLink)).call(this));\n\n    _this.promiseWorker = null;\n\n    _this.promiseWorker = new PromiseWorker(worker);\n    return _this;\n  }\n\n  createClass(PromiseWorkerLink, [{\n    key: 'request',\n    value: function request(operation) {\n      var _this2 = this;\n\n      return new apolloLink.Observable(function (observer) {\n        _this2.promiseWorker.postMessage(operation).then(function (data) {\n          observer.next(data);\n          observer.complete();\n        }).catch(observer.error.bind(observer));\n      });\n    }\n  }]);\n  return PromiseWorkerLink;\n}(apolloLink.ApolloLink);\n\nvar createWorkerInterface = function createWorkerInterface(_ref2) {\n  var worker = _ref2.worker;\n\n  var WorkerInterface = function () {\n    function WorkerInterface(url, protocol) {\n      classCallCheck(this, WorkerInterface);\n\n      this.url = url;\n      this.protocol = protocol;\n      this.readyState = WorkerInterface.OPEN; // webworker is always opened\n    }\n\n    createClass(WorkerInterface, [{\n      key: 'close',\n      value: function close() {\n        console.log('closing noop');\n      }\n    }, {\n      key: 'send',\n      value: function send(serializedMessage) {\n        worker.postMessage(serializedMessage);\n      }\n    }, {\n      key: 'onerror',\n      set: function set$$1(fn) {\n        worker.onerror = fn;\n      }\n    }, {\n      key: 'onmessage',\n      set: function set$$1(fn) {\n        worker.onmessage = function (_ref3) {\n          var data = _ref3.data;\n\n          var d = JSON.parse(data);\n          if (Object.keys(MessageTypes).map(function (k) {\n            return MessageTypes[k];\n          }).indexOf(d.type) !== -1) {\n            fn({ data: data });\n          }\n        };\n      }\n    }]);\n    return WorkerInterface;\n  }();\n\n  WorkerInterface.CLOSED = 'CLOSED';\n  WorkerInterface.OPEN = 'OPEN';\n  WorkerInterface.CONNECTING = 'CONNECTING';\n\n  return WorkerInterface;\n};\n\nvar SubscriptionWorkerLink = function (_ApolloLink2) {\n  inherits(SubscriptionWorkerLink, _ApolloLink2);\n\n  function SubscriptionWorkerLink(_ref4) {\n    var worker = _ref4.worker;\n    classCallCheck(this, SubscriptionWorkerLink);\n\n    var _this3 = possibleConstructorReturn(this, (SubscriptionWorkerLink.__proto__ || Object.getPrototypeOf(SubscriptionWorkerLink)).call(this));\n\n    _this3.worker = null;\n    _this3.subscriptionClient = null;\n\n    _this3.worker = worker;\n    _this3.subscriptionClient = new subscriptionsTransportWs.SubscriptionClient(null, {}, createWorkerInterface({ worker: worker }));\n    return _this3;\n  }\n\n  createClass(SubscriptionWorkerLink, [{\n    key: 'request',\n    value: function request(operation) {\n      return this.subscriptionClient.request(operation);\n    }\n  }]);\n  return SubscriptionWorkerLink;\n}(apolloLink.ApolloLink);\n\n// TODO: quick hack\nvar isSubscription = function isSubscription(operation) {\n  return operation.query.definitions[0].operation === 'subscription';\n};\n\nvar createWebWorkerLink = function createWebWorkerLink(_ref5) {\n  var worker = _ref5.worker;\n  return apolloLink.ApolloLink.split(isSubscription, new SubscriptionWorkerLink({ worker: worker }), new PromiseWorkerLink({ worker: worker }));\n};\n\nvar _this = undefined;\n\nvar registerPromiseWorker = require('promise-worker/register');\n\nvar createEmptyIterable = function createEmptyIterable() {\n  return defineProperty({\n    next: function next() {\n      return Promise.resolve({ value: undefined, done: true });\n    },\n    return: function _return() {\n      return Promise.resolve({ value: undefined, done: true });\n    },\n    throw: function _throw(e) {\n      return Promise.reject(e);\n    }\n  }, iterall.$$asyncIterator, function () {\n    return _this;\n  });\n};\n\nvar createIterableFromPromise = function createIterableFromPromise(promise) {\n  var isResolved = false;\n\n  return promise.then(function (value) {\n    if (iterall.isAsyncIterable(value)) {\n      return value;\n    }\n\n    return defineProperty({\n      next: function next() {\n        if (!isResolved) {\n          isResolved = true;\n          return Promise.resolve({ value: value, done: false });\n        }\n        return Promise.resolve({ value: undefined, done: true });\n      },\n      return: function _return() {\n        isResolved = true;\n        return Promise.resolve({ value: undefined, done: true });\n      },\n      throw: function _throw(e) {\n        isResolved = true;\n        return Promise.reject(e);\n      }\n    }, iterall.$$asyncIterator, function () {\n      return _this;\n    });\n  });\n};\n\nvar createWorker = function createWorker(_ref3) {\n  var schema = _ref3.schema,\n      context = _ref3.context,\n      _ref3$beforeRequest = _ref3.beforeRequest,\n      beforeRequest = _ref3$beforeRequest === undefined ? function () {\n    return Promise.resolve();\n  } : _ref3$beforeRequest;\n  return registerPromiseWorker(function (request) {\n    if (request) {\n      return beforeRequest(request).then(function () {\n        return graphql.execute(schema, request.query, {}, Object.assign({}, request.context || {}, context), request.variables, request.operationName);\n      });\n    }\n    return Promise.resolve();\n  });\n};\n\nvar _onMessage = void 0;\n\nvar getOnMessage = function getOnMessage(_ref4) {\n  var schema = _ref4.schema,\n      context = _ref4.context;\n\n  if (_onMessage) return _onMessage;\n\n  var sendMessage = function sendMessage(opId, type, payload) {\n    var message = {\n      type: type,\n      id: opId,\n      payload: payload\n    };\n    self.postMessage(JSON.stringify(message));\n  };\n\n  var sendError = function sendError(opId, errorPayload, overrideDefaultErrorType) {\n    sendMessage(opId, GQL_ERROR, errorPayload);\n  };\n\n  var connectionContext = {\n    isLegacy: false,\n    operations: {}\n  };\n\n  var unsubscribe = function unsubscribe(opId) {\n    if (connectionContext.operations && connectionContext.operations[opId]) {\n      if (connectionContext.operations[opId].return) {\n        connectionContext.operations[opId].return();\n      }\n\n      delete connectionContext.operations[opId];\n    }\n  };\n\n  _onMessage = function _onMessage(workerMessage) {\n    var message = JSON.parse(workerMessage.data);\n    var opId = message.id;\n    if (typeof opId !== 'undefined') {\n      switch (message.type) {\n        case GQL_START:\n          // if we already have a subscription with this id, unsubscribe from it first\n          if (connectionContext.operations && connectionContext.operations[opId]) {\n            unsubscribe(opId);\n          }\n\n          var baseParams = {\n            query: message.payload.query,\n            variables: message.payload.variables,\n            operationName: message.payload.operationName,\n            context: context,\n            formatResponse: undefined,\n            formatError: undefined,\n            callback: undefined\n          };\n          var promisedParams = Promise.resolve(baseParams);\n\n          // set an initial mock subscription to only registering opId\n          connectionContext.operations[opId] = createEmptyIterable();\n\n          promisedParams.then(function (params) {\n            if ((typeof params === 'undefined' ? 'undefined' : _typeof(params)) !== 'object') {\n              var error = 'Invalid params returned from onOperation! return values must be an object!';\n              throw new Error(error);\n            }\n            var document = typeof baseParams.query !== 'string' ? baseParams.query : graphql.parse(baseParams.query);\n            var executionIterable = void 0;\n            var validationErrors = graphql.validate(schema, document, graphql.specifiedRules);\n            if (validationErrors.length > 0) {\n              executionIterable = Promise.resolve(createIterableFromPromise(Promise.resolve({ errors: validationErrors })));\n            } else {\n              var executor = graphql.subscribe;\n              var promiseOrIterable = executor(schema, document, {}, params.context, params.variables, params.operationName);\n\n              if (!iterall.isAsyncIterable(promiseOrIterable) && promiseOrIterable instanceof Promise) {\n                executionIterable = promiseOrIterable;\n              } else if (iterall.isAsyncIterable(promiseOrIterable)) {\n                executionIterable = Promise.resolve(promiseOrIterable);\n              } else {\n                throw new Error('Invalid `execute` return type! Only Promise or AsyncIterable are valid values!');\n              }\n            }\n\n            return executionIterable.then(function (ei) {\n              return {\n                executionIterable: iterall.isAsyncIterable(ei) ? ei : iterall.createAsyncIterator([ei]),\n                params: params\n              };\n            });\n          }).then(function (_ref5) {\n            var executionIterable = _ref5.executionIterable,\n                params = _ref5.params;\n\n            iterall.forAwaitEach(iterall.createAsyncIterator(executionIterable), function (value) {\n              var result = value;\n              if (params.formatResponse) {\n                try {\n                  result = params.formatResponse(value, params);\n                } catch (err) {\n                  console.error('Error in formatError function:', err);\n                }\n              }\n              sendMessage(opId, GQL_DATA, result);\n            }).then(function () {\n              sendMessage(opId, GQL_COMPLETE, null);\n            }).catch(function (e) {\n              var error = e;\n\n              if (params.formatError) {\n                try {\n                  error = params.formatError(e, params);\n                } catch (err) {\n                  console.error('Error in formatError function: ', err);\n                }\n              }\n\n              // plain Error object cannot be JSON stringified.\n              if (Object.keys(e).length === 0) {\n                error = { name: e.name, message: e.message };\n              }\n\n              sendError(opId, error);\n            });\n\n            return executionIterable;\n          }).then(function (subscription) {\n            connectionContext.operations[opId] = subscription;\n          }).catch(function (e) {\n            if (e.errors) {\n              sendMessage(opId, GQL_DATA, { errors: e.errors });\n            } else {\n              sendError(opId, { message: e.message });\n            }\n            unsubscribe(opId);\n            return;\n          });\n          break;\n\n        default:\n          sendError(opId, { message: 'Invalid message type!' });\n      }\n    }\n  };\n\n  return _onMessage;\n};\n\nvar handleSubscriptions = function handleSubscriptions(_ref6) {\n  var self = _ref6.self,\n      message = _ref6.message,\n      schema = _ref6.schema,\n      context = _ref6.context;\n  return getOnMessage({ schema: schema, context: context })(message);\n};\n\nexports.PromiseWorkerLink = PromiseWorkerLink;\nexports.createWorkerInterface = createWorkerInterface;\nexports.SubscriptionWorkerLink = SubscriptionWorkerLink;\nexports.isSubscription = isSubscription;\nexports.createWebWorkerLink = createWebWorkerLink;\nexports.createWorker = createWorker;\nexports.handleSubscriptions = handleSubscriptions;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=bundle.umd.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/apollo-link-webworker/dist/bundle.umd.js\n// module id = 105\n// module chunks = 0","import Observable from 'zen-observable-ts';\nimport { validateOperation, isTerminating, LinkError, transformOperation, createOperation, } from './linkUtils';\nvar passthrough = function (op, forward) { return (forward ? forward(op) : Observable.of()); };\nvar toLink = function (handler) {\n    return typeof handler === 'function' ? new ApolloLink(handler) : handler;\n};\nexport var empty = function () {\n    return new ApolloLink(function (op, forward) { return Observable.of(); });\n};\nexport var from = function (links) {\n    if (links.length === 0)\n        return empty();\n    return links.map(toLink).reduce(function (x, y) { return x.concat(y); });\n};\nexport var split = function (test, left, right) {\n    if (right === void 0) { right = new ApolloLink(passthrough); }\n    var leftLink = toLink(left);\n    var rightLink = toLink(right);\n    if (isTerminating(leftLink) && isTerminating(rightLink)) {\n        return new ApolloLink(function (operation) {\n            return test(operation)\n                ? leftLink.request(operation) || Observable.of()\n                : rightLink.request(operation) || Observable.of();\n        });\n    }\n    else {\n        return new ApolloLink(function (operation, forward) {\n            return test(operation)\n                ? leftLink.request(operation, forward) || Observable.of()\n                : rightLink.request(operation, forward) || Observable.of();\n        });\n    }\n};\nexport var concat = function (first, second) {\n    var firstLink = toLink(first);\n    if (isTerminating(firstLink)) {\n        console.warn(new LinkError(\"You are calling concat on a terminating link, which will have no effect\", firstLink));\n        return firstLink;\n    }\n    var nextLink = toLink(second);\n    if (isTerminating(nextLink)) {\n        return new ApolloLink(function (operation) {\n            return firstLink.request(operation, function (op) { return nextLink.request(op) || Observable.of(); }) || Observable.of();\n        });\n    }\n    else {\n        return new ApolloLink(function (operation, forward) {\n            return (firstLink.request(operation, function (op) {\n                return nextLink.request(op, forward) || Observable.of();\n            }) || Observable.of());\n        });\n    }\n};\nvar ApolloLink = (function () {\n    function ApolloLink(request) {\n        if (request)\n            this.request = request;\n    }\n    ApolloLink.prototype.split = function (test, left, right) {\n        if (right === void 0) { right = new ApolloLink(passthrough); }\n        return this.concat(split(test, left, right));\n    };\n    ApolloLink.prototype.concat = function (next) {\n        return concat(this, next);\n    };\n    ApolloLink.prototype.request = function (operation, forward) {\n        throw new Error('request is not implemented');\n    };\n    ApolloLink.empty = empty;\n    ApolloLink.from = from;\n    ApolloLink.split = split;\n    ApolloLink.execute = execute;\n    return ApolloLink;\n}());\nexport { ApolloLink };\nexport function execute(link, operation) {\n    return (link.request(createOperation(operation.context, transformOperation(validateOperation(operation)))) || Observable.of());\n}\n//# sourceMappingURL=link.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/apollo-link/lib/link.js\n// module id = 106\n// module chunks = 0","module.exports = require(\"./zen-observable.js\").Observable;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/zen-observable/index.js\n// module id = 107\n// module chunks = 0","'use strict'; (function(fn, name) { if (typeof exports !== \"undefined\") { fn(exports, module); } else if (typeof self !== \"undefined\") { var e = name === \"*\" ? self : (name ? self[name] = {} : {}); fn(e, { exports: e }); } })(function(exports, module) { // === Symbol Support ===\n\nfunction hasSymbol(name) {\n  return typeof Symbol === \"function\" && Boolean(Symbol[name]);\n}\n\nfunction getSymbol(name) {\n  return hasSymbol(name) ? Symbol[name] : \"@@\" + name;\n}\n\n// Ponyfill Symbol.observable for interoperability with other libraries\nif (typeof Symbol === \"function\" && !Symbol.observable) {\n  Symbol.observable = Symbol(\"observable\");\n}\n\n// === Abstract Operations ===\n\nfunction hostReportError(e) {\n  setTimeout(function() { throw e });\n}\n\nfunction getMethod(obj, key) {\n  var value = obj[key];\n\n  if (value == null)\n    return undefined;\n\n  if (typeof value !== \"function\")\n    throw new TypeError(value + \" is not a function\");\n\n  return value;\n}\n\nfunction getSpecies(obj) {\n  var ctor = obj.constructor;\n  if (ctor !== undefined) {\n    ctor = ctor[getSymbol(\"species\")];\n    if (ctor === null) {\n      ctor = undefined;\n    }\n  }\n  return ctor !== undefined ? ctor : Observable;\n}\n\nfunction addMethods(target, methods) {\n  Object.keys(methods).forEach(function(k) {\n    var desc = Object.getOwnPropertyDescriptor(methods, k);\n    desc.enumerable = false;\n    Object.defineProperty(target, k, desc);\n  });\n}\n\nfunction cleanupSubscription(subscription) {\n  // Assert:  observer._observer is undefined\n\n  var cleanup = subscription._cleanup;\n\n  if (!cleanup)\n    return;\n\n  // Drop the reference to the cleanup function so that we won't call it\n  // more than once\n  subscription._cleanup = undefined;\n\n  // Call the cleanup function\n  try { cleanup() }\n  catch (e) { hostReportError(e) }\n}\n\nfunction subscriptionClosed(subscription) {\n  return subscription._observer === undefined;\n}\n\nfunction closeSubscription(subscription) {\n  if (subscriptionClosed(subscription))\n    return;\n\n  subscription._observer = undefined;\n  cleanupSubscription(subscription);\n}\n\nfunction cleanupFromSubscription(subscription) {\n  return function() { subscription.unsubscribe() };\n}\n\nfunction Subscription(observer, subscriber) {\n  // Assert: subscriber is callable\n\n  // The observer must be an object\n  if (Object(observer) !== observer)\n    throw new TypeError(\"Observer must be an object\");\n\n  this._cleanup = undefined;\n  this._observer = observer;\n\n  try {\n    var start$0 = getMethod(observer, \"start\");\n    if (start$0) start$0.call(observer, this);\n  } catch (e) {\n    hostReportError(e);\n  }\n\n  if (subscriptionClosed(this))\n    return;\n\n  observer = new SubscriptionObserver(this);\n\n  try {\n    // Call the subscriber function\n    var cleanup$0 = subscriber.call(undefined, observer);\n\n    // The return value must be undefined, null, a subscription object, or a function\n    if (cleanup$0 != null) {\n      if (typeof cleanup$0.unsubscribe === \"function\")\n        cleanup$0 = cleanupFromSubscription(cleanup$0);\n      else if (typeof cleanup$0 !== \"function\")\n        throw new TypeError(cleanup$0 + \" is not a function\");\n\n      this._cleanup = cleanup$0;\n    }\n  } catch (e) {\n    // If an error occurs during startup, then attempt to send the error\n    // to the observer\n    observer.error(e);\n    return;\n  }\n\n  // If the stream is already finished, then perform cleanup\n  if (subscriptionClosed(this))\n    cleanupSubscription(this);\n}\n\naddMethods(Subscription.prototype = {}, {\n  get closed() { return subscriptionClosed(this) },\n  unsubscribe: function() { closeSubscription(this) },\n});\n\nfunction SubscriptionObserver(subscription) {\n  this._subscription = subscription;\n}\n\naddMethods(SubscriptionObserver.prototype = {}, {\n\n  get closed() { return subscriptionClosed(this._subscription) },\n\n  next: function(value) {\n    var subscription = this._subscription;\n\n    // If the stream is closed, then return undefined\n    if (subscriptionClosed(subscription))\n      return;\n\n    var observer = subscription._observer;\n\n    try {\n      // If the observer has a \"next\" method, send the next value\n      var m$0 = getMethod(observer, \"next\");\n      if (m$0) m$0.call(observer, value);\n    } catch (e) {\n      hostReportError(e);\n    }\n  },\n\n  error: function(value) {\n    var subscription = this._subscription;\n\n    // If the stream is closed, throw the error to the caller\n    if (subscriptionClosed(subscription)) {\n      hostReportError(value);\n      return;\n    }\n\n    var observer = subscription._observer;\n    subscription._observer = undefined;\n\n    try {\n      var m$1 = getMethod(observer, \"error\");\n      if (m$1) m$1.call(observer, value);\n      else throw value;\n    } catch (e) {\n      hostReportError(e);\n    }\n\n    cleanupSubscription(subscription);\n  },\n\n  complete: function() {\n    var subscription = this._subscription;\n\n    if (subscriptionClosed(subscription))\n      return;\n\n    var observer = subscription._observer;\n    subscription._observer = undefined;\n\n    try {\n      var m$2 = getMethod(observer, \"complete\");\n      if (m$2) m$2.call(observer);\n    } catch (e) {\n      hostReportError(e);\n    }\n\n    cleanupSubscription(subscription);\n  },\n\n});\n\nfunction Observable(subscriber) {\n  // Constructor cannot be called as a function\n  if (!(this instanceof Observable))\n    throw new TypeError(\"Observable cannot be called as a function\");\n\n  // The stream subscriber must be a function\n  if (typeof subscriber !== \"function\")\n    throw new TypeError(\"Observable initializer must be a function\");\n\n  this._subscriber = subscriber;\n}\n\naddMethods(Observable.prototype, {\n\n  subscribe: function(observer) { for (var args = [], __$0 = 1; __$0 < arguments.length; ++__$0) args.push(arguments[__$0]); \n    if (typeof observer === 'function') {\n      observer = {\n        next: observer,\n        error: args[0],\n        complete: args[1],\n      };\n    } else if (typeof observer !== 'object' || observer === null) {\n      observer = {};\n    }\n\n    return new Subscription(observer, this._subscriber);\n  },\n\n  forEach: function(fn) { var __this = this; \n    return new Promise(function(resolve, reject) {\n      if (typeof fn !== \"function\")\n        return Promise.reject(new TypeError(fn + \" is not a function\"));\n\n      __this.subscribe({\n        _subscription: null,\n\n        start: function(subscription) {\n          if (Object(subscription) !== subscription)\n            throw new TypeError(subscription + \" is not an object\");\n\n          this._subscription = subscription;\n        },\n\n        next: function(value) {\n          var subscription = this._subscription;\n\n          if (subscription.closed)\n            return;\n\n          try {\n            fn(value);\n          } catch (err) {\n            reject(err);\n            subscription.unsubscribe();\n          }\n        },\n\n        error: reject,\n        complete: resolve,\n      });\n    });\n  },\n\n  map: function(fn) { var __this = this; \n    if (typeof fn !== \"function\")\n      throw new TypeError(fn + \" is not a function\");\n\n    var C = getSpecies(this);\n\n    return new C(function(observer) { return __this.subscribe({\n      next: function(value) {\n        if (observer.closed)\n          return;\n\n        try { value = fn(value) }\n        catch (e) { return observer.error(e) }\n\n        observer.next(value);\n      },\n\n      error: function(e) { observer.error(e) },\n      complete: function() { observer.complete() },\n    }); });\n  },\n\n  filter: function(fn) { var __this = this; \n    if (typeof fn !== \"function\")\n      throw new TypeError(fn + \" is not a function\");\n\n    var C = getSpecies(this);\n\n    return new C(function(observer) { return __this.subscribe({\n      next: function(value) {\n        if (observer.closed)\n          return;\n\n        try { if (!fn(value)) return }\n        catch (e) { return observer.error(e) }\n\n        observer.next(value);\n      },\n\n      error: function(e) { observer.error(e) },\n      complete: function() { observer.complete() },\n    }); });\n  },\n\n  reduce: function(fn) { var __this = this; \n    if (typeof fn !== \"function\")\n      throw new TypeError(fn + \" is not a function\");\n\n    var C = getSpecies(this);\n    var hasSeed = arguments.length > 1;\n    var hasValue = false;\n    var seed = arguments[1];\n    var acc = seed;\n\n    return new C(function(observer) { return __this.subscribe({\n\n      next: function(value) {\n        if (observer.closed)\n          return;\n\n        var first = !hasValue;\n        hasValue = true;\n\n        if (!first || hasSeed) {\n          try { acc = fn(acc, value) }\n          catch (e) { return observer.error(e) }\n        } else {\n          acc = value;\n        }\n      },\n\n      error: function(e) { observer.error(e) },\n\n      complete: function() {\n        if (!hasValue && !hasSeed) {\n          return observer.error(new TypeError(\"Cannot reduce an empty sequence\"));\n        }\n\n        observer.next(acc);\n        observer.complete();\n      },\n\n    }); });\n  },\n\n});\n\nObject.defineProperty(Observable.prototype, getSymbol(\"observable\"), {\n  value: function() { return this },\n  writable: true,\n  configurable: true,\n});\n\naddMethods(Observable, {\n\n  from: function(x) {\n    var C = typeof this === \"function\" ? this : Observable;\n\n    if (x == null)\n      throw new TypeError(x + \" is not an object\");\n\n    var method = getMethod(x, getSymbol(\"observable\"));\n\n    if (method) {\n      var observable$0 = method.call(x);\n\n      if (Object(observable$0) !== observable$0)\n        throw new TypeError(observable$0 + \" is not an object\");\n\n      if (observable$0.constructor === C)\n        return observable$0;\n\n      return new C(function(observer) { return observable$0.subscribe(observer); });\n    }\n\n    if (hasSymbol(\"iterator\") && (method = getMethod(x, getSymbol(\"iterator\")))) {\n      return new C(function(observer) {\n        for (var __$0 = (method.call(x))[Symbol.iterator](), __$1; __$1 = __$0.next(), !__$1.done;) { var item$0 = __$1.value; \n          observer.next(item$0);\n          if (observer.closed)\n            return;\n        }\n\n        observer.complete();\n      });\n    }\n\n    if (Array.isArray(x)) {\n      return new C(function(observer) {\n        for (var i$0 = 0; i$0 < x.length; ++i$0) {\n          observer.next(x[i$0]);\n          if (observer.closed)\n            return;\n        }\n\n        observer.complete();\n      });\n    }\n\n    throw new TypeError(x + \" is not observable\");\n  },\n\n  of: function() { for (var items = [], __$0 = 0; __$0 < arguments.length; ++__$0) items.push(arguments[__$0]); \n    var C = typeof this === \"function\" ? this : Observable;\n\n    return new C(function(observer) {\n      for (var i$1 = 0; i$1 < items.length; ++i$1) {\n        observer.next(items[i$1]);\n        if (observer.closed)\n          return;\n      }\n\n      observer.complete();\n    });\n  },\n\n});\n\nObject.defineProperty(Observable, getSymbol(\"species\"), {\n  get: function() { return this },\n  configurable: true,\n});\n\nObject.defineProperty(Observable, \"extensions\", {\n  value: {\n    observableSymbol: getSymbol(\"observable\"),\n    setHostReportError: function(fn) { hostReportError = fn },\n  },\n});\n\nexports.Observable = Observable;\n\n\n}, \"*\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/zen-observable/zen-observable.js\n// module id = 108\n// module chunks = 0","module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/module.js\n// module id = 109\n// module chunks = 0","export * from './directives';\nexport * from './fragments';\nexport * from './getFromAST';\nexport * from './transform';\nexport * from './storeUtils';\nexport * from './util/assign';\nexport * from './util/cloneDeep';\nexport * from './util/environment';\nexport * from './util/errorHandling';\nexport * from './util/isEqual';\nexport * from './util/maybeDeepFreeze';\nexport * from './util/warnOnce';\n//# sourceMappingURL=index.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/apollo-utilities/lib/index.js\n// module id = 110\n// module chunks = 0","import { argumentsObjectFromField } from './storeUtils';\nexport function getDirectiveInfoFromField(field, variables) {\n    if (field.directives && field.directives.length) {\n        var directiveObj_1 = {};\n        field.directives.forEach(function (directive) {\n            directiveObj_1[directive.name.value] = argumentsObjectFromField(directive, variables);\n        });\n        return directiveObj_1;\n    }\n    return null;\n}\nexport function shouldInclude(selection, variables) {\n    if (variables === void 0) { variables = {}; }\n    if (!selection.directives) {\n        return true;\n    }\n    var res = true;\n    selection.directives.forEach(function (directive) {\n        // TODO should move this validation to GraphQL validation once that's implemented.\n        if (directive.name.value !== 'skip' && directive.name.value !== 'include') {\n            // Just don't worry about directives we don't understand\n            return;\n        }\n        //evaluate the \"if\" argument and skip (i.e. return undefined) if it evaluates to true.\n        var directiveArguments = directive.arguments || [];\n        var directiveName = directive.name.value;\n        if (directiveArguments.length !== 1) {\n            throw new Error(\"Incorrect number of arguments for the @\" + directiveName + \" directive.\");\n        }\n        var ifArgument = directiveArguments[0];\n        if (!ifArgument.name || ifArgument.name.value !== 'if') {\n            throw new Error(\"Invalid argument for the @\" + directiveName + \" directive.\");\n        }\n        var ifValue = directiveArguments[0].value;\n        var evaledValue = false;\n        if (!ifValue || ifValue.kind !== 'BooleanValue') {\n            // means it has to be a variable value if this is a valid @skip or @include directive\n            if (ifValue.kind !== 'Variable') {\n                throw new Error(\"Argument for the @\" + directiveName + \" directive must be a variable or a boolean value.\");\n            }\n            else {\n                evaledValue = variables[ifValue.name.value];\n                if (evaledValue === undefined) {\n                    throw new Error(\"Invalid variable referenced in @\" + directiveName + \" directive.\");\n                }\n            }\n        }\n        else {\n            evaledValue = ifValue.value;\n        }\n        if (directiveName === 'skip') {\n            evaledValue = !evaledValue;\n        }\n        if (!evaledValue) {\n            res = false;\n        }\n    });\n    return res;\n}\nexport function flattenSelections(selection) {\n    if (!selection.selectionSet ||\n        !(selection.selectionSet.selections.length > 0))\n        return [selection];\n    return [selection].concat(selection.selectionSet.selections\n        .map(function (selectionNode) {\n        return [selectionNode].concat(flattenSelections(selectionNode));\n    })\n        .reduce(function (selections, selected) { return selections.concat(selected); }, []));\n}\nvar added = new Map();\nexport function getDirectiveNames(doc) {\n    var cached = added.get(doc);\n    if (cached)\n        return cached;\n    // operation => [names of directives];\n    var directives = doc.definitions\n        .filter(function (definition) {\n        return definition.selectionSet && definition.selectionSet.selections;\n    })\n        .map(function (x) { return flattenSelections(x); })\n        .reduce(function (selections, selected) { return selections.concat(selected); }, [])\n        .filter(function (selection) {\n        return selection.directives && selection.directives.length > 0;\n    })\n        .map(function (selection) { return selection.directives; })\n        .reduce(function (directives, directive) { return directives.concat(directive); }, [])\n        .map(function (directive) { return directive.name.value; });\n    added.set(doc, directives);\n    return directives;\n}\nexport function hasDirectives(names, doc) {\n    return getDirectiveNames(doc).some(function (name) { return names.indexOf(name) > -1; });\n}\n//# sourceMappingURL=directives.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/apollo-utilities/lib/directives.js\n// module id = 111\n// module chunks = 0","var __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\n/**\n * Returns a query document which adds a single query operation that only\n * spreads the target fragment inside of it.\n *\n * So for example a document of:\n *\n * ```graphql\n * fragment foo on Foo { a b c }\n * ```\n *\n * Turns into:\n *\n * ```graphql\n * { ...foo }\n *\n * fragment foo on Foo { a b c }\n * ```\n *\n * The target fragment will either be the only fragment in the document, or a\n * fragment specified by the provided `fragmentName`. If there is more then one\n * fragment, but a `fragmentName` was not defined then an error will be thrown.\n */\nexport function getFragmentQueryDocument(document, fragmentName) {\n    var actualFragmentName = fragmentName;\n    // Build an array of all our fragment definitions that will be used for\n    // validations. We also do some validations on the other definitions in the\n    // document while building this list.\n    var fragments = [];\n    document.definitions.forEach(function (definition) {\n        // Throw an error if we encounter an operation definition because we will\n        // define our own operation definition later on.\n        if (definition.kind === 'OperationDefinition') {\n            throw new Error(\"Found a \" + definition.operation + \" operation\" + (definition.name ? \" named '\" + definition.name.value + \"'\" : '') + \". \" +\n                'No operations are allowed when using a fragment as a query. Only fragments are allowed.');\n        }\n        // Add our definition to the fragments array if it is a fragment\n        // definition.\n        if (definition.kind === 'FragmentDefinition') {\n            fragments.push(definition);\n        }\n    });\n    // If the user did not give us a fragment name then let us try to get a\n    // name from a single fragment in the definition.\n    if (typeof actualFragmentName === 'undefined') {\n        if (fragments.length !== 1) {\n            throw new Error(\"Found \" + fragments.length + \" fragments. `fragmentName` must be provided when there is not exactly 1 fragment.\");\n        }\n        actualFragmentName = fragments[0].name.value;\n    }\n    // Generate a query document with an operation that simply spreads the\n    // fragment inside of it.\n    var query = __assign({}, document, { definitions: [\n            {\n                kind: 'OperationDefinition',\n                operation: 'query',\n                selectionSet: {\n                    kind: 'SelectionSet',\n                    selections: [\n                        {\n                            kind: 'FragmentSpread',\n                            name: {\n                                kind: 'Name',\n                                value: actualFragmentName,\n                            },\n                        },\n                    ],\n                },\n            }\n        ].concat(document.definitions) });\n    return query;\n}\n//# sourceMappingURL=fragments.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/apollo-utilities/lib/fragments.js\n// module id = 112\n// module chunks = 0","import { cloneDeep } from './util/cloneDeep';\nimport { checkDocument, getOperationDefinitionOrDie, getFragmentDefinitions, createFragmentMap, } from './getFromAST';\nvar TYPENAME_FIELD = {\n    kind: 'Field',\n    name: {\n        kind: 'Name',\n        value: '__typename',\n    },\n};\nfunction isNotEmpty(op, fragments) {\n    // keep selections that are still valid\n    return (op.selectionSet.selections.filter(function (selectionSet) {\n        // anything that doesn't match the compound filter is okay\n        return !(selectionSet &&\n            // look into fragments to verify they should stay\n            selectionSet.kind === 'FragmentSpread' &&\n            // see if the fragment in the map is valid (recursively)\n            !isNotEmpty(fragments[selectionSet.name.value], fragments));\n    }).length > 0);\n}\nfunction getDirectiveMatcher(directives) {\n    return function directiveMatcher(directive) {\n        return directives.some(function (dir) {\n            if (dir.name && dir.name === directive.name.value)\n                return true;\n            if (dir.test && dir.test(directive))\n                return true;\n            return false;\n        });\n    };\n}\nfunction addTypenameToSelectionSet(selectionSet, isRoot) {\n    if (isRoot === void 0) { isRoot = false; }\n    if (selectionSet.selections) {\n        if (!isRoot) {\n            var alreadyHasThisField = selectionSet.selections.some(function (selection) {\n                return (selection.kind === 'Field' &&\n                    selection.name.value === '__typename');\n            });\n            if (!alreadyHasThisField) {\n                selectionSet.selections.push(TYPENAME_FIELD);\n            }\n        }\n        selectionSet.selections.forEach(function (selection) {\n            // Must not add __typename if we're inside an introspection query\n            if (selection.kind === 'Field') {\n                if (selection.name.value.lastIndexOf('__', 0) !== 0 &&\n                    selection.selectionSet) {\n                    addTypenameToSelectionSet(selection.selectionSet);\n                }\n            }\n            else if (selection.kind === 'InlineFragment') {\n                if (selection.selectionSet) {\n                    addTypenameToSelectionSet(selection.selectionSet);\n                }\n            }\n        });\n    }\n}\nfunction removeDirectivesFromSelectionSet(directives, selectionSet) {\n    if (!selectionSet.selections)\n        return selectionSet;\n    // if any of the directives are set to remove this selectionSet, remove it\n    var agressiveRemove = directives.some(function (dir) { return dir.remove; });\n    selectionSet.selections = selectionSet.selections\n        .map(function (selection) {\n        if (selection.kind !== 'Field' ||\n            !selection ||\n            !selection.directives)\n            return selection;\n        var directiveMatcher = getDirectiveMatcher(directives);\n        var remove;\n        selection.directives = selection.directives.filter(function (directive) {\n            var shouldKeep = !directiveMatcher(directive);\n            if (!remove && !shouldKeep && agressiveRemove)\n                remove = true;\n            return shouldKeep;\n        });\n        return remove ? null : selection;\n    })\n        .filter(function (x) { return !!x; });\n    selectionSet.selections.forEach(function (selection) {\n        if ((selection.kind === 'Field' || selection.kind === 'InlineFragment') &&\n            selection.selectionSet) {\n            removeDirectivesFromSelectionSet(directives, selection.selectionSet);\n        }\n    });\n    return selectionSet;\n}\nexport function removeDirectivesFromDocument(directives, doc) {\n    var docClone = cloneDeep(doc);\n    docClone.definitions.forEach(function (definition) {\n        removeDirectivesFromSelectionSet(directives, definition.selectionSet);\n    });\n    var operation = getOperationDefinitionOrDie(docClone);\n    var fragments = createFragmentMap(getFragmentDefinitions(docClone));\n    return isNotEmpty(operation, fragments) ? docClone : null;\n}\nvar added = new Map();\nexport function addTypenameToDocument(doc) {\n    checkDocument(doc);\n    var cached = added.get(doc);\n    if (cached)\n        return cached;\n    var docClone = cloneDeep(doc);\n    docClone.definitions.forEach(function (definition) {\n        var isRoot = definition.kind === 'OperationDefinition';\n        addTypenameToSelectionSet(definition.selectionSet, isRoot);\n    });\n    added.set(doc, docClone);\n    return docClone;\n}\nvar connectionRemoveConfig = {\n    test: function (directive) {\n        var willRemove = directive.name.value === 'connection';\n        if (willRemove) {\n            if (!directive.arguments ||\n                !directive.arguments.some(function (arg) { return arg.name.value === 'key'; })) {\n                console.warn('Removing an @connection directive even though it does not have a key. ' +\n                    'You may want to use the key parameter to specify a store key.');\n            }\n        }\n        return willRemove;\n    },\n};\nvar removed = new Map();\nexport function removeConnectionDirectiveFromDocument(doc) {\n    checkDocument(doc);\n    var cached = removed.get(doc);\n    if (cached)\n        return cached;\n    var docClone = removeDirectivesFromDocument([connectionRemoveConfig], doc);\n    removed.set(doc, docClone);\n    return docClone;\n}\nfunction hasDirectivesInSelectionSet(directives, selectionSet, nestedCheck) {\n    if (nestedCheck === void 0) { nestedCheck = true; }\n    if (!(selectionSet && selectionSet.selections)) {\n        return false;\n    }\n    var matchedSelections = selectionSet.selections.filter(function (selection) {\n        return hasDirectivesInSelection(directives, selection, nestedCheck);\n    });\n    return matchedSelections.length > 0;\n}\nfunction hasDirectivesInSelection(directives, selection, nestedCheck) {\n    if (nestedCheck === void 0) { nestedCheck = true; }\n    if (selection.kind !== 'Field' || !selection) {\n        return true;\n    }\n    if (!selection.directives) {\n        return false;\n    }\n    var directiveMatcher = getDirectiveMatcher(directives);\n    var matchedDirectives = selection.directives.filter(directiveMatcher);\n    return (matchedDirectives.length > 0 ||\n        (nestedCheck &&\n            hasDirectivesInSelectionSet(directives, selection.selectionSet, nestedCheck)));\n}\nfunction getDirectivesFromSelectionSet(directives, selectionSet) {\n    selectionSet.selections = selectionSet.selections\n        .filter(function (selection) {\n        return hasDirectivesInSelection(directives, selection, true);\n    })\n        .map(function (selection) {\n        if (hasDirectivesInSelection(directives, selection, false)) {\n            return selection;\n        }\n        if ((selection.kind === 'Field' || selection.kind === 'InlineFragment') &&\n            selection.selectionSet) {\n            selection.selectionSet = getDirectivesFromSelectionSet(directives, selection.selectionSet);\n        }\n        return selection;\n    });\n    return selectionSet;\n}\nexport function getDirectivesFromDocument(directives, doc, includeAllFragments) {\n    if (includeAllFragments === void 0) { includeAllFragments = false; }\n    checkDocument(doc);\n    var docClone = cloneDeep(doc);\n    docClone.definitions = docClone.definitions.map(function (definition) {\n        if ((definition.kind === 'OperationDefinition' ||\n            (definition.kind === 'FragmentDefinition' && !includeAllFragments)) &&\n            definition.selectionSet) {\n            definition.selectionSet = getDirectivesFromSelectionSet(directives, definition.selectionSet);\n        }\n        return definition;\n    });\n    var operation = getOperationDefinitionOrDie(docClone);\n    var fragments = createFragmentMap(getFragmentDefinitions(docClone));\n    return isNotEmpty(operation, fragments) ? docClone : null;\n}\n//# sourceMappingURL=transform.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/apollo-utilities/lib/transform.js\n// module id = 113\n// module chunks = 0","export function tryFunctionOrLogError(f) {\n    try {\n        return f();\n    }\n    catch (e) {\n        if (console.error) {\n            console.error(e);\n        }\n    }\n}\nexport function graphQLResultHasError(result) {\n    return result.errors && result.errors.length;\n}\n//# sourceMappingURL=errorHandling.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/apollo-utilities/lib/util/errorHandling.js\n// module id = 114\n// module chunks = 0","/**\n * Performs a deep equality check on two JavaScript values.\n */\nexport function isEqual(a, b) {\n    // If the two values are strictly equal, we are good.\n    if (a === b) {\n        return true;\n    }\n    // Dates are equivalent if their time values are equal.\n    if (a instanceof Date && b instanceof Date) {\n        return a.getTime() === b.getTime();\n    }\n    // If a and b are both objects, we will compare their properties. This will compare arrays as\n    // well.\n    if (a != null &&\n        typeof a === 'object' &&\n        b != null &&\n        typeof b === 'object') {\n        // Compare all of the keys in `a`. If one of the keys has a different value, or that key does\n        // not exist in `b` return false immediately.\n        for (var key in a) {\n            if (Object.prototype.hasOwnProperty.call(a, key)) {\n                if (!Object.prototype.hasOwnProperty.call(b, key)) {\n                    return false;\n                }\n                if (!isEqual(a[key], b[key])) {\n                    return false;\n                }\n            }\n        }\n        // Look through all the keys in `b`. If `b` has a key that `a` does not, return false.\n        for (var key in b) {\n            if (!Object.prototype.hasOwnProperty.call(a, key)) {\n                return false;\n            }\n        }\n        // If we made it this far the objects are equal!\n        return true;\n    }\n    // Otherwise the values are not equal.\n    return false;\n}\n//# sourceMappingURL=isEqual.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/apollo-utilities/lib/util/isEqual.js\n// module id = 115\n// module chunks = 0","import { isDevelopment, isTest } from './environment';\n// taken straight from https://github.com/substack/deep-freeze to avoid import hassles with rollup\nfunction deepFreeze(o) {\n    Object.freeze(o);\n    Object.getOwnPropertyNames(o).forEach(function (prop) {\n        if (o.hasOwnProperty(prop) &&\n            o[prop] !== null &&\n            (typeof o[prop] === 'object' || typeof o[prop] === 'function') &&\n            !Object.isFrozen(o[prop])) {\n            deepFreeze(o[prop]);\n        }\n    });\n    return o;\n}\nexport function maybeDeepFreeze(obj) {\n    if (isDevelopment() || isTest()) {\n        // Polyfilled Symbols potentially cause infinite / very deep recursion while deep freezing\n        // which is known to crash IE11 (https://github.com/apollographql/apollo-client/issues/3043).\n        var symbolIsPolyfilled = typeof Symbol === 'function' && typeof Symbol('') === 'string';\n        if (!symbolIsPolyfilled) {\n            return deepFreeze(obj);\n        }\n    }\n    return obj;\n}\n//# sourceMappingURL=maybeDeepFreeze.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/apollo-utilities/lib/util/maybeDeepFreeze.js\n// module id = 116\n// module chunks = 0","import { isProduction, isTest } from './environment';\nvar haveWarned = Object.create({});\n/**\n * Print a warning only once in development.\n * In production no warnings are printed.\n * In test all warnings are printed.\n *\n * @param msg The warning message\n * @param type warn or error (will call console.warn or console.error)\n */\nexport function warnOnceInDevelopment(msg, type) {\n    if (type === void 0) { type = 'warn'; }\n    if (isProduction()) {\n        return;\n    }\n    if (!haveWarned[msg]) {\n        if (!isTest()) {\n            haveWarned[msg] = true;\n        }\n        switch (type) {\n            case 'error':\n                console.error(msg);\n                break;\n            default:\n                console.warn(msg);\n        }\n    }\n}\n//# sourceMappingURL=warnOnce.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/apollo-utilities/lib/util/warnOnce.js\n// module id = 117\n// module chunks = 0","\"use strict\";\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _global = typeof global !== 'undefined' ? global : (typeof window !== 'undefined' ? window : {});\nvar NativeWebSocket = _global.WebSocket || _global.MozWebSocket;\nvar Backoff = require(\"backo2\");\nvar eventemitter3_1 = require(\"eventemitter3\");\nvar isString = require(\"lodash.isstring\");\nvar isObject = require(\"lodash.isobject\");\nvar printer_1 = require(\"graphql/language/printer\");\nvar getOperationAST_1 = require(\"graphql/utilities/getOperationAST\");\nvar symbol_observable_1 = require(\"symbol-observable\");\nvar protocol_1 = require(\"./protocol\");\nvar defaults_1 = require(\"./defaults\");\nvar message_types_1 = require(\"./message-types\");\nvar SubscriptionClient = (function () {\n    function SubscriptionClient(url, options, webSocketImpl) {\n        var _a = (options || {}), _b = _a.connectionCallback, connectionCallback = _b === void 0 ? undefined : _b, _c = _a.connectionParams, connectionParams = _c === void 0 ? {} : _c, _d = _a.timeout, timeout = _d === void 0 ? defaults_1.WS_TIMEOUT : _d, _e = _a.reconnect, reconnect = _e === void 0 ? false : _e, _f = _a.reconnectionAttempts, reconnectionAttempts = _f === void 0 ? Infinity : _f, _g = _a.lazy, lazy = _g === void 0 ? false : _g;\n        this.wsImpl = webSocketImpl || NativeWebSocket;\n        if (!this.wsImpl) {\n            throw new Error('Unable to find native implementation, or alternative implementation for WebSocket!');\n        }\n        this.connectionParams = connectionParams;\n        this.connectionCallback = connectionCallback;\n        this.url = url;\n        this.operations = {};\n        this.nextOperationId = 0;\n        this.wsTimeout = timeout;\n        this.unsentMessagesQueue = [];\n        this.reconnect = reconnect;\n        this.reconnecting = false;\n        this.reconnectionAttempts = reconnectionAttempts;\n        this.lazy = !!lazy;\n        this.closedByUser = false;\n        this.backoff = new Backoff({ jitter: 0.5 });\n        this.eventEmitter = new eventemitter3_1.EventEmitter();\n        this.middlewares = [];\n        this.client = null;\n        this.maxConnectTimeGenerator = this.createMaxConnectTimeGenerator();\n        if (!this.lazy) {\n            this.connect();\n        }\n    }\n    Object.defineProperty(SubscriptionClient.prototype, \"status\", {\n        get: function () {\n            if (this.client === null) {\n                return this.wsImpl.CLOSED;\n            }\n            return this.client.readyState;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SubscriptionClient.prototype.close = function (isForced, closedByUser) {\n        if (isForced === void 0) { isForced = true; }\n        if (closedByUser === void 0) { closedByUser = true; }\n        if (this.client !== null) {\n            this.closedByUser = closedByUser;\n            if (isForced) {\n                this.clearCheckConnectionInterval();\n                this.clearMaxConnectTimeout();\n                this.clearTryReconnectTimeout();\n                this.unsubscribeAll();\n                this.sendMessage(undefined, message_types_1.default.GQL_CONNECTION_TERMINATE, null);\n            }\n            this.client.close();\n            this.client = null;\n            this.eventEmitter.emit('disconnected');\n            if (!isForced) {\n                this.tryReconnect();\n            }\n        }\n    };\n    SubscriptionClient.prototype.request = function (request) {\n        var getObserver = this.getObserver.bind(this);\n        var executeOperation = this.executeOperation.bind(this);\n        var unsubscribe = this.unsubscribe.bind(this);\n        var opId;\n        return _a = {},\n            _a[symbol_observable_1.default] = function () {\n                return this;\n            },\n            _a.subscribe = function (observerOrNext, onError, onComplete) {\n                var observer = getObserver(observerOrNext, onError, onComplete);\n                opId = executeOperation(request, function (error, result) {\n                    if (error === null && result === null) {\n                        if (observer.complete) {\n                            observer.complete();\n                        }\n                    }\n                    else if (error) {\n                        if (observer.error) {\n                            observer.error(error[0]);\n                        }\n                    }\n                    else {\n                        if (observer.next) {\n                            observer.next(result);\n                        }\n                    }\n                });\n                return {\n                    unsubscribe: function () {\n                        if (opId) {\n                            unsubscribe(opId);\n                            opId = null;\n                        }\n                    },\n                };\n            },\n            _a;\n        var _a;\n    };\n    SubscriptionClient.prototype.on = function (eventName, callback, context) {\n        var handler = this.eventEmitter.on(eventName, callback, context);\n        return function () {\n            handler.off(eventName, callback, context);\n        };\n    };\n    SubscriptionClient.prototype.onConnected = function (callback, context) {\n        return this.on('connected', callback, context);\n    };\n    SubscriptionClient.prototype.onConnecting = function (callback, context) {\n        return this.on('connecting', callback, context);\n    };\n    SubscriptionClient.prototype.onDisconnected = function (callback, context) {\n        return this.on('disconnected', callback, context);\n    };\n    SubscriptionClient.prototype.onReconnected = function (callback, context) {\n        return this.on('reconnected', callback, context);\n    };\n    SubscriptionClient.prototype.onReconnecting = function (callback, context) {\n        return this.on('reconnecting', callback, context);\n    };\n    SubscriptionClient.prototype.unsubscribeAll = function () {\n        var _this = this;\n        Object.keys(this.operations).forEach(function (subId) {\n            _this.unsubscribe(subId);\n        });\n    };\n    SubscriptionClient.prototype.applyMiddlewares = function (options) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var queue = function (funcs, scope) {\n                var next = function (error) {\n                    if (error) {\n                        reject(error);\n                    }\n                    else {\n                        if (funcs.length > 0) {\n                            var f = funcs.shift();\n                            if (f) {\n                                f.applyMiddleware.apply(scope, [options, next]);\n                            }\n                        }\n                        else {\n                            resolve(options);\n                        }\n                    }\n                };\n                next();\n            };\n            queue(_this.middlewares.slice(), _this);\n        });\n    };\n    SubscriptionClient.prototype.use = function (middlewares) {\n        var _this = this;\n        middlewares.map(function (middleware) {\n            if (typeof middleware.applyMiddleware === 'function') {\n                _this.middlewares.push(middleware);\n            }\n            else {\n                throw new Error('Middleware must implement the applyMiddleware function.');\n            }\n        });\n        return this;\n    };\n    SubscriptionClient.prototype.executeOperation = function (options, handler) {\n        var _this = this;\n        if (this.client === null) {\n            this.connect();\n        }\n        var opId = this.generateOperationId();\n        this.operations[opId] = { options: options, handler: handler };\n        this.applyMiddlewares(options)\n            .then(function (processedOptions) {\n            _this.checkOperationOptions(processedOptions, handler);\n            if (_this.operations[opId]) {\n                _this.operations[opId] = { options: processedOptions, handler: handler };\n                _this.sendMessage(opId, message_types_1.default.GQL_START, processedOptions);\n            }\n        })\n            .catch(function (error) {\n            _this.unsubscribe(opId);\n            handler(_this.formatErrors(error));\n        });\n        return opId;\n    };\n    SubscriptionClient.prototype.getObserver = function (observerOrNext, error, complete) {\n        if (typeof observerOrNext === 'function') {\n            return {\n                next: function (v) { return observerOrNext(v); },\n                error: function (e) { return error && error(e); },\n                complete: function () { return complete && complete(); },\n            };\n        }\n        return observerOrNext;\n    };\n    SubscriptionClient.prototype.createMaxConnectTimeGenerator = function () {\n        var minValue = 1000;\n        var maxValue = this.wsTimeout;\n        return new Backoff({\n            min: minValue,\n            max: maxValue,\n            factor: 1.2,\n        });\n    };\n    SubscriptionClient.prototype.clearCheckConnectionInterval = function () {\n        if (this.checkConnectionIntervalId) {\n            clearInterval(this.checkConnectionIntervalId);\n            this.checkConnectionIntervalId = null;\n        }\n    };\n    SubscriptionClient.prototype.clearMaxConnectTimeout = function () {\n        if (this.maxConnectTimeoutId) {\n            clearTimeout(this.maxConnectTimeoutId);\n            this.maxConnectTimeoutId = null;\n        }\n    };\n    SubscriptionClient.prototype.clearTryReconnectTimeout = function () {\n        if (this.tryReconnectTimeoutId) {\n            clearTimeout(this.tryReconnectTimeoutId);\n            this.tryReconnectTimeoutId = null;\n        }\n    };\n    SubscriptionClient.prototype.checkOperationOptions = function (options, handler) {\n        var query = options.query, variables = options.variables, operationName = options.operationName;\n        if (!query) {\n            throw new Error('Must provide a query.');\n        }\n        if (!handler) {\n            throw new Error('Must provide an handler.');\n        }\n        if ((!isString(query) && !getOperationAST_1.getOperationAST(query, operationName)) ||\n            (operationName && !isString(operationName)) ||\n            (variables && !isObject(variables))) {\n            throw new Error('Incorrect option types. query must be a string or a document,' +\n                '`operationName` must be a string, and `variables` must be an object.');\n        }\n    };\n    SubscriptionClient.prototype.buildMessage = function (id, type, payload) {\n        var payloadToReturn = payload && payload.query ? __assign({}, payload, { query: typeof payload.query === 'string' ? payload.query : printer_1.print(payload.query) }) :\n            payload;\n        return {\n            id: id,\n            type: type,\n            payload: payloadToReturn,\n        };\n    };\n    SubscriptionClient.prototype.formatErrors = function (errors) {\n        if (Array.isArray(errors)) {\n            return errors;\n        }\n        if (errors && errors.errors) {\n            return this.formatErrors(errors.errors);\n        }\n        if (errors && errors.message) {\n            return [errors];\n        }\n        return [{\n                name: 'FormatedError',\n                message: 'Unknown error',\n                originalError: errors,\n            }];\n    };\n    SubscriptionClient.prototype.sendMessage = function (id, type, payload) {\n        this.sendMessageRaw(this.buildMessage(id, type, payload));\n    };\n    SubscriptionClient.prototype.sendMessageRaw = function (message) {\n        switch (this.status) {\n            case this.wsImpl.OPEN:\n                var serializedMessage = JSON.stringify(message);\n                try {\n                    JSON.parse(serializedMessage);\n                }\n                catch (e) {\n                    throw new Error(\"Message must be JSON-serializable. Got: \" + message);\n                }\n                this.client.send(serializedMessage);\n                break;\n            case this.wsImpl.CONNECTING:\n                this.unsentMessagesQueue.push(message);\n                break;\n            default:\n                if (!this.reconnecting) {\n                    throw new Error('A message was not sent because socket is not connected, is closing or ' +\n                        'is already closed. Message was: ' + JSON.stringify(message));\n                }\n        }\n    };\n    SubscriptionClient.prototype.generateOperationId = function () {\n        return String(++this.nextOperationId);\n    };\n    SubscriptionClient.prototype.tryReconnect = function () {\n        var _this = this;\n        if (!this.reconnect || this.backoff.attempts >= this.reconnectionAttempts) {\n            return;\n        }\n        if (!this.reconnecting) {\n            Object.keys(this.operations).forEach(function (key) {\n                _this.unsentMessagesQueue.push(_this.buildMessage(key, message_types_1.default.GQL_START, _this.operations[key].options));\n            });\n            this.reconnecting = true;\n        }\n        this.clearTryReconnectTimeout();\n        var delay = this.backoff.duration();\n        this.tryReconnectTimeoutId = setTimeout(function () {\n            _this.connect();\n        }, delay);\n    };\n    SubscriptionClient.prototype.flushUnsentMessagesQueue = function () {\n        var _this = this;\n        this.unsentMessagesQueue.forEach(function (message) {\n            _this.sendMessageRaw(message);\n        });\n        this.unsentMessagesQueue = [];\n    };\n    SubscriptionClient.prototype.checkConnection = function () {\n        if (this.wasKeepAliveReceived) {\n            this.wasKeepAliveReceived = false;\n            return;\n        }\n        if (!this.reconnecting) {\n            this.close(false, true);\n        }\n    };\n    SubscriptionClient.prototype.checkMaxConnectTimeout = function () {\n        var _this = this;\n        this.clearMaxConnectTimeout();\n        this.maxConnectTimeoutId = setTimeout(function () {\n            if (_this.status !== _this.wsImpl.OPEN) {\n                _this.close(false, true);\n            }\n        }, this.maxConnectTimeGenerator.duration());\n    };\n    SubscriptionClient.prototype.connect = function () {\n        var _this = this;\n        this.client = new this.wsImpl(this.url, protocol_1.GRAPHQL_WS);\n        this.checkMaxConnectTimeout();\n        this.client.onopen = function () {\n            _this.clearMaxConnectTimeout();\n            _this.closedByUser = false;\n            _this.eventEmitter.emit(_this.reconnecting ? 'reconnecting' : 'connecting');\n            var payload = typeof _this.connectionParams === 'function' ? _this.connectionParams() : _this.connectionParams;\n            _this.sendMessage(undefined, message_types_1.default.GQL_CONNECTION_INIT, payload);\n            _this.flushUnsentMessagesQueue();\n        };\n        this.client.onclose = function () {\n            if (!_this.closedByUser) {\n                _this.close(false, false);\n            }\n        };\n        this.client.onerror = function () {\n        };\n        this.client.onmessage = function (_a) {\n            var data = _a.data;\n            _this.processReceivedData(data);\n        };\n    };\n    SubscriptionClient.prototype.processReceivedData = function (receivedData) {\n        var parsedMessage;\n        var opId;\n        try {\n            parsedMessage = JSON.parse(receivedData);\n            opId = parsedMessage.id;\n        }\n        catch (e) {\n            throw new Error(\"Message must be JSON-parseable. Got: \" + receivedData);\n        }\n        if ([message_types_1.default.GQL_DATA,\n            message_types_1.default.GQL_COMPLETE,\n            message_types_1.default.GQL_ERROR,\n        ].indexOf(parsedMessage.type) !== -1 && !this.operations[opId]) {\n            this.unsubscribe(opId);\n            return;\n        }\n        switch (parsedMessage.type) {\n            case message_types_1.default.GQL_CONNECTION_ERROR:\n                if (this.connectionCallback) {\n                    this.connectionCallback(parsedMessage.payload);\n                }\n                break;\n            case message_types_1.default.GQL_CONNECTION_ACK:\n                this.eventEmitter.emit(this.reconnecting ? 'reconnected' : 'connected');\n                this.reconnecting = false;\n                this.backoff.reset();\n                this.maxConnectTimeGenerator.reset();\n                if (this.connectionCallback) {\n                    this.connectionCallback();\n                }\n                break;\n            case message_types_1.default.GQL_COMPLETE:\n                this.operations[opId].handler(null, null);\n                delete this.operations[opId];\n                break;\n            case message_types_1.default.GQL_ERROR:\n                this.operations[opId].handler(this.formatErrors(parsedMessage.payload), null);\n                delete this.operations[opId];\n                break;\n            case message_types_1.default.GQL_DATA:\n                var parsedPayload = !parsedMessage.payload.errors ?\n                    parsedMessage.payload : __assign({}, parsedMessage.payload, { errors: this.formatErrors(parsedMessage.payload.errors) });\n                this.operations[opId].handler(null, parsedPayload);\n                break;\n            case message_types_1.default.GQL_CONNECTION_KEEP_ALIVE:\n                var firstKA = typeof this.wasKeepAliveReceived === 'undefined';\n                this.wasKeepAliveReceived = true;\n                if (firstKA) {\n                    this.checkConnection();\n                }\n                if (this.checkConnectionIntervalId) {\n                    clearInterval(this.checkConnectionIntervalId);\n                    this.checkConnection();\n                }\n                this.checkConnectionIntervalId = setInterval(this.checkConnection.bind(this), this.wsTimeout);\n                break;\n            default:\n                throw new Error('Invalid message type!');\n        }\n    };\n    SubscriptionClient.prototype.unsubscribe = function (opId) {\n        if (this.operations[opId]) {\n            delete this.operations[opId];\n            this.sendMessage(opId, message_types_1.default.GQL_STOP, undefined);\n        }\n    };\n    return SubscriptionClient;\n}());\nexports.SubscriptionClient = SubscriptionClient;\n//# sourceMappingURL=client.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/subscriptions-transport-ws/dist/client.js\n// module id = 118\n// module chunks = 0","\n/**\n * Expose `Backoff`.\n */\n\nmodule.exports = Backoff;\n\n/**\n * Initialize backoff timer with `opts`.\n *\n * - `min` initial timeout in milliseconds [100]\n * - `max` max timeout [10000]\n * - `jitter` [0]\n * - `factor` [2]\n *\n * @param {Object} opts\n * @api public\n */\n\nfunction Backoff(opts) {\n  opts = opts || {};\n  this.ms = opts.min || 100;\n  this.max = opts.max || 10000;\n  this.factor = opts.factor || 2;\n  this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;\n  this.attempts = 0;\n}\n\n/**\n * Return the backoff duration.\n *\n * @return {Number}\n * @api public\n */\n\nBackoff.prototype.duration = function(){\n  var ms = this.ms * Math.pow(this.factor, this.attempts++);\n  if (this.jitter) {\n    var rand =  Math.random();\n    var deviation = Math.floor(rand * this.jitter * ms);\n    ms = (Math.floor(rand * 10) & 1) == 0  ? ms - deviation : ms + deviation;\n  }\n  return Math.min(ms, this.max) | 0;\n};\n\n/**\n * Reset the number of attempts.\n *\n * @api public\n */\n\nBackoff.prototype.reset = function(){\n  this.attempts = 0;\n};\n\n/**\n * Set the minimum duration\n *\n * @api public\n */\n\nBackoff.prototype.setMin = function(min){\n  this.ms = min;\n};\n\n/**\n * Set the maximum duration\n *\n * @api public\n */\n\nBackoff.prototype.setMax = function(max){\n  this.max = max;\n};\n\n/**\n * Set the jitter\n *\n * @api public\n */\n\nBackoff.prototype.setJitter = function(jitter){\n  this.jitter = jitter;\n};\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/backo2/index.js\n// module id = 119\n// module chunks = 0","'use strict';\n\nvar has = Object.prototype.hasOwnProperty;\n\n//\n// We store our EE objects in a plain object whose properties are event names.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// `~` to make sure that the built-in object properties are not overridden or\n// used as an attack vector.\n// We also assume that `Object.create(null)` is available when the event name\n// is an ES6 Symbol.\n//\nvar prefix = typeof Object.create !== 'function' ? '~' : false;\n\n/**\n * Representation of a single EventEmitter function.\n *\n * @param {Function} fn Event handler to be called.\n * @param {Mixed} context Context for function execution.\n * @param {Boolean} [once=false] Only emit once\n * @api private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Minimal EventEmitter interface that is molded against the Node.js\n * EventEmitter interface.\n *\n * @constructor\n * @api public\n */\nfunction EventEmitter() { /* Nothing to set */ }\n\n/**\n * Hold the assigned EventEmitters by name.\n *\n * @type {Object}\n * @private\n */\nEventEmitter.prototype._events = undefined;\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @api public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var events = this._events\n    , names = []\n    , name;\n\n  if (!events) return names;\n\n  for (name in events) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return a list of assigned event listeners.\n *\n * @param {String} event The events that should be listed.\n * @param {Boolean} exists We only need to know if there are listeners.\n * @returns {Array|Boolean}\n * @api public\n */\nEventEmitter.prototype.listeners = function listeners(event, exists) {\n  var evt = prefix ? prefix + event : event\n    , available = this._events && this._events[evt];\n\n  if (exists) return !!available;\n  if (!available) return [];\n  if (available.fn) return [available.fn];\n\n  for (var i = 0, l = available.length, ee = new Array(l); i < l; i++) {\n    ee[i] = available[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Emit an event to all registered event listeners.\n *\n * @param {String} event The name of the event.\n * @returns {Boolean} Indication if we've emitted an event.\n * @api public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events || !this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if ('function' === typeof listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Register a new EventListener for the given event.\n *\n * @param {String} event Name of the event.\n * @param {Function} fn Callback function.\n * @param {Mixed} [context=this] The context of the function.\n * @api public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  var listener = new EE(fn, context || this)\n    , evt = prefix ? prefix + event : event;\n\n  if (!this._events) this._events = prefix ? {} : Object.create(null);\n  if (!this._events[evt]) this._events[evt] = listener;\n  else {\n    if (!this._events[evt].fn) this._events[evt].push(listener);\n    else this._events[evt] = [\n      this._events[evt], listener\n    ];\n  }\n\n  return this;\n};\n\n/**\n * Add an EventListener that's only called once.\n *\n * @param {String} event Name of the event.\n * @param {Function} fn Callback function.\n * @param {Mixed} [context=this] The context of the function.\n * @api public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  var listener = new EE(fn, context || this, true)\n    , evt = prefix ? prefix + event : event;\n\n  if (!this._events) this._events = prefix ? {} : Object.create(null);\n  if (!this._events[evt]) this._events[evt] = listener;\n  else {\n    if (!this._events[evt].fn) this._events[evt].push(listener);\n    else this._events[evt] = [\n      this._events[evt], listener\n    ];\n  }\n\n  return this;\n};\n\n/**\n * Remove event listeners.\n *\n * @param {String} event The event we want to remove.\n * @param {Function} fn The listener that we need to find.\n * @param {Mixed} context Only remove listeners matching this context.\n * @param {Boolean} once Only remove once listeners.\n * @api public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events || !this._events[evt]) return this;\n\n  var listeners = this._events[evt]\n    , events = [];\n\n  if (fn) {\n    if (listeners.fn) {\n      if (\n           listeners.fn !== fn\n        || (once && !listeners.once)\n        || (context && listeners.context !== context)\n      ) {\n        events.push(listeners);\n      }\n    } else {\n      for (var i = 0, length = listeners.length; i < length; i++) {\n        if (\n             listeners[i].fn !== fn\n          || (once && !listeners[i].once)\n          || (context && listeners[i].context !== context)\n        ) {\n          events.push(listeners[i]);\n        }\n      }\n    }\n  }\n\n  //\n  // Reset the array, or remove it completely if we have no more listeners.\n  //\n  if (events.length) {\n    this._events[evt] = events.length === 1 ? events[0] : events;\n  } else {\n    delete this._events[evt];\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners or only the listeners for the specified event.\n *\n * @param {String} event The event want to remove all listeners for.\n * @api public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  if (!this._events) return this;\n\n  if (event) delete this._events[prefix ? prefix + event : event];\n  else this._events = prefix ? {} : Object.create(null);\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// This function doesn't apply anymore.\n//\nEventEmitter.prototype.setMaxListeners = function setMaxListeners() {\n  return this;\n};\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/eventemitter3/index.js\n// module id = 120\n// module chunks = 0","/**\n * lodash 4.0.1 (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/** `Object#toString` result references. */\nvar stringTag = '[object String]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @type Function\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `String` primitive or object.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n * @example\n *\n * _.isString('abc');\n * // => true\n *\n * _.isString(1);\n * // => false\n */\nfunction isString(value) {\n  return typeof value == 'string' ||\n    (!isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag);\n}\n\nmodule.exports = isString;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/lodash.isstring/index.js\n// module id = 121\n// module chunks = 0","/**\n * lodash 3.0.2 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/**\n * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\n * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(1);\n * // => false\n */\nfunction isObject(value) {\n  // Avoid a V8 JIT bug in Chrome 19-20.\n  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/lodash.isobject/index.js\n// module id = 122\n// module chunks = 0","/* global window */\nimport ponyfill from './ponyfill.js';\n\nvar root;\n\nif (typeof self !== 'undefined') {\n  root = self;\n} else if (typeof window !== 'undefined') {\n  root = window;\n} else if (typeof global !== 'undefined') {\n  root = global;\n} else if (typeof module !== 'undefined') {\n  root = module;\n} else {\n  root = Function('return this')();\n}\n\nvar result = ponyfill(root);\nexport default result;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/symbol-observable/es/index.js\n// module id = 123\n// module chunks = 0","module.exports = function(originalModule) {\r\n\tif(!originalModule.webpackPolyfill) {\r\n\t\tvar module = Object.create(originalModule);\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"exports\", {\r\n\t\t\tenumerable: true,\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/harmony-module.js\n// module id = 124\n// module chunks = 0","export default function symbolObservablePonyfill(root) {\n\tvar result;\n\tvar Symbol = root.Symbol;\n\n\tif (typeof Symbol === 'function') {\n\t\tif (Symbol.observable) {\n\t\t\tresult = Symbol.observable;\n\t\t} else {\n\t\t\tresult = Symbol('observable');\n\t\t\tSymbol.observable = result;\n\t\t}\n\t} else {\n\t\tresult = '@@observable';\n\t}\n\n\treturn result;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/symbol-observable/es/ponyfill.js\n// module id = 125\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar GRAPHQL_WS = 'graphql-ws';\nexports.GRAPHQL_WS = GRAPHQL_WS;\nvar GRAPHQL_SUBSCRIPTIONS = 'graphql-subscriptions';\nexports.GRAPHQL_SUBSCRIPTIONS = GRAPHQL_SUBSCRIPTIONS;\n//# sourceMappingURL=protocol.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/subscriptions-transport-ws/dist/protocol.js\n// module id = 126\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar WS_TIMEOUT = 30000;\nexports.WS_TIMEOUT = WS_TIMEOUT;\n//# sourceMappingURL=defaults.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/subscriptions-transport-ws/dist/defaults.js\n// module id = 127\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar MessageTypes = (function () {\n    function MessageTypes() {\n        throw new Error('Static Class');\n    }\n    MessageTypes.GQL_CONNECTION_INIT = 'connection_init';\n    MessageTypes.GQL_CONNECTION_ACK = 'connection_ack';\n    MessageTypes.GQL_CONNECTION_ERROR = 'connection_error';\n    MessageTypes.GQL_CONNECTION_KEEP_ALIVE = 'ka';\n    MessageTypes.GQL_CONNECTION_TERMINATE = 'connection_terminate';\n    MessageTypes.GQL_START = 'start';\n    MessageTypes.GQL_DATA = 'data';\n    MessageTypes.GQL_ERROR = 'error';\n    MessageTypes.GQL_COMPLETE = 'complete';\n    MessageTypes.GQL_STOP = 'stop';\n    MessageTypes.SUBSCRIPTION_START = 'subscription_start';\n    MessageTypes.SUBSCRIPTION_DATA = 'subscription_data';\n    MessageTypes.SUBSCRIPTION_SUCCESS = 'subscription_success';\n    MessageTypes.SUBSCRIPTION_FAIL = 'subscription_fail';\n    MessageTypes.SUBSCRIPTION_END = 'subscription_end';\n    MessageTypes.INIT = 'init';\n    MessageTypes.INIT_SUCCESS = 'init_success';\n    MessageTypes.INIT_FAIL = 'init_fail';\n    MessageTypes.KEEP_ALIVE = 'keepalive';\n    return MessageTypes;\n}());\nexports.default = MessageTypes;\n//# sourceMappingURL=message-types.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/subscriptions-transport-ws/dist/message-types.js\n// module id = 128\n// module chunks = 0","'use strict';\n\n/* istanbul ignore next */\nvar MyPromise = typeof Promise !== 'undefined' ? Promise : require('lie');\n\nvar messageIds = 0;\n\nfunction parseJsonSafely(str) {\n  try {\n    return JSON.parse(str);\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction onMessage(self, e) {\n  var message = parseJsonSafely(e.data);\n  if (!message) {\n    // Ignore - this message is not for us.\n    return;\n  }\n  var messageId = message[0];\n  var error = message[1];\n  var result = message[2];\n\n  var callback = self._callbacks[messageId];\n\n  if (!callback) {\n    // Ignore - user might have created multiple PromiseWorkers.\n    // This message is not for us.\n    return;\n  }\n\n  delete self._callbacks[messageId];\n  callback(error, result);\n}\n\nfunction PromiseWorker(worker) {\n  var self = this;\n  self._worker = worker;\n  self._callbacks = {};\n\n  worker.addEventListener('message', function (e) {\n    onMessage(self, e);\n  });\n}\n\nPromiseWorker.prototype.postMessage = function (userMessage) {\n  var self = this;\n  var messageId = messageIds++;\n\n  var messageToSend = [messageId, userMessage];\n\n  return new MyPromise(function (resolve, reject) {\n    self._callbacks[messageId] = function (error, result) {\n      if (error) {\n        return reject(new Error(error.message));\n      }\n      resolve(result);\n    };\n    var jsonMessage = JSON.stringify(messageToSend);\n    /* istanbul ignore if */\n    if (typeof self._worker.controller !== 'undefined') {\n      // service worker, use MessageChannels because e.source is broken in Chrome < 51:\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=543198\n      var channel = new MessageChannel();\n      channel.port1.onmessage = function (e) {\n        onMessage(self, e);\n      };\n      self._worker.controller.postMessage(jsonMessage, [channel.port2]);\n    } else {\n      // web worker\n      self._worker.postMessage(jsonMessage);\n    }\n  });\n};\n\nmodule.exports = PromiseWorker;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/promise-worker/index.js\n// module id = 129\n// module chunks = 0","'use strict';\nvar immediate = require('immediate');\n\n/* istanbul ignore next */\nfunction INTERNAL() {}\n\nvar handlers = {};\n\nvar REJECTED = ['REJECTED'];\nvar FULFILLED = ['FULFILLED'];\nvar PENDING = ['PENDING'];\n\nmodule.exports = Promise;\n\nfunction Promise(resolver) {\n  if (typeof resolver !== 'function') {\n    throw new TypeError('resolver must be a function');\n  }\n  this.state = PENDING;\n  this.queue = [];\n  this.outcome = void 0;\n  if (resolver !== INTERNAL) {\n    safelyResolveThenable(this, resolver);\n  }\n}\n\nPromise.prototype[\"catch\"] = function (onRejected) {\n  return this.then(null, onRejected);\n};\nPromise.prototype.then = function (onFulfilled, onRejected) {\n  if (typeof onFulfilled !== 'function' && this.state === FULFILLED ||\n    typeof onRejected !== 'function' && this.state === REJECTED) {\n    return this;\n  }\n  var promise = new this.constructor(INTERNAL);\n  if (this.state !== PENDING) {\n    var resolver = this.state === FULFILLED ? onFulfilled : onRejected;\n    unwrap(promise, resolver, this.outcome);\n  } else {\n    this.queue.push(new QueueItem(promise, onFulfilled, onRejected));\n  }\n\n  return promise;\n};\nfunction QueueItem(promise, onFulfilled, onRejected) {\n  this.promise = promise;\n  if (typeof onFulfilled === 'function') {\n    this.onFulfilled = onFulfilled;\n    this.callFulfilled = this.otherCallFulfilled;\n  }\n  if (typeof onRejected === 'function') {\n    this.onRejected = onRejected;\n    this.callRejected = this.otherCallRejected;\n  }\n}\nQueueItem.prototype.callFulfilled = function (value) {\n  handlers.resolve(this.promise, value);\n};\nQueueItem.prototype.otherCallFulfilled = function (value) {\n  unwrap(this.promise, this.onFulfilled, value);\n};\nQueueItem.prototype.callRejected = function (value) {\n  handlers.reject(this.promise, value);\n};\nQueueItem.prototype.otherCallRejected = function (value) {\n  unwrap(this.promise, this.onRejected, value);\n};\n\nfunction unwrap(promise, func, value) {\n  immediate(function () {\n    var returnValue;\n    try {\n      returnValue = func(value);\n    } catch (e) {\n      return handlers.reject(promise, e);\n    }\n    if (returnValue === promise) {\n      handlers.reject(promise, new TypeError('Cannot resolve promise with itself'));\n    } else {\n      handlers.resolve(promise, returnValue);\n    }\n  });\n}\n\nhandlers.resolve = function (self, value) {\n  var result = tryCatch(getThen, value);\n  if (result.status === 'error') {\n    return handlers.reject(self, result.value);\n  }\n  var thenable = result.value;\n\n  if (thenable) {\n    safelyResolveThenable(self, thenable);\n  } else {\n    self.state = FULFILLED;\n    self.outcome = value;\n    var i = -1;\n    var len = self.queue.length;\n    while (++i < len) {\n      self.queue[i].callFulfilled(value);\n    }\n  }\n  return self;\n};\nhandlers.reject = function (self, error) {\n  self.state = REJECTED;\n  self.outcome = error;\n  var i = -1;\n  var len = self.queue.length;\n  while (++i < len) {\n    self.queue[i].callRejected(error);\n  }\n  return self;\n};\n\nfunction getThen(obj) {\n  // Make sure we only access the accessor once as required by the spec\n  var then = obj && obj.then;\n  if (obj && (typeof obj === 'object' || typeof obj === 'function') && typeof then === 'function') {\n    return function appyThen() {\n      then.apply(obj, arguments);\n    };\n  }\n}\n\nfunction safelyResolveThenable(self, thenable) {\n  // Either fulfill, reject or reject with error\n  var called = false;\n  function onError(value) {\n    if (called) {\n      return;\n    }\n    called = true;\n    handlers.reject(self, value);\n  }\n\n  function onSuccess(value) {\n    if (called) {\n      return;\n    }\n    called = true;\n    handlers.resolve(self, value);\n  }\n\n  function tryToUnwrap() {\n    thenable(onSuccess, onError);\n  }\n\n  var result = tryCatch(tryToUnwrap);\n  if (result.status === 'error') {\n    onError(result.value);\n  }\n}\n\nfunction tryCatch(func, value) {\n  var out = {};\n  try {\n    out.value = func(value);\n    out.status = 'success';\n  } catch (e) {\n    out.status = 'error';\n    out.value = e;\n  }\n  return out;\n}\n\nPromise.resolve = resolve;\nfunction resolve(value) {\n  if (value instanceof this) {\n    return value;\n  }\n  return handlers.resolve(new this(INTERNAL), value);\n}\n\nPromise.reject = reject;\nfunction reject(reason) {\n  var promise = new this(INTERNAL);\n  return handlers.reject(promise, reason);\n}\n\nPromise.all = all;\nfunction all(iterable) {\n  var self = this;\n  if (Object.prototype.toString.call(iterable) !== '[object Array]') {\n    return this.reject(new TypeError('must be an array'));\n  }\n\n  var len = iterable.length;\n  var called = false;\n  if (!len) {\n    return this.resolve([]);\n  }\n\n  var values = new Array(len);\n  var resolved = 0;\n  var i = -1;\n  var promise = new this(INTERNAL);\n\n  while (++i < len) {\n    allResolver(iterable[i], i);\n  }\n  return promise;\n  function allResolver(value, i) {\n    self.resolve(value).then(resolveFromAll, function (error) {\n      if (!called) {\n        called = true;\n        handlers.reject(promise, error);\n      }\n    });\n    function resolveFromAll(outValue) {\n      values[i] = outValue;\n      if (++resolved === len && !called) {\n        called = true;\n        handlers.resolve(promise, values);\n      }\n    }\n  }\n}\n\nPromise.race = race;\nfunction race(iterable) {\n  var self = this;\n  if (Object.prototype.toString.call(iterable) !== '[object Array]') {\n    return this.reject(new TypeError('must be an array'));\n  }\n\n  var len = iterable.length;\n  var called = false;\n  if (!len) {\n    return this.resolve([]);\n  }\n\n  var i = -1;\n  var promise = new this(INTERNAL);\n\n  while (++i < len) {\n    resolver(iterable[i]);\n  }\n  return promise;\n  function resolver(value) {\n    self.resolve(value).then(function (response) {\n      if (!called) {\n        called = true;\n        handlers.resolve(promise, response);\n      }\n    }, function (error) {\n      if (!called) {\n        called = true;\n        handlers.reject(promise, error);\n      }\n    });\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/lie/lib/browser.js\n// module id = 130\n// module chunks = 0","'use strict';\nvar Mutation = global.MutationObserver || global.WebKitMutationObserver;\n\nvar scheduleDrain;\n\n{\n  if (Mutation) {\n    var called = 0;\n    var observer = new Mutation(nextTick);\n    var element = global.document.createTextNode('');\n    observer.observe(element, {\n      characterData: true\n    });\n    scheduleDrain = function () {\n      element.data = (called = ++called % 2);\n    };\n  } else if (!global.setImmediate && typeof global.MessageChannel !== 'undefined') {\n    var channel = new global.MessageChannel();\n    channel.port1.onmessage = nextTick;\n    scheduleDrain = function () {\n      channel.port2.postMessage(0);\n    };\n  } else if ('document' in global && 'onreadystatechange' in global.document.createElement('script')) {\n    scheduleDrain = function () {\n\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      var scriptEl = global.document.createElement('script');\n      scriptEl.onreadystatechange = function () {\n        nextTick();\n\n        scriptEl.onreadystatechange = null;\n        scriptEl.parentNode.removeChild(scriptEl);\n        scriptEl = null;\n      };\n      global.document.documentElement.appendChild(scriptEl);\n    };\n  } else {\n    scheduleDrain = function () {\n      setTimeout(nextTick, 0);\n    };\n  }\n}\n\nvar draining;\nvar queue = [];\n//named nextTick for less confusing stack traces\nfunction nextTick() {\n  draining = true;\n  var i, oldQueue;\n  var len = queue.length;\n  while (len) {\n    oldQueue = queue;\n    queue = [];\n    i = -1;\n    while (++i < len) {\n      oldQueue[i]();\n    }\n    len = queue.length;\n  }\n  draining = false;\n}\n\nmodule.exports = immediate;\nfunction immediate(task) {\n  if (queue.push(task) === 1 && !draining) {\n    scheduleDrain();\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/immediate/lib/browser.js\n// module id = 131\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.graphql = graphql;\nexports.graphqlSync = graphqlSync;\n\nvar _validate = require('./type/validate');\n\nvar _parser = require('./language/parser');\n\nvar _validate2 = require('./validation/validate');\n\nvar _execute = require('./execution/execute');\n\n/**\n * This is the primary entry point function for fulfilling GraphQL operations\n * by parsing, validating, and executing a GraphQL document along side a\n * GraphQL schema.\n *\n * More sophisticated GraphQL servers, such as those which persist queries,\n * may wish to separate the validation and execution phases to a static time\n * tooling step, and a server runtime step.\n *\n * Accepts either an object with named arguments, or individual arguments:\n *\n * schema:\n *    The GraphQL type system to use when validating and executing a query.\n * source:\n *    A GraphQL language formatted string representing the requested operation.\n * rootValue:\n *    The value provided as the first argument to resolver functions on the top\n *    level type (e.g. the query object type).\n * variableValues:\n *    A mapping of variable name to runtime value to use for all variables\n *    defined in the requestString.\n * operationName:\n *    The name of the operation to use if requestString contains multiple\n *    possible operations. Can be omitted if requestString contains only\n *    one operation.\n * fieldResolver:\n *    A resolver function to use when one is not provided by the schema.\n *    If not provided, the default field resolver is used (which looks for a\n *    value or method on the source value with the field's name).\n */\n\n/* eslint-disable no-redeclare */\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction graphql(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  var _arguments = arguments;\n\n  /* eslint-enable no-redeclare */\n  // Always return a Promise for a consistent API.\n  return new Promise(function (resolve) {\n    return resolve(\n    // Extract arguments from object args if provided.\n    _arguments.length === 1 ? graphqlImpl(argsOrSchema.schema, argsOrSchema.source, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver) : graphqlImpl(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver));\n  });\n}\n\n/**\n * The graphqlSync function also fulfills GraphQL operations by parsing,\n * validating, and executing a GraphQL document along side a GraphQL schema.\n * However, it guarantees to complete synchronously (or throw an error) assuming\n * that all field resolvers are also synchronous.\n */\n\n/* eslint-disable no-redeclare */\nfunction graphqlSync(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  // Extract arguments from object args if provided.\n  var result = arguments.length === 1 ? graphqlImpl(argsOrSchema.schema, argsOrSchema.source, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver) : graphqlImpl(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver);\n\n  // Assert that the execution was synchronous.\n  if (result.then) {\n    throw new Error('GraphQL execution failed to complete synchronously.');\n  }\n\n  return result;\n}\n\nfunction graphqlImpl(schema, source, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  // Validate Schema\n  var schemaValidationErrors = (0, _validate.validateSchema)(schema);\n  if (schemaValidationErrors.length > 0) {\n    return { errors: schemaValidationErrors };\n  }\n\n  // Parse\n  var document = void 0;\n  try {\n    document = (0, _parser.parse)(source);\n  } catch (syntaxError) {\n    return { errors: [syntaxError] };\n  }\n\n  // Validate\n  var validationErrors = (0, _validate2.validate)(schema, document);\n  if (validationErrors.length > 0) {\n    return { errors: validationErrors };\n  }\n\n  // Execute\n  return (0, _execute.execute)(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver);\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/graphql.js\n// module id = 132\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.syntaxError = syntaxError;\n\nvar _GraphQLError = require('./GraphQLError');\n\n/**\n * Produces a GraphQLError representing a syntax error, containing useful\n * descriptive information about the syntax error's position in the source.\n */\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction syntaxError(source, position, description) {\n  return new _GraphQLError.GraphQLError('Syntax Error: ' + description, undefined, source, [position]);\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/error/syntaxError.js\n// module id = 133\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**\n                                                                                                                                                                                                                                                                   * Copyright (c) 2015-present, Facebook, Inc.\n                                                                                                                                                                                                                                                                   *\n                                                                                                                                                                                                                                                                   * This source code is licensed under the MIT license found in the\n                                                                                                                                                                                                                                                                   * LICENSE file in the root directory of this source tree.\n                                                                                                                                                                                                                                                                   *\n                                                                                                                                                                                                                                                                   *  strict\n                                                                                                                                                                                                                                                                   */\n\nexports.formatError = formatError;\n\nvar _invariant = require('../jsutils/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Given a GraphQLError, format it according to the rules described by the\n * Response Format, Errors section of the GraphQL Specification.\n */\nfunction formatError(error) {\n  !error ? (0, _invariant2.default)(0, 'Received null or undefined error.') : void 0;\n  return _extends({}, error.extensions, {\n    message: error.message || 'An unknown error occurred.',\n    locations: error.locations,\n    path: error.path\n  });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/error/formatError.js\n// module id = 134\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.nonExecutableDefinitionMessage = nonExecutableDefinitionMessage;\nexports.ExecutableDefinitions = ExecutableDefinitions;\n\nvar _error = require('../../error');\n\nvar _kinds = require('../../language/kinds');\n\nfunction nonExecutableDefinitionMessage(defName) {\n  return 'The ' + defName + ' definition is not executable.';\n}\n\n/**\n * Executable definitions\n *\n * A GraphQL document is only valid for execution if all definitions are either\n * operation or fragment definitions.\n */\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction ExecutableDefinitions(context) {\n  return {\n    Document: function Document(node) {\n      node.definitions.forEach(function (definition) {\n        if (definition.kind !== _kinds.Kind.OPERATION_DEFINITION && definition.kind !== _kinds.Kind.FRAGMENT_DEFINITION) {\n          context.reportError(new _error.GraphQLError(nonExecutableDefinitionMessage(definition.kind === _kinds.Kind.SCHEMA_DEFINITION ? 'schema' : definition.name.value), [definition]));\n        }\n      });\n      return false;\n    }\n  };\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/rules/ExecutableDefinitions.js\n// module id = 135\n// module chunks = 0","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = memoize3;\n/**\n * Copyright (c) 2017-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * Memoizes the provided three-argument function.\n */\nfunction memoize3(fn) {\n  var cache0 = void 0;\n  function memoized(a1, a2, a3) {\n    if (!cache0) {\n      cache0 = new WeakMap();\n    }\n    var cache1 = cache0.get(a1);\n    var cache2 = void 0;\n    if (cache1) {\n      cache2 = cache1.get(a2);\n      if (cache2) {\n        var cachedValue = cache2.get(a3);\n        if (cachedValue !== undefined) {\n          return cachedValue;\n        }\n      }\n    } else {\n      cache1 = new WeakMap();\n      cache0.set(a1, cache1);\n    }\n    if (!cache2) {\n      cache2 = new WeakMap();\n      cache1.set(a2, cache2);\n    }\n    var newValue = fn.apply(this, arguments);\n    cache2.set(a3, newValue);\n    return newValue;\n  }\n  return memoized;\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/jsutils/memoize3.js\n// module id = 136\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = promiseForObject;\n\n\n/**\n * This function transforms a JS object `ObjMap<Promise<T>>` into\n * a `Promise<ObjMap<T>>`\n *\n * This is akin to bluebird's `Promise.props`, but implemented only using\n * `Promise.all` so it will work with any implementation of ES6 promises.\n */\nfunction promiseForObject(object) {\n  var keys = Object.keys(object);\n  var valuesAndPromises = keys.map(function (name) {\n    return object[name];\n  });\n  return Promise.all(valuesAndPromises).then(function (values) {\n    return values.reduce(function (resolvedObject, value, i) {\n      resolvedObject[keys[i]] = value;\n      return resolvedObject;\n    }, Object.create(null));\n  });\n} /**\n   * Copyright (c) 2015-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   *  strict\n   */\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/jsutils/promiseForObject.js\n// module id = 137\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = promiseReduce;\n\nvar _isPromise = require('./isPromise');\n\nvar _isPromise2 = _interopRequireDefault(_isPromise);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Similar to Array.prototype.reduce(), however the reducing callback may return\n * a Promise, in which case reduction will continue after each promise resolves.\n *\n * If the callback does not return a Promise, then this function will also not\n * return a Promise.\n */\nfunction promiseReduce(values, callback, initialValue) {\n  return values.reduce(function (previous, value) {\n    return (0, _isPromise2.default)(previous) ? previous.then(function (resolved) {\n      return callback(resolved, value);\n    }) : callback(previous, value);\n  }, initialValue);\n} /**\n   * Copyright (c) 2015-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   *  strict\n   */\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/jsutils/promiseReduce.js\n// module id = 138\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _schema = require('./schema');\n\nObject.defineProperty(exports, 'isSchema', {\n  enumerable: true,\n  get: function get() {\n    return _schema.isSchema;\n  }\n});\nObject.defineProperty(exports, 'GraphQLSchema', {\n  enumerable: true,\n  get: function get() {\n    return _schema.GraphQLSchema;\n  }\n});\n\nvar _definition = require('./definition');\n\nObject.defineProperty(exports, 'isType', {\n  enumerable: true,\n  get: function get() {\n    return _definition.isType;\n  }\n});\nObject.defineProperty(exports, 'isScalarType', {\n  enumerable: true,\n  get: function get() {\n    return _definition.isScalarType;\n  }\n});\nObject.defineProperty(exports, 'isObjectType', {\n  enumerable: true,\n  get: function get() {\n    return _definition.isObjectType;\n  }\n});\nObject.defineProperty(exports, 'isInterfaceType', {\n  enumerable: true,\n  get: function get() {\n    return _definition.isInterfaceType;\n  }\n});\nObject.defineProperty(exports, 'isUnionType', {\n  enumerable: true,\n  get: function get() {\n    return _definition.isUnionType;\n  }\n});\nObject.defineProperty(exports, 'isEnumType', {\n  enumerable: true,\n  get: function get() {\n    return _definition.isEnumType;\n  }\n});\nObject.defineProperty(exports, 'isInputObjectType', {\n  enumerable: true,\n  get: function get() {\n    return _definition.isInputObjectType;\n  }\n});\nObject.defineProperty(exports, 'isListType', {\n  enumerable: true,\n  get: function get() {\n    return _definition.isListType;\n  }\n});\nObject.defineProperty(exports, 'isNonNullType', {\n  enumerable: true,\n  get: function get() {\n    return _definition.isNonNullType;\n  }\n});\nObject.defineProperty(exports, 'isInputType', {\n  enumerable: true,\n  get: function get() {\n    return _definition.isInputType;\n  }\n});\nObject.defineProperty(exports, 'isOutputType', {\n  enumerable: true,\n  get: function get() {\n    return _definition.isOutputType;\n  }\n});\nObject.defineProperty(exports, 'isLeafType', {\n  enumerable: true,\n  get: function get() {\n    return _definition.isLeafType;\n  }\n});\nObject.defineProperty(exports, 'isCompositeType', {\n  enumerable: true,\n  get: function get() {\n    return _definition.isCompositeType;\n  }\n});\nObject.defineProperty(exports, 'isAbstractType', {\n  enumerable: true,\n  get: function get() {\n    return _definition.isAbstractType;\n  }\n});\nObject.defineProperty(exports, 'isWrappingType', {\n  enumerable: true,\n  get: function get() {\n    return _definition.isWrappingType;\n  }\n});\nObject.defineProperty(exports, 'isNullableType', {\n  enumerable: true,\n  get: function get() {\n    return _definition.isNullableType;\n  }\n});\nObject.defineProperty(exports, 'isNamedType', {\n  enumerable: true,\n  get: function get() {\n    return _definition.isNamedType;\n  }\n});\nObject.defineProperty(exports, 'assertType', {\n  enumerable: true,\n  get: function get() {\n    return _definition.assertType;\n  }\n});\nObject.defineProperty(exports, 'assertScalarType', {\n  enumerable: true,\n  get: function get() {\n    return _definition.assertScalarType;\n  }\n});\nObject.defineProperty(exports, 'assertObjectType', {\n  enumerable: true,\n  get: function get() {\n    return _definition.assertObjectType;\n  }\n});\nObject.defineProperty(exports, 'assertInterfaceType', {\n  enumerable: true,\n  get: function get() {\n    return _definition.assertInterfaceType;\n  }\n});\nObject.defineProperty(exports, 'assertUnionType', {\n  enumerable: true,\n  get: function get() {\n    return _definition.assertUnionType;\n  }\n});\nObject.defineProperty(exports, 'assertEnumType', {\n  enumerable: true,\n  get: function get() {\n    return _definition.assertEnumType;\n  }\n});\nObject.defineProperty(exports, 'assertInputObjectType', {\n  enumerable: true,\n  get: function get() {\n    return _definition.assertInputObjectType;\n  }\n});\nObject.defineProperty(exports, 'assertListType', {\n  enumerable: true,\n  get: function get() {\n    return _definition.assertListType;\n  }\n});\nObject.defineProperty(exports, 'assertNonNullType', {\n  enumerable: true,\n  get: function get() {\n    return _definition.assertNonNullType;\n  }\n});\nObject.defineProperty(exports, 'assertInputType', {\n  enumerable: true,\n  get: function get() {\n    return _definition.assertInputType;\n  }\n});\nObject.defineProperty(exports, 'assertOutputType', {\n  enumerable: true,\n  get: function get() {\n    return _definition.assertOutputType;\n  }\n});\nObject.defineProperty(exports, 'assertLeafType', {\n  enumerable: true,\n  get: function get() {\n    return _definition.assertLeafType;\n  }\n});\nObject.defineProperty(exports, 'assertCompositeType', {\n  enumerable: true,\n  get: function get() {\n    return _definition.assertCompositeType;\n  }\n});\nObject.defineProperty(exports, 'assertAbstractType', {\n  enumerable: true,\n  get: function get() {\n    return _definition.assertAbstractType;\n  }\n});\nObject.defineProperty(exports, 'assertWrappingType', {\n  enumerable: true,\n  get: function get() {\n    return _definition.assertWrappingType;\n  }\n});\nObject.defineProperty(exports, 'assertNullableType', {\n  enumerable: true,\n  get: function get() {\n    return _definition.assertNullableType;\n  }\n});\nObject.defineProperty(exports, 'assertNamedType', {\n  enumerable: true,\n  get: function get() {\n    return _definition.assertNamedType;\n  }\n});\nObject.defineProperty(exports, 'getNullableType', {\n  enumerable: true,\n  get: function get() {\n    return _definition.getNullableType;\n  }\n});\nObject.defineProperty(exports, 'getNamedType', {\n  enumerable: true,\n  get: function get() {\n    return _definition.getNamedType;\n  }\n});\nObject.defineProperty(exports, 'GraphQLScalarType', {\n  enumerable: true,\n  get: function get() {\n    return _definition.GraphQLScalarType;\n  }\n});\nObject.defineProperty(exports, 'GraphQLObjectType', {\n  enumerable: true,\n  get: function get() {\n    return _definition.GraphQLObjectType;\n  }\n});\nObject.defineProperty(exports, 'GraphQLInterfaceType', {\n  enumerable: true,\n  get: function get() {\n    return _definition.GraphQLInterfaceType;\n  }\n});\nObject.defineProperty(exports, 'GraphQLUnionType', {\n  enumerable: true,\n  get: function get() {\n    return _definition.GraphQLUnionType;\n  }\n});\nObject.defineProperty(exports, 'GraphQLEnumType', {\n  enumerable: true,\n  get: function get() {\n    return _definition.GraphQLEnumType;\n  }\n});\nObject.defineProperty(exports, 'GraphQLInputObjectType', {\n  enumerable: true,\n  get: function get() {\n    return _definition.GraphQLInputObjectType;\n  }\n});\nObject.defineProperty(exports, 'GraphQLList', {\n  enumerable: true,\n  get: function get() {\n    return _definition.GraphQLList;\n  }\n});\nObject.defineProperty(exports, 'GraphQLNonNull', {\n  enumerable: true,\n  get: function get() {\n    return _definition.GraphQLNonNull;\n  }\n});\n\nvar _directives = require('./directives');\n\nObject.defineProperty(exports, 'isDirective', {\n  enumerable: true,\n  get: function get() {\n    return _directives.isDirective;\n  }\n});\nObject.defineProperty(exports, 'GraphQLDirective', {\n  enumerable: true,\n  get: function get() {\n    return _directives.GraphQLDirective;\n  }\n});\nObject.defineProperty(exports, 'isSpecifiedDirective', {\n  enumerable: true,\n  get: function get() {\n    return _directives.isSpecifiedDirective;\n  }\n});\nObject.defineProperty(exports, 'specifiedDirectives', {\n  enumerable: true,\n  get: function get() {\n    return _directives.specifiedDirectives;\n  }\n});\nObject.defineProperty(exports, 'GraphQLIncludeDirective', {\n  enumerable: true,\n  get: function get() {\n    return _directives.GraphQLIncludeDirective;\n  }\n});\nObject.defineProperty(exports, 'GraphQLSkipDirective', {\n  enumerable: true,\n  get: function get() {\n    return _directives.GraphQLSkipDirective;\n  }\n});\nObject.defineProperty(exports, 'GraphQLDeprecatedDirective', {\n  enumerable: true,\n  get: function get() {\n    return _directives.GraphQLDeprecatedDirective;\n  }\n});\nObject.defineProperty(exports, 'DEFAULT_DEPRECATION_REASON', {\n  enumerable: true,\n  get: function get() {\n    return _directives.DEFAULT_DEPRECATION_REASON;\n  }\n});\n\nvar _scalars = require('./scalars');\n\nObject.defineProperty(exports, 'isSpecifiedScalarType', {\n  enumerable: true,\n  get: function get() {\n    return _scalars.isSpecifiedScalarType;\n  }\n});\nObject.defineProperty(exports, 'specifiedScalarTypes', {\n  enumerable: true,\n  get: function get() {\n    return _scalars.specifiedScalarTypes;\n  }\n});\nObject.defineProperty(exports, 'GraphQLInt', {\n  enumerable: true,\n  get: function get() {\n    return _scalars.GraphQLInt;\n  }\n});\nObject.defineProperty(exports, 'GraphQLFloat', {\n  enumerable: true,\n  get: function get() {\n    return _scalars.GraphQLFloat;\n  }\n});\nObject.defineProperty(exports, 'GraphQLString', {\n  enumerable: true,\n  get: function get() {\n    return _scalars.GraphQLString;\n  }\n});\nObject.defineProperty(exports, 'GraphQLBoolean', {\n  enumerable: true,\n  get: function get() {\n    return _scalars.GraphQLBoolean;\n  }\n});\nObject.defineProperty(exports, 'GraphQLID', {\n  enumerable: true,\n  get: function get() {\n    return _scalars.GraphQLID;\n  }\n});\n\nvar _introspection = require('./introspection');\n\nObject.defineProperty(exports, 'TypeKind', {\n  enumerable: true,\n  get: function get() {\n    return _introspection.TypeKind;\n  }\n});\nObject.defineProperty(exports, 'isIntrospectionType', {\n  enumerable: true,\n  get: function get() {\n    return _introspection.isIntrospectionType;\n  }\n});\nObject.defineProperty(exports, 'introspectionTypes', {\n  enumerable: true,\n  get: function get() {\n    return _introspection.introspectionTypes;\n  }\n});\nObject.defineProperty(exports, '__Schema', {\n  enumerable: true,\n  get: function get() {\n    return _introspection.__Schema;\n  }\n});\nObject.defineProperty(exports, '__Directive', {\n  enumerable: true,\n  get: function get() {\n    return _introspection.__Directive;\n  }\n});\nObject.defineProperty(exports, '__DirectiveLocation', {\n  enumerable: true,\n  get: function get() {\n    return _introspection.__DirectiveLocation;\n  }\n});\nObject.defineProperty(exports, '__Type', {\n  enumerable: true,\n  get: function get() {\n    return _introspection.__Type;\n  }\n});\nObject.defineProperty(exports, '__Field', {\n  enumerable: true,\n  get: function get() {\n    return _introspection.__Field;\n  }\n});\nObject.defineProperty(exports, '__InputValue', {\n  enumerable: true,\n  get: function get() {\n    return _introspection.__InputValue;\n  }\n});\nObject.defineProperty(exports, '__EnumValue', {\n  enumerable: true,\n  get: function get() {\n    return _introspection.__EnumValue;\n  }\n});\nObject.defineProperty(exports, '__TypeKind', {\n  enumerable: true,\n  get: function get() {\n    return _introspection.__TypeKind;\n  }\n});\nObject.defineProperty(exports, 'SchemaMetaFieldDef', {\n  enumerable: true,\n  get: function get() {\n    return _introspection.SchemaMetaFieldDef;\n  }\n});\nObject.defineProperty(exports, 'TypeMetaFieldDef', {\n  enumerable: true,\n  get: function get() {\n    return _introspection.TypeMetaFieldDef;\n  }\n});\nObject.defineProperty(exports, 'TypeNameMetaFieldDef', {\n  enumerable: true,\n  get: function get() {\n    return _introspection.TypeNameMetaFieldDef;\n  }\n});\n\nvar _validate = require('./validate');\n\nObject.defineProperty(exports, 'validateSchema', {\n  enumerable: true,\n  get: function get() {\n    return _validate.validateSchema;\n  }\n});\nObject.defineProperty(exports, 'assertValidSchema', {\n  enumerable: true,\n  get: function get() {\n    return _validate.assertValidSchema;\n  }\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/type/index.js\n// module id = 139\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _location = require('./location');\n\nObject.defineProperty(exports, 'getLocation', {\n  enumerable: true,\n  get: function get() {\n    return _location.getLocation;\n  }\n});\n\nvar _kinds = require('./kinds');\n\nObject.defineProperty(exports, 'Kind', {\n  enumerable: true,\n  get: function get() {\n    return _kinds.Kind;\n  }\n});\n\nvar _lexer = require('./lexer');\n\nObject.defineProperty(exports, 'createLexer', {\n  enumerable: true,\n  get: function get() {\n    return _lexer.createLexer;\n  }\n});\nObject.defineProperty(exports, 'TokenKind', {\n  enumerable: true,\n  get: function get() {\n    return _lexer.TokenKind;\n  }\n});\n\nvar _parser = require('./parser');\n\nObject.defineProperty(exports, 'parse', {\n  enumerable: true,\n  get: function get() {\n    return _parser.parse;\n  }\n});\nObject.defineProperty(exports, 'parseValue', {\n  enumerable: true,\n  get: function get() {\n    return _parser.parseValue;\n  }\n});\nObject.defineProperty(exports, 'parseType', {\n  enumerable: true,\n  get: function get() {\n    return _parser.parseType;\n  }\n});\n\nvar _printer = require('./printer');\n\nObject.defineProperty(exports, 'print', {\n  enumerable: true,\n  get: function get() {\n    return _printer.print;\n  }\n});\n\nvar _source = require('./source');\n\nObject.defineProperty(exports, 'Source', {\n  enumerable: true,\n  get: function get() {\n    return _source.Source;\n  }\n});\n\nvar _visitor = require('./visitor');\n\nObject.defineProperty(exports, 'visit', {\n  enumerable: true,\n  get: function get() {\n    return _visitor.visit;\n  }\n});\nObject.defineProperty(exports, 'visitInParallel', {\n  enumerable: true,\n  get: function get() {\n    return _visitor.visitInParallel;\n  }\n});\nObject.defineProperty(exports, 'visitWithTypeInfo', {\n  enumerable: true,\n  get: function get() {\n    return _visitor.visitWithTypeInfo;\n  }\n});\nObject.defineProperty(exports, 'getVisitFn', {\n  enumerable: true,\n  get: function get() {\n    return _visitor.getVisitFn;\n  }\n});\nObject.defineProperty(exports, 'BREAK', {\n  enumerable: true,\n  get: function get() {\n    return _visitor.BREAK;\n  }\n});\n\nvar _directiveLocation = require('./directiveLocation');\n\nObject.defineProperty(exports, 'DirectiveLocation', {\n  enumerable: true,\n  get: function get() {\n    return _directiveLocation.DirectiveLocation;\n  }\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/language/index.js\n// module id = 140\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _execute = require('./execute');\n\nObject.defineProperty(exports, 'execute', {\n  enumerable: true,\n  get: function get() {\n    return _execute.execute;\n  }\n});\nObject.defineProperty(exports, 'defaultFieldResolver', {\n  enumerable: true,\n  get: function get() {\n    return _execute.defaultFieldResolver;\n  }\n});\nObject.defineProperty(exports, 'responsePathAsArray', {\n  enumerable: true,\n  get: function get() {\n    return _execute.responsePathAsArray;\n  }\n});\n\nvar _values = require('./values');\n\nObject.defineProperty(exports, 'getDirectiveValues', {\n  enumerable: true,\n  get: function get() {\n    return _values.getDirectiveValues;\n  }\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/execution/index.js\n// module id = 141\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _subscribe = require('./subscribe');\n\nObject.defineProperty(exports, 'subscribe', {\n  enumerable: true,\n  get: function get() {\n    return _subscribe.subscribe;\n  }\n});\nObject.defineProperty(exports, 'createSourceEventStream', {\n  enumerable: true,\n  get: function get() {\n    return _subscribe.createSourceEventStream;\n  }\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/subscription/index.js\n// module id = 142\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.subscribe = subscribe;\nexports.createSourceEventStream = createSourceEventStream;\n\nvar _iterall = require('iterall');\n\nvar _GraphQLError = require('../error/GraphQLError');\n\nvar _locatedError = require('../error/locatedError');\n\nvar _execute = require('../execution/execute');\n\nvar _schema = require('../type/schema');\n\nvar _mapAsyncIterator = require('./mapAsyncIterator');\n\nvar _mapAsyncIterator2 = _interopRequireDefault(_mapAsyncIterator);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Implements the \"Subscribe\" algorithm described in the GraphQL specification.\n *\n * Returns a Promise which resolves to either an AsyncIterator (if successful)\n * or an ExecutionResult (client error). The promise will be rejected if a\n * server error occurs.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with\n * descriptive errors and no data will be returned.\n *\n * If the the source stream could not be created due to faulty subscription\n * resolver logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to an AsyncIterator, which\n * yields a stream of ExecutionResults representing the response stream.\n *\n * Accepts either an object with named arguments, or individual arguments.\n */\n\n/* eslint-disable no-redeclare */\n/**\n * Copyright (c) 2017-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction subscribe(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, subscribeFieldResolver) {\n  /* eslint-enable no-redeclare */\n  // Extract arguments from object args if provided.\n  return arguments.length === 1 ? subscribeImpl(argsOrSchema.schema, argsOrSchema.document, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver, argsOrSchema.subscribeFieldResolver) : subscribeImpl(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, subscribeFieldResolver);\n}\n\n/**\n * This function checks if the error is a GraphQLError. If it is, report it as\n * an ExecutionResult, containing only errors and no data. Otherwise treat the\n * error as a system-class error and re-throw it.\n */\nfunction reportGraphQLError(error) {\n  if (error instanceof _GraphQLError.GraphQLError) {\n    return { errors: [error] };\n  }\n  throw error;\n}\n\nfunction subscribeImpl(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, subscribeFieldResolver) {\n  var sourcePromise = createSourceEventStream(schema, document, rootValue, contextValue, variableValues, operationName, subscribeFieldResolver);\n\n  // For each payload yielded from a subscription, map it over the normal\n  // GraphQL `execute` function, with `payload` as the rootValue.\n  // This implements the \"MapSourceToResponseEvent\" algorithm described in\n  // the GraphQL specification. The `execute` function provides the\n  // \"ExecuteSubscriptionEvent\" algorithm, as it is nearly identical to the\n  // \"ExecuteQuery\" algorithm, for which `execute` is also used.\n  var mapSourceToResponse = function mapSourceToResponse(payload) {\n    return (0, _execute.execute)(schema, document, payload, contextValue, variableValues, operationName, fieldResolver);\n  };\n\n  // Resolve the Source Stream, then map every source value to a\n  // ExecutionResult value as described above.\n  return sourcePromise.then(function (resultOrStream) {\n    return (\n      // Note: Flow can't refine isAsyncIterable, so explicit casts are used.\n      (0, _iterall.isAsyncIterable)(resultOrStream) ? (0, _mapAsyncIterator2.default)(resultOrStream, mapSourceToResponse, reportGraphQLError) : resultOrStream\n    );\n  }, reportGraphQLError);\n}\n\n/**\n * Implements the \"CreateSourceEventStream\" algorithm described in the\n * GraphQL specification, resolving the subscription source event stream.\n *\n * Returns a Promise<AsyncIterable>.\n *\n * If the client-provided invalid arguments, the source stream could not be\n * created, or the resolver did not return an AsyncIterable, this function will\n * will throw an error, which should be caught and handled by the caller.\n *\n * A Source Event Stream represents a sequence of events, each of which triggers\n * a GraphQL execution for that event.\n *\n * This may be useful when hosting the stateful subscription service in a\n * different process or machine than the stateless GraphQL execution engine,\n * or otherwise separating these two steps. For more on this, see the\n * \"Supporting Subscriptions at Scale\" information in the GraphQL specification.\n */\nfunction createSourceEventStream(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  // If arguments are missing or incorrectly typed, this is an internal\n  // developer mistake which should throw an early error.\n  (0, _execute.assertValidExecutionArguments)(schema, document, variableValues);\n\n  try {\n    // If a valid context cannot be created due to incorrect arguments,\n    // this will throw an error.\n    var exeContext = (0, _execute.buildExecutionContext)(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver);\n\n    // Return early errors if execution context failed.\n    if (Array.isArray(exeContext)) {\n      return Promise.resolve({ errors: exeContext });\n    }\n\n    var type = (0, _execute.getOperationRootType)(schema, exeContext.operation);\n    var fields = (0, _execute.collectFields)(exeContext, type, exeContext.operation.selectionSet, Object.create(null), Object.create(null));\n    var responseNames = Object.keys(fields);\n    var responseName = responseNames[0];\n    var fieldNodes = fields[responseName];\n    var fieldNode = fieldNodes[0];\n    var fieldName = fieldNode.name.value;\n    var fieldDef = (0, _execute.getFieldDef)(schema, type, fieldName);\n\n    if (!fieldDef) {\n      throw new _GraphQLError.GraphQLError('The subscription field \"' + fieldName + '\" is not defined.', fieldNodes);\n    }\n\n    // Call the `subscribe()` resolver or the default resolver to produce an\n    // AsyncIterable yielding raw payloads.\n    var resolveFn = fieldDef.subscribe || exeContext.fieldResolver;\n\n    var path = (0, _execute.addPath)(undefined, responseName);\n\n    var info = (0, _execute.buildResolveInfo)(exeContext, fieldDef, fieldNodes, type, path);\n\n    // resolveFieldValueOrError implements the \"ResolveFieldEventStream\"\n    // algorithm from GraphQL specification. It differs from\n    // \"ResolveFieldValue\" due to providing a different `resolveFn`.\n    var result = (0, _execute.resolveFieldValueOrError)(exeContext, fieldDef, fieldNodes, resolveFn, rootValue, info);\n\n    // Coerce to Promise for easier error handling and consistent return type.\n    return Promise.resolve(result).then(function (eventStream) {\n      // If eventStream is an Error, rethrow a located error.\n      if (eventStream instanceof Error) {\n        throw (0, _locatedError.locatedError)(eventStream, fieldNodes, (0, _execute.responsePathAsArray)(path));\n      }\n\n      // Assert field returned an event stream, otherwise yield an error.\n      if ((0, _iterall.isAsyncIterable)(eventStream)) {\n        // Note: isAsyncIterable above ensures this will be correct.\n        return eventStream;\n      }\n      throw new Error('Subscription field must return Async Iterable. Received: ' + String(eventStream));\n    });\n  } catch (error) {\n    return Promise.reject(error);\n  }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/subscription/subscribe.js\n// module id = 143\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = mapAsyncIterator;\n\nvar _iterall = require('iterall');\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; } /**\n                                                                                                                                                                                                                   * Copyright (c) 2017-present, Facebook, Inc.\n                                                                                                                                                                                                                   *\n                                                                                                                                                                                                                   * This source code is licensed under the MIT license found in the\n                                                                                                                                                                                                                   * LICENSE file in the root directory of this source tree.\n                                                                                                                                                                                                                   *\n                                                                                                                                                                                                                   *  strict\n                                                                                                                                                                                                                   */\n\n/**\n * Given an AsyncIterable and a callback function, return an AsyncIterator\n * which produces values mapped via calling the callback function.\n */\nfunction mapAsyncIterator(iterable, callback, rejectCallback) {\n  var iterator = (0, _iterall.getAsyncIterator)(iterable);\n  var $return = void 0;\n  var abruptClose = void 0;\n  // $FlowFixMe(>=0.68.0)\n  if (typeof iterator.return === 'function') {\n    $return = iterator.return;\n    abruptClose = function abruptClose(error) {\n      var rethrow = function rethrow() {\n        return Promise.reject(error);\n      };\n      return $return.call(iterator).then(rethrow, rethrow);\n    };\n  }\n\n  function mapResult(result) {\n    return result.done ? result : asyncMapValue(result.value, callback).then(iteratorResult, abruptClose);\n  }\n\n  var mapReject = void 0;\n  if (rejectCallback) {\n    // Capture rejectCallback to ensure it cannot be null.\n    var reject = rejectCallback;\n    mapReject = function mapReject(error) {\n      return asyncMapValue(error, reject).then(iteratorResult, abruptClose);\n    };\n  }\n\n  /* TODO: Flow doesn't support symbols as keys:\n     https://github.com/facebook/flow/issues/3258 */\n  return _defineProperty({\n    next: function next() {\n      return iterator.next().then(mapResult, mapReject);\n    },\n    return: function _return() {\n      return $return ? $return.call(iterator).then(mapResult, mapReject) : Promise.resolve({ value: undefined, done: true });\n    },\n    throw: function _throw(error) {\n      // $FlowFixMe(>=0.68.0)\n      if (typeof iterator.throw === 'function') {\n        return iterator.throw(error).then(mapResult, mapReject);\n      }\n      return Promise.reject(error).catch(abruptClose);\n    }\n  }, _iterall.$$asyncIterator, function () {\n    return this;\n  });\n}\n\nfunction asyncMapValue(value, callback) {\n  return new Promise(function (resolve) {\n    return resolve(callback(value));\n  });\n}\n\nfunction iteratorResult(value) {\n  return { value: value, done: false };\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/subscription/mapAsyncIterator.js\n// module id = 144\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.VariablesInAllowedPositionRule = exports.VariablesDefaultValueAllowedRule = exports.VariablesAreInputTypesRule = exports.ValuesOfCorrectTypeRule = exports.UniqueVariableNamesRule = exports.UniqueOperationNamesRule = exports.UniqueInputFieldNamesRule = exports.UniqueFragmentNamesRule = exports.UniqueDirectivesPerLocationRule = exports.UniqueArgumentNamesRule = exports.SingleFieldSubscriptionsRule = exports.ScalarLeafsRule = exports.ProvidedNonNullArgumentsRule = exports.PossibleFragmentSpreadsRule = exports.OverlappingFieldsCanBeMergedRule = exports.NoUnusedVariablesRule = exports.NoUnusedFragmentsRule = exports.NoUndefinedVariablesRule = exports.NoFragmentCyclesRule = exports.LoneAnonymousOperationRule = exports.KnownTypeNamesRule = exports.KnownFragmentNamesRule = exports.KnownDirectivesRule = exports.KnownArgumentNamesRule = exports.FragmentsOnCompositeTypesRule = exports.FieldsOnCorrectTypeRule = exports.specifiedRules = exports.ValidationContext = exports.validate = undefined;\n\nvar _validate = require('./validate');\n\nObject.defineProperty(exports, 'validate', {\n  enumerable: true,\n  get: function get() {\n    return _validate.validate;\n  }\n});\n\nvar _specifiedRules = require('./specifiedRules');\n\nObject.defineProperty(exports, 'specifiedRules', {\n  enumerable: true,\n  get: function get() {\n    return _specifiedRules.specifiedRules;\n  }\n});\n\nvar _FieldsOnCorrectType = require('./rules/FieldsOnCorrectType');\n\nObject.defineProperty(exports, 'FieldsOnCorrectTypeRule', {\n  enumerable: true,\n  get: function get() {\n    return _FieldsOnCorrectType.FieldsOnCorrectType;\n  }\n});\n\nvar _FragmentsOnCompositeTypes = require('./rules/FragmentsOnCompositeTypes');\n\nObject.defineProperty(exports, 'FragmentsOnCompositeTypesRule', {\n  enumerable: true,\n  get: function get() {\n    return _FragmentsOnCompositeTypes.FragmentsOnCompositeTypes;\n  }\n});\n\nvar _KnownArgumentNames = require('./rules/KnownArgumentNames');\n\nObject.defineProperty(exports, 'KnownArgumentNamesRule', {\n  enumerable: true,\n  get: function get() {\n    return _KnownArgumentNames.KnownArgumentNames;\n  }\n});\n\nvar _KnownDirectives = require('./rules/KnownDirectives');\n\nObject.defineProperty(exports, 'KnownDirectivesRule', {\n  enumerable: true,\n  get: function get() {\n    return _KnownDirectives.KnownDirectives;\n  }\n});\n\nvar _KnownFragmentNames = require('./rules/KnownFragmentNames');\n\nObject.defineProperty(exports, 'KnownFragmentNamesRule', {\n  enumerable: true,\n  get: function get() {\n    return _KnownFragmentNames.KnownFragmentNames;\n  }\n});\n\nvar _KnownTypeNames = require('./rules/KnownTypeNames');\n\nObject.defineProperty(exports, 'KnownTypeNamesRule', {\n  enumerable: true,\n  get: function get() {\n    return _KnownTypeNames.KnownTypeNames;\n  }\n});\n\nvar _LoneAnonymousOperation = require('./rules/LoneAnonymousOperation');\n\nObject.defineProperty(exports, 'LoneAnonymousOperationRule', {\n  enumerable: true,\n  get: function get() {\n    return _LoneAnonymousOperation.LoneAnonymousOperation;\n  }\n});\n\nvar _NoFragmentCycles = require('./rules/NoFragmentCycles');\n\nObject.defineProperty(exports, 'NoFragmentCyclesRule', {\n  enumerable: true,\n  get: function get() {\n    return _NoFragmentCycles.NoFragmentCycles;\n  }\n});\n\nvar _NoUndefinedVariables = require('./rules/NoUndefinedVariables');\n\nObject.defineProperty(exports, 'NoUndefinedVariablesRule', {\n  enumerable: true,\n  get: function get() {\n    return _NoUndefinedVariables.NoUndefinedVariables;\n  }\n});\n\nvar _NoUnusedFragments = require('./rules/NoUnusedFragments');\n\nObject.defineProperty(exports, 'NoUnusedFragmentsRule', {\n  enumerable: true,\n  get: function get() {\n    return _NoUnusedFragments.NoUnusedFragments;\n  }\n});\n\nvar _NoUnusedVariables = require('./rules/NoUnusedVariables');\n\nObject.defineProperty(exports, 'NoUnusedVariablesRule', {\n  enumerable: true,\n  get: function get() {\n    return _NoUnusedVariables.NoUnusedVariables;\n  }\n});\n\nvar _OverlappingFieldsCanBeMerged = require('./rules/OverlappingFieldsCanBeMerged');\n\nObject.defineProperty(exports, 'OverlappingFieldsCanBeMergedRule', {\n  enumerable: true,\n  get: function get() {\n    return _OverlappingFieldsCanBeMerged.OverlappingFieldsCanBeMerged;\n  }\n});\n\nvar _PossibleFragmentSpreads = require('./rules/PossibleFragmentSpreads');\n\nObject.defineProperty(exports, 'PossibleFragmentSpreadsRule', {\n  enumerable: true,\n  get: function get() {\n    return _PossibleFragmentSpreads.PossibleFragmentSpreads;\n  }\n});\n\nvar _ProvidedNonNullArguments = require('./rules/ProvidedNonNullArguments');\n\nObject.defineProperty(exports, 'ProvidedNonNullArgumentsRule', {\n  enumerable: true,\n  get: function get() {\n    return _ProvidedNonNullArguments.ProvidedNonNullArguments;\n  }\n});\n\nvar _ScalarLeafs = require('./rules/ScalarLeafs');\n\nObject.defineProperty(exports, 'ScalarLeafsRule', {\n  enumerable: true,\n  get: function get() {\n    return _ScalarLeafs.ScalarLeafs;\n  }\n});\n\nvar _SingleFieldSubscriptions = require('./rules/SingleFieldSubscriptions');\n\nObject.defineProperty(exports, 'SingleFieldSubscriptionsRule', {\n  enumerable: true,\n  get: function get() {\n    return _SingleFieldSubscriptions.SingleFieldSubscriptions;\n  }\n});\n\nvar _UniqueArgumentNames = require('./rules/UniqueArgumentNames');\n\nObject.defineProperty(exports, 'UniqueArgumentNamesRule', {\n  enumerable: true,\n  get: function get() {\n    return _UniqueArgumentNames.UniqueArgumentNames;\n  }\n});\n\nvar _UniqueDirectivesPerLocation = require('./rules/UniqueDirectivesPerLocation');\n\nObject.defineProperty(exports, 'UniqueDirectivesPerLocationRule', {\n  enumerable: true,\n  get: function get() {\n    return _UniqueDirectivesPerLocation.UniqueDirectivesPerLocation;\n  }\n});\n\nvar _UniqueFragmentNames = require('./rules/UniqueFragmentNames');\n\nObject.defineProperty(exports, 'UniqueFragmentNamesRule', {\n  enumerable: true,\n  get: function get() {\n    return _UniqueFragmentNames.UniqueFragmentNames;\n  }\n});\n\nvar _UniqueInputFieldNames = require('./rules/UniqueInputFieldNames');\n\nObject.defineProperty(exports, 'UniqueInputFieldNamesRule', {\n  enumerable: true,\n  get: function get() {\n    return _UniqueInputFieldNames.UniqueInputFieldNames;\n  }\n});\n\nvar _UniqueOperationNames = require('./rules/UniqueOperationNames');\n\nObject.defineProperty(exports, 'UniqueOperationNamesRule', {\n  enumerable: true,\n  get: function get() {\n    return _UniqueOperationNames.UniqueOperationNames;\n  }\n});\n\nvar _UniqueVariableNames = require('./rules/UniqueVariableNames');\n\nObject.defineProperty(exports, 'UniqueVariableNamesRule', {\n  enumerable: true,\n  get: function get() {\n    return _UniqueVariableNames.UniqueVariableNames;\n  }\n});\n\nvar _ValuesOfCorrectType = require('./rules/ValuesOfCorrectType');\n\nObject.defineProperty(exports, 'ValuesOfCorrectTypeRule', {\n  enumerable: true,\n  get: function get() {\n    return _ValuesOfCorrectType.ValuesOfCorrectType;\n  }\n});\n\nvar _VariablesAreInputTypes = require('./rules/VariablesAreInputTypes');\n\nObject.defineProperty(exports, 'VariablesAreInputTypesRule', {\n  enumerable: true,\n  get: function get() {\n    return _VariablesAreInputTypes.VariablesAreInputTypes;\n  }\n});\n\nvar _VariablesDefaultValueAllowed = require('./rules/VariablesDefaultValueAllowed');\n\nObject.defineProperty(exports, 'VariablesDefaultValueAllowedRule', {\n  enumerable: true,\n  get: function get() {\n    return _VariablesDefaultValueAllowed.VariablesDefaultValueAllowed;\n  }\n});\n\nvar _VariablesInAllowedPosition = require('./rules/VariablesInAllowedPosition');\n\nObject.defineProperty(exports, 'VariablesInAllowedPositionRule', {\n  enumerable: true,\n  get: function get() {\n    return _VariablesInAllowedPosition.VariablesInAllowedPosition;\n  }\n});\n\nvar _ValidationContext = require('./ValidationContext');\n\nvar _ValidationContext2 = _interopRequireDefault(_ValidationContext);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.ValidationContext = _ValidationContext2.default;\n\n// https://github.com/tc39/proposal-export-default-from\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/validation/index.js\n// module id = 145\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _introspectionQuery = require('./introspectionQuery');\n\nObject.defineProperty(exports, 'getIntrospectionQuery', {\n  enumerable: true,\n  get: function get() {\n    return _introspectionQuery.getIntrospectionQuery;\n  }\n});\nObject.defineProperty(exports, 'introspectionQuery', {\n  enumerable: true,\n  get: function get() {\n    return _introspectionQuery.introspectionQuery;\n  }\n});\n\nvar _getOperationAST = require('./getOperationAST');\n\nObject.defineProperty(exports, 'getOperationAST', {\n  enumerable: true,\n  get: function get() {\n    return _getOperationAST.getOperationAST;\n  }\n});\n\nvar _introspectionFromSchema = require('./introspectionFromSchema');\n\nObject.defineProperty(exports, 'introspectionFromSchema', {\n  enumerable: true,\n  get: function get() {\n    return _introspectionFromSchema.introspectionFromSchema;\n  }\n});\n\nvar _buildClientSchema = require('./buildClientSchema');\n\nObject.defineProperty(exports, 'buildClientSchema', {\n  enumerable: true,\n  get: function get() {\n    return _buildClientSchema.buildClientSchema;\n  }\n});\n\nvar _buildASTSchema = require('./buildASTSchema');\n\nObject.defineProperty(exports, 'buildASTSchema', {\n  enumerable: true,\n  get: function get() {\n    return _buildASTSchema.buildASTSchema;\n  }\n});\nObject.defineProperty(exports, 'buildSchema', {\n  enumerable: true,\n  get: function get() {\n    return _buildASTSchema.buildSchema;\n  }\n});\nObject.defineProperty(exports, 'getDescription', {\n  enumerable: true,\n  get: function get() {\n    return _buildASTSchema.getDescription;\n  }\n});\n\nvar _extendSchema = require('./extendSchema');\n\nObject.defineProperty(exports, 'extendSchema', {\n  enumerable: true,\n  get: function get() {\n    return _extendSchema.extendSchema;\n  }\n});\n\nvar _lexicographicSortSchema = require('./lexicographicSortSchema');\n\nObject.defineProperty(exports, 'lexicographicSortSchema', {\n  enumerable: true,\n  get: function get() {\n    return _lexicographicSortSchema.lexicographicSortSchema;\n  }\n});\n\nvar _schemaPrinter = require('./schemaPrinter');\n\nObject.defineProperty(exports, 'printSchema', {\n  enumerable: true,\n  get: function get() {\n    return _schemaPrinter.printSchema;\n  }\n});\nObject.defineProperty(exports, 'printType', {\n  enumerable: true,\n  get: function get() {\n    return _schemaPrinter.printType;\n  }\n});\nObject.defineProperty(exports, 'printIntrospectionSchema', {\n  enumerable: true,\n  get: function get() {\n    return _schemaPrinter.printIntrospectionSchema;\n  }\n});\n\nvar _typeFromAST = require('./typeFromAST');\n\nObject.defineProperty(exports, 'typeFromAST', {\n  enumerable: true,\n  get: function get() {\n    return _typeFromAST.typeFromAST;\n  }\n});\n\nvar _valueFromAST = require('./valueFromAST');\n\nObject.defineProperty(exports, 'valueFromAST', {\n  enumerable: true,\n  get: function get() {\n    return _valueFromAST.valueFromAST;\n  }\n});\n\nvar _valueFromASTUntyped = require('./valueFromASTUntyped');\n\nObject.defineProperty(exports, 'valueFromASTUntyped', {\n  enumerable: true,\n  get: function get() {\n    return _valueFromASTUntyped.valueFromASTUntyped;\n  }\n});\n\nvar _astFromValue = require('./astFromValue');\n\nObject.defineProperty(exports, 'astFromValue', {\n  enumerable: true,\n  get: function get() {\n    return _astFromValue.astFromValue;\n  }\n});\n\nvar _TypeInfo = require('./TypeInfo');\n\nObject.defineProperty(exports, 'TypeInfo', {\n  enumerable: true,\n  get: function get() {\n    return _TypeInfo.TypeInfo;\n  }\n});\n\nvar _coerceValue = require('./coerceValue');\n\nObject.defineProperty(exports, 'coerceValue', {\n  enumerable: true,\n  get: function get() {\n    return _coerceValue.coerceValue;\n  }\n});\n\nvar _isValidJSValue = require('./isValidJSValue');\n\nObject.defineProperty(exports, 'isValidJSValue', {\n  enumerable: true,\n  get: function get() {\n    return _isValidJSValue.isValidJSValue;\n  }\n});\n\nvar _isValidLiteralValue = require('./isValidLiteralValue');\n\nObject.defineProperty(exports, 'isValidLiteralValue', {\n  enumerable: true,\n  get: function get() {\n    return _isValidLiteralValue.isValidLiteralValue;\n  }\n});\n\nvar _concatAST = require('./concatAST');\n\nObject.defineProperty(exports, 'concatAST', {\n  enumerable: true,\n  get: function get() {\n    return _concatAST.concatAST;\n  }\n});\n\nvar _separateOperations = require('./separateOperations');\n\nObject.defineProperty(exports, 'separateOperations', {\n  enumerable: true,\n  get: function get() {\n    return _separateOperations.separateOperations;\n  }\n});\n\nvar _typeComparators = require('./typeComparators');\n\nObject.defineProperty(exports, 'isEqualType', {\n  enumerable: true,\n  get: function get() {\n    return _typeComparators.isEqualType;\n  }\n});\nObject.defineProperty(exports, 'isTypeSubTypeOf', {\n  enumerable: true,\n  get: function get() {\n    return _typeComparators.isTypeSubTypeOf;\n  }\n});\nObject.defineProperty(exports, 'doTypesOverlap', {\n  enumerable: true,\n  get: function get() {\n    return _typeComparators.doTypesOverlap;\n  }\n});\n\nvar _assertValidName = require('./assertValidName');\n\nObject.defineProperty(exports, 'assertValidName', {\n  enumerable: true,\n  get: function get() {\n    return _assertValidName.assertValidName;\n  }\n});\nObject.defineProperty(exports, 'isValidNameError', {\n  enumerable: true,\n  get: function get() {\n    return _assertValidName.isValidNameError;\n  }\n});\n\nvar _findBreakingChanges = require('./findBreakingChanges');\n\nObject.defineProperty(exports, 'BreakingChangeType', {\n  enumerable: true,\n  get: function get() {\n    return _findBreakingChanges.BreakingChangeType;\n  }\n});\nObject.defineProperty(exports, 'DangerousChangeType', {\n  enumerable: true,\n  get: function get() {\n    return _findBreakingChanges.DangerousChangeType;\n  }\n});\nObject.defineProperty(exports, 'findBreakingChanges', {\n  enumerable: true,\n  get: function get() {\n    return _findBreakingChanges.findBreakingChanges;\n  }\n});\nObject.defineProperty(exports, 'findDangerousChanges', {\n  enumerable: true,\n  get: function get() {\n    return _findBreakingChanges.findDangerousChanges;\n  }\n});\n\nvar _findDeprecatedUsages = require('./findDeprecatedUsages');\n\nObject.defineProperty(exports, 'findDeprecatedUsages', {\n  enumerable: true,\n  get: function get() {\n    return _findDeprecatedUsages.findDeprecatedUsages;\n  }\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/utilities/index.js\n// module id = 146\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.introspectionFromSchema = introspectionFromSchema;\n\nvar _invariant = require('../jsutils/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _introspectionQuery = require('./introspectionQuery');\n\nvar _schema = require('../type/schema');\n\nvar _execute = require('../execution/execute');\n\nvar _parser = require('../language/parser');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Build an IntrospectionQuery from a GraphQLSchema\n *\n * IntrospectionQuery is useful for utilities that care about type and field\n * relationships, but do not need to traverse through those relationships.\n *\n * This is the inverse of buildClientSchema. The primary use case is outside\n * of the server context, for instance when doing schema comparisons.\n */\nfunction introspectionFromSchema(schema, options) {\n  var queryAST = (0, _parser.parse)((0, _introspectionQuery.getIntrospectionQuery)(options));\n  var result = (0, _execute.execute)(schema, queryAST);\n  !(!result.then && !result.errors && result.data) ? (0, _invariant2.default)(0) : void 0;\n  return result.data;\n} /**\n   * Copyright (c) 2015-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   *  strict\n   */\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/utilities/introspectionFromSchema.js\n// module id = 147\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildClientSchema = buildClientSchema;\n\nvar _invariant = require('../jsutils/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _keyMap = require('../jsutils/keyMap');\n\nvar _keyMap2 = _interopRequireDefault(_keyMap);\n\nvar _keyValMap = require('../jsutils/keyValMap');\n\nvar _keyValMap2 = _interopRequireDefault(_keyValMap);\n\nvar _valueFromAST = require('./valueFromAST');\n\nvar _parser = require('../language/parser');\n\nvar _schema = require('../type/schema');\n\nvar _directiveLocation = require('../language/directiveLocation');\n\nvar _definition = require('../type/definition');\n\nvar _directives = require('../type/directives');\n\nvar _introspection = require('../type/introspection');\n\nvar _scalars = require('../type/scalars');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Build a GraphQLSchema for use by client tools.\n *\n * Given the result of a client running the introspection query, creates and\n * returns a GraphQLSchema instance which can be then used with all graphql-js\n * tools, but cannot be used to execute a query, as introspection does not\n * represent the \"resolver\", \"parse\" or \"serialize\" functions or any other\n * server-internal mechanisms.\n *\n * This function expects a complete introspection result. Don't forget to check\n * the \"errors\" field of a server response before calling this function.\n */\nfunction buildClientSchema(introspection, options) {\n  // Get the schema from the introspection result.\n  var schemaIntrospection = introspection.__schema;\n\n  // Converts the list of types into a keyMap based on the type names.\n  var typeIntrospectionMap = (0, _keyMap2.default)(schemaIntrospection.types, function (type) {\n    return type.name;\n  });\n\n  // A cache to use to store the actual GraphQLType definition objects by name.\n  // Initialize to the GraphQL built in scalars. All functions below are inline\n  // so that this type def cache is within the scope of the closure.\n  var typeDefCache = (0, _keyMap2.default)(_scalars.specifiedScalarTypes.concat(_introspection.introspectionTypes), function (type) {\n    return type.name;\n  });\n\n  // Given a type reference in introspection, return the GraphQLType instance.\n  // preferring cached instances before building new instances.\n  function getType(typeRef) {\n    if (typeRef.kind === _introspection.TypeKind.LIST) {\n      var itemRef = typeRef.ofType;\n      if (!itemRef) {\n        throw new Error('Decorated type deeper than introspection query.');\n      }\n      return (0, _definition.GraphQLList)(getType(itemRef));\n    }\n    if (typeRef.kind === _introspection.TypeKind.NON_NULL) {\n      var nullableRef = typeRef.ofType;\n      if (!nullableRef) {\n        throw new Error('Decorated type deeper than introspection query.');\n      }\n      var nullableType = getType(nullableRef);\n      return (0, _definition.GraphQLNonNull)((0, _definition.assertNullableType)(nullableType));\n    }\n    if (!typeRef.name) {\n      throw new Error('Unknown type reference: ' + JSON.stringify(typeRef));\n    }\n    return getNamedType(typeRef.name);\n  }\n\n  function getNamedType(typeName) {\n    if (typeDefCache[typeName]) {\n      return typeDefCache[typeName];\n    }\n    var typeIntrospection = typeIntrospectionMap[typeName];\n    if (!typeIntrospection) {\n      throw new Error('Invalid or incomplete schema, unknown type: ' + typeName + '. Ensure ' + 'that a full introspection query is used in order to build a ' + 'client schema.');\n    }\n    var typeDef = buildType(typeIntrospection);\n    typeDefCache[typeName] = typeDef;\n    return typeDef;\n  }\n\n  function getInputType(typeRef) {\n    var type = getType(typeRef);\n    !(0, _definition.isInputType)(type) ? (0, _invariant2.default)(0, 'Introspection must provide input type for arguments.') : void 0;\n    return type;\n  }\n\n  function getOutputType(typeRef) {\n    var type = getType(typeRef);\n    !(0, _definition.isOutputType)(type) ? (0, _invariant2.default)(0, 'Introspection must provide output type for fields.') : void 0;\n    return type;\n  }\n\n  function getObjectType(typeRef) {\n    var type = getType(typeRef);\n    return (0, _definition.assertObjectType)(type);\n  }\n\n  function getInterfaceType(typeRef) {\n    var type = getType(typeRef);\n    return (0, _definition.assertInterfaceType)(type);\n  }\n\n  // Given a type's introspection result, construct the correct\n  // GraphQLType instance.\n  function buildType(type) {\n    if (type && type.name && type.kind) {\n      switch (type.kind) {\n        case _introspection.TypeKind.SCALAR:\n          return buildScalarDef(type);\n        case _introspection.TypeKind.OBJECT:\n          return buildObjectDef(type);\n        case _introspection.TypeKind.INTERFACE:\n          return buildInterfaceDef(type);\n        case _introspection.TypeKind.UNION:\n          return buildUnionDef(type);\n        case _introspection.TypeKind.ENUM:\n          return buildEnumDef(type);\n        case _introspection.TypeKind.INPUT_OBJECT:\n          return buildInputObjectDef(type);\n      }\n    }\n    throw new Error('Invalid or incomplete introspection result. Ensure that a full ' + 'introspection query is used in order to build a client schema:' + JSON.stringify(type));\n  }\n\n  function buildScalarDef(scalarIntrospection) {\n    return new _definition.GraphQLScalarType({\n      name: scalarIntrospection.name,\n      description: scalarIntrospection.description,\n      serialize: function serialize(value) {\n        return value;\n      }\n    });\n  }\n\n  function buildObjectDef(objectIntrospection) {\n    if (!objectIntrospection.interfaces) {\n      throw new Error('Introspection result missing interfaces: ' + JSON.stringify(objectIntrospection));\n    }\n    return new _definition.GraphQLObjectType({\n      name: objectIntrospection.name,\n      description: objectIntrospection.description,\n      interfaces: objectIntrospection.interfaces.map(getInterfaceType),\n      fields: function fields() {\n        return buildFieldDefMap(objectIntrospection);\n      }\n    });\n  }\n\n  function buildInterfaceDef(interfaceIntrospection) {\n    return new _definition.GraphQLInterfaceType({\n      name: interfaceIntrospection.name,\n      description: interfaceIntrospection.description,\n      fields: function fields() {\n        return buildFieldDefMap(interfaceIntrospection);\n      }\n    });\n  }\n\n  function buildUnionDef(unionIntrospection) {\n    if (!unionIntrospection.possibleTypes) {\n      throw new Error('Introspection result missing possibleTypes: ' + JSON.stringify(unionIntrospection));\n    }\n    return new _definition.GraphQLUnionType({\n      name: unionIntrospection.name,\n      description: unionIntrospection.description,\n      types: unionIntrospection.possibleTypes.map(getObjectType)\n    });\n  }\n\n  function buildEnumDef(enumIntrospection) {\n    if (!enumIntrospection.enumValues) {\n      throw new Error('Introspection result missing enumValues: ' + JSON.stringify(enumIntrospection));\n    }\n    return new _definition.GraphQLEnumType({\n      name: enumIntrospection.name,\n      description: enumIntrospection.description,\n      values: (0, _keyValMap2.default)(enumIntrospection.enumValues, function (valueIntrospection) {\n        return valueIntrospection.name;\n      }, function (valueIntrospection) {\n        return {\n          description: valueIntrospection.description,\n          deprecationReason: valueIntrospection.deprecationReason\n        };\n      })\n    });\n  }\n\n  function buildInputObjectDef(inputObjectIntrospection) {\n    if (!inputObjectIntrospection.inputFields) {\n      throw new Error('Introspection result missing inputFields: ' + JSON.stringify(inputObjectIntrospection));\n    }\n    return new _definition.GraphQLInputObjectType({\n      name: inputObjectIntrospection.name,\n      description: inputObjectIntrospection.description,\n      fields: function fields() {\n        return buildInputValueDefMap(inputObjectIntrospection.inputFields);\n      }\n    });\n  }\n\n  function buildFieldDefMap(typeIntrospection) {\n    if (!typeIntrospection.fields) {\n      throw new Error('Introspection result missing fields: ' + JSON.stringify(typeIntrospection));\n    }\n    return (0, _keyValMap2.default)(typeIntrospection.fields, function (fieldIntrospection) {\n      return fieldIntrospection.name;\n    }, function (fieldIntrospection) {\n      if (!fieldIntrospection.args) {\n        throw new Error('Introspection result missing field args: ' + JSON.stringify(fieldIntrospection));\n      }\n      return {\n        description: fieldIntrospection.description,\n        deprecationReason: fieldIntrospection.deprecationReason,\n        type: getOutputType(fieldIntrospection.type),\n        args: buildInputValueDefMap(fieldIntrospection.args)\n      };\n    });\n  }\n\n  function buildInputValueDefMap(inputValueIntrospections) {\n    return (0, _keyValMap2.default)(inputValueIntrospections, function (inputValue) {\n      return inputValue.name;\n    }, buildInputValue);\n  }\n\n  function buildInputValue(inputValueIntrospection) {\n    var type = getInputType(inputValueIntrospection.type);\n    var defaultValue = inputValueIntrospection.defaultValue ? (0, _valueFromAST.valueFromAST)((0, _parser.parseValue)(inputValueIntrospection.defaultValue), type) : undefined;\n    return {\n      name: inputValueIntrospection.name,\n      description: inputValueIntrospection.description,\n      type: type,\n      defaultValue: defaultValue\n    };\n  }\n\n  function buildDirective(directiveIntrospection) {\n    // Support deprecated `on****` fields for building `locations`, as this\n    // is used by GraphiQL which may need to support outdated servers.\n    var locations = directiveIntrospection.locations ? directiveIntrospection.locations.slice() : [].concat(!directiveIntrospection.onField ? [] : [_directiveLocation.DirectiveLocation.FIELD], !directiveIntrospection.onOperation ? [] : [_directiveLocation.DirectiveLocation.QUERY, _directiveLocation.DirectiveLocation.MUTATION, _directiveLocation.DirectiveLocation.SUBSCRIPTION], !directiveIntrospection.onFragment ? [] : [_directiveLocation.DirectiveLocation.FRAGMENT_DEFINITION, _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD, _directiveLocation.DirectiveLocation.INLINE_FRAGMENT]);\n    if (!directiveIntrospection.args) {\n      throw new Error('Introspection result missing directive args: ' + JSON.stringify(directiveIntrospection));\n    }\n    return new _directives.GraphQLDirective({\n      name: directiveIntrospection.name,\n      description: directiveIntrospection.description,\n      locations: locations,\n      args: buildInputValueDefMap(directiveIntrospection.args)\n    });\n  }\n\n  // Iterate through all types, getting the type definition for each, ensuring\n  // that any type not directly referenced by a field will get created.\n  var types = schemaIntrospection.types.map(function (typeIntrospection) {\n    return getNamedType(typeIntrospection.name);\n  });\n\n  // Get the root Query, Mutation, and Subscription types.\n  var queryType = schemaIntrospection.queryType ? getObjectType(schemaIntrospection.queryType) : null;\n\n  var mutationType = schemaIntrospection.mutationType ? getObjectType(schemaIntrospection.mutationType) : null;\n\n  var subscriptionType = schemaIntrospection.subscriptionType ? getObjectType(schemaIntrospection.subscriptionType) : null;\n\n  // Get the directives supported by Introspection, assuming empty-set if\n  // directives were not queried for.\n  var directives = schemaIntrospection.directives ? schemaIntrospection.directives.map(buildDirective) : [];\n\n  // Then produce and return a Schema with these types.\n  return new _schema.GraphQLSchema({\n    query: queryType,\n    mutation: mutationType,\n    subscription: subscriptionType,\n    types: types,\n    directives: directives,\n    assumeValid: options && options.assumeValid,\n    allowedLegacyNames: options && options.allowedLegacyNames\n  });\n} /**\n   * Copyright (c) 2015-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   *  strict\n   */\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/utilities/buildClientSchema.js\n// module id = 148\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.extendSchema = extendSchema;\n\nvar _invariant = require('../jsutils/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _keyMap = require('../jsutils/keyMap');\n\nvar _keyMap2 = _interopRequireDefault(_keyMap);\n\nvar _objectValues = require('../jsutils/objectValues');\n\nvar _objectValues2 = _interopRequireDefault(_objectValues);\n\nvar _buildASTSchema = require('./buildASTSchema');\n\nvar _GraphQLError = require('../error/GraphQLError');\n\nvar _schema = require('../type/schema');\n\nvar _introspection = require('../type/introspection');\n\nvar _definition = require('../type/definition');\n\nvar _directives = require('../type/directives');\n\nvar _kinds = require('../language/kinds');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Produces a new schema given an existing schema and a document which may\n * contain GraphQL type extensions and definitions. The original schema will\n * remain unaltered.\n *\n * Because a schema represents a graph of references, a schema cannot be\n * extended without effectively making an entire copy. We do not know until it's\n * too late if subgraphs remain unchanged.\n *\n * This algorithm copies the provided schema, applying extensions while\n * producing the copy. The original schema remains unaltered.\n *\n * Accepts options as a third argument:\n *\n *    - commentDescriptions:\n *        Provide true to use preceding comments as the description.\n *\n */\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction extendSchema(schema, documentAST, options) {\n  !(0, _schema.isSchema)(schema) ? (0, _invariant2.default)(0, 'Must provide valid GraphQLSchema') : void 0;\n\n  !(documentAST && documentAST.kind === _kinds.Kind.DOCUMENT) ? (0, _invariant2.default)(0, 'Must provide valid Document AST') : void 0;\n\n  // Collect the type definitions and extensions found in the document.\n  var typeDefinitionMap = Object.create(null);\n  var typeExtensionsMap = Object.create(null);\n\n  // New directives and types are separate because a directives and types can\n  // have the same name. For example, a type named \"skip\".\n  var directiveDefinitions = [];\n\n  for (var i = 0; i < documentAST.definitions.length; i++) {\n    var def = documentAST.definitions[i];\n    switch (def.kind) {\n      case _kinds.Kind.OBJECT_TYPE_DEFINITION:\n      case _kinds.Kind.INTERFACE_TYPE_DEFINITION:\n      case _kinds.Kind.ENUM_TYPE_DEFINITION:\n      case _kinds.Kind.UNION_TYPE_DEFINITION:\n      case _kinds.Kind.SCALAR_TYPE_DEFINITION:\n      case _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION:\n        // Sanity check that none of the defined types conflict with the\n        // schema's existing types.\n        var typeName = def.name.value;\n        if (schema.getType(typeName)) {\n          throw new _GraphQLError.GraphQLError('Type \"' + typeName + '\" already exists in the schema. It cannot also ' + 'be defined in this type definition.', [def]);\n        }\n        typeDefinitionMap[typeName] = def;\n        break;\n      case _kinds.Kind.OBJECT_TYPE_EXTENSION:\n      case _kinds.Kind.INTERFACE_TYPE_EXTENSION:\n        // Sanity check that this type extension exists within the\n        // schema's existing types.\n        var extendedTypeName = def.name.value;\n        var existingType = schema.getType(extendedTypeName);\n        if (!existingType) {\n          throw new _GraphQLError.GraphQLError('Cannot extend type \"' + extendedTypeName + '\" because it does not ' + 'exist in the existing schema.', [def]);\n        }\n        checkExtensionNode(existingType, def);\n\n        var existingTypeExtensions = typeExtensionsMap[extendedTypeName];\n        typeExtensionsMap[extendedTypeName] = existingTypeExtensions ? existingTypeExtensions.concat([def]) : [def];\n        break;\n      case _kinds.Kind.DIRECTIVE_DEFINITION:\n        var directiveName = def.name.value;\n        var existingDirective = schema.getDirective(directiveName);\n        if (existingDirective) {\n          throw new _GraphQLError.GraphQLError('Directive \"' + directiveName + '\" already exists in the schema. It ' + 'cannot be redefined.', [def]);\n        }\n        directiveDefinitions.push(def);\n        break;\n      case _kinds.Kind.SCALAR_TYPE_EXTENSION:\n      case _kinds.Kind.UNION_TYPE_EXTENSION:\n      case _kinds.Kind.ENUM_TYPE_EXTENSION:\n      case _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION:\n        throw new Error('The ' + def.kind + ' kind is not yet supported by extendSchema().');\n    }\n  }\n\n  // If this document contains no new types, extensions, or directives then\n  // return the same unmodified GraphQLSchema instance.\n  if (Object.keys(typeExtensionsMap).length === 0 && Object.keys(typeDefinitionMap).length === 0 && directiveDefinitions.length === 0) {\n    return schema;\n  }\n\n  var astBuilder = new _buildASTSchema.ASTDefinitionBuilder(typeDefinitionMap, options, function (typeRef) {\n    var typeName = typeRef.name.value;\n    var existingType = schema.getType(typeName);\n    if (existingType) {\n      return getExtendedType(existingType);\n    }\n\n    throw new _GraphQLError.GraphQLError('Unknown type: \"' + typeName + '\". Ensure that this type exists ' + 'either in the original schema, or is added in a type definition.', [typeRef]);\n  });\n\n  var extendTypeCache = Object.create(null);\n\n  // Get the root Query, Mutation, and Subscription object types.\n  var existingQueryType = schema.getQueryType();\n  var queryType = existingQueryType ? getExtendedType(existingQueryType) : null;\n\n  var existingMutationType = schema.getMutationType();\n  var mutationType = existingMutationType ? getExtendedType(existingMutationType) : null;\n\n  var existingSubscriptionType = schema.getSubscriptionType();\n  var subscriptionType = existingSubscriptionType ? getExtendedType(existingSubscriptionType) : null;\n\n  var types = [].concat((0, _objectValues2.default)(schema.getTypeMap()).map(function (type) {\n    return getExtendedType(type);\n  }), astBuilder.buildTypes((0, _objectValues2.default)(typeDefinitionMap)));\n\n  // Support both original legacy names and extended legacy names.\n  var schemaAllowedLegacyNames = schema.__allowedLegacyNames;\n  var extendAllowedLegacyNames = options && options.allowedLegacyNames;\n  var allowedLegacyNames = schemaAllowedLegacyNames && extendAllowedLegacyNames ? schemaAllowedLegacyNames.concat(extendAllowedLegacyNames) : schemaAllowedLegacyNames || extendAllowedLegacyNames;\n\n  // Then produce and return a Schema with these types.\n  return new _schema.GraphQLSchema({\n    query: queryType,\n    mutation: mutationType,\n    subscription: subscriptionType,\n    types: types,\n    directives: getMergedDirectives(),\n    astNode: schema.astNode,\n    allowedLegacyNames: allowedLegacyNames\n  });\n\n  // Below are functions used for producing this schema that have closed over\n  // this scope and have access to the schema, cache, and newly defined types.\n\n  function getMergedDirectives() {\n    var existingDirectives = schema.getDirectives();\n    !existingDirectives ? (0, _invariant2.default)(0, 'schema must have default directives') : void 0;\n\n    return existingDirectives.concat(directiveDefinitions.map(function (node) {\n      return astBuilder.buildDirective(node);\n    }));\n  }\n\n  function getExtendedType(type) {\n    if (!extendTypeCache[type.name]) {\n      extendTypeCache[type.name] = extendType(type);\n    }\n    return extendTypeCache[type.name];\n  }\n\n  // To be called at most once per type. Only getExtendedType should call this.\n  function extendType(type) {\n    if ((0, _introspection.isIntrospectionType)(type)) {\n      // Introspection types are not extended.\n      return type;\n    }\n    if ((0, _definition.isObjectType)(type)) {\n      return extendObjectType(type);\n    }\n    if ((0, _definition.isInterfaceType)(type)) {\n      return extendInterfaceType(type);\n    }\n    if ((0, _definition.isUnionType)(type)) {\n      return extendUnionType(type);\n    }\n    // This type is not yet extendable.\n    return type;\n  }\n\n  function extendObjectType(type) {\n    var name = type.name;\n    var extensionASTNodes = typeExtensionsMap[name] ? type.extensionASTNodes ? type.extensionASTNodes.concat(typeExtensionsMap[name]) : typeExtensionsMap[name] : type.extensionASTNodes;\n    return new _definition.GraphQLObjectType({\n      name: name,\n      description: type.description,\n      interfaces: function interfaces() {\n        return extendImplementedInterfaces(type);\n      },\n      fields: function fields() {\n        return extendFieldMap(type);\n      },\n      astNode: type.astNode,\n      extensionASTNodes: extensionASTNodes,\n      isTypeOf: type.isTypeOf\n    });\n  }\n\n  function extendInterfaceType(type) {\n    var name = type.name;\n    var extensionASTNodes = typeExtensionsMap[name] ? type.extensionASTNodes ? type.extensionASTNodes.concat(typeExtensionsMap[name]) : typeExtensionsMap[name] : type.extensionASTNodes;\n    return new _definition.GraphQLInterfaceType({\n      name: type.name,\n      description: type.description,\n      fields: function fields() {\n        return extendFieldMap(type);\n      },\n      astNode: type.astNode,\n      extensionASTNodes: extensionASTNodes,\n      resolveType: type.resolveType\n    });\n  }\n\n  function extendUnionType(type) {\n    return new _definition.GraphQLUnionType({\n      name: type.name,\n      description: type.description,\n      types: type.getTypes().map(getExtendedType),\n      astNode: type.astNode,\n      resolveType: type.resolveType\n    });\n  }\n\n  function extendImplementedInterfaces(type) {\n    var interfaces = type.getInterfaces().map(getExtendedType);\n\n    // If there are any extensions to the interfaces, apply those here.\n    var extensions = typeExtensionsMap[type.name];\n    if (extensions) {\n      extensions.forEach(function (extension) {\n        extension.interfaces.forEach(function (namedType) {\n          // Note: While this could make early assertions to get the correctly\n          // typed values, that would throw immediately while type system\n          // validation with validateSchema() will produce more actionable results.\n          interfaces.push(astBuilder.buildType(namedType));\n        });\n      });\n    }\n\n    return interfaces;\n  }\n\n  function extendFieldMap(type) {\n    var newFieldMap = Object.create(null);\n    var oldFieldMap = type.getFields();\n    Object.keys(oldFieldMap).forEach(function (fieldName) {\n      var field = oldFieldMap[fieldName];\n      newFieldMap[fieldName] = {\n        description: field.description,\n        deprecationReason: field.deprecationReason,\n        type: extendFieldType(field.type),\n        args: (0, _keyMap2.default)(field.args, function (arg) {\n          return arg.name;\n        }),\n        astNode: field.astNode,\n        resolve: field.resolve\n      };\n    });\n\n    // If there are any extensions to the fields, apply those here.\n    var extensions = typeExtensionsMap[type.name];\n    if (extensions) {\n      extensions.forEach(function (extension) {\n        extension.fields.forEach(function (field) {\n          var fieldName = field.name.value;\n          if (oldFieldMap[fieldName]) {\n            throw new _GraphQLError.GraphQLError('Field \"' + type.name + '.' + fieldName + '\" already exists in the ' + 'schema. It cannot also be defined in this type extension.', [field]);\n          }\n          newFieldMap[fieldName] = astBuilder.buildField(field);\n        });\n      });\n    }\n\n    return newFieldMap;\n  }\n\n  function extendFieldType(typeDef) {\n    if ((0, _definition.isListType)(typeDef)) {\n      return (0, _definition.GraphQLList)(extendFieldType(typeDef.ofType));\n    }\n    if ((0, _definition.isNonNullType)(typeDef)) {\n      return (0, _definition.GraphQLNonNull)(extendFieldType(typeDef.ofType));\n    }\n    return getExtendedType(typeDef);\n  }\n}\n\nfunction checkExtensionNode(type, node) {\n  switch (node.kind) {\n    case _kinds.Kind.OBJECT_TYPE_EXTENSION:\n      if (!(0, _definition.isObjectType)(type)) {\n        throw new _GraphQLError.GraphQLError('Cannot extend non-object type \"' + type.name + '\".', [node]);\n      }\n      break;\n    case _kinds.Kind.INTERFACE_TYPE_EXTENSION:\n      if (!(0, _definition.isInterfaceType)(type)) {\n        throw new _GraphQLError.GraphQLError('Cannot extend non-interface type \"' + type.name + '\".', [node]);\n      }\n      break;\n  }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/utilities/extendSchema.js\n// module id = 149\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**\n                                                                                                                                                                                                                                                                   * Copyright (c) 2015-present, Facebook, Inc.\n                                                                                                                                                                                                                                                                   *\n                                                                                                                                                                                                                                                                   * This source code is licensed under the MIT license found in the\n                                                                                                                                                                                                                                                                   * LICENSE file in the root directory of this source tree.\n                                                                                                                                                                                                                                                                   *\n                                                                                                                                                                                                                                                                   *  strict\n                                                                                                                                                                                                                                                                   */\n\nexports.lexicographicSortSchema = lexicographicSortSchema;\n\nvar _keyValMap = require('../jsutils/keyValMap');\n\nvar _keyValMap2 = _interopRequireDefault(_keyValMap);\n\nvar _objectValues = require('../jsutils/objectValues');\n\nvar _objectValues2 = _interopRequireDefault(_objectValues);\n\nvar _schema = require('../type/schema');\n\nvar _directives = require('../type/directives');\n\nvar _definition = require('../type/definition');\n\nvar _scalars = require('../type/scalars');\n\nvar _introspection = require('../type/introspection');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Sort GraphQLSchema.\n */\nfunction lexicographicSortSchema(schema) {\n  var cache = Object.create(null);\n\n  var sortMaybeType = function sortMaybeType(maybeType) {\n    return maybeType && sortNamedType(maybeType);\n  };\n  return new _schema.GraphQLSchema({\n    types: sortTypes((0, _objectValues2.default)(schema.getTypeMap())),\n    directives: sortByName(schema.getDirectives()).map(sortDirective),\n    query: sortMaybeType(schema.getQueryType()),\n    mutation: sortMaybeType(schema.getMutationType()),\n    subscription: sortMaybeType(schema.getSubscriptionType()),\n    astNode: schema.astNode\n  });\n\n  function sortDirective(directive) {\n    return new _directives.GraphQLDirective({\n      name: directive.name,\n      description: directive.description,\n      locations: sortBy(directive.locations, function (x) {\n        return x;\n      }),\n      args: sortArgs(directive.args),\n      astNode: directive.astNode\n    });\n  }\n\n  function sortArgs(args) {\n    return (0, _keyValMap2.default)(sortByName(args), function (arg) {\n      return arg.name;\n    }, function (arg) {\n      return _extends({}, arg, {\n        type: sortType(arg.type)\n      });\n    });\n  }\n\n  function sortFields(fieldsMap) {\n    return sortObjMap(fieldsMap, function (field) {\n      return {\n        type: sortType(field.type),\n        args: sortArgs(field.args),\n        resolve: field.resolve,\n        subscribe: field.subscribe,\n        deprecationReason: field.deprecationReason,\n        description: field.description,\n        astNode: field.astNode\n      };\n    });\n  }\n\n  function sortInputFields(fieldsMap) {\n    return sortObjMap(fieldsMap, function (field) {\n      return {\n        type: sortType(field.type),\n        defaultValue: field.defaultValue,\n        description: field.description,\n        astNode: field.astNode\n      };\n    });\n  }\n\n  function sortType(type) {\n    if ((0, _definition.isListType)(type)) {\n      return new _definition.GraphQLList(sortType(type.ofType));\n    } else if ((0, _definition.isNonNullType)(type)) {\n      return new _definition.GraphQLNonNull(sortType(type.ofType));\n    }\n    return sortNamedType(type);\n  }\n\n  function sortTypes(arr) {\n    return sortByName(arr).map(sortNamedType);\n  }\n\n  function sortNamedType(type) {\n    if ((0, _scalars.isSpecifiedScalarType)(type) || (0, _introspection.isIntrospectionType)(type)) {\n      return type;\n    }\n\n    var sortedType = cache[type.name];\n    if (!sortedType) {\n      sortedType = sortNamedTypeImpl(type);\n      cache[type.name] = sortedType;\n    }\n    return sortedType;\n  }\n\n  function sortNamedTypeImpl(type) {\n    if ((0, _definition.isScalarType)(type)) {\n      return type;\n    } else if ((0, _definition.isObjectType)(type)) {\n      return new _definition.GraphQLObjectType({\n        name: type.name,\n        interfaces: function interfaces() {\n          return sortTypes(type.getInterfaces());\n        },\n        fields: function fields() {\n          return sortFields(type.getFields());\n        },\n        isTypeOf: type.isTypeOf,\n        description: type.description,\n        astNode: type.astNode,\n        extensionASTNodes: type.extensionASTNodes\n      });\n    } else if ((0, _definition.isInterfaceType)(type)) {\n      return new _definition.GraphQLInterfaceType({\n        name: type.name,\n        fields: function fields() {\n          return sortFields(type.getFields());\n        },\n        resolveType: type.resolveType,\n        description: type.description,\n        astNode: type.astNode,\n        extensionASTNodes: type.extensionASTNodes\n      });\n    } else if ((0, _definition.isUnionType)(type)) {\n      return new _definition.GraphQLUnionType({\n        name: type.name,\n        types: function types() {\n          return sortTypes(type.getTypes());\n        },\n        resolveType: type.resolveType,\n        description: type.description,\n        astNode: type.astNode\n      });\n    } else if ((0, _definition.isEnumType)(type)) {\n      return new _definition.GraphQLEnumType({\n        name: type.name,\n        values: (0, _keyValMap2.default)(sortByName(type.getValues()), function (val) {\n          return val.name;\n        }, function (val) {\n          return {\n            value: val.value,\n            deprecationReason: val.deprecationReason,\n            description: val.description,\n            astNode: val.astNode\n          };\n        }),\n        description: type.description,\n        astNode: type.astNode\n      });\n    } else if ((0, _definition.isInputObjectType)(type)) {\n      return new _definition.GraphQLInputObjectType({\n        name: type.name,\n        fields: function fields() {\n          return sortInputFields(type.getFields());\n        },\n        description: type.description,\n        astNode: type.astNode\n      });\n    }\n    throw new Error('Unknown type: \"' + type + '\"');\n  }\n}\n\nfunction sortObjMap(map, sortValueFn) {\n  var sortedMap = Object.create(null);\n  var sortedKeys = sortBy(Object.keys(map), function (x) {\n    return x;\n  });\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = sortedKeys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var key = _step.value;\n\n      var value = map[key];\n      sortedMap[key] = sortValueFn ? sortValueFn(value) : value;\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return sortedMap;\n}\n\nfunction sortByName(array) {\n  return sortBy(array, function (obj) {\n    return obj.name;\n  });\n}\n\nfunction sortBy(array, mapToKey) {\n  return array.slice().sort(function (obj1, obj2) {\n    var key1 = mapToKey(obj1);\n    var key2 = mapToKey(obj2);\n    return key1.localeCompare(key2);\n  });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/utilities/lexicographicSortSchema.js\n// module id = 150\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.printSchema = printSchema;\nexports.printIntrospectionSchema = printIntrospectionSchema;\nexports.printType = printType;\n\nvar _isNullish = require('../jsutils/isNullish');\n\nvar _isNullish2 = _interopRequireDefault(_isNullish);\n\nvar _isInvalid = require('../jsutils/isInvalid');\n\nvar _isInvalid2 = _interopRequireDefault(_isInvalid);\n\nvar _objectValues = require('../jsutils/objectValues');\n\nvar _objectValues2 = _interopRequireDefault(_objectValues);\n\nvar _astFromValue = require('../utilities/astFromValue');\n\nvar _printer = require('../language/printer');\n\nvar _definition = require('../type/definition');\n\nvar _scalars = require('../type/scalars');\n\nvar _directives = require('../type/directives');\n\nvar _introspection = require('../type/introspection');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Accepts options as a second argument:\n *\n *    - commentDescriptions:\n *        Provide true to use preceding comments as the description.\n *\n */\nfunction printSchema(schema, options) {\n  return printFilteredSchema(schema, function (n) {\n    return !(0, _directives.isSpecifiedDirective)(n);\n  }, isDefinedType, options);\n} /**\n   * Copyright (c) 2015-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   *  strict\n   */\n\nfunction printIntrospectionSchema(schema, options) {\n  return printFilteredSchema(schema, _directives.isSpecifiedDirective, _introspection.isIntrospectionType, options);\n}\n\nfunction isDefinedType(type) {\n  return !(0, _scalars.isSpecifiedScalarType)(type) && !(0, _introspection.isIntrospectionType)(type);\n}\n\nfunction printFilteredSchema(schema, directiveFilter, typeFilter, options) {\n  var directives = schema.getDirectives().filter(directiveFilter);\n  var typeMap = schema.getTypeMap();\n  var types = (0, _objectValues2.default)(typeMap).sort(function (type1, type2) {\n    return type1.name.localeCompare(type2.name);\n  }).filter(typeFilter);\n\n  return [printSchemaDefinition(schema)].concat(directives.map(function (directive) {\n    return printDirective(directive, options);\n  }), types.map(function (type) {\n    return printType(type, options);\n  })).filter(Boolean).join('\\n\\n') + '\\n';\n}\n\nfunction printSchemaDefinition(schema) {\n  if (isSchemaOfCommonNames(schema)) {\n    return;\n  }\n\n  var operationTypes = [];\n\n  var queryType = schema.getQueryType();\n  if (queryType) {\n    operationTypes.push('  query: ' + queryType.name);\n  }\n\n  var mutationType = schema.getMutationType();\n  if (mutationType) {\n    operationTypes.push('  mutation: ' + mutationType.name);\n  }\n\n  var subscriptionType = schema.getSubscriptionType();\n  if (subscriptionType) {\n    operationTypes.push('  subscription: ' + subscriptionType.name);\n  }\n\n  return 'schema {\\n' + operationTypes.join('\\n') + '\\n}';\n}\n\n/**\n * GraphQL schema define root types for each type of operation. These types are\n * the same as any other type and can be named in any manner, however there is\n * a common naming convention:\n *\n *   schema {\n *     query: Query\n *     mutation: Mutation\n *   }\n *\n * When using this naming convention, the schema description can be omitted.\n */\nfunction isSchemaOfCommonNames(schema) {\n  var queryType = schema.getQueryType();\n  if (queryType && queryType.name !== 'Query') {\n    return false;\n  }\n\n  var mutationType = schema.getMutationType();\n  if (mutationType && mutationType.name !== 'Mutation') {\n    return false;\n  }\n\n  var subscriptionType = schema.getSubscriptionType();\n  if (subscriptionType && subscriptionType.name !== 'Subscription') {\n    return false;\n  }\n\n  return true;\n}\n\nfunction printType(type, options) {\n  if ((0, _definition.isScalarType)(type)) {\n    return printScalar(type, options);\n  } else if ((0, _definition.isObjectType)(type)) {\n    return printObject(type, options);\n  } else if ((0, _definition.isInterfaceType)(type)) {\n    return printInterface(type, options);\n  } else if ((0, _definition.isUnionType)(type)) {\n    return printUnion(type, options);\n  } else if ((0, _definition.isEnumType)(type)) {\n    return printEnum(type, options);\n  } else if ((0, _definition.isInputObjectType)(type)) {\n    return printInputObject(type, options);\n  }\n  /* istanbul ignore next */\n  throw new Error('Unknown type: ' + type + '.');\n}\n\nfunction printScalar(type, options) {\n  return printDescription(options, type) + ('scalar ' + type.name);\n}\n\nfunction printObject(type, options) {\n  var interfaces = type.getInterfaces();\n  var implementedInterfaces = interfaces.length ? ' implements ' + interfaces.map(function (i) {\n    return i.name;\n  }).join(' & ') : '';\n  return printDescription(options, type) + ('type ' + type.name + implementedInterfaces + ' {\\n') + printFields(options, type) + '\\n' + '}';\n}\n\nfunction printInterface(type, options) {\n  return printDescription(options, type) + ('interface ' + type.name + ' {\\n') + printFields(options, type) + '\\n' + '}';\n}\n\nfunction printUnion(type, options) {\n  return printDescription(options, type) + ('union ' + type.name + ' = ' + type.getTypes().join(' | '));\n}\n\nfunction printEnum(type, options) {\n  return printDescription(options, type) + ('enum ' + type.name + ' {\\n') + printEnumValues(type.getValues(), options) + '\\n' + '}';\n}\n\nfunction printEnumValues(values, options) {\n  return values.map(function (value, i) {\n    return printDescription(options, value, '  ', !i) + '  ' + value.name + printDeprecated(value);\n  }).join('\\n');\n}\n\nfunction printInputObject(type, options) {\n  var fields = (0, _objectValues2.default)(type.getFields());\n  return printDescription(options, type) + ('input ' + type.name + ' {\\n') + fields.map(function (f, i) {\n    return printDescription(options, f, '  ', !i) + '  ' + printInputValue(f);\n  }).join('\\n') + '\\n' + '}';\n}\n\nfunction printFields(options, type) {\n  var fields = (0, _objectValues2.default)(type.getFields());\n  return fields.map(function (f, i) {\n    return printDescription(options, f, '  ', !i) + '  ' + f.name + printArgs(options, f.args, '  ') + ': ' + String(f.type) + printDeprecated(f);\n  }).join('\\n');\n}\n\nfunction printArgs(options, args) {\n  var indentation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n\n  if (args.length === 0) {\n    return '';\n  }\n\n  // If every arg does not have a description, print them on one line.\n  if (args.every(function (arg) {\n    return !arg.description;\n  })) {\n    return '(' + args.map(printInputValue).join(', ') + ')';\n  }\n\n  return '(\\n' + args.map(function (arg, i) {\n    return printDescription(options, arg, '  ' + indentation, !i) + '  ' + indentation + printInputValue(arg);\n  }).join('\\n') + '\\n' + indentation + ')';\n}\n\nfunction printInputValue(arg) {\n  var argDecl = arg.name + ': ' + String(arg.type);\n  if (!(0, _isInvalid2.default)(arg.defaultValue)) {\n    argDecl += ' = ' + (0, _printer.print)((0, _astFromValue.astFromValue)(arg.defaultValue, arg.type));\n  }\n  return argDecl;\n}\n\nfunction printDirective(directive, options) {\n  return printDescription(options, directive) + 'directive @' + directive.name + printArgs(options, directive.args) + ' on ' + directive.locations.join(' | ');\n}\n\nfunction printDeprecated(fieldOrEnumVal) {\n  if (!fieldOrEnumVal.isDeprecated) {\n    return '';\n  }\n  var reason = fieldOrEnumVal.deprecationReason;\n  if ((0, _isNullish2.default)(reason) || reason === '' || reason === _directives.DEFAULT_DEPRECATION_REASON) {\n    return ' @deprecated';\n  }\n  return ' @deprecated(reason: ' + (0, _printer.print)((0, _astFromValue.astFromValue)(reason, _scalars.GraphQLString)) + ')';\n}\n\nfunction printDescription(options, def) {\n  var indentation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  var firstInBlock = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n  if (!def.description) {\n    return '';\n  }\n\n  var lines = descriptionLines(def.description, 120 - indentation.length);\n  if (options && options.commentDescriptions) {\n    return printDescriptionWithComments(lines, indentation, firstInBlock);\n  }\n\n  var description = indentation && !firstInBlock ? '\\n' + indentation + '\"\"\"' : indentation + '\"\"\"';\n\n  // In some circumstances, a single line can be used for the description.\n  if (lines.length === 1 && lines[0].length < 70 && lines[0][lines[0].length - 1] !== '\"') {\n    return description + escapeQuote(lines[0]) + '\"\"\"\\n';\n  }\n\n  // Format a multi-line block quote to account for leading space.\n  var hasLeadingSpace = lines[0][0] === ' ' || lines[0][0] === '\\t';\n  if (!hasLeadingSpace) {\n    description += '\\n';\n  }\n  for (var i = 0; i < lines.length; i++) {\n    if (i !== 0 || !hasLeadingSpace) {\n      description += indentation;\n    }\n    description += escapeQuote(lines[i]) + '\\n';\n  }\n  description += indentation + '\"\"\"\\n';\n  return description;\n}\n\nfunction escapeQuote(line) {\n  return line.replace(/\"\"\"/g, '\\\\\"\"\"');\n}\n\nfunction printDescriptionWithComments(lines, indentation, firstInBlock) {\n  var description = indentation && !firstInBlock ? '\\n' : '';\n  for (var i = 0; i < lines.length; i++) {\n    if (lines[i] === '') {\n      description += indentation + '#\\n';\n    } else {\n      description += indentation + '# ' + lines[i] + '\\n';\n    }\n  }\n  return description;\n}\n\nfunction descriptionLines(description, maxLen) {\n  var lines = [];\n  var rawLines = description.split('\\n');\n  for (var i = 0; i < rawLines.length; i++) {\n    if (rawLines[i] === '') {\n      lines.push(rawLines[i]);\n    } else {\n      // For > 120 character long lines, cut at space boundaries into sublines\n      // of ~80 chars.\n      var sublines = breakLine(rawLines[i], maxLen);\n      for (var j = 0; j < sublines.length; j++) {\n        lines.push(sublines[j]);\n      }\n    }\n  }\n  return lines;\n}\n\nfunction breakLine(line, maxLen) {\n  if (line.length < maxLen + 5) {\n    return [line];\n  }\n  var parts = line.split(new RegExp('((?: |^).{15,' + (maxLen - 40) + '}(?= |$))'));\n  if (parts.length < 4) {\n    return [line];\n  }\n  var sublines = [parts[0] + parts[1] + parts[2]];\n  for (var i = 3; i < parts.length; i += 2) {\n    sublines.push(parts[i].slice(1) + parts[i + 1]);\n  }\n  return sublines;\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/utilities/schemaPrinter.js\n// module id = 151\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isValidJSValue = isValidJSValue;\n\nvar _coerceValue = require('./coerceValue');\n\n/**\n * Deprecated. Use coerceValue() directly for richer information.\n */\nfunction isValidJSValue(value, type) {\n  var errors = (0, _coerceValue.coerceValue)(value, type).errors;\n  return errors ? errors.map(function (error) {\n    return error.message;\n  }) : [];\n} /**\n   * Copyright (c) 2015-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   *  strict\n   */\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/utilities/isValidJSValue.js\n// module id = 152\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isValidLiteralValue = isValidLiteralValue;\n\nvar _TypeInfo = require('./TypeInfo');\n\nvar _kinds = require('../language/kinds');\n\nvar _visitor = require('../language/visitor');\n\nvar _schema = require('../type/schema');\n\nvar _ValuesOfCorrectType = require('../validation/rules/ValuesOfCorrectType');\n\nvar _ValidationContext = require('../validation/ValidationContext');\n\nvar _ValidationContext2 = _interopRequireDefault(_ValidationContext);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Utility which determines if a value literal node is valid for an input type.\n *\n * Deprecated. Rely on validation for documents containing literal values.\n */\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction isValidLiteralValue(type, valueNode) {\n  var emptySchema = new _schema.GraphQLSchema({});\n  var emptyDoc = { kind: _kinds.Kind.DOCUMENT, definitions: [] };\n  var typeInfo = new _TypeInfo.TypeInfo(emptySchema, undefined, type);\n  var context = new _ValidationContext2.default(emptySchema, emptyDoc, typeInfo);\n  var visitor = (0, _ValuesOfCorrectType.ValuesOfCorrectType)(context);\n  (0, _visitor.visit)(valueNode, (0, _visitor.visitWithTypeInfo)(typeInfo, visitor));\n  return context.getErrors();\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/utilities/isValidLiteralValue.js\n// module id = 153\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.concatAST = concatAST;\n\n\n/**\n * Provided a collection of ASTs, presumably each from different files,\n * concatenate the ASTs together into batched AST, useful for validating many\n * GraphQL source files which together represent one conceptual application.\n */\nfunction concatAST(asts) {\n  var batchDefinitions = [];\n  for (var i = 0; i < asts.length; i++) {\n    var definitions = asts[i].definitions;\n    for (var j = 0; j < definitions.length; j++) {\n      batchDefinitions.push(definitions[j]);\n    }\n  }\n  return {\n    kind: 'Document',\n    definitions: batchDefinitions\n  };\n} /**\n   * Copyright (c) 2015-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   *  strict\n   */\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/utilities/concatAST.js\n// module id = 154\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.separateOperations = separateOperations;\n\nvar _visitor = require('../language/visitor');\n\n/**\n * separateOperations accepts a single AST document which may contain many\n * operations and fragments and returns a collection of AST documents each of\n * which contains a single operation as well the fragment definitions it\n * refers to.\n */\nfunction separateOperations(documentAST) {\n  var operations = [];\n  var fragments = Object.create(null);\n  var positions = new Map();\n  var depGraph = Object.create(null);\n  var fromName = void 0;\n  var idx = 0;\n\n  // Populate metadata and build a dependency graph.\n  (0, _visitor.visit)(documentAST, {\n    OperationDefinition: function OperationDefinition(node) {\n      fromName = opName(node);\n      operations.push(node);\n      positions.set(node, idx++);\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      fromName = node.name.value;\n      fragments[fromName] = node;\n      positions.set(node, idx++);\n    },\n    FragmentSpread: function FragmentSpread(node) {\n      var toName = node.name.value;\n      (depGraph[fromName] || (depGraph[fromName] = Object.create(null)))[toName] = true;\n    }\n  });\n\n  // For each operation, produce a new synthesized AST which includes only what\n  // is necessary for completing that operation.\n  var separatedDocumentASTs = Object.create(null);\n  operations.forEach(function (operation) {\n    var operationName = opName(operation);\n    var dependencies = Object.create(null);\n    collectTransitiveDependencies(dependencies, depGraph, operationName);\n\n    // The list of definition nodes to be included for this operation, sorted\n    // to retain the same order as the original document.\n    var definitions = [operation];\n    Object.keys(dependencies).forEach(function (name) {\n      definitions.push(fragments[name]);\n    });\n    definitions.sort(function (n1, n2) {\n      return (positions.get(n1) || 0) - (positions.get(n2) || 0);\n    });\n\n    separatedDocumentASTs[operationName] = {\n      kind: 'Document',\n      definitions: definitions\n    };\n  });\n\n  return separatedDocumentASTs;\n} /**\n   * Copyright (c) 2015-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   *  strict\n   */\n\n// Provides the empty string for anonymous operations.\nfunction opName(operation) {\n  return operation.name ? operation.name.value : '';\n}\n\n// From a dependency graph, collects a list of transitive dependencies by\n// recursing through a dependency graph.\nfunction collectTransitiveDependencies(collected, depGraph, fromName) {\n  var immediateDeps = depGraph[fromName];\n  if (immediateDeps) {\n    Object.keys(immediateDeps).forEach(function (toName) {\n      if (!collected[toName]) {\n        collected[toName] = true;\n        collectTransitiveDependencies(collected, depGraph, toName);\n      }\n    });\n  }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/utilities/separateOperations.js\n// module id = 155\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DangerousChangeType = exports.BreakingChangeType = undefined;\nexports.findBreakingChanges = findBreakingChanges;\nexports.findDangerousChanges = findDangerousChanges;\nexports.findRemovedTypes = findRemovedTypes;\nexports.findTypesThatChangedKind = findTypesThatChangedKind;\nexports.findArgChanges = findArgChanges;\nexports.findFieldsThatChangedTypeOnObjectOrInterfaceTypes = findFieldsThatChangedTypeOnObjectOrInterfaceTypes;\nexports.findFieldsThatChangedTypeOnInputObjectTypes = findFieldsThatChangedTypeOnInputObjectTypes;\nexports.findTypesRemovedFromUnions = findTypesRemovedFromUnions;\nexports.findTypesAddedToUnions = findTypesAddedToUnions;\nexports.findValuesRemovedFromEnums = findValuesRemovedFromEnums;\nexports.findValuesAddedToEnums = findValuesAddedToEnums;\nexports.findInterfacesRemovedFromObjectTypes = findInterfacesRemovedFromObjectTypes;\nexports.findInterfacesAddedToObjectTypes = findInterfacesAddedToObjectTypes;\nexports.findRemovedDirectives = findRemovedDirectives;\nexports.findRemovedDirectiveArgs = findRemovedDirectiveArgs;\nexports.findAddedNonNullDirectiveArgs = findAddedNonNullDirectiveArgs;\nexports.findRemovedLocationsForDirective = findRemovedLocationsForDirective;\nexports.findRemovedDirectiveLocations = findRemovedDirectiveLocations;\n\nvar _definition = require('../type/definition');\n\nvar _directives = require('../type/directives');\n\nvar _schema = require('../type/schema');\n\nvar _keyMap = require('../jsutils/keyMap');\n\nvar _keyMap2 = _interopRequireDefault(_keyMap);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) 2016-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nvar BreakingChangeType = exports.BreakingChangeType = {\n  FIELD_CHANGED_KIND: 'FIELD_CHANGED_KIND',\n  FIELD_REMOVED: 'FIELD_REMOVED',\n  TYPE_CHANGED_KIND: 'TYPE_CHANGED_KIND',\n  TYPE_REMOVED: 'TYPE_REMOVED',\n  TYPE_REMOVED_FROM_UNION: 'TYPE_REMOVED_FROM_UNION',\n  VALUE_REMOVED_FROM_ENUM: 'VALUE_REMOVED_FROM_ENUM',\n  ARG_REMOVED: 'ARG_REMOVED',\n  ARG_CHANGED_KIND: 'ARG_CHANGED_KIND',\n  NON_NULL_ARG_ADDED: 'NON_NULL_ARG_ADDED',\n  NON_NULL_INPUT_FIELD_ADDED: 'NON_NULL_INPUT_FIELD_ADDED',\n  INTERFACE_REMOVED_FROM_OBJECT: 'INTERFACE_REMOVED_FROM_OBJECT',\n  DIRECTIVE_REMOVED: 'DIRECTIVE_REMOVED',\n  DIRECTIVE_ARG_REMOVED: 'DIRECTIVE_ARG_REMOVED',\n  DIRECTIVE_LOCATION_REMOVED: 'DIRECTIVE_LOCATION_REMOVED',\n  NON_NULL_DIRECTIVE_ARG_ADDED: 'NON_NULL_DIRECTIVE_ARG_ADDED'\n};\n\nvar DangerousChangeType = exports.DangerousChangeType = {\n  ARG_DEFAULT_VALUE_CHANGE: 'ARG_DEFAULT_VALUE_CHANGE',\n  VALUE_ADDED_TO_ENUM: 'VALUE_ADDED_TO_ENUM',\n  INTERFACE_ADDED_TO_OBJECT: 'INTERFACE_ADDED_TO_OBJECT',\n  TYPE_ADDED_TO_UNION: 'TYPE_ADDED_TO_UNION',\n  NULLABLE_INPUT_FIELD_ADDED: 'NULLABLE_INPUT_FIELD_ADDED',\n  NULLABLE_ARG_ADDED: 'NULLABLE_ARG_ADDED'\n};\n\n/**\n * Given two schemas, returns an Array containing descriptions of all the types\n * of breaking changes covered by the other functions down below.\n */\nfunction findBreakingChanges(oldSchema, newSchema) {\n  return [].concat(findRemovedTypes(oldSchema, newSchema), findTypesThatChangedKind(oldSchema, newSchema), findFieldsThatChangedTypeOnObjectOrInterfaceTypes(oldSchema, newSchema), findFieldsThatChangedTypeOnInputObjectTypes(oldSchema, newSchema).breakingChanges, findTypesRemovedFromUnions(oldSchema, newSchema), findValuesRemovedFromEnums(oldSchema, newSchema), findArgChanges(oldSchema, newSchema).breakingChanges, findInterfacesRemovedFromObjectTypes(oldSchema, newSchema), findRemovedDirectives(oldSchema, newSchema), findRemovedDirectiveArgs(oldSchema, newSchema), findAddedNonNullDirectiveArgs(oldSchema, newSchema), findRemovedDirectiveLocations(oldSchema, newSchema));\n}\n\n/**\n * Given two schemas, returns an Array containing descriptions of all the types\n * of potentially dangerous changes covered by the other functions down below.\n */\nfunction findDangerousChanges(oldSchema, newSchema) {\n  return [].concat(findArgChanges(oldSchema, newSchema).dangerousChanges, findValuesAddedToEnums(oldSchema, newSchema), findInterfacesAddedToObjectTypes(oldSchema, newSchema), findTypesAddedToUnions(oldSchema, newSchema), findFieldsThatChangedTypeOnInputObjectTypes(oldSchema, newSchema).dangerousChanges);\n}\n\n/**\n * Given two schemas, returns an Array containing descriptions of any breaking\n * changes in the newSchema related to removing an entire type.\n */\nfunction findRemovedTypes(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n\n  var breakingChanges = [];\n  Object.keys(oldTypeMap).forEach(function (typeName) {\n    if (!newTypeMap[typeName]) {\n      breakingChanges.push({\n        type: BreakingChangeType.TYPE_REMOVED,\n        description: typeName + ' was removed.'\n      });\n    }\n  });\n  return breakingChanges;\n}\n\n/**\n * Given two schemas, returns an Array containing descriptions of any breaking\n * changes in the newSchema related to changing the type of a type.\n */\nfunction findTypesThatChangedKind(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n\n  var breakingChanges = [];\n  Object.keys(oldTypeMap).forEach(function (typeName) {\n    if (!newTypeMap[typeName]) {\n      return;\n    }\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n    if (oldType.constructor !== newType.constructor) {\n      breakingChanges.push({\n        type: BreakingChangeType.TYPE_CHANGED_KIND,\n        description: typeName + ' changed from ' + (typeKindName(oldType) + ' to ' + typeKindName(newType) + '.')\n      });\n    }\n  });\n  return breakingChanges;\n}\n\n/**\n * Given two schemas, returns an Array containing descriptions of any\n * breaking or dangerous changes in the newSchema related to arguments\n * (such as removal or change of type of an argument, or a change in an\n * argument's default value).\n */\nfunction findArgChanges(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n\n  var breakingChanges = [];\n  var dangerousChanges = [];\n\n  Object.keys(oldTypeMap).forEach(function (typeName) {\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n    if (!((0, _definition.isObjectType)(oldType) || (0, _definition.isInterfaceType)(oldType)) || !((0, _definition.isObjectType)(newType) || (0, _definition.isInterfaceType)(newType)) || newType.constructor !== oldType.constructor) {\n      return;\n    }\n\n    var oldTypeFields = oldType.getFields();\n    var newTypeFields = newType.getFields();\n\n    Object.keys(oldTypeFields).forEach(function (fieldName) {\n      if (!newTypeFields[fieldName]) {\n        return;\n      }\n\n      oldTypeFields[fieldName].args.forEach(function (oldArgDef) {\n        var newArgs = newTypeFields[fieldName].args;\n        var newArgDef = newArgs.find(function (arg) {\n          return arg.name === oldArgDef.name;\n        });\n\n        // Arg not present\n        if (!newArgDef) {\n          breakingChanges.push({\n            type: BreakingChangeType.ARG_REMOVED,\n            description: oldType.name + '.' + fieldName + ' arg ' + (oldArgDef.name + ' was removed')\n          });\n        } else {\n          var isSafe = isChangeSafeForInputObjectFieldOrFieldArg(oldArgDef.type, newArgDef.type);\n          if (!isSafe) {\n            breakingChanges.push({\n              type: BreakingChangeType.ARG_CHANGED_KIND,\n              description: oldType.name + '.' + fieldName + ' arg ' + (oldArgDef.name + ' has changed type from ') + (oldArgDef.type.toString() + ' to ' + newArgDef.type.toString())\n            });\n          } else if (oldArgDef.defaultValue !== undefined && oldArgDef.defaultValue !== newArgDef.defaultValue) {\n            dangerousChanges.push({\n              type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,\n              description: oldType.name + '.' + fieldName + ' arg ' + (oldArgDef.name + ' has changed defaultValue')\n            });\n          }\n        }\n      });\n      // Check if a non-null arg was added to the field\n      newTypeFields[fieldName].args.forEach(function (newArgDef) {\n        var oldArgs = oldTypeFields[fieldName].args;\n        var oldArgDef = oldArgs.find(function (arg) {\n          return arg.name === newArgDef.name;\n        });\n        if (!oldArgDef) {\n          if ((0, _definition.isNonNullType)(newArgDef.type)) {\n            breakingChanges.push({\n              type: BreakingChangeType.NON_NULL_ARG_ADDED,\n              description: 'A non-null arg ' + newArgDef.name + ' on ' + (newType.name + '.' + fieldName + ' was added')\n            });\n          } else {\n            dangerousChanges.push({\n              type: DangerousChangeType.NULLABLE_ARG_ADDED,\n              description: 'A nullable arg ' + newArgDef.name + ' on ' + (newType.name + '.' + fieldName + ' was added')\n            });\n          }\n        }\n      });\n    });\n  });\n\n  return {\n    breakingChanges: breakingChanges,\n    dangerousChanges: dangerousChanges\n  };\n}\n\nfunction typeKindName(type) {\n  if ((0, _definition.isScalarType)(type)) {\n    return 'a Scalar type';\n  }\n  if ((0, _definition.isObjectType)(type)) {\n    return 'an Object type';\n  }\n  if ((0, _definition.isInterfaceType)(type)) {\n    return 'an Interface type';\n  }\n  if ((0, _definition.isUnionType)(type)) {\n    return 'a Union type';\n  }\n  if ((0, _definition.isEnumType)(type)) {\n    return 'an Enum type';\n  }\n  if ((0, _definition.isInputObjectType)(type)) {\n    return 'an Input type';\n  }\n  throw new TypeError('Unknown type ' + type.constructor.name);\n}\n\nfunction findFieldsThatChangedTypeOnObjectOrInterfaceTypes(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n\n  var breakingChanges = [];\n  Object.keys(oldTypeMap).forEach(function (typeName) {\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n    if (!((0, _definition.isObjectType)(oldType) || (0, _definition.isInterfaceType)(oldType)) || !((0, _definition.isObjectType)(newType) || (0, _definition.isInterfaceType)(newType)) || newType.constructor !== oldType.constructor) {\n      return;\n    }\n\n    var oldTypeFieldsDef = oldType.getFields();\n    var newTypeFieldsDef = newType.getFields();\n    Object.keys(oldTypeFieldsDef).forEach(function (fieldName) {\n      // Check if the field is missing on the type in the new schema.\n      if (!(fieldName in newTypeFieldsDef)) {\n        breakingChanges.push({\n          type: BreakingChangeType.FIELD_REMOVED,\n          description: typeName + '.' + fieldName + ' was removed.'\n        });\n      } else {\n        var oldFieldType = oldTypeFieldsDef[fieldName].type;\n        var newFieldType = newTypeFieldsDef[fieldName].type;\n        var isSafe = isChangeSafeForObjectOrInterfaceField(oldFieldType, newFieldType);\n        if (!isSafe) {\n          var oldFieldTypeString = (0, _definition.isNamedType)(oldFieldType) ? oldFieldType.name : oldFieldType.toString();\n          var newFieldTypeString = (0, _definition.isNamedType)(newFieldType) ? newFieldType.name : newFieldType.toString();\n          breakingChanges.push({\n            type: BreakingChangeType.FIELD_CHANGED_KIND,\n            description: typeName + '.' + fieldName + ' changed type from ' + (oldFieldTypeString + ' to ' + newFieldTypeString + '.')\n          });\n        }\n      }\n    });\n  });\n  return breakingChanges;\n}\n\nfunction findFieldsThatChangedTypeOnInputObjectTypes(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n\n  var breakingChanges = [];\n  var dangerousChanges = [];\n  Object.keys(oldTypeMap).forEach(function (typeName) {\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n    if (!(0, _definition.isInputObjectType)(oldType) || !(0, _definition.isInputObjectType)(newType)) {\n      return;\n    }\n\n    var oldTypeFieldsDef = oldType.getFields();\n    var newTypeFieldsDef = newType.getFields();\n    Object.keys(oldTypeFieldsDef).forEach(function (fieldName) {\n      // Check if the field is missing on the type in the new schema.\n      if (!(fieldName in newTypeFieldsDef)) {\n        breakingChanges.push({\n          type: BreakingChangeType.FIELD_REMOVED,\n          description: typeName + '.' + fieldName + ' was removed.'\n        });\n      } else {\n        var oldFieldType = oldTypeFieldsDef[fieldName].type;\n        var newFieldType = newTypeFieldsDef[fieldName].type;\n\n        var isSafe = isChangeSafeForInputObjectFieldOrFieldArg(oldFieldType, newFieldType);\n        if (!isSafe) {\n          var oldFieldTypeString = (0, _definition.isNamedType)(oldFieldType) ? oldFieldType.name : oldFieldType.toString();\n          var newFieldTypeString = (0, _definition.isNamedType)(newFieldType) ? newFieldType.name : newFieldType.toString();\n          breakingChanges.push({\n            type: BreakingChangeType.FIELD_CHANGED_KIND,\n            description: typeName + '.' + fieldName + ' changed type from ' + (oldFieldTypeString + ' to ' + newFieldTypeString + '.')\n          });\n        }\n      }\n    });\n    // Check if a field was added to the input object type\n    Object.keys(newTypeFieldsDef).forEach(function (fieldName) {\n      if (!(fieldName in oldTypeFieldsDef)) {\n        if ((0, _definition.isNonNullType)(newTypeFieldsDef[fieldName].type)) {\n          breakingChanges.push({\n            type: BreakingChangeType.NON_NULL_INPUT_FIELD_ADDED,\n            description: 'A non-null field ' + fieldName + ' on ' + ('input type ' + newType.name + ' was added.')\n          });\n        } else {\n          dangerousChanges.push({\n            type: DangerousChangeType.NULLABLE_INPUT_FIELD_ADDED,\n            description: 'A nullable field ' + fieldName + ' on ' + ('input type ' + newType.name + ' was added.')\n          });\n        }\n      }\n    });\n  });\n  return {\n    breakingChanges: breakingChanges,\n    dangerousChanges: dangerousChanges\n  };\n}\n\nfunction isChangeSafeForObjectOrInterfaceField(oldType, newType) {\n  if ((0, _definition.isNamedType)(oldType)) {\n    return (\n      // if they're both named types, see if their names are equivalent\n      (0, _definition.isNamedType)(newType) && oldType.name === newType.name ||\n      // moving from nullable to non-null of the same underlying type is safe\n      (0, _definition.isNonNullType)(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType)\n    );\n  } else if ((0, _definition.isListType)(oldType)) {\n    return (\n      // if they're both lists, make sure the underlying types are compatible\n      (0, _definition.isListType)(newType) && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType) ||\n      // moving from nullable to non-null of the same underlying type is safe\n      (0, _definition.isNonNullType)(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType)\n    );\n  } else if ((0, _definition.isNonNullType)(oldType)) {\n    // if they're both non-null, make sure the underlying types are compatible\n    return (0, _definition.isNonNullType)(newType) && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType);\n  }\n  return false;\n}\n\nfunction isChangeSafeForInputObjectFieldOrFieldArg(oldType, newType) {\n  if ((0, _definition.isNamedType)(oldType)) {\n    // if they're both named types, see if their names are equivalent\n    return (0, _definition.isNamedType)(newType) && oldType.name === newType.name;\n  } else if ((0, _definition.isListType)(oldType)) {\n    // if they're both lists, make sure the underlying types are compatible\n    return (0, _definition.isListType)(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType);\n  } else if ((0, _definition.isNonNullType)(oldType)) {\n    return (\n      // if they're both non-null, make sure the underlying types are\n      // compatible\n      (0, _definition.isNonNullType)(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType) ||\n      // moving from non-null to nullable of the same underlying type is safe\n      !(0, _definition.isNonNullType)(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType)\n    );\n  }\n  return false;\n}\n\n/**\n * Given two schemas, returns an Array containing descriptions of any breaking\n * changes in the newSchema related to removing types from a union type.\n */\nfunction findTypesRemovedFromUnions(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n\n  var typesRemovedFromUnion = [];\n  Object.keys(oldTypeMap).forEach(function (typeName) {\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n    if (!(0, _definition.isUnionType)(oldType) || !(0, _definition.isUnionType)(newType)) {\n      return;\n    }\n    var typeNamesInNewUnion = Object.create(null);\n    newType.getTypes().forEach(function (type) {\n      typeNamesInNewUnion[type.name] = true;\n    });\n    oldType.getTypes().forEach(function (type) {\n      if (!typeNamesInNewUnion[type.name]) {\n        typesRemovedFromUnion.push({\n          type: BreakingChangeType.TYPE_REMOVED_FROM_UNION,\n          description: type.name + ' was removed from union type ' + typeName + '.'\n        });\n      }\n    });\n  });\n  return typesRemovedFromUnion;\n}\n\n/**\n * Given two schemas, returns an Array containing descriptions of any dangerous\n * changes in the newSchema related to adding types to a union type.\n */\nfunction findTypesAddedToUnions(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n\n  var typesAddedToUnion = [];\n  Object.keys(newTypeMap).forEach(function (typeName) {\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n    if (!(0, _definition.isUnionType)(oldType) || !(0, _definition.isUnionType)(newType)) {\n      return;\n    }\n    var typeNamesInOldUnion = Object.create(null);\n    oldType.getTypes().forEach(function (type) {\n      typeNamesInOldUnion[type.name] = true;\n    });\n    newType.getTypes().forEach(function (type) {\n      if (!typeNamesInOldUnion[type.name]) {\n        typesAddedToUnion.push({\n          type: DangerousChangeType.TYPE_ADDED_TO_UNION,\n          description: type.name + ' was added to union type ' + typeName + '.'\n        });\n      }\n    });\n  });\n  return typesAddedToUnion;\n}\n/**\n * Given two schemas, returns an Array containing descriptions of any breaking\n * changes in the newSchema related to removing values from an enum type.\n */\nfunction findValuesRemovedFromEnums(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n\n  var valuesRemovedFromEnums = [];\n  Object.keys(oldTypeMap).forEach(function (typeName) {\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n    if (!(0, _definition.isEnumType)(oldType) || !(0, _definition.isEnumType)(newType)) {\n      return;\n    }\n    var valuesInNewEnum = Object.create(null);\n    newType.getValues().forEach(function (value) {\n      valuesInNewEnum[value.name] = true;\n    });\n    oldType.getValues().forEach(function (value) {\n      if (!valuesInNewEnum[value.name]) {\n        valuesRemovedFromEnums.push({\n          type: BreakingChangeType.VALUE_REMOVED_FROM_ENUM,\n          description: value.name + ' was removed from enum type ' + typeName + '.'\n        });\n      }\n    });\n  });\n  return valuesRemovedFromEnums;\n}\n\n/**\n * Given two schemas, returns an Array containing descriptions of any dangerous\n * changes in the newSchema related to adding values to an enum type.\n */\nfunction findValuesAddedToEnums(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n\n  var valuesAddedToEnums = [];\n  Object.keys(oldTypeMap).forEach(function (typeName) {\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n    if (!(0, _definition.isEnumType)(oldType) || !(0, _definition.isEnumType)(newType)) {\n      return;\n    }\n\n    var valuesInOldEnum = Object.create(null);\n    oldType.getValues().forEach(function (value) {\n      valuesInOldEnum[value.name] = true;\n    });\n    newType.getValues().forEach(function (value) {\n      if (!valuesInOldEnum[value.name]) {\n        valuesAddedToEnums.push({\n          type: DangerousChangeType.VALUE_ADDED_TO_ENUM,\n          description: value.name + ' was added to enum type ' + typeName + '.'\n        });\n      }\n    });\n  });\n  return valuesAddedToEnums;\n}\n\nfunction findInterfacesRemovedFromObjectTypes(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n  var breakingChanges = [];\n\n  Object.keys(oldTypeMap).forEach(function (typeName) {\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n    if (!(0, _definition.isObjectType)(oldType) || !(0, _definition.isObjectType)(newType)) {\n      return;\n    }\n\n    var oldInterfaces = oldType.getInterfaces();\n    var newInterfaces = newType.getInterfaces();\n    oldInterfaces.forEach(function (oldInterface) {\n      if (!newInterfaces.some(function (int) {\n        return int.name === oldInterface.name;\n      })) {\n        breakingChanges.push({\n          type: BreakingChangeType.INTERFACE_REMOVED_FROM_OBJECT,\n          description: typeName + ' no longer implements interface ' + (oldInterface.name + '.')\n        });\n      }\n    });\n  });\n  return breakingChanges;\n}\n\nfunction findInterfacesAddedToObjectTypes(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n  var interfacesAddedToObjectTypes = [];\n\n  Object.keys(newTypeMap).forEach(function (typeName) {\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n    if (!(0, _definition.isObjectType)(oldType) || !(0, _definition.isObjectType)(newType)) {\n      return;\n    }\n\n    var oldInterfaces = oldType.getInterfaces();\n    var newInterfaces = newType.getInterfaces();\n    newInterfaces.forEach(function (newInterface) {\n      if (!oldInterfaces.some(function (int) {\n        return int.name === newInterface.name;\n      })) {\n        interfacesAddedToObjectTypes.push({\n          type: DangerousChangeType.INTERFACE_ADDED_TO_OBJECT,\n          description: newInterface.name + ' added to interfaces implemented ' + ('by ' + typeName + '.')\n        });\n      }\n    });\n  });\n  return interfacesAddedToObjectTypes;\n}\n\nfunction findRemovedDirectives(oldSchema, newSchema) {\n  var removedDirectives = [];\n\n  var newSchemaDirectiveMap = getDirectiveMapForSchema(newSchema);\n  oldSchema.getDirectives().forEach(function (directive) {\n    if (!newSchemaDirectiveMap[directive.name]) {\n      removedDirectives.push({\n        type: BreakingChangeType.DIRECTIVE_REMOVED,\n        description: directive.name + ' was removed'\n      });\n    }\n  });\n\n  return removedDirectives;\n}\n\nfunction findRemovedArgsForDirective(oldDirective, newDirective) {\n  var removedArgs = [];\n  var newArgMap = getArgumentMapForDirective(newDirective);\n\n  oldDirective.args.forEach(function (arg) {\n    if (!newArgMap[arg.name]) {\n      removedArgs.push(arg);\n    }\n  });\n\n  return removedArgs;\n}\n\nfunction findRemovedDirectiveArgs(oldSchema, newSchema) {\n  var removedDirectiveArgs = [];\n  var oldSchemaDirectiveMap = getDirectiveMapForSchema(oldSchema);\n\n  newSchema.getDirectives().forEach(function (newDirective) {\n    var oldDirective = oldSchemaDirectiveMap[newDirective.name];\n    if (!oldDirective) {\n      return;\n    }\n\n    findRemovedArgsForDirective(oldDirective, newDirective).forEach(function (arg) {\n      removedDirectiveArgs.push({\n        type: BreakingChangeType.DIRECTIVE_ARG_REMOVED,\n        description: arg.name + ' was removed from ' + newDirective.name\n      });\n    });\n  });\n\n  return removedDirectiveArgs;\n}\n\nfunction findAddedArgsForDirective(oldDirective, newDirective) {\n  var addedArgs = [];\n  var oldArgMap = getArgumentMapForDirective(oldDirective);\n\n  newDirective.args.forEach(function (arg) {\n    if (!oldArgMap[arg.name]) {\n      addedArgs.push(arg);\n    }\n  });\n\n  return addedArgs;\n}\n\nfunction findAddedNonNullDirectiveArgs(oldSchema, newSchema) {\n  var addedNonNullableArgs = [];\n  var oldSchemaDirectiveMap = getDirectiveMapForSchema(oldSchema);\n\n  newSchema.getDirectives().forEach(function (newDirective) {\n    var oldDirective = oldSchemaDirectiveMap[newDirective.name];\n    if (!oldDirective) {\n      return;\n    }\n\n    findAddedArgsForDirective(oldDirective, newDirective).forEach(function (arg) {\n      if (!(0, _definition.isNonNullType)(arg.type)) {\n        return;\n      }\n\n      addedNonNullableArgs.push({\n        type: BreakingChangeType.NON_NULL_DIRECTIVE_ARG_ADDED,\n        description: 'A non-null arg ' + arg.name + ' on directive ' + (newDirective.name + ' was added')\n      });\n    });\n  });\n\n  return addedNonNullableArgs;\n}\n\nfunction findRemovedLocationsForDirective(oldDirective, newDirective) {\n  var removedLocations = [];\n  var newLocationSet = new Set(newDirective.locations);\n\n  oldDirective.locations.forEach(function (oldLocation) {\n    if (!newLocationSet.has(oldLocation)) {\n      removedLocations.push(oldLocation);\n    }\n  });\n\n  return removedLocations;\n}\n\nfunction findRemovedDirectiveLocations(oldSchema, newSchema) {\n  var removedLocations = [];\n  var oldSchemaDirectiveMap = getDirectiveMapForSchema(oldSchema);\n\n  newSchema.getDirectives().forEach(function (newDirective) {\n    var oldDirective = oldSchemaDirectiveMap[newDirective.name];\n    if (!oldDirective) {\n      return;\n    }\n\n    findRemovedLocationsForDirective(oldDirective, newDirective).forEach(function (location) {\n      removedLocations.push({\n        type: BreakingChangeType.DIRECTIVE_LOCATION_REMOVED,\n        description: location + ' was removed from ' + newDirective.name\n      });\n    });\n  });\n\n  return removedLocations;\n}\n\nfunction getDirectiveMapForSchema(schema) {\n  return (0, _keyMap2.default)(schema.getDirectives(), function (dir) {\n    return dir.name;\n  });\n}\n\nfunction getArgumentMapForDirective(directive) {\n  return (0, _keyMap2.default)(directive.args, function (arg) {\n    return arg.name;\n  });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/utilities/findBreakingChanges.js\n// module id = 156\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.findDeprecatedUsages = findDeprecatedUsages;\n\nvar _GraphQLError = require('../error/GraphQLError');\n\nvar _visitor = require('../language/visitor');\n\nvar _definition = require('../type/definition');\n\nvar _schema = require('../type/schema');\n\nvar _TypeInfo = require('./TypeInfo');\n\n/**\n * A validation rule which reports deprecated usages.\n *\n * Returns a list of GraphQLError instances describing each deprecated use.\n */\nfunction findDeprecatedUsages(schema, ast) {\n  var errors = [];\n  var typeInfo = new _TypeInfo.TypeInfo(schema);\n\n  (0, _visitor.visit)(ast, (0, _visitor.visitWithTypeInfo)(typeInfo, {\n    Field: function Field(node) {\n      var fieldDef = typeInfo.getFieldDef();\n      if (fieldDef && fieldDef.isDeprecated) {\n        var parentType = typeInfo.getParentType();\n        if (parentType) {\n          var reason = fieldDef.deprecationReason;\n          errors.push(new _GraphQLError.GraphQLError('The field ' + parentType.name + '.' + fieldDef.name + ' is deprecated.' + (reason ? ' ' + reason : ''), [node]));\n        }\n      }\n    },\n    EnumValue: function EnumValue(node) {\n      var enumVal = typeInfo.getEnumValue();\n      if (enumVal && enumVal.isDeprecated) {\n        var type = (0, _definition.getNamedType)(typeInfo.getInputType());\n        if (type) {\n          var reason = enumVal.deprecationReason;\n          errors.push(new _GraphQLError.GraphQLError('The enum value ' + type.name + '.' + enumVal.name + ' is deprecated.' + (reason ? ' ' + reason : ''), [node]));\n        }\n      }\n    }\n  }));\n\n  return errors;\n} /**\n   * Copyright (c) 2015-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   *  strict\n   */\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql/utilities/findDeprecatedUsages.js\n// module id = 157\n// module chunks = 0","'use strict';\n\nvar isPromise = require('is-promise');\n\nfunction parseJsonSafely(str) {\n  try {\n    return JSON.parse(str);\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction registerPromiseWorker(callback) {\n\n  function postOutgoingMessage(e, messageId, error, result) {\n    function postMessage(msg) {\n      /* istanbul ignore if */\n      if (typeof self.postMessage !== 'function') { // service worker\n        e.ports[0].postMessage(msg);\n      } else { // web worker\n        self.postMessage(msg);\n      }\n    }\n    if (error) {\n      /* istanbul ignore else */\n      if (typeof console !== 'undefined' && 'error' in console) {\n        // This is to make errors easier to debug. I think it's important\n        // enough to just leave here without giving the user an option\n        // to silence it.\n        console.error('Worker caught an error:', error);\n      }\n      postMessage(JSON.stringify([messageId, {\n        message: error.message\n      }]));\n    } else {\n      postMessage(JSON.stringify([messageId, null, result]));\n    }\n  }\n\n  function tryCatchFunc(callback, message) {\n    try {\n      return {res: callback(message)};\n    } catch (e) {\n      return {err: e};\n    }\n  }\n\n  function handleIncomingMessage(e, callback, messageId, message) {\n\n    var result = tryCatchFunc(callback, message);\n\n    if (result.err) {\n      postOutgoingMessage(e, messageId, result.err);\n    } else if (!isPromise(result.res)) {\n      postOutgoingMessage(e, messageId, null, result.res);\n    } else {\n      result.res.then(function (finalResult) {\n        postOutgoingMessage(e, messageId, null, finalResult);\n      }, function (finalError) {\n        postOutgoingMessage(e, messageId, finalError);\n      });\n    }\n  }\n\n  function onIncomingMessage(e) {\n    var payload = parseJsonSafely(e.data);\n    if (!payload) {\n      // message isn't stringified json; ignore\n      return;\n    }\n    var messageId = payload[0];\n    var message = payload[1];\n\n    if (typeof callback !== 'function') {\n      postOutgoingMessage(e, messageId, new Error(\n        'Please pass a function into register().'));\n    } else {\n      handleIncomingMessage(e, callback, messageId, message);\n    }\n  }\n\n  self.addEventListener('message', onIncomingMessage);\n}\n\nmodule.exports = registerPromiseWorker;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/promise-worker/register.js\n// module id = 158\n// module chunks = 0","module.exports = isPromise;\n\nfunction isPromise(obj) {\n  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/is-promise/index.js\n// module id = 159\n// module chunks = 0","import { makeExecutableSchema } from 'graphql-tools';\n\nimport { schemaDef } from './schema-definition';\nimport { resolvers } from './resolvers';\n\nexport const schema = makeExecutableSchema({ typeDefs: schemaDef, resolvers });\n\n\n\n// WEBPACK FOOTER //\n// ./src/graphql/schema.ts","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./schemaGenerator\"));\n__export(require(\"./mock\"));\n__export(require(\"./stitching\"));\n__export(require(\"./schemaVisitor\"));\n//# sourceMappingURL=index.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql-tools/dist/index.js\n// module id = 161\n// module chunks = 0","/*\r\n    Deprecated Decorator v0.1\r\n    https://github.com/vilic/deprecated-decorator\r\n*/\r\n\"use strict\";\r\n/** @internal */\r\nexports.options = {\r\n    getWarner: undefined\r\n};\r\nfunction createWarner(type, name, alternative, version, url) {\r\n    var warnedPositions = {};\r\n    return function () {\r\n        var stack = (new Error()).stack || '';\r\n        var at = (stack.match(/(?:\\s+at\\s.+){2}\\s+at\\s(.+)/) || [undefined, ''])[1];\r\n        if (/\\)$/.test(at)) {\r\n            at = at.match(/[^(]+(?=\\)$)/)[0];\r\n        }\r\n        else {\r\n            at = at.trim();\r\n        }\r\n        if (at in warnedPositions) {\r\n            return;\r\n        }\r\n        warnedPositions[at] = true;\r\n        var message;\r\n        switch (type) {\r\n            case 'class':\r\n                message = 'Class';\r\n                break;\r\n            case 'property':\r\n                message = 'Property';\r\n                break;\r\n            case 'method':\r\n                message = 'Method';\r\n                break;\r\n            case 'function':\r\n                message = 'Function';\r\n                break;\r\n        }\r\n        message += \" `\" + name + \"` has been deprecated\";\r\n        if (version) {\r\n            message += \" since version \" + version;\r\n        }\r\n        if (alternative) {\r\n            message += \", use `\" + alternative + \"` instead\";\r\n        }\r\n        message += '.';\r\n        if (at) {\r\n            message += \"\\n    at \" + at;\r\n        }\r\n        if (url) {\r\n            message += \"\\nCheck out \" + url + \" for more information.\";\r\n        }\r\n        console.warn(message);\r\n    };\r\n}\r\nfunction decorateProperty(type, name, descriptor, alternative, version, url) {\r\n    var warner = (exports.options.getWarner || createWarner)(type, name, alternative, version, url);\r\n    descriptor = descriptor || {\r\n        writable: true,\r\n        enumerable: false,\r\n        configurable: true\r\n    };\r\n    var deprecatedDescriptor = {\r\n        enumerable: descriptor.enumerable,\r\n        configurable: descriptor.configurable\r\n    };\r\n    if (descriptor.get || descriptor.set) {\r\n        if (descriptor.get) {\r\n            deprecatedDescriptor.get = function () {\r\n                warner();\r\n                return descriptor.get.call(this);\r\n            };\r\n        }\r\n        if (descriptor.set) {\r\n            deprecatedDescriptor.set = function (value) {\r\n                warner();\r\n                return descriptor.set.call(this, value);\r\n            };\r\n        }\r\n    }\r\n    else {\r\n        var propertyValue_1 = descriptor.value;\r\n        deprecatedDescriptor.get = function () {\r\n            warner();\r\n            return propertyValue_1;\r\n        };\r\n        if (descriptor.writable) {\r\n            deprecatedDescriptor.set = function (value) {\r\n                warner();\r\n                propertyValue_1 = value;\r\n            };\r\n        }\r\n    }\r\n    return deprecatedDescriptor;\r\n}\r\nfunction decorateFunction(type, target, alternative, version, url) {\r\n    var name = target.name;\r\n    var warner = (exports.options.getWarner || createWarner)(type, name, alternative, version, url);\r\n    var fn = function () {\r\n        warner();\r\n        return target.apply(this, arguments);\r\n    };\r\n    for (var _i = 0, _a = Object.getOwnPropertyNames(target); _i < _a.length; _i++) {\r\n        var propertyName = _a[_i];\r\n        var descriptor = Object.getOwnPropertyDescriptor(target, propertyName);\r\n        if (descriptor.writable) {\r\n            fn[propertyName] = target[propertyName];\r\n        }\r\n        else if (descriptor.configurable) {\r\n            Object.defineProperty(fn, propertyName, descriptor);\r\n        }\r\n    }\r\n    return fn;\r\n}\r\nfunction deprecated() {\r\n    var args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        args[_i - 0] = arguments[_i];\r\n    }\r\n    var fn = args[args.length - 1];\r\n    if (typeof fn === 'function') {\r\n        fn = args.pop();\r\n    }\r\n    else {\r\n        fn = undefined;\r\n    }\r\n    var options = args[0];\r\n    var alternative;\r\n    var version;\r\n    var url;\r\n    if (typeof options === 'string') {\r\n        alternative = options;\r\n        version = args[1];\r\n        url = args[2];\r\n    }\r\n    else if (options) {\r\n        (alternative = options.alternative, version = options.version, url = options.url, options);\r\n    }\r\n    if (fn) {\r\n        return decorateFunction('function', fn, alternative, version, url);\r\n    }\r\n    return function (target, name, descriptor) {\r\n        if (typeof name === 'string') {\r\n            var type = descriptor && typeof descriptor.value === 'function' ?\r\n                'method' : 'property';\r\n            return decorateProperty(type, name, descriptor, alternative, version, url);\r\n        }\r\n        else if (typeof target === 'function') {\r\n            var constructor = decorateFunction('class', target, alternative, version, url);\r\n            var className = target.name;\r\n            for (var _i = 0, _a = Object.getOwnPropertyNames(constructor); _i < _a.length; _i++) {\r\n                var propertyName = _a[_i];\r\n                var descriptor_1 = Object.getOwnPropertyDescriptor(constructor, propertyName);\r\n                descriptor_1 = decorateProperty('class', className, descriptor_1, alternative, version, url);\r\n                if (descriptor_1.writable) {\r\n                    constructor[propertyName] = target[propertyName];\r\n                }\r\n                else if (descriptor_1.configurable) {\r\n                    Object.defineProperty(constructor, propertyName, descriptor_1);\r\n                }\r\n            }\r\n            return constructor;\r\n        }\r\n    };\r\n}\r\nexports.deprecated = deprecated;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.default = deprecated;\r\n//# sourceMappingURL=index.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/deprecated-decorator/bld/index.js\n// module id = 162\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar graphql_1 = require(\"graphql\");\nvar graphql_2 = require(\"graphql\");\nvar uuid = require(\"uuid\");\nvar schemaGenerator_1 = require(\"./schemaGenerator\");\n// This function wraps addMockFunctionsToSchema for more convenience\nfunction mockServer(schema, mocks, preserveResolvers) {\n    if (preserveResolvers === void 0) { preserveResolvers = false; }\n    var mySchema;\n    if (!(schema instanceof graphql_1.GraphQLSchema)) {\n        // TODO: provide useful error messages here if this fails\n        mySchema = schemaGenerator_1.buildSchemaFromTypeDefinitions(schema);\n    }\n    else {\n        mySchema = schema;\n    }\n    addMockFunctionsToSchema({ schema: mySchema, mocks: mocks, preserveResolvers: preserveResolvers });\n    return { query: function (query, vars) { return graphql_2.graphql(mySchema, query, {}, {}, vars); } };\n}\nexports.mockServer = mockServer;\n// TODO allow providing a seed such that lengths of list could be deterministic\n// this could be done by using casual to get a random list length if the casual\n// object is global.\nfunction addMockFunctionsToSchema(_a) {\n    var schema = _a.schema, _b = _a.mocks, mocks = _b === void 0 ? {} : _b, _c = _a.preserveResolvers, preserveResolvers = _c === void 0 ? false : _c;\n    function isObject(thing) {\n        return thing === Object(thing) && !Array.isArray(thing);\n    }\n    if (!schema) {\n        throw new Error('Must provide schema to mock');\n    }\n    if (!(schema instanceof graphql_1.GraphQLSchema)) {\n        throw new Error('Value at \"schema\" must be of type GraphQLSchema');\n    }\n    if (!isObject(mocks)) {\n        throw new Error('mocks must be of type Object');\n    }\n    // use Map internally, because that API is nicer.\n    var mockFunctionMap = new Map();\n    Object.keys(mocks).forEach(function (typeName) {\n        mockFunctionMap.set(typeName, mocks[typeName]);\n    });\n    mockFunctionMap.forEach(function (mockFunction, mockTypeName) {\n        if (typeof mockFunction !== 'function') {\n            throw new Error(\"mockFunctionMap[\" + mockTypeName + \"] must be a function\");\n        }\n    });\n    var defaultMockMap = new Map();\n    defaultMockMap.set('Int', function () { return Math.round(Math.random() * 200) - 100; });\n    defaultMockMap.set('Float', function () { return Math.random() * 200 - 100; });\n    defaultMockMap.set('String', function () { return 'Hello World'; });\n    defaultMockMap.set('Boolean', function () { return Math.random() > 0.5; });\n    defaultMockMap.set('ID', function () { return uuid.v4(); });\n    function mergeObjects(a, b) {\n        return Object.assign(a, b);\n    }\n    function copyOwnPropsIfNotPresent(target, source) {\n        Object.getOwnPropertyNames(source).forEach(function (prop) {\n            if (!Object.getOwnPropertyDescriptor(target, prop)) {\n                Object.defineProperty(target, prop, Object.getOwnPropertyDescriptor(source, prop));\n            }\n        });\n    }\n    function copyOwnProps(target) {\n        var sources = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            sources[_i - 1] = arguments[_i];\n        }\n        sources.forEach(function (source) {\n            var chain = source;\n            while (chain) {\n                copyOwnPropsIfNotPresent(target, chain);\n                chain = Object.getPrototypeOf(chain);\n            }\n        });\n        return target;\n    }\n    // returns a random element from that ary\n    function getRandomElement(ary) {\n        var sample = Math.floor(Math.random() * ary.length);\n        return ary[sample];\n    }\n    // takes either an object or a (possibly nested) array\n    // and completes the customMock object with any fields\n    // defined on genericMock\n    // only merges objects or arrays. Scalars are returned as is\n    function mergeMocks(genericMockFunction, customMock) {\n        if (Array.isArray(customMock)) {\n            return customMock.map(function (el) { return mergeMocks(genericMockFunction, el); });\n        }\n        if (isObject(customMock)) {\n            return mergeObjects(genericMockFunction(), customMock);\n        }\n        return customMock;\n    }\n    function getResolveType(namedFieldType) {\n        if (namedFieldType instanceof graphql_1.GraphQLInterfaceType ||\n            namedFieldType instanceof graphql_1.GraphQLUnionType) {\n            return namedFieldType.resolveType;\n        }\n        else {\n            return undefined;\n        }\n    }\n    function assignResolveType(type) {\n        var fieldType = graphql_1.getNullableType(type);\n        var namedFieldType = graphql_1.getNamedType(fieldType);\n        var oldResolveType = getResolveType(namedFieldType);\n        if (preserveResolvers && oldResolveType && oldResolveType.length) {\n            return;\n        }\n        if (namedFieldType instanceof graphql_1.GraphQLUnionType ||\n            namedFieldType instanceof graphql_1.GraphQLInterfaceType) {\n            // the default `resolveType` always returns null. We add a fallback\n            // resolution that works with how unions and interface are mocked\n            namedFieldType.resolveType = function (data, context, info) {\n                return info.schema.getType(data.__typename);\n            };\n        }\n    }\n    var mockType = function (type, typeName, fieldName) {\n        // order of precendence for mocking:\n        // 1. if the object passed in already has fieldName, just use that\n        // --> if it's a function, that becomes your resolver\n        // --> if it's a value, the mock resolver will return that\n        // 2. if the nullableType is a list, recurse\n        // 2. if there's a mock defined for this typeName, that will be used\n        // 3. if there's no mock defined, use the default mocks for this type\n        return function (root, args, context, info) {\n            // nullability doesn't matter for the purpose of mocking.\n            var fieldType = graphql_1.getNullableType(type);\n            var namedFieldType = graphql_1.getNamedType(fieldType);\n            if (root && typeof root[fieldName] !== 'undefined') {\n                var result = void 0;\n                // if we're here, the field is already defined\n                if (typeof root[fieldName] === 'function') {\n                    result = root[fieldName](root, args, context, info);\n                    if (result instanceof MockList) {\n                        result = result.mock(root, args, context, info, fieldType, mockType);\n                    }\n                }\n                else {\n                    result = root[fieldName];\n                }\n                // Now we merge the result with the default mock for this type.\n                // This allows overriding defaults while writing very little code.\n                if (mockFunctionMap.has(namedFieldType.name)) {\n                    result = mergeMocks(mockFunctionMap\n                        .get(namedFieldType.name)\n                        .bind(null, root, args, context, info), result);\n                }\n                return result;\n            }\n            if (fieldType instanceof graphql_1.GraphQLList) {\n                return [\n                    mockType(fieldType.ofType)(root, args, context, info),\n                    mockType(fieldType.ofType)(root, args, context, info),\n                ];\n            }\n            if (mockFunctionMap.has(fieldType.name) &&\n                !(fieldType instanceof graphql_1.GraphQLUnionType ||\n                    fieldType instanceof graphql_1.GraphQLInterfaceType)) {\n                // the object passed doesn't have this field, so we apply the default mock\n                return mockFunctionMap.get(fieldType.name)(root, args, context, info);\n            }\n            if (fieldType instanceof graphql_1.GraphQLObjectType) {\n                // objects don't return actual data, we only need to mock scalars!\n                return {};\n            }\n            // if a mock function is provided for unionType or interfaceType, execute it to resolve the concrete type\n            // otherwise randomly pick a type from all implementation types\n            if (fieldType instanceof graphql_1.GraphQLUnionType ||\n                fieldType instanceof graphql_1.GraphQLInterfaceType) {\n                var implementationType = void 0;\n                if (mockFunctionMap.has(fieldType.name)) {\n                    var interfaceMockObj = mockFunctionMap.get(fieldType.name)(root, args, context, info);\n                    if (!interfaceMockObj || !interfaceMockObj.__typename) {\n                        return Error(\"Please return a __typename in \\\"\" + fieldType.name + \"\\\"\");\n                    }\n                    implementationType = schema.getType(interfaceMockObj.__typename);\n                }\n                else {\n                    var possibleTypes = schema.getPossibleTypes(fieldType);\n                    implementationType = getRandomElement(possibleTypes);\n                }\n                return Object.assign({ __typename: implementationType }, mockType(implementationType)(root, args, context, info));\n            }\n            if (fieldType instanceof graphql_1.GraphQLEnumType) {\n                return getRandomElement(fieldType.getValues()).value;\n            }\n            if (defaultMockMap.has(fieldType.name)) {\n                return defaultMockMap.get(fieldType.name)(root, args, context, info);\n            }\n            // if we get to here, we don't have a value, and we don't have a mock for this type,\n            // we could return undefined, but that would be hard to debug, so we throw instead.\n            // however, we returning it instead of throwing it, so preserveResolvers can handle the failures.\n            return Error(\"No mock defined for type \\\"\" + fieldType.name + \"\\\"\");\n        };\n    };\n    schemaGenerator_1.forEachField(schema, function (field, typeName, fieldName) {\n        assignResolveType(field.type);\n        var mockResolver;\n        // we have to handle the root mutation and root query types differently,\n        // because no resolver is called at the root.\n        /* istanbul ignore next: Must provide schema DefinitionNode with query type or a type named Query. */\n        var isOnQueryType = schema.getQueryType()\n            ? schema.getQueryType().name === typeName\n            : false;\n        var isOnMutationType = schema.getMutationType()\n            ? schema.getMutationType().name === typeName\n            : false;\n        if (isOnQueryType || isOnMutationType) {\n            if (mockFunctionMap.has(typeName)) {\n                var rootMock_1 = mockFunctionMap.get(typeName);\n                // XXX: BUG in here, need to provide proper signature for rootMock.\n                if (rootMock_1(undefined, {}, {}, {})[fieldName]) {\n                    // TODO: assert that it's a function\n                    mockResolver = function (root, args, context, info) {\n                        var updatedRoot = root || {}; // TODO: should we clone instead?\n                        updatedRoot[fieldName] = rootMock_1(root, args, context, info)[fieldName];\n                        // XXX this is a bit of a hack to still use mockType, which\n                        // lets you mock lists etc. as well\n                        // otherwise we could just set field.resolve to rootMock()[fieldName]\n                        // it's like pretending there was a resolve function that ran before\n                        // the root resolve function.\n                        return mockType(field.type, typeName, fieldName)(updatedRoot, args, context, info);\n                    };\n                }\n            }\n        }\n        if (!mockResolver) {\n            mockResolver = mockType(field.type, typeName, fieldName);\n        }\n        if (!preserveResolvers || !field.resolve) {\n            field.resolve = mockResolver;\n        }\n        else {\n            var oldResolver_1 = field.resolve;\n            field.resolve = function (rootObject, args, context, info) {\n                return Promise.all([\n                    mockResolver(rootObject, args, context, info),\n                    oldResolver_1(rootObject, args, context, info),\n                ]).then(function (values) {\n                    var mockedValue = values[0], resolvedValue = values[1];\n                    // In case we couldn't mock\n                    if (mockedValue instanceof Error) {\n                        // only if value was not resolved, populate the error.\n                        if (undefined === resolvedValue) {\n                            throw mockedValue;\n                        }\n                        return resolvedValue;\n                    }\n                    if (resolvedValue instanceof Date && mockedValue instanceof Date) {\n                        return undefined !== resolvedValue ? resolvedValue : mockedValue;\n                    }\n                    if (isObject(mockedValue) && isObject(resolvedValue)) {\n                        // Object.assign() won't do here, as we need to all properties, including\n                        // the non-enumerable ones and defined using Object.defineProperty\n                        var emptyObject = Object.create(Object.getPrototypeOf(resolvedValue));\n                        return copyOwnProps(emptyObject, resolvedValue, mockedValue);\n                    }\n                    return undefined !== resolvedValue ? resolvedValue : mockedValue;\n                });\n            };\n        }\n    });\n}\nexports.addMockFunctionsToSchema = addMockFunctionsToSchema;\nvar MockList = /** @class */ (function () {\n    // wrappedFunction can return another MockList or a value\n    function MockList(len, wrappedFunction) {\n        this.len = len;\n        if (typeof wrappedFunction !== 'undefined') {\n            if (typeof wrappedFunction !== 'function') {\n                throw new Error('Second argument to MockList must be a function or undefined');\n            }\n            this.wrappedFunction = wrappedFunction;\n        }\n    }\n    MockList.prototype.mock = function (root, args, context, info, fieldType, mockTypeFunc) {\n        var arr;\n        if (Array.isArray(this.len)) {\n            arr = new Array(this.randint(this.len[0], this.len[1]));\n        }\n        else {\n            arr = new Array(this.len);\n        }\n        for (var i = 0; i < arr.length; i++) {\n            if (typeof this.wrappedFunction === 'function') {\n                var res = this.wrappedFunction(root, args, context, info);\n                if (res instanceof MockList) {\n                    var nullableType = graphql_1.getNullableType(fieldType.ofType);\n                    arr[i] = res.mock(root, args, context, info, nullableType, mockTypeFunc);\n                }\n                else {\n                    arr[i] = res;\n                }\n            }\n            else {\n                arr[i] = mockTypeFunc(fieldType.ofType)(root, args, context, info);\n            }\n        }\n        return arr;\n    };\n    MockList.prototype.randint = function (low, high) {\n        return Math.floor(Math.random() * (high - low + 1) + low);\n    };\n    return MockList;\n}());\nexports.MockList = MockList;\n//# sourceMappingURL=mock.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql-tools/dist/mock.js\n// module id = 163\n// module chunks = 0","var v1 = require('./v1');\nvar v4 = require('./v4');\n\nvar uuid = v4;\nuuid.v1 = v1;\nuuid.v4 = v4;\n\nmodule.exports = uuid;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/uuid/index.js\n// module id = 164\n// module chunks = 0","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nvar _nodeId;\nvar _clockseq;\n\n// Previous uuid creation time\nvar _lastMSecs = 0;\nvar _lastNSecs = 0;\n\n// See https://github.com/broofa/node-uuid for API details\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || [];\n\n  options = options || {};\n  var node = options.node || _nodeId;\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;\n\n  // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n  if (node == null || clockseq == null) {\n    var seedBytes = rng();\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [\n        seedBytes[0] | 0x01,\n        seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]\n      ];\n    }\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  }\n\n  // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();\n\n  // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;\n\n  // Time since last uuid creation (in msecs)\n  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;\n\n  // Per 4.2.1.2, Bump clockseq on clock regression\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  }\n\n  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  }\n\n  // Per 4.2.1.2 Throw error if too many uuids are requested\n  if (nsecs >= 10000) {\n    throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq;\n\n  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n  msecs += 12219292800000;\n\n  // `time_low`\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff;\n\n  // `time_mid`\n  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff;\n\n  // `time_high_and_version`\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n  b[i++] = tmh >>> 16 & 0xff;\n\n  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n  b[i++] = clockseq >>> 8 | 0x80;\n\n  // `clock_seq_low`\n  b[i++] = clockseq & 0xff;\n\n  // `node`\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf ? buf : bytesToUuid(b);\n}\n\nmodule.exports = v1;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/uuid/v1.js\n// module id = 165\n// module chunks = 0","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options === 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/uuid/v4.js\n// module id = 166\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar makeRemoteExecutableSchema_1 = require(\"./makeRemoteExecutableSchema\");\nexports.makeRemoteExecutableSchema = makeRemoteExecutableSchema_1.default;\nvar introspectSchema_1 = require(\"./introspectSchema\");\nexports.introspectSchema = introspectSchema_1.default;\nvar mergeSchemas_1 = require(\"./mergeSchemas\");\nexports.mergeSchemas = mergeSchemas_1.default;\nvar delegateToSchema_1 = require(\"./delegateToSchema\");\nexports.delegateToSchema = delegateToSchema_1.default;\nexports.createDocument = delegateToSchema_1.createDocument;\n//# sourceMappingURL=index.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql-tools/dist/stitching/index.js\n// module id = 167\n// module chunks = 0","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar graphql_1 = require(\"graphql\");\nvar linkToFetcher_1 = require(\"./linkToFetcher\");\nvar isEmptyObject_1 = require(\"../isEmptyObject\");\nvar schemaGenerator_1 = require(\"../schemaGenerator\");\nvar resolveFromParentTypename_1 = require(\"./resolveFromParentTypename\");\nvar defaultMergedResolver_1 = require(\"./defaultMergedResolver\");\nvar errors_1 = require(\"./errors\");\nvar observableToAsyncIterable_1 = require(\"./observableToAsyncIterable\");\nfunction makeRemoteExecutableSchema(_a) {\n    var schema = _a.schema, link = _a.link, fetcher = _a.fetcher;\n    if (!fetcher && link) {\n        fetcher = linkToFetcher_1.default(link);\n    }\n    var typeDefs;\n    if (typeof schema === 'string') {\n        typeDefs = schema;\n        schema = graphql_1.buildSchema(typeDefs);\n    }\n    else {\n        typeDefs = graphql_1.printSchema(schema);\n    }\n    // prepare query resolvers\n    var queryResolvers = {};\n    var queryType = schema.getQueryType();\n    var queries = queryType.getFields();\n    Object.keys(queries).forEach(function (key) {\n        queryResolvers[key] = createResolver(fetcher);\n    });\n    // prepare mutation resolvers\n    var mutationResolvers = {};\n    var mutationType = schema.getMutationType();\n    if (mutationType) {\n        var mutations = mutationType.getFields();\n        Object.keys(mutations).forEach(function (key) {\n            mutationResolvers[key] = createResolver(fetcher);\n        });\n    }\n    // prepare subscription resolvers\n    var subscriptionResolvers = {};\n    var subscriptionType = schema.getSubscriptionType();\n    if (subscriptionType) {\n        var subscriptions = subscriptionType.getFields();\n        Object.keys(subscriptions).forEach(function (key) {\n            subscriptionResolvers[key] = {\n                subscribe: createSubscriptionResolver(key, link),\n            };\n        });\n    }\n    // merge resolvers into resolver map\n    var resolvers = (_b = {}, _b[queryType.name] = queryResolvers, _b);\n    if (!isEmptyObject_1.default(mutationResolvers)) {\n        resolvers[mutationType.name] = mutationResolvers;\n    }\n    if (!isEmptyObject_1.default(subscriptionResolvers)) {\n        resolvers[subscriptionType.name] = subscriptionResolvers;\n    }\n    // add missing abstract resolvers (scalar, unions, interfaces)\n    var typeMap = schema.getTypeMap();\n    var types = Object.keys(typeMap).map(function (name) { return typeMap[name]; });\n    var _loop_1 = function (type) {\n        if (type instanceof graphql_1.GraphQLInterfaceType || type instanceof graphql_1.GraphQLUnionType) {\n            resolvers[type.name] = {\n                __resolveType: function (parent, context, info) {\n                    return resolveFromParentTypename_1.default(parent, info.schema);\n                },\n            };\n        }\n        else if (type instanceof graphql_1.GraphQLScalarType) {\n            if (!(type === graphql_1.GraphQLID ||\n                type === graphql_1.GraphQLString ||\n                type === graphql_1.GraphQLFloat ||\n                type === graphql_1.GraphQLBoolean ||\n                type === graphql_1.GraphQLInt)) {\n                resolvers[type.name] = createPassThroughScalar(type);\n            }\n        }\n        else if (type instanceof graphql_1.GraphQLObjectType &&\n            type.name.slice(0, 2) !== '__' &&\n            type !== queryType &&\n            type !== mutationType &&\n            type !== subscriptionType) {\n            var resolver_1 = {};\n            Object.keys(type.getFields()).forEach(function (field) {\n                resolver_1[field] = defaultMergedResolver_1.default;\n            });\n            resolvers[type.name] = resolver_1;\n        }\n    };\n    for (var _i = 0, types_1 = types; _i < types_1.length; _i++) {\n        var type = types_1[_i];\n        _loop_1(type);\n    }\n    return schemaGenerator_1.makeExecutableSchema({\n        typeDefs: typeDefs,\n        resolvers: resolvers,\n    });\n    var _b;\n}\nexports.default = makeRemoteExecutableSchema;\nfunction createResolver(fetcher) {\n    var _this = this;\n    return function (root, args, context, info) { return __awaiter(_this, void 0, void 0, function () {\n        var fragments, document, result;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    fragments = Object.keys(info.fragments).map(function (fragment) { return info.fragments[fragment]; });\n                    document = {\n                        kind: graphql_1.Kind.DOCUMENT,\n                        definitions: [info.operation].concat(fragments),\n                    };\n                    return [4 /*yield*/, fetcher({\n                            query: document,\n                            variables: info.variableValues,\n                            context: { graphqlContext: context },\n                        })];\n                case 1:\n                    result = _a.sent();\n                    return [2 /*return*/, errors_1.checkResultAndHandleErrors(result, info)];\n            }\n        });\n    }); };\n}\nfunction createSubscriptionResolver(name, link) {\n    return function (root, args, context, info) {\n        var fragments = Object.keys(info.fragments).map(function (fragment) { return info.fragments[fragment]; });\n        var document = {\n            kind: graphql_1.Kind.DOCUMENT,\n            definitions: [info.operation].concat(fragments),\n        };\n        var operation = {\n            query: document,\n            variables: info.variableValues,\n            context: { graphqlContext: context },\n        };\n        var observable = linkToFetcher_1.execute(link, operation);\n        return observableToAsyncIterable_1.observableToAsyncIterable(observable);\n    };\n}\nfunction createPassThroughScalar(_a) {\n    var name = _a.name, description = _a.description;\n    return new graphql_1.GraphQLScalarType({\n        name: name,\n        description: description,\n        serialize: function (value) {\n            return value;\n        },\n        parseValue: function (value) {\n            return value;\n        },\n        parseLiteral: function (ast) {\n            return parseLiteral(ast);\n        },\n    });\n}\nfunction parseLiteral(ast) {\n    switch (ast.kind) {\n        case graphql_1.Kind.STRING:\n        case graphql_1.Kind.BOOLEAN: {\n            return ast.value;\n        }\n        case graphql_1.Kind.INT:\n        case graphql_1.Kind.FLOAT: {\n            return parseFloat(ast.value);\n        }\n        case graphql_1.Kind.OBJECT: {\n            var value_1 = Object.create(null);\n            ast.fields.forEach(function (field) {\n                value_1[field.name.value] = parseLiteral(field.value);\n            });\n            return value_1;\n        }\n        case graphql_1.Kind.LIST: {\n            return ast.values.map(parseLiteral);\n        }\n        default:\n            return null;\n    }\n}\n//# sourceMappingURL=makeRemoteExecutableSchema.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql-tools/dist/stitching/makeRemoteExecutableSchema.js\n// module id = 168\n// module chunks = 0","\"use strict\";\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar iterall_1 = require(\"iterall\");\nfunction observableToAsyncIterable(observable) {\n    var pullQueue = [];\n    var pushQueue = [];\n    var listening = true;\n    var pushValue = function (_a) {\n        var data = _a.data;\n        if (pullQueue.length !== 0) {\n            pullQueue.shift()({ value: data, done: false });\n        }\n        else {\n            pushQueue.push({ value: data });\n        }\n    };\n    var pushError = function (error) {\n        if (pullQueue.length !== 0) {\n            pullQueue.shift()({ value: { errors: [error] }, done: false });\n        }\n        else {\n            pushQueue.push({ value: { errors: [error] } });\n        }\n    };\n    var pullValue = function () {\n        return new Promise(function (resolve) {\n            if (pushQueue.length !== 0) {\n                var element = pushQueue.shift();\n                // either {value: {errors: [...]}} or {value: ...}\n                resolve(__assign({}, element, { done: false }));\n            }\n            else {\n                pullQueue.push(resolve);\n            }\n        });\n    };\n    var subscription = observable.subscribe({\n        next: function (value) {\n            pushValue(value);\n        },\n        error: function (err) {\n            pushError(err);\n        },\n    });\n    var emptyQueue = function () {\n        if (listening) {\n            listening = false;\n            subscription.unsubscribe();\n            pullQueue.forEach(function (resolve) { return resolve({ value: undefined, done: true }); });\n            pullQueue.length = 0;\n            pushQueue.length = 0;\n        }\n    };\n    return _a = {\n            next: function () {\n                return __awaiter(this, void 0, void 0, function () {\n                    return __generator(this, function (_a) {\n                        return [2 /*return*/, listening ? pullValue() : this.return()];\n                    });\n                });\n            },\n            return: function () {\n                emptyQueue();\n                return Promise.resolve({ value: undefined, done: true });\n            },\n            throw: function (error) {\n                emptyQueue();\n                return Promise.reject(error);\n            }\n        },\n        _a[iterall_1.$$asyncIterator] = function () {\n            return this;\n        },\n        _a;\n    var _a;\n}\nexports.observableToAsyncIterable = observableToAsyncIterable;\n//# sourceMappingURL=observableToAsyncIterable.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql-tools/dist/stitching/observableToAsyncIterable.js\n// module id = 169\n// module chunks = 0","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar graphql_1 = require(\"graphql\");\nvar linkToFetcher_1 = require(\"./linkToFetcher\");\nvar parsedIntrospectionQuery = graphql_1.parse(graphql_1.introspectionQuery);\nfunction introspectSchema(fetcher, linkContext) {\n    return __awaiter(this, void 0, void 0, function () {\n        var introspectionResult, schema;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    // Convert link to fetcher\n                    if (fetcher.request) {\n                        fetcher = linkToFetcher_1.default(fetcher);\n                    }\n                    return [4 /*yield*/, fetcher({\n                            query: parsedIntrospectionQuery,\n                            context: linkContext,\n                        })];\n                case 1:\n                    introspectionResult = _a.sent();\n                    if ((introspectionResult.errors && introspectionResult.errors.length) ||\n                        !introspectionResult.data.__schema) {\n                        throw introspectionResult.errors;\n                    }\n                    else {\n                        schema = graphql_1.buildClientSchema(introspectionResult.data);\n                        return [2 /*return*/, schema];\n                    }\n                    return [2 /*return*/];\n            }\n        });\n    });\n}\nexports.default = introspectSchema;\n//# sourceMappingURL=introspectSchema.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql-tools/dist/stitching/introspectSchema.js\n// module id = 170\n// module chunks = 0","\"use strict\";\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar graphql_1 = require(\"graphql\");\nvar TypeRegistry_1 = require(\"./TypeRegistry\");\nvar isEmptyObject_1 = require(\"../isEmptyObject\");\nvar mergeDeep_1 = require(\"../mergeDeep\");\nvar schemaGenerator_1 = require(\"../schemaGenerator\");\nvar schemaRecreation_1 = require(\"./schemaRecreation\");\nvar delegateToSchema_1 = require(\"./delegateToSchema\");\nvar typeFromAST_1 = require(\"./typeFromAST\");\nvar backcompatOptions = { commentDescriptions: true };\nfunction mergeSchemas(_a) {\n    var schemas = _a.schemas, onTypeConflict = _a.onTypeConflict, resolvers = _a.resolvers;\n    if (!onTypeConflict) {\n        onTypeConflict = defaultOnTypeConflict;\n    }\n    var queryFields = {};\n    var mutationFields = {};\n    var subscriptionFields = {};\n    var typeRegistry = new TypeRegistry_1.default();\n    var resolveType = schemaRecreation_1.createResolveType(function (name) {\n        return typeRegistry.getType(name);\n    });\n    var mergeInfo = createMergeInfo(typeRegistry);\n    var actualSchemas = [];\n    var typeFragments = [];\n    var extensions = [];\n    var fullResolvers = {};\n    schemas.forEach(function (schema) {\n        if (schema instanceof graphql_1.GraphQLSchema) {\n            actualSchemas.push(schema);\n        }\n        else if (typeof schema === 'string') {\n            var parsedSchemaDocument = graphql_1.parse(schema);\n            try {\n                // TODO fix types https://github.com/apollographql/graphql-tools/issues/542\n                var actualSchema = graphql_1.buildASTSchema(parsedSchemaDocument, backcompatOptions);\n                if (actualSchema.getQueryType()) {\n                    actualSchemas.push(actualSchema);\n                }\n            }\n            catch (e) {\n                typeFragments.push(parsedSchemaDocument);\n            }\n            parsedSchemaDocument = schemaGenerator_1.extractExtensionDefinitions(parsedSchemaDocument);\n            if (parsedSchemaDocument.definitions.length > 0) {\n                extensions.push(parsedSchemaDocument);\n            }\n        }\n    });\n    actualSchemas.forEach(function (schema) {\n        typeRegistry.addSchema(schema);\n        var queryType = schema.getQueryType();\n        var mutationType = schema.getMutationType();\n        var subscriptionType = schema.getSubscriptionType();\n        var typeMap = schema.getTypeMap();\n        Object.keys(typeMap).forEach(function (typeName) {\n            var type = typeMap[typeName];\n            if (graphql_1.isNamedType(type) &&\n                graphql_1.getNamedType(type).name.slice(0, 2) !== '__' &&\n                type !== queryType &&\n                type !== mutationType &&\n                type !== subscriptionType) {\n                var newType = schemaRecreation_1.recreateType(type, resolveType);\n                typeRegistry.addType(newType.name, newType, onTypeConflict);\n            }\n        });\n        Object.keys(queryType.getFields()).forEach(function (name) {\n            if (!fullResolvers.Query) {\n                fullResolvers.Query = {};\n            }\n            fullResolvers.Query[name] = createDelegatingResolver(mergeInfo, 'query', name);\n        });\n        queryFields = __assign({}, queryFields, queryType.getFields());\n        if (mutationType) {\n            if (!fullResolvers.Mutation) {\n                fullResolvers.Mutation = {};\n            }\n            Object.keys(mutationType.getFields()).forEach(function (name) {\n                fullResolvers.Mutation[name] = createDelegatingResolver(mergeInfo, 'mutation', name);\n            });\n            mutationFields = __assign({}, mutationFields, mutationType.getFields());\n        }\n        if (subscriptionType) {\n            if (!fullResolvers.Subscription) {\n                fullResolvers.Subscription = {};\n            }\n            Object.keys(subscriptionType.getFields()).forEach(function (name) {\n                fullResolvers.Subscription[name] = {\n                    subscribe: createDelegatingResolver(mergeInfo, 'subscription', name),\n                };\n            });\n            subscriptionFields = __assign({}, subscriptionFields, subscriptionType.getFields());\n        }\n    });\n    typeFragments.forEach(function (document) {\n        document.definitions.forEach(function (def) {\n            var type = typeFromAST_1.default(typeRegistry, def);\n            if (type) {\n                typeRegistry.addType(type.name, type, onTypeConflict);\n            }\n        });\n    });\n    var passedResolvers = {};\n    if (resolvers) {\n        if (typeof resolvers === 'function') {\n            passedResolvers = resolvers(mergeInfo);\n        }\n        else if (Array.isArray(resolvers)) {\n            passedResolvers = resolvers\n                .map(function (resolver) {\n                return typeof resolver === 'function' ? resolver(mergeInfo) : resolver;\n            })\n                .reduce(mergeDeep_1.default, {});\n        }\n        else {\n            passedResolvers = __assign({}, resolvers);\n        }\n    }\n    Object.keys(passedResolvers).forEach(function (typeName) {\n        var type = passedResolvers[typeName];\n        if (type instanceof graphql_1.GraphQLScalarType) {\n            return;\n        }\n        Object.keys(type).forEach(function (fieldName) {\n            var field = type[fieldName];\n            if (field.fragment) {\n                typeRegistry.addFragment(typeName, fieldName, field.fragment);\n            }\n        });\n    });\n    fullResolvers = mergeDeep_1.default(fullResolvers, passedResolvers);\n    var query = new graphql_1.GraphQLObjectType({\n        name: 'Query',\n        fields: function () { return schemaRecreation_1.fieldMapToFieldConfigMap(queryFields, resolveType); },\n    });\n    var mutation;\n    if (!isEmptyObject_1.default(mutationFields)) {\n        mutation = new graphql_1.GraphQLObjectType({\n            name: 'Mutation',\n            fields: function () { return schemaRecreation_1.fieldMapToFieldConfigMap(mutationFields, resolveType); },\n        });\n    }\n    var subscription;\n    if (!isEmptyObject_1.default(subscriptionFields)) {\n        subscription = new graphql_1.GraphQLObjectType({\n            name: 'Subscription',\n            fields: function () { return schemaRecreation_1.fieldMapToFieldConfigMap(subscriptionFields, resolveType); },\n        });\n    }\n    typeRegistry.addType('Query', query);\n    typeRegistry.addType('Mutation', mutation);\n    typeRegistry.addType('Subscription', subscription);\n    var mergedSchema = new graphql_1.GraphQLSchema({\n        query: query,\n        mutation: mutation,\n        subscription: subscription,\n        types: typeRegistry.getAllTypes(),\n    });\n    extensions.forEach(function (extension) {\n        // TODO fix types https://github.com/apollographql/graphql-tools/issues/542\n        mergedSchema = graphql_1.extendSchema(mergedSchema, extension, backcompatOptions);\n    });\n    schemaGenerator_1.addResolveFunctionsToSchema(mergedSchema, fullResolvers);\n    forEachField(mergedSchema, function (field) {\n        if (field.resolve) {\n            var fieldResolver_1 = field.resolve;\n            field.resolve = function (parent, args, context, info) {\n                var newInfo = __assign({}, info, { mergeInfo: mergeInfo });\n                return fieldResolver_1(parent, args, context, newInfo);\n            };\n        }\n    });\n    return mergedSchema;\n}\nexports.default = mergeSchemas;\nfunction defaultOnTypeConflict(left, right) {\n    return left;\n}\nfunction createMergeInfo(typeRegistry) {\n    return {\n        delegate: function (operation, fieldName, args, context, info) {\n            var schema = typeRegistry.getSchemaByField(operation, fieldName);\n            if (!schema) {\n                throw new Error(\"Cannot find subschema for root field \" + operation + \".\" + fieldName);\n            }\n            var fragmentReplacements = typeRegistry.fragmentReplacements;\n            return delegateToSchema_1.default(schema, fragmentReplacements, operation, fieldName, args, context, info);\n        },\n    };\n}\nfunction createDelegatingResolver(mergeInfo, operation, fieldName) {\n    return function (root, args, context, info) {\n        return mergeInfo.delegate(operation, fieldName, args, context, info);\n    };\n}\nfunction forEachField(schema, fn) {\n    var typeMap = schema.getTypeMap();\n    Object.keys(typeMap).forEach(function (typeName) {\n        var type = typeMap[typeName];\n        if (!graphql_1.getNamedType(type).name.startsWith('__') &&\n            type instanceof graphql_1.GraphQLObjectType) {\n            var fields_1 = type.getFields();\n            Object.keys(fields_1).forEach(function (fieldName) {\n                var field = fields_1[fieldName];\n                fn(field, typeName, fieldName);\n            });\n        }\n    });\n}\n//# sourceMappingURL=mergeSchemas.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql-tools/dist/stitching/mergeSchemas.js\n// module id = 171\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar graphql_1 = require(\"graphql\");\nvar TypeRegistry = /** @class */ (function () {\n    function TypeRegistry() {\n        this.types = {};\n        this.schemaByField = {\n            query: {},\n            mutation: {},\n            subscription: {},\n        };\n        this.fragmentReplacements = {};\n    }\n    TypeRegistry.prototype.getSchemaByField = function (operation, fieldName) {\n        return this.schemaByField[operation][fieldName];\n    };\n    TypeRegistry.prototype.getAllTypes = function () {\n        var _this = this;\n        return Object.keys(this.types).map(function (name) { return _this.types[name]; });\n    };\n    TypeRegistry.prototype.getType = function (name) {\n        if (!this.types[name]) {\n            throw new Error(\"No such type: \" + name);\n        }\n        return this.types[name];\n    };\n    TypeRegistry.prototype.resolveType = function (type) {\n        if (type instanceof graphql_1.GraphQLList) {\n            return new graphql_1.GraphQLList(this.resolveType(type.ofType));\n        }\n        else if (type instanceof graphql_1.GraphQLNonNull) {\n            return new graphql_1.GraphQLNonNull(this.resolveType(type.ofType));\n        }\n        else if (graphql_1.isNamedType(type)) {\n            return this.getType(graphql_1.getNamedType(type).name);\n        }\n        else {\n            return type;\n        }\n    };\n    TypeRegistry.prototype.addSchema = function (schema) {\n        var _this = this;\n        var query = schema.getQueryType();\n        if (query) {\n            var fieldNames = Object.keys(query.getFields());\n            fieldNames.forEach(function (field) {\n                _this.schemaByField.query[field] = schema;\n            });\n        }\n        var mutation = schema.getMutationType();\n        if (mutation) {\n            var fieldNames = Object.keys(mutation.getFields());\n            fieldNames.forEach(function (field) {\n                _this.schemaByField.mutation[field] = schema;\n            });\n        }\n        var subscription = schema.getSubscriptionType();\n        if (subscription) {\n            var fieldNames = Object.keys(subscription.getFields());\n            fieldNames.forEach(function (field) {\n                _this.schemaByField.subscription[field] = schema;\n            });\n        }\n    };\n    TypeRegistry.prototype.addType = function (name, type, onTypeConflict) {\n        if (this.types[name]) {\n            if (onTypeConflict) {\n                type = onTypeConflict(this.types[name], type);\n            }\n            else {\n                throw new Error(\"Type name conflict: \" + name);\n            }\n        }\n        this.types[name] = type;\n    };\n    TypeRegistry.prototype.addFragment = function (typeName, fieldName, fragment) {\n        if (!this.fragmentReplacements[typeName]) {\n            this.fragmentReplacements[typeName] = {};\n        }\n        this.fragmentReplacements[typeName][fieldName] = parseFragmentToInlineFragment(fragment);\n    };\n    return TypeRegistry;\n}());\nexports.default = TypeRegistry;\nfunction parseFragmentToInlineFragment(definitions) {\n    var document = graphql_1.parse(definitions);\n    for (var _i = 0, _a = document.definitions; _i < _a.length; _i++) {\n        var definition = _a[_i];\n        if (definition.kind === graphql_1.Kind.FRAGMENT_DEFINITION) {\n            return {\n                kind: graphql_1.Kind.INLINE_FRAGMENT,\n                typeCondition: definition.typeCondition,\n                selectionSet: definition.selectionSet,\n            };\n        }\n    }\n    throw new Error('Could not parse fragment');\n}\n//# sourceMappingURL=TypeRegistry.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql-tools/dist/stitching/TypeRegistry.js\n// module id = 172\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar graphql_1 = require(\"graphql\");\nvar resolveFromParentTypename_1 = require(\"./resolveFromParentTypename\");\nvar defaultMergedResolver_1 = require(\"./defaultMergedResolver\");\nfunction recreateType(type, resolveType) {\n    if (type instanceof graphql_1.GraphQLObjectType) {\n        var fields_1 = type.getFields();\n        var interfaces_1 = type.getInterfaces();\n        return new graphql_1.GraphQLObjectType({\n            name: type.name,\n            description: type.description,\n            astNode: type.astNode,\n            fields: function () { return fieldMapToFieldConfigMap(fields_1, resolveType); },\n            interfaces: function () { return interfaces_1.map(function (iface) { return resolveType(iface); }); },\n        });\n    }\n    else if (type instanceof graphql_1.GraphQLInterfaceType) {\n        var fields_2 = type.getFields();\n        return new graphql_1.GraphQLInterfaceType({\n            name: type.name,\n            description: type.description,\n            astNode: type.astNode,\n            fields: function () { return fieldMapToFieldConfigMap(fields_2, resolveType); },\n            resolveType: function (parent, context, info) {\n                return resolveFromParentTypename_1.default(parent, info.schema);\n            },\n        });\n    }\n    else if (type instanceof graphql_1.GraphQLUnionType) {\n        return new graphql_1.GraphQLUnionType({\n            name: type.name,\n            description: type.description,\n            astNode: type.astNode,\n            types: function () { return type.getTypes().map(function (unionMember) { return resolveType(unionMember); }); },\n            resolveType: function (parent, context, info) {\n                return resolveFromParentTypename_1.default(parent, info.schema);\n            },\n        });\n    }\n    else if (type instanceof graphql_1.GraphQLInputObjectType) {\n        return new graphql_1.GraphQLInputObjectType({\n            name: type.name,\n            description: type.description,\n            astNode: type.astNode,\n            fields: function () {\n                return inputFieldMapToFieldConfigMap(type.getFields(), resolveType);\n            },\n        });\n    }\n    else if (type instanceof graphql_1.GraphQLEnumType) {\n        var values = type.getValues();\n        var newValues_1 = {};\n        values.forEach(function (value) {\n            newValues_1[value.name] = { value: value.name };\n        });\n        return new graphql_1.GraphQLEnumType({\n            name: type.name,\n            description: type.description,\n            astNode: type.astNode,\n            values: newValues_1,\n        });\n    }\n    else if (type instanceof graphql_1.GraphQLScalarType) {\n        if (type === graphql_1.GraphQLID ||\n            type === graphql_1.GraphQLString ||\n            type === graphql_1.GraphQLFloat ||\n            type === graphql_1.GraphQLBoolean ||\n            type === graphql_1.GraphQLInt) {\n            return type;\n        }\n        else {\n            return new graphql_1.GraphQLScalarType({\n                name: type.name,\n                description: type.description,\n                astNode: type.astNode,\n                serialize: function (value) {\n                    return value;\n                },\n                parseValue: function (value) {\n                    return value;\n                },\n                parseLiteral: function (ast) {\n                    return parseLiteral(ast);\n                },\n            });\n        }\n    }\n    else {\n        throw new Error(\"Invalid type \" + type);\n    }\n}\nexports.recreateType = recreateType;\nfunction parseLiteral(ast) {\n    switch (ast.kind) {\n        case graphql_1.Kind.STRING:\n        case graphql_1.Kind.BOOLEAN: {\n            return ast.value;\n        }\n        case graphql_1.Kind.INT:\n        case graphql_1.Kind.FLOAT: {\n            return parseFloat(ast.value);\n        }\n        case graphql_1.Kind.OBJECT: {\n            var value_1 = Object.create(null);\n            ast.fields.forEach(function (field) {\n                value_1[field.name.value] = parseLiteral(field.value);\n            });\n            return value_1;\n        }\n        case graphql_1.Kind.LIST: {\n            return ast.values.map(parseLiteral);\n        }\n        default:\n            return null;\n    }\n}\nfunction fieldMapToFieldConfigMap(fields, resolveType) {\n    var result = {};\n    Object.keys(fields).forEach(function (name) {\n        var field = fields[name];\n        var type = resolveType(field.type);\n        if (type !== null) {\n            result[name] = fieldToFieldConfig(fields[name], resolveType);\n        }\n    });\n    return result;\n}\nexports.fieldMapToFieldConfigMap = fieldMapToFieldConfigMap;\nfunction createResolveType(getType) {\n    var resolveType = function (type) {\n        if (type instanceof graphql_1.GraphQLList) {\n            var innerType = resolveType(type.ofType);\n            if (innerType === null) {\n                return null;\n            }\n            else {\n                return new graphql_1.GraphQLList(innerType);\n            }\n        }\n        else if (type instanceof graphql_1.GraphQLNonNull) {\n            var innerType = resolveType(type.ofType);\n            if (innerType === null) {\n                return null;\n            }\n            else {\n                return new graphql_1.GraphQLNonNull(innerType);\n            }\n        }\n        else if (graphql_1.isNamedType(type)) {\n            return getType(graphql_1.getNamedType(type).name, type);\n        }\n        else {\n            return type;\n        }\n    };\n    return resolveType;\n}\nexports.createResolveType = createResolveType;\nfunction fieldToFieldConfig(field, resolveType) {\n    return {\n        type: resolveType(field.type),\n        args: argsToFieldConfigArgumentMap(field.args, resolveType),\n        resolve: defaultMergedResolver_1.default,\n        description: field.description,\n        deprecationReason: field.deprecationReason,\n        astNode: field.astNode,\n    };\n}\nfunction argsToFieldConfigArgumentMap(args, resolveType) {\n    var result = {};\n    args.forEach(function (arg) {\n        var _a = argumentToArgumentConfig(arg, resolveType), name = _a[0], def = _a[1];\n        result[name] = def;\n    });\n    return result;\n}\nfunction argumentToArgumentConfig(argument, resolveType) {\n    return [\n        argument.name,\n        {\n            type: resolveType(argument.type),\n            defaultValue: argument.defaultValue,\n            description: argument.description,\n        },\n    ];\n}\nfunction inputFieldMapToFieldConfigMap(fields, resolveType) {\n    var result = {};\n    Object.keys(fields).forEach(function (name) {\n        var field = fields[name];\n        var type = resolveType(field.type);\n        if (type !== null) {\n            result[name] = inputFieldToFieldConfig(fields[name], resolveType);\n        }\n    });\n    return result;\n}\nfunction inputFieldToFieldConfig(field, resolveType) {\n    return {\n        type: resolveType(field.type),\n        defaultValue: field.defaultValue,\n        description: field.description,\n        astNode: field.astNode,\n    };\n}\n//# sourceMappingURL=schemaRecreation.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql-tools/dist/stitching/schemaRecreation.js\n// module id = 173\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar graphql_1 = require(\"graphql\");\n//\n// TODO put back import once PR is merged\n// https://github.com/graphql/graphql-js/pull/1165\n// import { getDescription } from 'graphql/utilities/buildASTSchema';\nvar backcompatOptions = { commentDescriptions: true };\nvar resolveFromParentTypename_1 = require(\"./resolveFromParentTypename\");\nfunction typeFromAST(typeRegistry, node) {\n    switch (node.kind) {\n        case graphql_1.Kind.OBJECT_TYPE_DEFINITION:\n            return makeObjectType(typeRegistry, node);\n        case graphql_1.Kind.INTERFACE_TYPE_DEFINITION:\n            return makeInterfaceType(typeRegistry, node);\n        case graphql_1.Kind.ENUM_TYPE_DEFINITION:\n            return makeEnumType(typeRegistry, node);\n        case graphql_1.Kind.UNION_TYPE_DEFINITION:\n            return makeUnionType(typeRegistry, node);\n        case graphql_1.Kind.SCALAR_TYPE_DEFINITION:\n            return makeScalarType(typeRegistry, node);\n        case graphql_1.Kind.INPUT_OBJECT_TYPE_DEFINITION:\n            return makeInputObjectType(typeRegistry, node);\n        default:\n            return null;\n    }\n}\nexports.default = typeFromAST;\nfunction makeObjectType(typeRegistry, node) {\n    return new graphql_1.GraphQLObjectType({\n        name: node.name.value,\n        fields: function () { return makeFields(typeRegistry, node.fields); },\n        interfaces: function () {\n            return node.interfaces.map(function (iface) { return typeRegistry.getType(iface.name.value); });\n        },\n        description: getDescription(node, backcompatOptions),\n    });\n}\nfunction makeInterfaceType(typeRegistry, node) {\n    return new graphql_1.GraphQLInterfaceType({\n        name: node.name.value,\n        fields: function () { return makeFields(typeRegistry, node.fields); },\n        description: getDescription(node, backcompatOptions),\n        resolveType: function (parent, context, info) {\n            return resolveFromParentTypename_1.default(parent, info.schema);\n        },\n    });\n}\nfunction makeEnumType(typeRegistry, node) {\n    var values = {};\n    node.values.forEach(function (value) {\n        values[value.name.value] = {\n            description: getDescription(value, backcompatOptions),\n        };\n    });\n    return new graphql_1.GraphQLEnumType({\n        name: node.name.value,\n        values: values,\n        description: getDescription(node, backcompatOptions),\n    });\n}\nfunction makeUnionType(typeRegistry, node) {\n    return new graphql_1.GraphQLUnionType({\n        name: node.name.value,\n        types: function () {\n            return node.types.map(function (type) { return resolveType(typeRegistry, type); });\n        },\n        description: getDescription(node, backcompatOptions),\n        resolveType: function (parent, context, info) {\n            return resolveFromParentTypename_1.default(parent, info.schema);\n        },\n    });\n}\nfunction makeScalarType(typeRegistry, node) {\n    return new graphql_1.GraphQLScalarType({\n        name: node.name.value,\n        description: getDescription(node, backcompatOptions),\n        serialize: function () { return null; },\n        // Note: validation calls the parse functions to determine if a\n        // literal value is correct. Returning null would cause use of custom\n        // scalars to always fail validation. Returning false causes them to\n        // always pass validation.\n        parseValue: function () { return false; },\n        parseLiteral: function () { return false; },\n    });\n}\nfunction makeInputObjectType(typeRegistry, node) {\n    return new graphql_1.GraphQLInputObjectType({\n        name: node.name.value,\n        fields: function () { return makeValues(typeRegistry, node.fields); },\n        description: getDescription(node, backcompatOptions),\n    });\n}\nfunction makeFields(typeRegistry, nodes) {\n    var result = {};\n    nodes.forEach(function (node) {\n        result[node.name.value] = {\n            type: resolveType(typeRegistry, node.type),\n            args: makeValues(typeRegistry, node.arguments),\n            description: getDescription(node, backcompatOptions),\n        };\n    });\n    return result;\n}\nfunction makeValues(typeRegistry, nodes) {\n    var result = {};\n    nodes.forEach(function (node) {\n        var type = resolveType(typeRegistry, node.type);\n        result[node.name.value] = {\n            type: type,\n            defaultValue: graphql_1.valueFromAST(node.defaultValue, type),\n            description: getDescription(node, backcompatOptions),\n        };\n    });\n    return result;\n}\nfunction resolveType(typeRegistry, node) {\n    switch (node.kind) {\n        case graphql_1.Kind.LIST_TYPE:\n            return new graphql_1.GraphQLList(resolveType(typeRegistry, node.type));\n        case graphql_1.Kind.NON_NULL_TYPE:\n            return new graphql_1.GraphQLNonNull(resolveType(typeRegistry, node.type));\n        default:\n            return typeRegistry.getType(node.name.value);\n    }\n}\n// Code below temporarily copied from graphql/graphql-js pending PR\n// https://github.com/graphql/graphql-js/pull/1165\n// MIT License\n// Copyright (c) 2015-present, Facebook, Inc.\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\nfunction getDescription(node, options) {\n    if (node.description) {\n        return node.description.value;\n    }\n    if (options && options.commentDescriptions) {\n        var rawValue = getLeadingCommentBlock(node);\n        if (rawValue !== undefined) {\n            return blockStringValue('\\n' + rawValue);\n        }\n    }\n}\nfunction getLeadingCommentBlock(node) {\n    var loc = node.loc;\n    if (!loc) {\n        return;\n    }\n    var comments = [];\n    var token = loc.startToken.prev;\n    while (token &&\n        token.kind === 'Comment' &&\n        token.next &&\n        token.prev &&\n        token.line + 1 === token.next.line &&\n        token.line !== token.prev.line) {\n        var value = String(token.value);\n        comments.push(value);\n        token = token.prev;\n    }\n    return comments.reverse().join('\\n');\n}\n/**\n * Produces the value of a block string from its parsed raw value, similar to\n * Coffeescript's block string, Python's docstring trim or Ruby's strip_heredoc.\n *\n * This implements the GraphQL spec's BlockStringValue() static algorithm.\n */\nfunction blockStringValue(rawString) {\n    // Expand a block string's raw value into independent lines.\n    var lines = rawString.split(/\\r\\n|[\\n\\r]/g);\n    // Remove common indentation from all lines but first.\n    var commonIndent = null;\n    for (var i = 1; i < lines.length; i++) {\n        var line = lines[i];\n        var indent = leadingWhitespace(line);\n        if (indent < line.length &&\n            (commonIndent === null || indent < commonIndent)) {\n            commonIndent = indent;\n            if (commonIndent === 0) {\n                break;\n            }\n        }\n    }\n    if (commonIndent) {\n        for (var i = 1; i < lines.length; i++) {\n            lines[i] = lines[i].slice(commonIndent);\n        }\n    }\n    // Remove leading and trailing blank lines.\n    while (lines.length > 0 && isBlank(lines[0])) {\n        lines.shift();\n    }\n    while (lines.length > 0 && isBlank(lines[lines.length - 1])) {\n        lines.pop();\n    }\n    // Return a string of the lines joined with U+000A.\n    return lines.join('\\n');\n}\nfunction leadingWhitespace(str) {\n    var i = 0;\n    while (i < str.length && (str[i] === ' ' || str[i] === '\\t')) {\n        i++;\n    }\n    return i;\n}\nfunction isBlank(str) {\n    return leadingWhitespace(str) === str.length;\n}\n//# sourceMappingURL=typeFromAST.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql-tools/dist/stitching/typeFromAST.js\n// module id = 174\n// module chunks = 0","import { TypesSchema } from './types.graphql';\n\nexport const schemaDef = `\nscalar Date\n\n${TypesSchema}\n\ntype PageInfo {\n  totalCount: Int\n}\n\ntype PublicationQuery {\n  results: [Publication!]\n  pageInfo: PageInfo\n}\n\ntype SubdisciplineQuery {\n  results: [SubdisciplineWeight!]\n  pageInfo: PageInfo\n}\n\ntype GetDistinctQuery {\n  results: [String]\n  pageInfo: PageInfo\n}\n\ntype Query {\n  getPublications(filter: Filter): PublicationQuery\n  getSubdisciplines(filter: Filter): SubdisciplineQuery\n  getDistinct(fieldName: String, filter: Filter): GetDistinctQuery\n}\n\nschema {\n  query: Query\n}\n`;\n\n\n\n// WEBPACK FOOTER //\n// ./src/graphql/schema-definition.ts","export const TypesSchema = `\ntype SubdisciplineWeight {\n  subd_id: ID!\n  weight: Float\n}\n\ntype Publication {\n  id: ID!\n  title: String\n  author: String\n  year: Int\n  pmid: String\n  doi: String\n  pmcid: String\n\n  journalName: String\n  journalId: Int\n  subdisciplines: [SubdisciplineWeight]\n\n  grantId: String\n  grantTitle: String\n  grantClasses: [String!]\n  grantYear: Int\n  grantInstitution: String\n  grantMechanism: String\n  fulltext: String\n}\n\ninput YearRange {\n  start: Int!\n  end: Int!\n}\n\ninput Sort {\n  field: String!\n  ascending: Boolean\n}\n\ninput Filter {\n  limit: Int\n  subd_id: [Int!]\n  showMultidisciplinary: Boolean\n  showUnmapped: Boolean\n  sort: [Sort!]\n  year: YearRange\n\n  fulltext: [String!]\n  researchClassification: [String!]\n  sessionYear: YearRange\n  institution: [String!]\n  mechanism: [String!]\n  journalName: [String!]\n}\n`;\n\n\n\n// WEBPACK FOOTER //\n// ./src/graphql/types.graphql.ts","import { pubsub } from './subscriptions';\n\nimport { getPublications, getSubdisciplines, getDistinct } from '../nsql/queries';\n\nexport const resolvers: any = {\n  Query: {\n    'getPublications': (obj, args, context, info) => {\n      return getPublications(context.database, args.filter);\n    },\n    'getSubdisciplines': (obj, args, context, info) => {\n      return getSubdisciplines(context.database, args.filter);\n    },\n    'getDistinct': (obj, args, context, info) => {\n      return getDistinct(context.database, args.fieldName, args.filter);\n    }\n  }\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/graphql/resolvers.ts","import { DBRow, NanoSQLInstance, nSQL } from 'nano-sql';\n\nimport { BBSRCDatabase } from '../nsql/bbsrc-database';\nimport { Filter } from '../shared/filter';\nimport { Publication } from '../shared/publication';\nimport { SubdisciplineWeight } from '../shared/subdiscipline-weight';\nimport { QueryResults } from '../shared/query-results';\n\n\n// FROM: https://github.com/sindresorhus/escape-string-regexp/\nconst matchOperatorsRe = /[|\\\\{}()[\\]^$+*?.]/g;\nfunction escapeStringRegExp(str: string): string {\n  if (typeof str !== 'string') {\n    throw new TypeError('Expected a string');\n  }\n  return str.replace(matchOperatorsRe, '\\\\$&');\n}\n\nconst UNMAPPED = -1;\nconst MULTIDISCIPLINARY = -2;\n\nasync function sumAgg<T>(items: T[], itemKeyField: string, keyField: string, valueField: string): Promise<{[key: string]: number}> {\n  const acc: any = {};\n  for (const innerItem of items) {\n    for (const item of (innerItem[itemKeyField] || [])) {\n      const key = item[keyField];\n      const weight = item[valueField];\n      if (acc.hasOwnProperty(key)) {\n        acc[key] += weight;\n      } else {\n        acc[key] = weight;\n      }\n    }\n  }\n  return acc;\n}\n\nasync function queryPublications(database: BBSRCDatabase, filter: Partial<Filter> = {}, selectArgs?: any): Promise<any[]> {\n  const db = await database.get();\n\n  let query = db.table('publication').query(\"select\", selectArgs);\n  if (filter.subd_id && filter.subd_id.length > 0) {\n    query = db.table('publication').query(\"select\");\n  }\n  const where: any[] = [];\n  const inOrEq = function(field: string, filter: string[]): any[] {\n    if (filter.length === 1) {\n      return [field, '=', filter[0]];\n    } else {\n      return [field, 'IN', filter];\n    }\n  }\n\n  if (filter.journalName) {\n    if (where.length > 0) { where.push('AND'); }\n    where.push(inOrEq('journalName', filter.journalName));\n  }\n  if (filter.mechanism) {\n    if (where.length > 0) { where.push('AND'); }\n    where.push(inOrEq('grantMechanism', filter.mechanism));\n  }\n  if (filter.institution) {\n    if (where.length > 0) { where.push('AND'); }\n    where.push(inOrEq('grantInstitution', filter.institution));\n  }\n  if (filter.year) {\n    if (where.length > 0) { where.push('AND'); }\n    if (filter.year.start === filter.year.end) {\n      where.push(['year','=',filter.year.start]);\n    } else {\n      where.push(['year','>=', filter.year.start]);\n      where.push('AND');\n      where.push(['year','<=', filter.year.end]);\n      // where.push(['year','BETWEEN',[filter.year.start, filter.year.end]]);\n    }\n  }\n  if (filter.sessionYear) {\n    if (where.length > 0) { where.push('AND'); }\n    if (filter.sessionYear.start === filter.sessionYear.end) {\n      where.push(['grantYear','=',filter.sessionYear.start]);\n    } else {\n      where.push(['grantYear','>=', filter.sessionYear.start]);\n      where.push('AND');\n      where.push(['grantYear','<=', filter.sessionYear.end]);\n      // where.push(['grantYear','BETWEEN',[filter.sessionYear.start, filter.sessionYear.end]]);\n    }\n  }\n  if (filter.researchClassification) {\n    if (where.length > 0) { where.push('AND'); }\n    where.push(['grantClasses','INTERSECT', filter.researchClassification]);\n  }\n  if (filter.fulltext) {\n    if (where.length > 0) { where.push('AND'); }\n    const regexp = filter.fulltext.map((text) => escapeStringRegExp(text)).join('|').toLowerCase();\n    where.push(['fulltext', 'REGEX', regexp]);\n  }\n  if (where.length > 0) {\n    query = query.where(where.length === 1 ? where[0] : where);\n  }\n  if (filter.sort && filter.sort.length > 0) {\n    const field = filter.sort[0].field;\n    const ascending = filter.sort[0].ascending === true;\n\n    const order = {};\n    order[field] = ascending === true ? 'asc' : 'desc';\n    query = query.orderBy(order);\n  }\n  if (filter.subd_id && filter.subd_id.length > 0) {\n    // FIXME: Find a cleaner way to do this.\n    const subd_ids = filter.subd_id || [];\n    const isMultiDisc = subd_ids.indexOf(MULTIDISCIPLINARY) !== -1;\n    const isUnmapped = subd_ids.indexOf(UNMAPPED) !== -1;\n    const subd_idMap = {}; subd_ids.forEach(s => subd_idMap[s] = true);\n\n    let results = await query.exec();\n    results = results.filter((row) => {\n      const subdisciplines: SubdisciplineWeight[] = row.subdisciplines || [];\n\n      if (isMultiDisc && subdisciplines.length > 1) {\n        return true;\n      } else if (isUnmapped && subdisciplines.length == 0) {\n        return true;\n      } else {\n        return subdisciplines.some((s) => subd_idMap[s.subd_id]);\n      }\n    });\n    if (filter.limit && filter.limit > 0) {\n      results = results.slice(0, filter.limit);\n    }\n    query = nSQL(results).query('select', selectArgs);\n  } else {\n    // FIXME: Limit seems to not work in certain circumstances\n    if (filter.limit && filter.limit > 0) {\n      query = query.limit(filter.limit);\n    }\n  }\n  return (await query.exec());\n}\n\nexport async function getPublications(database: BBSRCDatabase, filter: Partial<Filter> = {}): Promise<QueryResults<Publication>> {\n  let results = await queryPublications(database, filter);\n  let totalCount = results.length;\n  if (filter.limit && filter.limit > 0) {\n    results = results.slice(0, filter.limit);\n    filter = Object.assign({}, filter, {limit: 0});\n    totalCount = (await queryPublications(database, filter, ['id'])).length;\n  }\n  return { results, pageInfo: { totalCount } };\n}\n\nexport async function getSubdisciplines(database: BBSRCDatabase, filter: Partial<Filter> = {}): Promise<QueryResults<SubdisciplineWeight>> {\n  const publications = (await queryPublications(database, filter, ['subdisciplines'])).map((pub) => {\n    if (filter.showUnmapped && (!pub.subdisciplines || pub.subdisciplines.length === 0)) {\n      return {'subdisciplines':[{subd_id: UNMAPPED, weight: 1}]};\n    } else if (filter.showMultidisciplinary && pub.subdisciplines && pub.subdisciplines.length > 1) {\n      return {'subdisciplines':[{subd_id: MULTIDISCIPLINARY, weight: 1}]};\n    } else {\n      return pub;\n    }\n  });\n  const weights = await sumAgg<Partial<Publication>>(publications, 'subdisciplines', 'subd_id', 'weight');\n\n  const results = Object.entries(weights).map(([k, v]) => <SubdisciplineWeight>{subd_id: <number>(<any>k), weight: v});\n  const totalCount = results.length;\n  return { results, pageInfo: { totalCount } };\n}\n\nexport async function getDistinct(database: BBSRCDatabase, fieldName: string, filter: Partial<Filter> = {}): Promise<QueryResults<string>> {\n  // TODO: make this more efficient.\n\n  const publications = (await queryPublications(database, filter, [fieldName]));\n  const values: any = {};\n  const results = [];\n  publications.forEach((pub) => {\n    let val = pub[fieldName];\n    if (!(typeof val === 'string' || val instanceof String)) {\n      val = JSON.stringify(val);\n    }\n    if (!values.hasOwnProperty(val)) {\n      values[val] = 1;\n      results.push(val);\n    } else {\n      values[val]++;\n    }\n  });\n\n  const totalCount = results.length;\n  return { results, pageInfo: { totalCount } };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/nsql/queries.ts","var __assign = (this && this.__assign) || Object.assign || function(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n            t[p] = s[p];\r\n    }\r\n    return t;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utilities_1 = require(\"../utilities\");\r\nvar blankRow = { affectedRowPKS: [], affectedRows: [] };\r\nvar runQuery = function (self, complete) {\r\n    if (self._db.plugins.length === 1 && !self._db.hasAnyEvents) {\r\n        // fast query path, only used if there's a single plugin and no event listeners\r\n        self._db.plugins[0].doExec(self._query, function (newQ) {\r\n            self._query = newQ;\r\n            if (self._db.hasPK[self._query.table]) {\r\n                complete(self._query.result);\r\n            }\r\n            else {\r\n                complete(self._query.result.map(function (r) { return (__assign({}, r, { _id_: undefined })); }));\r\n            }\r\n        });\r\n    }\r\n    else {\r\n        utilities_1.fastCHAIN(self._db.plugins, function (p, i, nextP) {\r\n            if (p.doExec) {\r\n                p.doExec(self._query, function (newQ) {\r\n                    self._query = newQ || self._query;\r\n                    nextP();\r\n                });\r\n            }\r\n            else {\r\n                nextP();\r\n            }\r\n        }).then(function () {\r\n            if (self._db.hasPK[self._query.table]) {\r\n                complete(self._query.result);\r\n            }\r\n            else {\r\n                complete(self._query.result.map(function (r) { return (__assign({}, r, { _id_: undefined })); }));\r\n            }\r\n            if (self._db.hasAnyEvents || self._db.pluginHasDidExec) {\r\n                var eventTypes = (function () {\r\n                    switch (self._query.action) {\r\n                        case \"select\": return [self._query.action];\r\n                        case \"delete\":\r\n                        case \"upsert\":\r\n                        case \"drop\": return [self._query.action, \"change\"];\r\n                        default: return [];\r\n                    }\r\n                })();\r\n                var hasLength = self._query.result && self._query.result.length;\r\n                var event_1 = {\r\n                    table: self._query.table,\r\n                    query: self._query,\r\n                    time: Date.now(),\r\n                    result: self._query.result,\r\n                    notes: [],\r\n                    types: eventTypes,\r\n                    actionOrView: self._AV,\r\n                    transactionID: self._query.transaction ? self._query.queryID : undefined,\r\n                    affectedRowPKS: hasLength ? (self._query.result[0] || blankRow).affectedRowPKS : [],\r\n                    affectedRows: hasLength ? (self._query.result[0] || blankRow).affectedRows : [],\r\n                };\r\n                utilities_1.fastCHAIN(self._db.plugins, function (p, i, nextP) {\r\n                    if (p.didExec) {\r\n                        p.didExec(event_1, function (newE) {\r\n                            event_1 = newE;\r\n                            nextP();\r\n                        });\r\n                    }\r\n                    else {\r\n                        nextP();\r\n                    }\r\n                }).then(function () {\r\n                    self._db.triggerEvent(event_1);\r\n                });\r\n            }\r\n        });\r\n    }\r\n};\r\nvar debounceTimers = {};\r\n// tslint:disable-next-line\r\nvar _NanoSQLQuery = /** @class */ (function () {\r\n    function _NanoSQLQuery(db, table, queryAction, queryArgs, actionOrView) {\r\n        this._db = db;\r\n        this._AV = actionOrView || \"\";\r\n        this._query = {\r\n            table: table,\r\n            comments: [],\r\n            state: \"pending\",\r\n            queryID: Date.now() + \".\" + this._db.fastRand().toString(16),\r\n            action: queryAction,\r\n            actionArgs: queryArgs,\r\n            result: []\r\n        };\r\n    }\r\n    /**\r\n     * Used to select specific rows based on a set of conditions.\r\n     * You can pass in a single array with a conditional statement or an array of arrays seperated by \"and\", \"or\" for compound selects.\r\n     * A single where statement has the column name on the left, an operator in the middle, then a comparison on the right.\r\n     *\r\n     * Where Examples:\r\n     *\r\n     * ```ts\r\n     * .where(['username','=','billy'])\r\n     * .where(['balance','>',20])\r\n     * .where(['catgory','IN',['jeans','shirts']])\r\n     * .where([['name','=','scott'],'and',['balance','>',200]])\r\n     * .where([['id','>',50],'or',['postIDs','IN',[12,20,30]],'and',['name','LIKE','Billy']])\r\n     * ```\r\n     *\r\n     * @param {(Array<any|Array<any>>)} args\r\n     * @returns {_NanoSQLQuery}\r\n     *\r\n     * @memberOf _NanoSQLQuery\r\n     */\r\n    _NanoSQLQuery.prototype.where = function (args) {\r\n        this._query.where = args;\r\n        return this;\r\n    };\r\n    /**\r\n     * Query to get a specific range of rows very efficiently.\r\n     *\r\n     * @param {number} limit\r\n     * @param {number} offset\r\n     * @returns\r\n     *\r\n     * @memberOf _NanoSQLQuery\r\n     */\r\n    _NanoSQLQuery.prototype.range = function (limit, offset) {\r\n        this._query.range = [limit, offset];\r\n        return this;\r\n    };\r\n    /**\r\n     * When using \"from\" features specific what primary keys to update.\r\n     *\r\n     * @param {any[]} primaryKeys\r\n     * @returns {_NanoSQLQuery}\r\n     * @memberof _NanoSQLQuery\r\n     */\r\n    _NanoSQLQuery.prototype.on = function (primaryKeys) {\r\n        this._query.on = primaryKeys;\r\n        return this;\r\n    };\r\n    /**\r\n     * Debounce aggregate function calls.\r\n     *\r\n     * @param {number} ammt\r\n     * @memberof _NanoSQLQuery\r\n     */\r\n    _NanoSQLQuery.prototype.debounce = function (ms) {\r\n        this._query.debounce = ms || 250;\r\n        return this;\r\n    };\r\n    /**\r\n     * Trigge ORM queries for all result rows.\r\n     *\r\n     * @param {((string|ORMArgs)[])} [ormArgs]\r\n     * @returns {_NanoSQLQuery}\r\n     *\r\n     * @memberof _NanoSQLQuery\r\n     */\r\n    _NanoSQLQuery.prototype.orm = function (ormArgs) {\r\n        this._query.orm = ormArgs;\r\n        return this;\r\n    };\r\n    /**\r\n     * Order the results by a given column or columns.\r\n     *\r\n     * Examples:\r\n     *\r\n     * ```ts\r\n     * .orderBy({username:\"asc\"}) // order by username column, ascending\r\n     * .orderBy({balance:\"desc\",lastName:\"asc\"}) // order by balance descending, then lastName ascending.\r\n     * ```\r\n     *\r\n     * @param {Object} args\r\n     * @returns {_NanoSQLQuery}\r\n     *\r\n     * @memberOf _NanoSQLQuery\r\n     */\r\n    _NanoSQLQuery.prototype.orderBy = function (args) {\r\n        this._query.orderBy = args;\r\n        return this;\r\n    };\r\n    /**\r\n     * Group By command, typically used with an aggregate function.\r\n     *\r\n     * Example:\r\n     *\r\n     * ```ts\r\n     * nSQL(\"users\").query(\"select\",[\"favoriteColor\",\"count(*)\"]).groupBy({\"favoriteColor\":\"asc\"}).exec();\r\n     * ```\r\n     *\r\n     * This will provide a list of all favorite colors and how many each of them are in the db.\r\n     *\r\n     * @param {({[key: string]:\"asc\"|\"desc\"})} columns\r\n     * @returns {_NanoSQLQuery}\r\n     *\r\n     * @memberOf _NanoSQLQuery\r\n     */\r\n    _NanoSQLQuery.prototype.groupBy = function (columns) {\r\n        this._query.groupBy = columns;\r\n        return this;\r\n    };\r\n    /**\r\n     * Having statement, used to filter Group BY statements. Syntax is identical to where statements.\r\n     *\r\n     * @returns {_NanoSQLQuery}\r\n     *\r\n     * @memberOf _NanoSQLQuery\r\n     */\r\n    _NanoSQLQuery.prototype.having = function (args) {\r\n        if (!args.length || !Array.isArray(args)) {\r\n            this._error = \"Having condition requires an array!\";\r\n        }\r\n        this._query.having = args;\r\n        return this;\r\n    };\r\n    /**\r\n     * Join command.\r\n     *\r\n     * Example:\r\n     *\r\n     * ```ts\r\n     *  nSQL(\"orders\")\r\n     *  .query(\"select\", [\"orders.id\",\"orders.title\",\"users.name\"])\r\n     *  .where([\"orders.status\",\"=\",\"complete\"])\r\n     *  .orderBy({\"orders.date\":\"asc\"})\r\n     *  .join({\r\n     *      type:\"inner\",\r\n     *      table:\"users\",\r\n     *      where:[\"orders.customerID\",\"=\",\"user.id\"]\r\n     *  }).exec();\r\n     *```\r\n     * A few notes on the join command:\r\n     * 1. You muse use dot notation with the table names in all \"where\", \"select\", \"orderby\", and \"groupby\" arguments.\r\n     * 2. Possible join types are `inner`, `left`, `right`, and `outer`.\r\n     * 3. The \"table\" argument lets you determine the data on the right side of the join.\r\n     * 4. The \"where\" argument lets you set what conditions the tables are joined on.\r\n     *\r\n     *\r\n     *\r\n     * @param {JoinArgs} args\r\n     * @returns {_NanoSQLQuery}\r\n     *\r\n     * @memberOf _NanoSQLQuery\r\n     */\r\n    _NanoSQLQuery.prototype.join = function (args) {\r\n        var _this = this;\r\n        if (Array.isArray(this._query.table)) {\r\n            throw new Error(\"Can't JOIN with instance table!\");\r\n        }\r\n        var err = \"Join commands requires table and type arguments!\";\r\n        if (Array.isArray(args)) {\r\n            args.forEach(function (arg) {\r\n                if (!arg.table || !arg.type) {\r\n                    _this._error = err;\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            if (!args.table || !args.type) {\r\n                this._error = err;\r\n            }\r\n        }\r\n        this._query.join = args;\r\n        return this;\r\n    };\r\n    /**\r\n     * Limits the result to a specific amount.  Example:\r\n     *\r\n     * ```ts\r\n     * .limit(20) // Limit to the first 20 results\r\n     * ```\r\n     *\r\n     * @param {number} args\r\n     * @returns {_NanoSQLQuery}\r\n     *\r\n     * @memberOf _NanoSQLQuery\r\n     */\r\n    _NanoSQLQuery.prototype.limit = function (args) {\r\n        this._query.limit = args;\r\n        return this;\r\n    };\r\n    /**\r\n     * Perform a trie search on a trie column.\r\n     *\r\n     * @param {string} stringToSearch\r\n     * @returns {_NanoSQLQuery}\r\n     *\r\n     * @memberOf _NanoSQLQuery\r\n     */\r\n    _NanoSQLQuery.prototype.trieSearch = function (column, stringToSearch) {\r\n        this._query.trie = { column: column, search: stringToSearch };\r\n        return this;\r\n    };\r\n    /**\r\n     * Pass comments along with the query.\r\n     * These comments will be emitted along with the other query datay by the event system, useful for tracking queries.\r\n     *\r\n     * @param {string} comment\r\n     * @returns {_NanoSQLQuery}\r\n     * @memberof _NanoSQLQuery\r\n     */\r\n    _NanoSQLQuery.prototype.comment = function (comment) {\r\n        this._query.comments.push(comment);\r\n        return this;\r\n    };\r\n    /**\r\n     * Perform custom actions supported by plugins.\r\n     *\r\n     * @param {...any[]} args\r\n     * @returns {_NanoSQLQuery}\r\n     * @memberof _NanoSQLQuery\r\n     */\r\n    _NanoSQLQuery.prototype.extend = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        this._query.extend = args;\r\n        return this;\r\n    };\r\n    /**\r\n     * Offsets the results by a specific amount from the beginning.  Example:\r\n     *\r\n     * ```ts\r\n     * .offset(10) // Skip the first 10 results.\r\n     * ```\r\n     *\r\n     * @param {number} args\r\n     * @returns {_NanoSQLQuery}\r\n     *\r\n     * @memberOf _NanoSQLQuery\r\n     */\r\n    _NanoSQLQuery.prototype.offset = function (args) {\r\n        this._query.offset = args;\r\n        return this;\r\n    };\r\n    /**\r\n     * Export the built query object.\r\n     *\r\n     * @returns {IdbQueryExec}\r\n     * @memberof _NanoSQLQuery\r\n     */\r\n    _NanoSQLQuery.prototype.emit = function () {\r\n        return this._query;\r\n    };\r\n    /**\r\n     * Export the current query to a CSV file, use in place of \"exec()\";\r\n     *\r\n     * Example:\r\n     * nSQL(\"users\").query(\"select\").toCSV(true).then(function(csv, db) {\r\n     *   console.log(csv);\r\n     *   // Returns something like:\r\n     *   id,name,pass,postIDs\r\n     *   1,\"scott\",\"1234\",\"[1,2,3,4]\"\r\n     *   2,\"jeb\",\"5678\",\"[5,6,7,8]\"\r\n     * });\r\n     *\r\n     * @param {boolean} [headers]\r\n     * @returns {Promise<string>}\r\n     *\r\n     * @memberOf NanoSQLInstance\r\n     */\r\n    _NanoSQLQuery.prototype.toCSV = function (headers) {\r\n        var _this = this;\r\n        var t = this;\r\n        return new utilities_1.Promise(function (res, rej) {\r\n            t.exec().then(function (json) {\r\n                var useHeaders = typeof _this._query.table === \"string\" ? _this._db.dataModels[_this._query.table].map(function (k) { return k.key; }) : undefined;\r\n                res(t._db.JSONtoCSV(json, headers || false, useHeaders));\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Pass in a query object to manually execute a query against the system.\r\n     *\r\n     * @param {IdbQuery} query\r\n     * @param {(err: any, result: any[]) => void} [complete]\r\n     * @returns {Promise<any>}\r\n     * @memberof _NanoSQLQuery\r\n     */\r\n    _NanoSQLQuery.prototype.manualExec = function (query) {\r\n        this._query = __assign({}, this._query, query);\r\n        return this.exec();\r\n    };\r\n    /**\r\n     * Handle denormalization requests.\r\n     *\r\n     * @param {string} action\r\n     * @returns\r\n     * @memberof _NanoSQLQuery\r\n     */\r\n    _NanoSQLQuery.prototype.denormalizationQuery = function (action) {\r\n        var _this = this;\r\n        return new utilities_1.Promise(function (res, rej) {\r\n            switch (action) {\r\n                case \"tocolumn\":\r\n                    var fnsToRun_1 = {};\r\n                    if (_this._query.actionArgs && _this._query.actionArgs.length) {\r\n                        Object.keys(_this._db.toColRules[_this._query.table]).filter(function (c) { return _this._query.actionArgs.indexOf(c) !== -1; }).forEach(function (col) {\r\n                            fnsToRun_1[col] = _this._db.toColRules[_this._query.table][col];\r\n                        });\r\n                    }\r\n                    else {\r\n                        fnsToRun_1 = _this._db.toColRules[_this._query.table];\r\n                    }\r\n                    _this._query.action = \"select\";\r\n                    _this._query.actionArgs = undefined;\r\n                    var columns_1 = Object.keys(fnsToRun_1);\r\n                    runQuery(_this, function (rows) {\r\n                        utilities_1.fastCHAIN(rows, function (row, i, done) {\r\n                            if (Object.isFrozen(row)) {\r\n                                row = utilities_1._assign(row);\r\n                            }\r\n                            utilities_1.fastALL(columns_1, function (col, i, next) {\r\n                                var fn = _this._db.toColFns[_this._query.table][fnsToRun_1[col][0]];\r\n                                if (!fn) {\r\n                                    next();\r\n                                    return;\r\n                                }\r\n                                fn.apply(null, [row[col], function (newValue) {\r\n                                        row[col] = newValue;\r\n                                        next();\r\n                                    }].concat(fnsToRun_1[col].filter(function (v, i) { return i > 0; }).map(function (c) { return row[c]; })));\r\n                            }).then(function () {\r\n                                _this._db.query(\"upsert\", row).manualExec({ table: _this._query.table }).then(done).catch(done);\r\n                            });\r\n                        }).then(function () {\r\n                            res({ msg: rows.length + \" rows modified\" });\r\n                        });\r\n                    });\r\n                    break;\r\n                case \"torow\":\r\n                    var fnKey = (_this._query.actionArgs || \"\").replace(\"()\", \"\");\r\n                    if (_this._db.toRowFns[_this._query.table] && _this._db.toRowFns[_this._query.table][fnKey]) {\r\n                        var fn_1 = _this._db.toRowFns[_this._query.table][fnKey];\r\n                        var PK_1 = _this._db.tablePKs[_this._query.table];\r\n                        if (_this._query.on && _this._query.on.length) {\r\n                            utilities_1.fastALL(_this._query.on, function (pk, i, done) {\r\n                                fn_1(pk, {}, function (newRow) {\r\n                                    newRow[PK_1] = pk;\r\n                                    _this._db.query(\"upsert\", newRow).manualExec({ table: _this._query.table }).then(done).catch(done);\r\n                                });\r\n                            }).then(function () {\r\n                                res([{ msg: (_this._query.on || []).length + \" rows modified or added.\" }]);\r\n                            });\r\n                            return;\r\n                        }\r\n                        _this._query.action = \"select\";\r\n                        _this._query.actionArgs = undefined;\r\n                        runQuery(_this, function (rows) {\r\n                            utilities_1.fastALL(rows, function (row, i, done) {\r\n                                if (Object.isFrozen(row)) {\r\n                                    row = utilities_1._assign(row);\r\n                                }\r\n                                fn_1(row[PK_1], row, function (newRow) {\r\n                                    newRow[PK_1] = row[PK_1];\r\n                                    _this._db.query(\"upsert\", newRow).manualExec({ table: _this._query.table }).then(done).catch(done);\r\n                                });\r\n                            }).then(function () {\r\n                                res({ msg: rows.length + \" rows modified\" });\r\n                            });\r\n                        });\r\n                    }\r\n                    else {\r\n                        rej(\"No function \" + _this._query.actionArgs + \" found to perform updates!\");\r\n                        return;\r\n                    }\r\n                    break;\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Executes the current pending query to the db engine, returns a promise with the rows as objects in an array.\r\n     *\r\n     * Example:\r\n     * nSQL(\"users\").query(\"select\").exec().then(function(rows) {\r\n     *     console.log(rows) // <= [{id:1,username:\"Scott\",password:\"1234\"},{id:2,username:\"Jeb\",password:\"1234\"}]\r\n     *     return nSQL().query(\"upsert\",{password:\"something more secure\"}).where([\"id\",\"=\",1]).exec();\r\n     * }).then(function(rows) {\r\n     *  ...\r\n     * })...\r\n     *\r\n     * @returns {(Promise<Array<Object>>)}\r\n     *\r\n     * @memberOf NanoSQLInstance\r\n     */\r\n    _NanoSQLQuery.prototype.exec = function () {\r\n        var _this = this;\r\n        // handle instance queries\r\n        if (Array.isArray(this._query.table)) {\r\n            return new utilities_1.Promise(function (res, rej) {\r\n                if (_this._db.iB.doExec) {\r\n                    _this._db.iB.doExec(_this._query, function (q) {\r\n                        res(q.result);\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        if (this._query.table === \"*\")\r\n            return;\r\n        var t = this;\r\n        var a = (this._query.action || \"\").toLowerCase().trim();\r\n        if ([\"tocolumn\", \"torow\"].indexOf(a) > -1) {\r\n            if (this._query.debounce) {\r\n                var denormalizationKey_1 = utilities_1.hash(JSON.stringify([this._query.table, a, this._query.actionArgs, this._query.on, this._query.where].filter(function (r) { return r; })));\r\n                return new utilities_1.Promise(function (res, rej) {\r\n                    if (debounceTimers[denormalizationKey_1]) {\r\n                        clearTimeout(debounceTimers[denormalizationKey_1]);\r\n                    }\r\n                    debounceTimers[denormalizationKey_1] = setTimeout(function () {\r\n                        _this.denormalizationQuery(a).then(res);\r\n                    }, _this._query.debounce);\r\n                });\r\n            }\r\n            return this.denormalizationQuery(a);\r\n        }\r\n        if ([\"select\", \"upsert\", \"delete\", \"drop\", \"show tables\", \"describe\"].indexOf(a) > -1) {\r\n            var newArgs = this._query.actionArgs || (a === \"select\" ? [] : {});\r\n            var setArgs_1 = [];\r\n            if (a === \"upsert\") {\r\n                if (Array.isArray(newArgs)) {\r\n                    setArgs_1 = newArgs;\r\n                }\r\n                else {\r\n                    setArgs_1 = [newArgs];\r\n                }\r\n                setArgs_1.forEach(function (nArgs, i) {\r\n                    // Do Row Filter\r\n                    if (_this._db.rowFilters[_this._query.table]) {\r\n                        setArgs_1[i] = _this._db.rowFilters[_this._query.table](setArgs_1[i]);\r\n                    }\r\n                    // Cast row types and remove columns that don't exist in the data model\r\n                    var inputArgs = {};\r\n                    var models = _this._db.dataModels[_this._query.table];\r\n                    var k = 0;\r\n                    while (k < models.length) {\r\n                        if (setArgs_1[i][models[k].key] !== undefined) {\r\n                            inputArgs[models[k].key] = utilities_1.cast(models[k].type, setArgs_1[i][models[k].key]);\r\n                        }\r\n                        k++;\r\n                    }\r\n                    // insert wildcard columns\r\n                    if (_this._db.skipPurge[_this._query.table]) {\r\n                        var modelColumns_1 = models.map(function (m) { return m.key; });\r\n                        var columns = Object.keys(setArgs_1[i]).filter(function (c) { return modelColumns_1.indexOf(c) === -1; }); // wildcard columns\r\n                        columns.forEach(function (col) {\r\n                            inputArgs[col] = setArgs_1[i][col];\r\n                        });\r\n                    }\r\n                    setArgs_1[i] = inputArgs;\r\n                });\r\n            }\r\n            else {\r\n                setArgs_1 = this._query.actionArgs;\r\n            }\r\n            this._query.action = a;\r\n            this._query.actionArgs = this._query.actionArgs ? setArgs_1 : undefined;\r\n        }\r\n        else {\r\n            throw Error(\"nSQL: No valid database action!\");\r\n        }\r\n        return new utilities_1.Promise(function (res, rej) {\r\n            var runExec = function () {\r\n                if (!t._db.plugins.length) {\r\n                    t._error = \"nSQL: No plugins, nothing to do!\";\r\n                }\r\n                if (t._error) {\r\n                    rej(t._error);\r\n                    return;\r\n                }\r\n                if (_this._db.queryMod) {\r\n                    _this._db.queryMod(_this._query, function (newQ) {\r\n                        _this._query = newQ;\r\n                        runQuery(_this, res);\r\n                    });\r\n                }\r\n                else {\r\n                    runQuery(_this, res);\r\n                }\r\n            };\r\n            if (_this._db.isConnected || _this._query.table.indexOf(\"_\") === 0) {\r\n                runExec();\r\n            }\r\n            else {\r\n                _this._db.onConnected(runExec);\r\n            }\r\n        });\r\n    };\r\n    return _NanoSQLQuery;\r\n}());\r\nexports._NanoSQLQuery = _NanoSQLQuery;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/nano-sql/lib/query/std-query.js\n// module id = 179\n// module chunks = 0","'use strict';\n\nmodule.exports = metaphone;\n\nvar SH = 'X';\nvar TH = '0';\n\n/* Get the phonetics according to the original Metaphone\n * algorithm from a value. */\nfunction metaphone(value) {\n  var phonized = '';\n  var index = 0;\n  var skip;\n  var next;\n  var current;\n  var prev;\n\n  /* Add `characters` to `phonized`. */\n  function phonize(characters) {\n    phonized += characters;\n  }\n\n  /* Get the character offset by `offset` from the\n   * current character. */\n  function at(offset) {\n    return value.charAt(index + offset).toUpperCase();\n  }\n\n  /* Create an `at` function with a bound `offset`. */\n  function atFactory(offset) {\n    return function () {\n      return at(offset);\n    };\n  }\n\n  value = String(value || '');\n\n  if (!value) {\n    return '';\n  }\n\n  next = atFactory(1);\n  current = atFactory(0);\n  prev = atFactory(-1);\n\n  /* Find our first letter */\n  while (!alpha(current())) {\n    if (!current()) {\n      return '';\n    }\n\n    index++;\n  }\n\n  switch (current()) {\n    case 'A':\n      /* AE becomes E */\n      if (next() === 'E') {\n        phonize('E');\n        index += 2;\n      } else {\n        /* Remember, preserve vowels at the beginning */\n        phonize('A');\n        index++;\n      }\n\n      break;\n    /* [GKP]N becomes N */\n    case 'G':\n    case 'K':\n    case 'P':\n      if (next() === 'N') {\n        phonize('N');\n        index += 2;\n      }\n\n      break;\n\n    /* WH becomes H,\n       WR becomes R\n       W if followed by a vowel */\n    case 'W':\n      if (next() === 'R') {\n        phonize(next());\n        index += 2;\n      } else if (next() === 'H') {\n        phonize(current());\n        index += 2;\n      } else if (vowel(next())) {\n        phonize('W');\n        index += 2;\n      }\n      /* Else ignore */\n      break;\n    /* X becomes S */\n    case 'X':\n      phonize('S');\n      index++;\n\n      break;\n    /* Vowels are kept */\n    /* We did A already\n    case 'A':\n    case 'a': */\n    case 'E':\n    case 'I':\n    case 'O':\n    case 'U':\n      phonize(current());\n      index++;\n      break;\n    default:\n      /* Do nothing */\n      break;\n  }\n\n  /* On to the metaphoning */\n  while (current()) {\n    /* How many letters to skip because an eariler encoding handled\n     * multiple letters */\n    skip = 1;\n\n    /* Ignore non-alphas */\n    if (!alpha(current()) || (current() === prev() && current() !== 'C')) {\n      index += skip;\n      continue;\n    }\n\n    // eslint-disable-next-line default-case\n    switch (current()) {\n      /* B -> B unless in MB */\n      case 'B':\n        if (prev() !== 'M') {\n          phonize('B');\n        }\n\n        break;\n      /* 'sh' if -CIA- or -CH, but not SCH, except SCHW.\n       * (SCHW is handled in S)\n       *  S if -CI-, -CE- or -CY-\n       *  dropped if -SCI-, SCE-, -SCY- (handed in S)\n       *  else K */\n      case 'C':\n        if (soft(next())) {\n          /* C[IEY] */\n          if (next() === 'I' && at(2) === 'A') {\n            /* CIA */\n            phonize(SH);\n          } else if (prev() !== 'S') {\n            phonize('S');\n          }\n        } else if (next() === 'H') {\n          phonize(SH);\n          skip++;\n        } else {\n          /* C */\n          phonize('K');\n        }\n\n        break;\n      /* J if in -DGE-, -DGI- or -DGY-\n       * else T. */\n      case 'D':\n        if (next() === 'G' && soft(at(2))) {\n          phonize('J');\n          skip++;\n        } else {\n          phonize('T');\n        }\n\n        break;\n      /* F if in -GH and not B--GH, D--GH, -H--GH, -H---GH\n       * else dropped if -GNED, -GN,\n       * else dropped if -DGE-, -DGI- or -DGY- (handled in D)\n       * else J if in -GE-, -GI, -GY and not GG\n       * else K. */\n      case 'G':\n        if (next() === 'H') {\n          if (!(noGHToF(at(-3)) || at(-4) === 'H')) {\n            phonize('F');\n            skip++;\n          }\n        } else if (next() === 'N') {\n          if (!(!alpha(at(2)) || (at(2) === 'E' && at(3) === 'D'))) {\n            phonize('K');\n          }\n        } else if (soft(next()) && prev() !== 'G') {\n          phonize('J');\n        } else {\n          phonize('K');\n        }\n\n        break;\n\n      /* H if before a vowel and not after C,G,P,S,T */\n      case 'H':\n        if (vowel(next()) && !dipthongH(prev())) {\n          phonize('H');\n        }\n\n        break;\n      /* Dropped if after C\n       * else K. */\n      case 'K':\n        if (prev() !== 'C') {\n          phonize('K');\n        }\n\n        break;\n      /* F if before H\n       * else P. */\n      case 'P':\n        if (next() === 'H') {\n          phonize('F');\n        } else {\n          phonize('P');\n        }\n\n        break;\n      /* K */\n      case 'Q':\n        phonize('K');\n        break;\n      /* 'sh' in -SH-, -SIO- or -SIA- or -SCHW-\n       * else S */\n      case 'S':\n        if (next() === 'I' && (at(2) === 'O' || at(2) === 'A')) {\n          phonize(SH);\n        } else if (next() === 'H') {\n          phonize(SH);\n          skip++;\n        } else {\n          phonize('S');\n        }\n\n        break;\n      /* 'sh' in -TIA- or -TIO-\n       * else 'th' before H\n       * else T. */\n      case 'T':\n        if (next() === 'I' && (at(2) === 'O' || at(2) === 'A')) {\n          phonize(SH);\n        } else if (next() === 'H') {\n          phonize(TH);\n          skip++;\n        } else if (!(next() === 'C' && at(2) === 'H')) {\n          phonize('T');\n        }\n\n        break;\n      /* F */\n      case 'V':\n        phonize('F');\n        break;\n      case 'W':\n        if (vowel(next())) {\n          phonize('W');\n        }\n\n        break;\n      /* KS */\n      case 'X':\n        phonize('KS');\n        break;\n      /* Y if followed by a vowel */\n      case 'Y':\n        if (vowel(next())) {\n          phonize('Y');\n        }\n\n        break;\n      /* S */\n      case 'Z':\n        phonize('S');\n        break;\n      /* No transformation */\n      case 'F':\n      case 'J':\n      case 'L':\n      case 'M':\n      case 'N':\n      case 'R':\n        phonize(current());\n        break;\n    }\n\n    index += skip;\n  }\n\n  return phonized;\n}\n\n/* Check whether `character` would make `'GH'` an `'F'`. */\nfunction noGHToF(character) {\n  character = char(character);\n\n  return character === 'B' ||\n    character === 'D' ||\n    character === 'H';\n}\n\n/* Check whether `character` would make a `'C'` or `'G'`\n * soft. */\nfunction soft(character) {\n  character = char(character);\n  return character === 'E' || character === 'I' || character === 'Y';\n}\n\n/* Check whether `character` is a vowel. */\nfunction vowel(character) {\n  character = char(character);\n\n  return character === 'A' ||\n    character === 'E' ||\n    character === 'I' ||\n    character === 'O' ||\n    character === 'U';\n}\n\n/* Check whether `character` forms a dipthong when\n * preceding H. */\nfunction dipthongH(character) {\n  character = char(character);\n\n  return character === 'C' ||\n    character === 'G' ||\n    character === 'P' ||\n    character === 'S' ||\n    character === 'T';\n}\n\n/* Check whether `character` is in the alphabet. */\nfunction alpha(character) {\n  var code = charCode(character);\n  return code >= 65 && code <= 90;\n}\n\n/* Get the upper-case character code of the first character\n * in `character`. */\nfunction charCode(character) {\n  return char(character).charCodeAt(0);\n}\n\n/* Turn `character` into a single, upper-case character. */\nfunction char(character) {\n  return String(character).charAt(0).toUpperCase();\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/metaphone/index.js\n// module id = 180\n// module chunks = 0","'use strict';\n\nmodule.exports = stemmer;\n\n/* Character code for `y`. */\nvar CC_Y = 'y'.charCodeAt(0);\n\n/* Standard suffix manipulations. */\nvar step2list = {\n  ational: 'ate',\n  tional: 'tion',\n  enci: 'ence',\n  anci: 'ance',\n  izer: 'ize',\n  bli: 'ble',\n  alli: 'al',\n  entli: 'ent',\n  eli: 'e',\n  ousli: 'ous',\n  ization: 'ize',\n  ation: 'ate',\n  ator: 'ate',\n  alism: 'al',\n  iveness: 'ive',\n  fulness: 'ful',\n  ousness: 'ous',\n  aliti: 'al',\n  iviti: 'ive',\n  biliti: 'ble',\n  logi: 'log'\n};\n\nvar step3list = {\n  icate: 'ic',\n  ative: '',\n  alize: 'al',\n  iciti: 'ic',\n  ical: 'ic',\n  ful: '',\n  ness: ''\n};\n\n/* Consonant-vowel sequences. */\nvar consonant = '[^aeiou]';\nvar vowel = '[aeiouy]';\nvar consonantSequence = '(' + consonant + '[^aeiouy]*)';\nvar vowelSequence = '(' + vowel + '[aeiou]*)';\n\nvar MEASURE_GT_0 = new RegExp(\n  '^' + consonantSequence + '?' + vowelSequence + consonantSequence\n);\n\nvar MEASURE_EQ_1 = new RegExp(\n  '^' + consonantSequence + '?' + vowelSequence + consonantSequence +\n  vowelSequence + '?$'\n);\n\nvar MEASURE_GT_1 = new RegExp(\n  '^' + consonantSequence + '?' +\n  '(' + vowelSequence + consonantSequence + '){2,}'\n);\n\nvar VOWEL_IN_STEM = new RegExp(\n  '^' + consonantSequence + '?' + vowel\n);\n\nvar CONSONANT_LIKE = new RegExp(\n  '^' + consonantSequence + vowel + '[^aeiouwxy]$'\n);\n\n/* Exception expressions. */\nvar SUFFIX_LL = /ll$/;\nvar SUFFIX_E = /^(.+?)e$/;\nvar SUFFIX_Y = /^(.+?)y$/;\nvar SUFFIX_ION = /^(.+?(s|t))(ion)$/;\nvar SUFFIX_ED_OR_ING = /^(.+?)(ed|ing)$/;\nvar SUFFIX_AT_OR_BL_OR_IZ = /(at|bl|iz)$/;\nvar SUFFIX_EED = /^(.+?)eed$/;\nvar SUFFIX_S = /^.+?[^s]s$/;\nvar SUFFIX_SSES_OR_IES = /^.+?(ss|i)es$/;\nvar SUFFIX_MULTI_CONSONANT_LIKE = /([^aeiouylsz])\\1$/;\nvar STEP_2 = new RegExp(\n  '^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|' +\n  'ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|' +\n  'biliti|logi)$'\n);\nvar STEP_3 = /^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/;\nvar STEP_4 = new RegExp(\n  '^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|' +\n  'iti|ous|ive|ize)$'\n);\n\n/* Stem `value`. */\nfunction stemmer(value) {\n  var firstCharacterWasLowerCaseY;\n  var match;\n\n  value = String(value).toLowerCase();\n\n  /* Exit early. */\n  if (value.length < 3) {\n    return value;\n  }\n\n  /* Detect initial `y`, make sure it never matches. */\n  if (value.charCodeAt(0) === CC_Y) {\n    firstCharacterWasLowerCaseY = true;\n    value = 'Y' + value.substr(1);\n  }\n\n  /* Step 1a. */\n  if (SUFFIX_SSES_OR_IES.test(value)) {\n    /* Remove last two characters. */\n    value = value.substr(0, value.length - 2);\n  } else if (SUFFIX_S.test(value)) {\n    /* Remove last character. */\n    value = value.substr(0, value.length - 1);\n  }\n\n  /* Step 1b. */\n  if (match = SUFFIX_EED.exec(value)) {\n    if (MEASURE_GT_0.test(match[1])) {\n      /* Remove last character. */\n      value = value.substr(0, value.length - 1);\n    }\n  } else if ((match = SUFFIX_ED_OR_ING.exec(value)) && VOWEL_IN_STEM.test(match[1])) {\n    value = match[1];\n\n    if (SUFFIX_AT_OR_BL_OR_IZ.test(value)) {\n      /* Append `e`. */\n      value += 'e';\n    } else if (SUFFIX_MULTI_CONSONANT_LIKE.test(value)) {\n      /* Remove last character. */\n      value = value.substr(0, value.length - 1);\n    } else if (CONSONANT_LIKE.test(value)) {\n      /* Append `e`. */\n      value += 'e';\n    }\n  }\n\n  /* Step 1c. */\n  if ((match = SUFFIX_Y.exec(value)) && VOWEL_IN_STEM.test(match[1])) {\n    /* Remove suffixing `y` and append `i`. */\n    value = match[1] + 'i';\n  }\n\n  /* Step 2. */\n  if ((match = STEP_2.exec(value)) && MEASURE_GT_0.test(match[1])) {\n    value = match[1] + step2list[match[2]];\n  }\n\n  /* Step 3. */\n  if ((match = STEP_3.exec(value)) && MEASURE_GT_0.test(match[1])) {\n    value = match[1] + step3list[match[2]];\n  }\n\n  /* Step 4. */\n  if (match = STEP_4.exec(value)) {\n    if (MEASURE_GT_1.test(match[1])) {\n      value = match[1];\n    }\n  } else if ((match = SUFFIX_ION.exec(value)) && MEASURE_GT_1.test(match[1])) {\n    value = match[1];\n  }\n\n  /* Step 5. */\n  if (\n    (match = SUFFIX_E.exec(value)) &&\n    (MEASURE_GT_1.test(match[1]) || (MEASURE_EQ_1.test(match[1]) && !CONSONANT_LIKE.test(match[1])))\n  ) {\n    value = match[1];\n  }\n\n  if (SUFFIX_LL.test(value) && MEASURE_GT_1.test(value)) {\n    value = value.substr(0, value.length - 1);\n  }\n\n  /* Turn initial `Y` back to `y`. */\n  if (firstCharacterWasLowerCaseY) {\n    value = 'y' + value.substr(1);\n  }\n\n  return value;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/stemmer/index.js\n// module id = 181\n// module chunks = 0","Object.defineProperty(exports, \"__esModule\", { value: true });\r\n// tslint:disable-next-line\r\nvar _NanoSQLTransactionQuery = /** @class */ (function () {\r\n    function _NanoSQLTransactionQuery(action, args, table, queries, transactionID) {\r\n        this.thisQ = {\r\n            state: \"pending\",\r\n            table: table,\r\n            action: action,\r\n            actionArgs: args,\r\n            queryID: transactionID,\r\n            transaction: true,\r\n            result: [],\r\n            comments: []\r\n        };\r\n        this._queries = queries;\r\n    }\r\n    _NanoSQLTransactionQuery.prototype.where = function (args) {\r\n        this.thisQ.where = args;\r\n        return this;\r\n    };\r\n    _NanoSQLTransactionQuery.prototype.exec = function () {\r\n        this._queries.push(this.thisQ);\r\n    };\r\n    return _NanoSQLTransactionQuery;\r\n}());\r\nexports._NanoSQLTransactionQuery = _NanoSQLTransactionQuery;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/nano-sql/lib/query/transaction.js\n// module id = 182\n// module chunks = 0","Object.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ReallySmallEvents = (function () {\r\n    function ReallySmallEvents() {\r\n        this.eventListeners = {};\r\n    }\r\n    ReallySmallEvents.prototype.on = function (event, callback) {\r\n        if (!this.eventListeners[event]) {\r\n            this.eventListeners[event] = [];\r\n        }\r\n        this.eventListeners[event].push(callback);\r\n    };\r\n    ReallySmallEvents.prototype.off = function (event, callback) {\r\n        var _this = this;\r\n        if (this.eventListeners[event] && this.eventListeners[event].length) {\r\n            this.eventListeners[event].forEach(function (cb, idx) {\r\n                if (cb === callback) {\r\n                    _this.eventListeners[event].splice(idx, 1);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    ReallySmallEvents.prototype.trigger = function (event) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        if (this.eventListeners[event]) {\r\n            this.eventListeners[event].forEach(function (cb) { return cb.apply(void 0, args); });\r\n        }\r\n    };\r\n    return ReallySmallEvents;\r\n}());\r\nexports.ReallySmallEvents = ReallySmallEvents;\r\nexports.RSE = new ReallySmallEvents();\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/really-small-events/src/index.js\n// module id = 183\n// module chunks = 0","var __assign = (this && this.__assign) || Object.assign || function(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n            t[p] = s[p];\r\n    }\r\n    return t;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar index_1 = require(\"../index\");\r\nvar query_1 = require(\"./query\");\r\nvar utilities_1 = require(\"../utilities\");\r\nvar storage_1 = require(\"./storage\");\r\nvar lie_ts_1 = require(\"lie-ts\");\r\nvar NanoSQLDefaultBackend = /** @class */ (function () {\r\n    function NanoSQLDefaultBackend() {\r\n        this._queryPool = [];\r\n        this._queryPtr = 0;\r\n    }\r\n    NanoSQLDefaultBackend.prototype.willConnect = function (connectArgs, next) {\r\n        this.parent = connectArgs.parent;\r\n        this._store = new storage_1._NanoSQLStorage(connectArgs.parent, __assign({}, connectArgs.config));\r\n        /*for (let i = 0; i < 100; i++) {\r\n            this._queryPool.push(new _NanoSQLStorageQuery(this._store));\r\n        }*/\r\n        this._store.init(connectArgs.models, function (newModels) {\r\n            connectArgs.models = __assign({}, connectArgs.models, newModels);\r\n            next(connectArgs);\r\n        });\r\n    };\r\n    NanoSQLDefaultBackend.prototype.getId = function () {\r\n        return this._store._id;\r\n    };\r\n    NanoSQLDefaultBackend.prototype.doExec = function (execArgs, next) {\r\n        execArgs.state = \"complete\";\r\n        /*this._queryPtr++;\r\n        if (this._queryPtr > this._queryPool.length - 1) {\r\n            this._queryPtr = 0;\r\n        }*/\r\n        new query_1._NanoSQLStorageQuery(this._store).doQuery(execArgs, next);\r\n    };\r\n    /*public transactionBegin(id: string, next: () => void): void {\r\n        next();\r\n    }\r\n\r\n    public transactionEnd(id: string, next: () => void): void {\r\n        next();\r\n    }\r\n    */\r\n    NanoSQLDefaultBackend.prototype.dumpTables = function (tables) {\r\n        var _this = this;\r\n        return new utilities_1.Promise(function (res, rej) {\r\n            var dump = {};\r\n            var exportTables = tables && tables.length ? tables : Object.keys(_this._store.tableInfo);\r\n            utilities_1.fastALL(exportTables, function (table, i, done) {\r\n                dump[table] = [];\r\n                _this._store.adapters[0].adapter.rangeRead(table, function (r, idx, rowDone) {\r\n                    dump[table].push(r);\r\n                    rowDone();\r\n                }, done);\r\n            }).then(function () {\r\n                res(dump);\r\n            });\r\n        });\r\n    };\r\n    NanoSQLDefaultBackend.prototype.importTables = function (tables, onProgress) {\r\n        var _this = this;\r\n        return new utilities_1.Promise(function (res, rej) {\r\n            var totalLength = 0;\r\n            var totalProgress = 0;\r\n            Object.keys(tables).forEach(function (table) {\r\n                totalLength += (tables[table] || []).length || 0;\r\n            });\r\n            utilities_1.fastALL(Object.keys(tables), function (tableName, i, done) {\r\n                var pkKey = _this._store.tableInfo[tableName]._pk;\r\n                var length = (tables[tableName] || []).length || 0;\r\n                var k = 0;\r\n                var next = function () {\r\n                    if (k < length) {\r\n                        var row = tables[tableName][k];\r\n                        k++;\r\n                        totalProgress++;\r\n                        if (row[pkKey]) {\r\n                            _this._store.adapterWrite(tableName, row[pkKey], row, function () {\r\n                                onProgress(Math.round(((totalProgress + 1) / totalLength) * 10000) / 100);\r\n                                k % 500 === 0 ? lie_ts_1.setFast(next) : next();\r\n                            });\r\n                        }\r\n                        else {\r\n                            onProgress(Math.round(((totalProgress + 1) / totalLength) * 10000) / 100);\r\n                            k % 500 === 0 ? lie_ts_1.setFast(next) : next();\r\n                        }\r\n                    }\r\n                    else {\r\n                        done();\r\n                    }\r\n                };\r\n                next();\r\n            }).then(function () {\r\n                res();\r\n            });\r\n        });\r\n    };\r\n    NanoSQLDefaultBackend.prototype.willDisconnect = function (next) {\r\n        utilities_1.fastALL(this._store.adapters || [], function (adapter, i, done) {\r\n            if (adapter.disconnect) {\r\n                adapter.disconnect(done);\r\n            }\r\n            else {\r\n                done();\r\n            }\r\n        }).then(next);\r\n    };\r\n    NanoSQLDefaultBackend.prototype.extend = function (next, args, result) {\r\n        var _this = this;\r\n        switch (args[0]) {\r\n            case \"clone\":\r\n                var nSQLi_1 = new index_1.NanoSQLInstance();\r\n                Object.keys(this.parent.dataModels).forEach(function (table) {\r\n                    nSQLi_1.table(table).model(_this.parent.dataModels[table], [], true);\r\n                });\r\n                nSQLi_1\r\n                    .config({\r\n                    id: this._store._id,\r\n                    mode: args[1]\r\n                })\r\n                    .connect().then(function () {\r\n                    var i = 0;\r\n                    utilities_1.fastCHAIN(Object.keys(_this.parent.dataModels), function (table, i, done) {\r\n                        console.log(\"Importing \" + table + \"...\");\r\n                        _this.parent.rawDump([table])\r\n                            .then(function (data) {\r\n                            return nSQLi_1.rawImport(data);\r\n                        })\r\n                            .then(done);\r\n                    }).then(function () {\r\n                        next(args, []);\r\n                    });\r\n                });\r\n                break;\r\n            case \"flush\":\r\n                var tables_1 = [];\r\n                if (!args[1]) {\r\n                    tables_1 = this.parent.tableNames;\r\n                }\r\n                else {\r\n                    tables_1 = [args[1]];\r\n                }\r\n                utilities_1.fastCHAIN(tables_1, function (table, i, next) {\r\n                    _this._store._drop(table, next);\r\n                }).then(function () {\r\n                    next(args, tables_1);\r\n                });\r\n                break;\r\n            case \"get_adapter\":\r\n                if (!args[1]) {\r\n                    next(args, [this._store.adapters[0].adapter]);\r\n                }\r\n                else {\r\n                    next(args, [this._store.adapters[args[1]].adapter]);\r\n                }\r\n                break;\r\n            case \"idx.length\":\r\n            case \"idx\":\r\n                var table = args[1];\r\n                if (Object.keys(this._store.tableInfo).indexOf(table) > -1) {\r\n                    this._store.adapters[0].adapter.getIndex(table, args[0] !== \"idx\", function (idx) {\r\n                        next(args, idx);\r\n                    });\r\n                }\r\n                else {\r\n                    next(args, []);\r\n                }\r\n                break;\r\n            case \"rebuild_search\":\r\n                var rebuildTables_1 = (function () {\r\n                    if (args[1])\r\n                        return [args[1]];\r\n                    return Object.keys(_this._store.tableInfo);\r\n                })();\r\n                var progress_1 = args[2];\r\n                utilities_1.fastALL(rebuildTables_1, function (table, i, done) {\r\n                    var totalProgress = 0;\r\n                    var currentProgress = 0;\r\n                    utilities_1.fastALL(rebuildTables_1, function (t, kk, lengthDone) {\r\n                        _this._store.adapters[0].adapter.getIndex(t, true, function (len) {\r\n                            totalProgress += len;\r\n                            lengthDone();\r\n                        });\r\n                    }).then(function () {\r\n                        var tablesToDrop = Object.keys(_this._store.tableInfo[table]._searchColumns).map(function (t) { return \"_\" + table + \"_search_tokens_\" + t; });\r\n                        tablesToDrop = tablesToDrop.concat(Object.keys(_this._store.tableInfo[table]._searchColumns).map(function (t) { return \"_\" + table + \"_search_\" + t; }));\r\n                        tablesToDrop = tablesToDrop.concat(Object.keys(_this._store.tableInfo[table]._searchColumns).map(function (t) { return \"_\" + table + \"_search_fuzzy_\" + t; }));\r\n                        utilities_1.fastALL(tablesToDrop, function (dropTable, i, dropDone) {\r\n                            _this._store.adapterDrop(dropTable, dropDone);\r\n                        }).then(function () {\r\n                            _this._store.adapters[0].adapter.rangeRead(table, function (row, idx, next) {\r\n                                _this.parent.query(\"upsert\", row)\r\n                                    .comment(\"_rebuild_search_index_\")\r\n                                    .manualExec({ table: table }).then(function () {\r\n                                    if (progress_1)\r\n                                        progress_1(Math.round(((currentProgress + 1) / totalProgress) * 10000) / 100);\r\n                                    currentProgress++;\r\n                                    next();\r\n                                });\r\n                            }, done);\r\n                        });\r\n                    });\r\n                }).then(function () {\r\n                    next(args, []);\r\n                });\r\n                break;\r\n            case \"rebuild_idx\":\r\n                if (args[1]) {\r\n                    this._store.rebuildIndexes(args[1], function (time) {\r\n                        next(args, [time]);\r\n                    });\r\n                }\r\n                else {\r\n                    utilities_1.fastALL(Object.keys(this._store.tableInfo), function (table, i, done) {\r\n                        _this._store.rebuildIndexes(table, done);\r\n                    }).then(function (times) {\r\n                        next(args, times);\r\n                    });\r\n                }\r\n                break;\r\n            default:\r\n                next(args, result);\r\n        }\r\n    };\r\n    return NanoSQLDefaultBackend;\r\n}());\r\nexports.NanoSQLDefaultBackend = NanoSQLDefaultBackend;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/nano-sql/lib/database/index.js\n// module id = 184\n// module chunks = 0","var __assign = (this && this.__assign) || Object.assign || function(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n            t[p] = s[p];\r\n    }\r\n    return t;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar index_1 = require(\"../index\");\r\nvar utilities_1 = require(\"../utilities\");\r\nvar fuzzy = require(\"fuzzysearch\");\r\nvar levenshtein = require(\"levenshtein-edit-distance\");\r\nvar queryObj = {\r\n    select: function (self, next) {\r\n        self._select(next);\r\n    },\r\n    upsert: function (self, next) {\r\n        if (self._store._doCache) {\r\n            self._upsert(next);\r\n        }\r\n        else {\r\n            self._store.queue.add(self._query.table, function (done) {\r\n                self._upsert(function () {\r\n                    done();\r\n                    next(self._query);\r\n                });\r\n            });\r\n        }\r\n    },\r\n    delete: function (self, next) {\r\n        if (self._store._doCache) {\r\n            self._delete(next);\r\n        }\r\n        else {\r\n            self._store.queue.add(self._query.table, function (done) {\r\n                self._delete(function () {\r\n                    done();\r\n                    next(self._query);\r\n                });\r\n            });\r\n        }\r\n    },\r\n    drop: function (self, next) {\r\n        if (self._store._doCache) {\r\n            self._drop(next);\r\n        }\r\n        else {\r\n            self._store.queue.add(self._query.table, function (done) {\r\n                self._drop(function () {\r\n                    done();\r\n                    next(self._query);\r\n                });\r\n            });\r\n        }\r\n    },\r\n    \"show tables\": function (self, next) {\r\n        self._query.result = Object.keys(self._store.tableInfo);\r\n        next(self._query);\r\n    },\r\n    describe: function (self, next) {\r\n        if (typeof self._query.table !== \"string\") {\r\n            next(self._query);\r\n            return;\r\n        }\r\n        self._query.result = self._store.models[self._query.table] ? utilities_1._assign(self._store.models[self._query.table]) : [{ error: \"Table does not exist\" }];\r\n        next(self._query);\r\n    },\r\n};\r\n/**\r\n * A new Storage Query class is inilitized for every query, performing the actions\r\n * against the storage class itself to get the desired outcome.\r\n *\r\n * @export\r\n * @class _NanoSQLStorageQuery\r\n */\r\n// tslint:disable-next-line\r\nvar _NanoSQLStorageQuery = /** @class */ (function () {\r\n    function _NanoSQLStorageQuery(_store) {\r\n        this._store = _store;\r\n    }\r\n    /**\r\n     * Execute the query against this class.\r\n     *\r\n     * @param {IdbQuery} query\r\n     * @param {(q: IdbQuery) => void} next\r\n     * @returns\r\n     * @memberof _NanoSQLStorageQuery\r\n     */\r\n    _NanoSQLStorageQuery.prototype.doQuery = function (query, next) {\r\n        this._query = query;\r\n        this._isInstanceTable = Array.isArray(query.table);\r\n        queryObj[query.action](this, next);\r\n    };\r\n    /**\r\n     * Retreive the selected rows for this query, works for instance tables and standard ones.\r\n     *\r\n     * @internal\r\n     * @param {(rows: DBRow[]) => void} complete\r\n     * @memberof _NanoSQLStorageQuery\r\n     */\r\n    _NanoSQLStorageQuery.prototype._getRows = function (complete) {\r\n        if (this._isInstanceTable) {\r\n            new InstanceSelection(this._query, this._store._nsql).getRows(complete);\r\n        }\r\n        else {\r\n            new _RowSelection(this, this._query, this._store, function (rows) {\r\n                complete(rows.filter(function (r) { return r; }));\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Initilze a SELECT query.\r\n     *\r\n     * @internal\r\n     * @param {(q: IdbQuery) => void} next\r\n     * @returns\r\n     * @memberof _NanoSQLStorageQuery\r\n     */\r\n    _NanoSQLStorageQuery.prototype._select = function (next) {\r\n        var _this = this;\r\n        this._hash = utilities_1.hash(JSON.stringify(__assign({}, this._query, { queryID: null })));\r\n        var canCache = !this._query.join && !this._query.orm && this._store._doCache && !Array.isArray(this._query.table);\r\n        // Query cache for the win!\r\n        if (canCache && this._store._cache[this._query.table][this._hash]) {\r\n            this._query.result = this._store._cache[this._query.table][this._hash];\r\n            next(this._query);\r\n            return;\r\n        }\r\n        this._getRows(function (rows) {\r\n            // No query arguments, we can skip the whole mutation selection class\r\n            if (![\"having\", \"orderBy\", \"offset\", \"limit\", \"actionArgs\", \"groupBy\", \"orm\", \"join\"].filter(function (k) { return _this._query[k]; }).length) {\r\n                if (canCache)\r\n                    _this._store._cache[_this._query.table][_this._hash] = rows;\r\n                _this._query.result = rows;\r\n                next(_this._query);\r\n            }\r\n            else {\r\n                new _MutateSelection(_this._query, _this._store)._executeQueryArguments(rows, function (resultRows) {\r\n                    if (canCache)\r\n                        _this._store._cache[_this._query.table][_this._hash] = rows;\r\n                    _this._query.result = resultRows;\r\n                    next(_this._query);\r\n                });\r\n            }\r\n        });\r\n    };\r\n    _NanoSQLStorageQuery.prototype._updateORMRows = function (relation, fromPKs, add, primaryKey, complete) {\r\n        var _this = this;\r\n        var fromPk = this._store.tableInfo[relation._fromTable]._pk;\r\n        this._store._read(relation._fromTable, fromPKs, function (rows) {\r\n            utilities_1.fastALL(rows, function (row, i, rowDone) {\r\n                var newRow = Object.isFrozen(row) ? utilities_1._assign(row) : row;\r\n                if (relation._fromType === \"array\") {\r\n                    newRow[relation._fromColumn] = newRow[relation._fromColumn] || [];\r\n                    var idxOf = newRow[relation._fromColumn].indexOf(primaryKey);\r\n                    if (add) { // add\r\n                        if (idxOf === -1) {\r\n                            newRow[relation._fromColumn].push(primaryKey);\r\n                        }\r\n                        else {\r\n                            rowDone();\r\n                        }\r\n                    }\r\n                    else { // remove\r\n                        if (idxOf !== -1) {\r\n                            newRow[relation._fromColumn].splice(idxOf, 1);\r\n                        }\r\n                        else {\r\n                            rowDone();\r\n                        }\r\n                    }\r\n                    newRow[relation._fromColumn].sort();\r\n                }\r\n                else {\r\n                    if (add) { // add\r\n                        newRow[relation._fromColumn] = primaryKey;\r\n                    }\r\n                    else { // remove\r\n                        newRow[relation._fromColumn] = null;\r\n                    }\r\n                }\r\n                _this._store._nsql.query(\"upsert\", newRow).comment(\"_orm_skip\").manualExec({ table: relation._fromTable }).then(rowDone);\r\n            }).then(complete);\r\n        });\r\n    };\r\n    _NanoSQLStorageQuery.prototype._syncORM = function (type, oldRows, newRows, complete) {\r\n        var _this = this;\r\n        if (!this._store._hasORM) {\r\n            complete();\r\n            return;\r\n        }\r\n        var useRelations = this._store._relToTable[this._query.table];\r\n        if (this._query.comments.indexOf(\"_orm_skip\") !== -1) {\r\n            complete();\r\n            return;\r\n        }\r\n        if (!useRelations || !useRelations.length) {\r\n            complete();\r\n            return;\r\n        }\r\n        // go over every relation and every changed row to make the needed updates.\r\n        var cnt = Math.max(oldRows.length, newRows.length);\r\n        var arra = [];\r\n        while (cnt--)\r\n            arra.push(\" \");\r\n        utilities_1.fastCHAIN(arra, function (v, idx, rowDone) {\r\n            utilities_1.fastALL(useRelations, function (relation, k, relationDone) {\r\n                var equals = function (val1, val2) {\r\n                    if (Array.isArray(val1) && Array.isArray(val2)) {\r\n                        if (val1.length !== val2.length) {\r\n                            return false;\r\n                        }\r\n                        return val1.filter(function (v, i) { return v !== val2[i]; }).length > 0;\r\n                    }\r\n                    else {\r\n                        return val1 === val2;\r\n                    }\r\n                };\r\n                switch (type) {\r\n                    case \"del\":\r\n                        var delPrimarykey = oldRows[idx][_this._store.tableInfo[_this._query.table]._pk];\r\n                        var updateIDs = relation._thisType === \"array\" ? (oldRows[idx][relation._thisColumn] || []) : ([oldRows[idx][relation._thisColumn]].filter(function (v) { return v; }));\r\n                        _this._updateORMRows(relation, updateIDs, false, delPrimarykey, relationDone);\r\n                        break;\r\n                    case \"add\":\r\n                        var primaryKey_1 = newRows[idx][_this._store.tableInfo[_this._query.table]._pk];\r\n                        // possibly update existing relation\r\n                        // if adding oldRows[idx] is possibly undefined (if theres no previouse row record)\r\n                        if (oldRows[idx]) {\r\n                            // previouse record exists\r\n                            if (equals(oldRows[idx][relation._thisColumn], newRows[idx][relation._thisColumn])) {\r\n                                // no update needed\r\n                                relationDone();\r\n                            }\r\n                            else {\r\n                                if (relation._thisType === \"array\") {\r\n                                    var addIds = (newRows[idx][relation._thisColumn] || []).filter(function (v) { return (oldRows[idx][relation._thisColumn] || []).indexOf(v) === -1; });\r\n                                    var removeIds = (oldRows[idx][relation._thisColumn] || []).filter(function (v) { return (newRows[idx][relation._thisColumn] || []).indexOf(v) === -1; });\r\n                                    utilities_1.fastALL([addIds, removeIds], function (list, i, done) {\r\n                                        _this._updateORMRows(relation, list, i === 0, primaryKey_1, done);\r\n                                    }).then(relationDone);\r\n                                }\r\n                                else {\r\n                                    var addRelation = function () {\r\n                                        // add new relation\r\n                                        if (newRows[idx][relation._thisColumn] !== null && newRows[idx][relation._thisColumn] !== undefined) {\r\n                                            _this._updateORMRows(relation, [newRows[idx][relation._thisColumn]], true, primaryKey_1, relationDone);\r\n                                        }\r\n                                        else {\r\n                                            // no new relation\r\n                                            relationDone();\r\n                                        }\r\n                                    };\r\n                                    // remove old connection\r\n                                    if (oldRows[idx][relation._thisColumn] !== null && oldRows[idx][relation._thisColumn] !== undefined) {\r\n                                        _this._updateORMRows(relation, [oldRows[idx][relation._thisColumn]], false, primaryKey_1, addRelation);\r\n                                    }\r\n                                    else {\r\n                                        // no old connection, just add the new one\r\n                                        addRelation();\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        else { // new relation\r\n                            var valuesToAdd = relation._thisType === \"array\" ? (newRows[idx][relation._thisColumn] || []) : ([newRows[idx][relation._thisColumn]].filter(function (v) { return v; }));\r\n                            if (valuesToAdd && valuesToAdd.length) {\r\n                                _this._updateORMRows(relation, valuesToAdd, true, primaryKey_1, relationDone);\r\n                            }\r\n                            else {\r\n                                relationDone();\r\n                            }\r\n                        }\r\n                        break;\r\n                }\r\n            }).then(rowDone);\r\n        }).then(complete);\r\n    };\r\n    _NanoSQLStorageQuery.prototype._tokenizer = function (column, value) {\r\n        var args = this._store.tableInfo[this._query.table]._searchColumns[column];\r\n        if (!args) {\r\n            return [];\r\n        }\r\n        var userTokenizer = this._store._nsql.getConfig().tokenizer;\r\n        if (userTokenizer) {\r\n            var tokens = userTokenizer(this._query.table, column, args, value);\r\n            if (tokens !== false)\r\n                return tokens;\r\n        }\r\n        return utilities_1.tokenizer(this._query.table, column, args, value);\r\n    };\r\n    _NanoSQLStorageQuery.prototype._clearFromSearchIndex = function (pk, rowData, complete) {\r\n        var _this = this;\r\n        var table = this._query.table;\r\n        var columns = Object.keys(this._store.tableInfo[table]._searchColumns);\r\n        // No search indexes on this table OR\r\n        // update doesn't include indexed columns\r\n        if (columns.length === 0) {\r\n            complete();\r\n            return;\r\n        }\r\n        var tokenTable = \"_\" + table + \"_search_tokens_\";\r\n        // const searchTable = \"_\" + table + \"_search_\";\r\n        utilities_1.fastALL(columns, function (col, i, next) {\r\n            var tokens = _this._tokenizer(col, rowData[col]);\r\n            var wordCache = {};\r\n            tokens.forEach(function (t) {\r\n                wordCache[t.w] = t.o;\r\n            });\r\n            // get token cache for this row and column\r\n            _this._store.adapterRead(tokenTable + col, pk, function (row) {\r\n                if (!row) {\r\n                    next();\r\n                    return;\r\n                }\r\n                utilities_1.fastALL([\"_search_\", \"_search_fuzzy_\"], function (tableSection, l, next) {\r\n                    // reduce to a list of words to remove\r\n                    var wordsToRemove = {};\r\n                    row.tokens.forEach(function (token) {\r\n                        if (!wordsToRemove[token.w]) {\r\n                            if (l === 0)\r\n                                wordsToRemove[token.w] = true;\r\n                            if (l === 1)\r\n                                wordsToRemove[wordCache[token.w]] = true;\r\n                        }\r\n                    });\r\n                    // query those words and remove this row from them\r\n                    utilities_1.fastALL(Object.keys(wordsToRemove), function (word, j, done) {\r\n                        if (!word) {\r\n                            done();\r\n                            return;\r\n                        }\r\n                        _this._store.adapterRead(\"_\" + table + tableSection + col, word, function (wRow) {\r\n                            if (!wRow) {\r\n                                done();\r\n                                return;\r\n                            }\r\n                            if (Object.isFrozen(wRow)) {\r\n                                wRow = utilities_1._assign(wRow);\r\n                            }\r\n                            wRow.rows = wRow.rows.filter(function (r) { return r.id !== pk; });\r\n                            _this._store.adapterWrite(\"_\" + table + tableSection + col, word, wRow, done);\r\n                        }, true);\r\n                    }).then(next);\r\n                }).then(function () {\r\n                    // remove row hash and token cache\r\n                    _this._store.adapters[0].adapter.delete(tokenTable + col, pk, next);\r\n                });\r\n            }, true);\r\n        }).then(complete);\r\n    };\r\n    _NanoSQLStorageQuery.prototype._updateSearchIndex = function (pk, newRowData, complete) {\r\n        var _this = this;\r\n        var table = this._query.table;\r\n        var columns = Object.keys(this._store.tableInfo[table]._searchColumns);\r\n        // No search indexes on this table OR\r\n        // update doesn't include indexed columns\r\n        if (columns.length === 0 || !utilities_1.intersect(Object.keys(newRowData), columns)) {\r\n            complete();\r\n            return;\r\n        }\r\n        var tokenTable = \"_\" + table + \"_search_tokens_\";\r\n        utilities_1.fastALL(columns, function (col, i, next) {\r\n            if ([undefined, null, \"\"].indexOf(newRowData[col]) !== -1) { // columns doesn't contain indexable value\r\n                next();\r\n                return;\r\n            }\r\n            // get token cache and hash for this row/column\r\n            _this._store.adapterRead(tokenTable + col, pk, function (row) {\r\n                var existing = row || { id: pk, hash: \"1505\", tokens: [] };\r\n                var thisHash = utilities_1.hash(newRowData[col]);\r\n                if (thisHash === existing.hash) { // indexed/hashed value hasn't changed, no updates needed\r\n                    next();\r\n                    return;\r\n                }\r\n                var wordCache = {};\r\n                var newTokens = _this._tokenizer(col, newRowData[col]); // tokenize the new string\r\n                // next 5 lines or so are used to find what words\r\n                // have changed so we have to perform the smallest number of index updates.\r\n                var oldTokenIdx = existing.tokens.map(function (t) { return t.i + \"-\" + t.w; }).filter(function (t) { return t.split(\"-\")[1]; });\r\n                var newTokenIdx = newTokens.map(function (t) { return t.i + \"-\" + t.w; }).filter(function (t) { return t.split(\"-\")[1]; });\r\n                var addTokens = newTokenIdx.filter(function (i) { return oldTokenIdx.indexOf(i) === -1; }); // tokens that need to be added to index\r\n                var removeTokens = oldTokenIdx.filter(function (i) { return newTokenIdx.indexOf(i) === -1; }); // tokens to remove from the index\r\n                newTokens.forEach(function (token) {\r\n                    wordCache[token.w] = token.o;\r\n                });\r\n                utilities_1.fastCHAIN([removeTokens, addTokens], function (tokens, j, nextTokens) {\r\n                    // find the total number of words that need to be updated (each word is a single index entry)\r\n                    var reduceWords = {};\r\n                    tokens.forEach(function (token) {\r\n                        var sToken = token.split(/-(.+)/);\r\n                        var wToken = { w: sToken[1], i: parseInt(sToken[0]) };\r\n                        if (!reduceWords[wToken.w]) {\r\n                            reduceWords[wToken.w] = [];\r\n                        }\r\n                        reduceWords[wToken.w].push(wToken);\r\n                    });\r\n                    // Update all words in the index\r\n                    utilities_1.fastALL(Object.keys(reduceWords), function (word, k, nextWord) {\r\n                        // Update token index and standard index\r\n                        // _search_ = tokenized index\r\n                        // _search_fuzzy_ = non tokenized index\r\n                        utilities_1.fastALL([\"_search_\", \"_search_fuzzy_\"], function (tableSection, l, next) {\r\n                            var indexWord = l === 0 ? word : wordCache[word];\r\n                            if (!indexWord) { // if the word/token is falsey no need to index it.\r\n                                next();\r\n                                return;\r\n                            }\r\n                            _this._store.adapterRead(\"_\" + table + tableSection + col, indexWord, function (colRow) {\r\n                                var searchIndex = colRow || { wrd: word, rows: [] };\r\n                                if (Object.isFrozen(searchIndex)) {\r\n                                    searchIndex = utilities_1._assign(searchIndex);\r\n                                }\r\n                                switch (j) {\r\n                                    case 0: // remove\r\n                                        var idx = searchIndex.rows.length;\r\n                                        while (idx--) {\r\n                                            if (searchIndex.rows[idx].id === pk) {\r\n                                                searchIndex.rows.splice(idx, 1);\r\n                                            }\r\n                                        }\r\n                                        break;\r\n                                    case 1: // add\r\n                                        searchIndex.rows.push({\r\n                                            id: pk,\r\n                                            i: reduceWords[word].map(function (w) { return w.i; }),\r\n                                            l: newTokens.length\r\n                                        });\r\n                                        break;\r\n                                }\r\n                                _this._store.adapterWrite(\"_\" + table + tableSection + col, l === 0 ? word : wordCache[word], searchIndex, next);\r\n                            }, true);\r\n                        }).then(nextWord);\r\n                    }).then(nextTokens);\r\n                }).then(function () {\r\n                    _this._store.adapterWrite(tokenTable + col, pk, {\r\n                        id: pk,\r\n                        hash: thisHash,\r\n                        tokens: newTokens.map(function (o) { return ({ w: o.w, i: o.i }); })\r\n                    }, next);\r\n                });\r\n            }, true);\r\n        }).then(complete);\r\n    };\r\n    /**\r\n     * For each updated row, update view columns from remote records that are related.\r\n     *\r\n     * @private\r\n     * @param {any[]} rows\r\n     * @param {() => void} complete\r\n     * @returns\r\n     * @memberof _NanoSQLStorageQuery\r\n     */\r\n    _NanoSQLStorageQuery.prototype._updateRowViews = function (newRowData, existingRow, complete) {\r\n        var _this = this;\r\n        if (!this._store._hasViews) {\r\n            complete(newRowData);\r\n            return;\r\n        }\r\n        // nothing to update\r\n        if (newRowData === null || newRowData === undefined) {\r\n            complete(newRowData || {});\r\n            return;\r\n        }\r\n        utilities_1.fastALL(Object.keys(this._store.tableInfo[this._query.table]._views), function (table, i, done) {\r\n            var pk = _this._store.tableInfo[_this._query.table]._views[table].pkColumn;\r\n            // reference/pk column isn't being updated.\r\n            if (newRowData[pk] === undefined) {\r\n                done();\r\n                return;\r\n            }\r\n            // no changes in reference, skip query and upate\r\n            if (newRowData[pk] === existingRow[pk]) {\r\n                done();\r\n                return;\r\n            }\r\n            // remove reference\r\n            if (newRowData[pk] === null) {\r\n                _this._store.tableInfo[_this._query.table]._views[table].columns.forEach(function (col) {\r\n                    newRowData[col.thisColumn] = null;\r\n                });\r\n                done();\r\n                return;\r\n            }\r\n            // get reference record and copy everything over\r\n            _this._store.adapterRead(table, newRowData[pk], function (refRows) {\r\n                // record doesn't exist\r\n                if (!refRows.length && _this._store.tableInfo[_this._query.table]._views[table].mode === \"LIVE\") {\r\n                    _this._store.tableInfo[_this._query.table]._views[table].columns.forEach(function (col) {\r\n                        newRowData[col.thisColumn] = null;\r\n                    });\r\n                    done();\r\n                    return;\r\n                }\r\n                // record exists, copy over data\r\n                _this._store.tableInfo[_this._query.table]._views[table].columns.forEach(function (col) {\r\n                    newRowData[col.thisColumn] = refRows[0][col.otherColumn];\r\n                });\r\n                done();\r\n            }, true);\r\n        }).then(function () {\r\n            complete(newRowData);\r\n        });\r\n    };\r\n    /**\r\n     * Go to tables that have views pointing to this one, and update their records.\r\n     *\r\n     * @private\r\n     * @param {any[]} updatedRows\r\n     * @param {() => void} complete\r\n     * @memberof _NanoSQLStorageQuery\r\n     */\r\n    _NanoSQLStorageQuery.prototype._updateRemoteViews = function (updatedRows, doDel, complete) {\r\n        var _this = this;\r\n        var pk = this._store.tableInfo[this._query.table]._pk;\r\n        // for every updated row\r\n        utilities_1.fastALL(updatedRows, function (row, i, done) {\r\n            // scan all related tables for records attached\r\n            utilities_1.fastALL(_this._store.tableInfo[_this._query.table]._viewTables, function (view, i, rowDone) {\r\n                // delete with echo mode, skip removing records\r\n                if (doDel && _this._store.tableInfo[view.table]._views[_this._query.table].mode === \"GHOST\") {\r\n                    rowDone();\r\n                    return;\r\n                }\r\n                _this._store._secondaryIndexRead(view.table, \"=\", view.column, row[pk], function (relatedRows) {\r\n                    // nothing to update\r\n                    if (!relatedRows.length) {\r\n                        rowDone();\r\n                        return;\r\n                    }\r\n                    var columns = _this._store.tableInfo[view.table]._views[_this._query.table].columns;\r\n                    var relPK = _this._store.tableInfo[view.table]._views[_this._query.table].pkColumn;\r\n                    // update the records\r\n                    utilities_1.fastALL(relatedRows, function (rRow, j, rDone) {\r\n                        var i = columns.length;\r\n                        var doUpdate = false;\r\n                        if (doDel) {\r\n                            if (_this._store.tableInfo[view.table]._views[_this._query.table].mode === \"LIVE\") {\r\n                                doUpdate = true;\r\n                                rRow[relPK] = null;\r\n                                while (i--) {\r\n                                    rRow[columns[i].otherColumn] = null;\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            while (i--) {\r\n                                if (rRow[columns[i].otherColumn] !== row[columns[i].thisColumn]) {\r\n                                    rRow[columns[i].otherColumn] = row[columns[i].thisColumn];\r\n                                    doUpdate = true;\r\n                                }\r\n                            }\r\n                        }\r\n                        if (!doUpdate) {\r\n                            rDone();\r\n                            return;\r\n                        }\r\n                        var rPk = _this._store.tableInfo[view.table]._pk;\r\n                        _this._store.adapterWrite(view.table, rRow[rPk], rRow, rDone);\r\n                    }).then(rowDone);\r\n                });\r\n            }).then(done);\r\n        }).then(complete);\r\n    };\r\n    _NanoSQLStorageQuery.prototype._doAfterQuery = function (newRows, doDel, next) {\r\n        var _this = this;\r\n        // no views at all OR this table doesn't have any views pointing to it.\r\n        if (!this._store._hasViews || !this._store.tableInfo[this._query.table]._viewTables.length) {\r\n            next(this._query);\r\n            return;\r\n        }\r\n        this._updateRemoteViews(newRows, doDel, function () {\r\n            next(_this._query);\r\n        });\r\n    };\r\n    /**\r\n     * Initilize an UPSERT query.\r\n     *\r\n     * @internal\r\n     * @param {(q: IdbQuery) => void} next\r\n     * @returns\r\n     * @memberof _NanoSQLStorageQuery\r\n     */\r\n    _NanoSQLStorageQuery.prototype._upsert = function (next) {\r\n        var _this = this;\r\n        var pk = this._store.tableInfo[this._query.table]._pk;\r\n        if (this._isInstanceTable) {\r\n            this._getRows(function (rows) {\r\n                _this._query.result = _this._query.table.map(function (r) {\r\n                    if (rows.indexOf(r) === -1) {\r\n                        return r;\r\n                    }\r\n                    return __assign({}, _this._query.actionArgs, r);\r\n                });\r\n                next(_this._query);\r\n            });\r\n            return;\r\n        }\r\n        if (this._query.where) { // has where statement, select rows then modify them\r\n            this._getRows(function (rows) {\r\n                if (rows.length) {\r\n                    // any changes to this table invalidates the cache\r\n                    _this._store._cache[_this._query.table] = {};\r\n                    var newRows_1 = [];\r\n                    utilities_1.fastCHAIN(_this._query.actionArgs, function (inputData, k, nextRow) {\r\n                        utilities_1.fastCHAIN(rows, function (row, i, rowDone) {\r\n                            _this._updateSearchIndex(row[pk], row, function () {\r\n                                _this._updateRowViews(inputData || {}, row, function (updatedRowData) {\r\n                                    if (_this._store.tableInfo[_this._query.table]._hasDefaults) {\r\n                                        Object.keys(_this._store.tableInfo[_this._query.table]._defaults).forEach(function (col) {\r\n                                            if (row[col] === undefined && updatedRowData[col] === undefined) {\r\n                                                updatedRowData[col] = _this._store.tableInfo[_this._query.table]._defaults[col];\r\n                                            }\r\n                                        });\r\n                                    }\r\n                                    _this._store._write(_this._query.table, row[pk], row, updatedRowData, rowDone);\r\n                                });\r\n                            });\r\n                        }).then(function (nRows) {\r\n                            newRows_1 = nRows;\r\n                            nextRow();\r\n                        });\r\n                    }).then(function () {\r\n                        var pks = newRows_1.map(function (r) { return r[pk]; });\r\n                        _this._query.result = [{ msg: newRows_1.length + \" row(s) modfied.\", affectedRowPKS: pks, affectedRows: newRows_1 }];\r\n                        _this._syncORM(\"add\", rows, newRows_1, function () {\r\n                            _this._doAfterQuery(newRows_1, false, next);\r\n                        });\r\n                    });\r\n                }\r\n                else {\r\n                    _this._query.result = [{ msg: \"0 row(s) modfied.\", affectedRowPKS: [], affectedRows: [] }];\r\n                    next(_this._query);\r\n                }\r\n            });\r\n        }\r\n        else { // no where statement, perform direct upsert\r\n            var rows = this._query.actionArgs || [];\r\n            this._store._cache[this._query.table] = {};\r\n            var oldRows_1 = [];\r\n            var addedRows_1 = [];\r\n            utilities_1.fastCHAIN(rows, function (row, k, nextRow) {\r\n                var write = function (oldRow) {\r\n                    _this._updateRowViews(row, oldRow, function (updatedRowData) {\r\n                        if (_this._store.tableInfo[_this._query.table]._hasDefaults) {\r\n                            Object.keys(_this._store.tableInfo[_this._query.table]._defaults).forEach(function (col) {\r\n                                if ((oldRow || {})[col] === undefined && updatedRowData[col] === undefined) {\r\n                                    updatedRowData[col] = _this._store.tableInfo[_this._query.table]._defaults[col];\r\n                                }\r\n                            });\r\n                        }\r\n                        _this._store._write(_this._query.table, row[pk], oldRow, updatedRowData, function (result) {\r\n                            _this._updateSearchIndex(result[pk], result, function () {\r\n                                oldRows_1.push(oldRow || {});\r\n                                addedRows_1.push(result);\r\n                                nextRow();\r\n                            });\r\n                        });\r\n                    });\r\n                };\r\n                if (row[pk] !== undefined && _this._query.comments.indexOf(\"_rebuild_search_index_\") === -1) {\r\n                    _this._store._read(_this._query.table, [row[pk]], function (rows) {\r\n                        if (rows.length) {\r\n                            write(rows[0]);\r\n                        }\r\n                        else {\r\n                            write(null);\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    write(null);\r\n                }\r\n            }).then(function () {\r\n                _this._query.result = [{ msg: addedRows_1.length + \" row(s) inserted.\", affectedRowPKS: addedRows_1.map(function (r) { return r[pk]; }), affectedRows: addedRows_1 }];\r\n                if (_this._store._hasORM) {\r\n                    _this._syncORM(\"add\", oldRows_1, addedRows_1, function () {\r\n                        _this._doAfterQuery(addedRows_1, false, next);\r\n                    });\r\n                }\r\n                else {\r\n                    _this._doAfterQuery(addedRows_1, false, next);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Initilize a DELETE query.\r\n     *\r\n     * @internal\r\n     * @param {(q: IdbQuery) => void} next\r\n     * @returns\r\n     * @memberof _NanoSQLStorageQuery\r\n     */\r\n    _NanoSQLStorageQuery.prototype._delete = function (next) {\r\n        var _this = this;\r\n        if (this._isInstanceTable) {\r\n            if (this._query.where) {\r\n                this._getRows(function (rows) {\r\n                    _this._query.result = _this._query.table.filter(function (row) {\r\n                        return rows.indexOf(row) === -1;\r\n                    });\r\n                    next(_this._query);\r\n                });\r\n            }\r\n            else {\r\n                this._query.result = [];\r\n                next(this._query);\r\n            }\r\n            return;\r\n        }\r\n        if (this._query.where) { // has where statement, select rows then delete them\r\n            this._getRows(function (rows) {\r\n                rows = rows.filter(function (r) { return r; });\r\n                if (rows.length) {\r\n                    utilities_1.fastALL(rows, function (r, i, done) {\r\n                        _this._clearFromSearchIndex(r[_this._store.tableInfo[_this._query.table]._pk], r, function () {\r\n                            _this._store._delete(_this._query.table, r[_this._store.tableInfo[_this._query.table]._pk], done);\r\n                        });\r\n                    }).then(function (affectedRows) {\r\n                        // any changes to this table invalidate the cache\r\n                        _this._store._cache[_this._query.table] = {};\r\n                        var pks = rows.map(function (r) { return r[_this._store.tableInfo[_this._query.table]._pk]; });\r\n                        _this._query.result = [{ msg: rows.length + \" row(s) deleted.\", affectedRowPKS: pks, affectedRows: rows }];\r\n                        _this._syncORM(\"del\", rows, [], function () {\r\n                            _this._doAfterQuery(rows, true, next);\r\n                        });\r\n                    });\r\n                }\r\n                else {\r\n                    _this._query.result = [{ msg: \"0 row(s) deleted.\", affectedRowPKS: [], affectedRows: [] }];\r\n                    next(_this._query);\r\n                }\r\n            });\r\n        }\r\n        else { // no where statement, perform drop\r\n            this._drop(next);\r\n        }\r\n    };\r\n    /**\r\n     * Initilize a DROP query.\r\n     *\r\n     * @internal\r\n     * @param {(q: IdbQuery) => void} next\r\n     * @returns\r\n     * @memberof _NanoSQLStorageQuery\r\n     */\r\n    _NanoSQLStorageQuery.prototype._drop = function (next) {\r\n        var _this = this;\r\n        if (this._isInstanceTable) {\r\n            this._query.result = [];\r\n            next(this._query);\r\n            return;\r\n        }\r\n        this._store._rangeRead(this._query.table, undefined, undefined, false, function (rows) {\r\n            _this._store._cache[_this._query.table] = {};\r\n            var table = _this._query.table;\r\n            _this._store._drop(_this._query.table, function () {\r\n                _this._query.result = [{ msg: \"'\" + _this._query.table + \"' table dropped.\", affectedRowPKS: rows.map(function (r) { return r[_this._store.tableInfo[_this._query.table]._pk]; }), affectedRows: rows }];\r\n                _this._syncORM(\"del\", rows, [], function () {\r\n                    _this._doAfterQuery(rows, true, next);\r\n                });\r\n            });\r\n        });\r\n    };\r\n    return _NanoSQLStorageQuery;\r\n}());\r\nexports._NanoSQLStorageQuery = _NanoSQLStorageQuery;\r\n/**\r\n * Takes a selection of rows and applys modifiers like orderBy, join and others to the rows.\r\n * Returns the affected rows updated in the way the query specified.\r\n *\r\n * @export\r\n * @class MutateSelection\r\n */\r\n// tslint:disable-next-line\r\nvar _MutateSelection = /** @class */ (function () {\r\n    function _MutateSelection(q, s) {\r\n        this.q = q;\r\n        this.s = s;\r\n        this._groupByColumns = [];\r\n    }\r\n    /**\r\n     * Peform a join command.\r\n     *\r\n     * @internal\r\n     * @param {DBRow[]} rows\r\n     * @param {(rows: DBRow[]) => void} complete\r\n     * @returns {void}\r\n     * @memberof _MutateSelection\r\n     */\r\n    _MutateSelection.prototype._join = function (rows, complete) {\r\n        var _this = this;\r\n        if (!this.q.join) {\r\n            complete(rows);\r\n            return;\r\n        }\r\n        var joinData = Array.isArray(this.q.join) ? this.q.join : [this.q.join];\r\n        var leftTablePK = this.q.table + \".\" + this.s.tableInfo[this.q.table]._pk;\r\n        utilities_1.fastCHAIN(joinData, function (join, ji, next) {\r\n            var joinConditions = {};\r\n            if (join.type !== \"cross\" && join.where) {\r\n                joinConditions = {\r\n                    _left: join.where[0],\r\n                    _check: join.where[1],\r\n                    _right: join.where[2]\r\n                };\r\n            }\r\n            var leftTable = _this.q.table;\r\n            var rightTable = join.table;\r\n            _this._doJoin(join.type, leftTable, rightTable, joinConditions, function (joinedRows) {\r\n                next(joinedRows);\r\n            });\r\n        }).then(function (result) {\r\n            // handle bringing the multiple joins into a single result set.\r\n            // we're essentially doing a left outer join on the results.\r\n            var i = 1;\r\n            while (i < result.length) {\r\n                result[i].forEach(function (row) {\r\n                    var found = false;\r\n                    if ([undefined, null].indexOf(row[leftTablePK]) === -1) {\r\n                        result[0].forEach(function (row2, j) {\r\n                            if (row2[leftTablePK] && row[leftTablePK] === row2[leftTablePK]) {\r\n                                found = true;\r\n                                Object.keys(row).forEach(function (key) {\r\n                                    if (result[0][j][key] === undefined) {\r\n                                        result[0][j][key] = row[key];\r\n                                    }\r\n                                });\r\n                            }\r\n                        });\r\n                    }\r\n                    if (!found) {\r\n                        result[0].push(row);\r\n                    }\r\n                });\r\n                i++;\r\n            }\r\n            if (_this.q.where) { // apply where statement to join\r\n                complete(result[0].filter(function (row, idx) {\r\n                    return Array.isArray(_this.q.where) ? _where(row, _this.q.where || [], idx, true) : _this.q.where(row, idx);\r\n                }));\r\n            }\r\n            else if (_this.q.range) { // apply range statement to join\r\n                complete(result[0].filter(function (row, idx) {\r\n                    return _this.q.range && _this.q.range[0] >= idx && (_this.q.range[0] + _this.q.range[1]) - 1 <= idx;\r\n                }));\r\n            }\r\n            else { // send the whole result\r\n                complete(result[0]);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Generate a unique group by key given a group by object and a row.\r\n     *\r\n     * @internal\r\n     * @param {string[]} columns\r\n     * @param {*} row\r\n     * @returns {string}\r\n     * @memberof _MutateSelection\r\n     */\r\n    _MutateSelection.prototype._groupByKey = function (columns, row) {\r\n        return columns.reduce(function (p, c) {\r\n            // handle \".length\"\r\n            if (c.indexOf(\".length\") !== -1) {\r\n                return p + \".\" + String((row[c.replace(\".length\", \"\")] || []).length);\r\n            }\r\n            else {\r\n                return p + \".\" + String(row[c]);\r\n            }\r\n        }, \"\").slice(1);\r\n    };\r\n    /**\r\n     * Perform the Group By mutation.\r\n     *\r\n     * @internal\r\n     * @param {DBRow[]} rows\r\n     * @returns {any[]}\r\n     * @memberof _MutateSelection\r\n     */\r\n    _MutateSelection.prototype._groupBy = function (rows) {\r\n        var _this = this;\r\n        var columns = this.q.groupBy || {};\r\n        var sortedRows = rows.sort(function (a, b) {\r\n            return _this._sortObj(a, b, columns, true);\r\n        });\r\n        sortedRows.forEach(function (val, idx) {\r\n            var groupByKey = Object.keys(columns).map(function (k) { return String(val[k]) || \"\"; }).join(\".\");\r\n            if (!_this._sortGroups) {\r\n                _this._sortGroups = {};\r\n            }\r\n            if (!_this._sortGroups[groupByKey]) {\r\n                _this._sortGroups[groupByKey] = [];\r\n            }\r\n            _this._sortGroups[groupByKey].push(idx);\r\n        });\r\n        return sortedRows;\r\n    };\r\n    /**\r\n     * Perform HAVING mutation.\r\n     *\r\n     * @internal\r\n     * @param {DBRow[]} rows\r\n     * @returns {any[]}\r\n     * @memberof _MutateSelection\r\n     */\r\n    _MutateSelection.prototype._having = function (rows) {\r\n        var _this = this;\r\n        return rows.filter(function (row, idx) {\r\n            return Array.isArray(_this.q.having) ? _where(row, _this.q.having || [], idx, true) : _this.q.having(row, idx);\r\n        });\r\n    };\r\n    /**\r\n     * Perform the orderBy mutation.\r\n     *\r\n     * @internal\r\n     * @param {DBRow[]} rows\r\n     * @returns {any[]}\r\n     * @memberof _MutateSelection\r\n     */\r\n    _MutateSelection.prototype._orderBy = function (rows) {\r\n        var _this = this;\r\n        return rows.sort(function (a, b) {\r\n            return _this._sortObj(a, b, _this.q.orderBy || {}, false);\r\n        });\r\n    };\r\n    /**\r\n     * Perform the Offset mutation.\r\n     *\r\n     * @internal\r\n     * @param {DBRow[]} rows\r\n     * @returns {any[]}\r\n     * @memberof _MutateSelection\r\n     */\r\n    _MutateSelection.prototype._offset = function (rows) {\r\n        var _this = this;\r\n        return rows.filter(function (row, index) {\r\n            return _this.q.offset ? index >= _this.q.offset : true;\r\n        });\r\n    };\r\n    /**\r\n     * Perform the limit mutation.\r\n     *\r\n     * @internal\r\n     * @param {DBRow[]} rows\r\n     * @returns {any[]}\r\n     * @memberof _MutateSelection\r\n     */\r\n    _MutateSelection.prototype._limit = function (rows) {\r\n        var _this = this;\r\n        return rows.filter(function (row, index) {\r\n            return _this.q.limit ? index < _this.q.limit : true;\r\n        });\r\n    };\r\n    /**\r\n     * Add ORM values to rows based on query.\r\n     *\r\n     * @internal\r\n     * @param {DBRow[]} rows\r\n     * @param {(rows: DBRow[]) => void} complete\r\n     * @memberof _MutateSelection\r\n     */\r\n    _MutateSelection.prototype._orm = function (rows, complete) {\r\n        var _this = this;\r\n        var ormQueries = this.q.orm ? this.q.orm.map(function (o) {\r\n            if (typeof o === \"string\") {\r\n                return {\r\n                    key: o,\r\n                    limit: 5\r\n                };\r\n            }\r\n            return o;\r\n        }) : [];\r\n        utilities_1.fastALL(rows, function (row, i, rowResult) {\r\n            row = Object.isFrozen(row) ? utilities_1._assign(row) : row;\r\n            utilities_1.fastALL(ormQueries, function (orm, k, ormResult) {\r\n                if (typeof row[orm.key] === \"undefined\") {\r\n                    ormResult();\r\n                    return;\r\n                }\r\n                var relateData = _this.s._columnsAreTables[_this.q.table][orm.key];\r\n                if (relateData) {\r\n                    _this.s._nsql.query(\"select\").where([_this.s.tableInfo[relateData._toTable]._pk, relateData._thisType === \"array\" ? \"IN\" : \"=\", row[orm.key]]).manualExec({ table: relateData._toTable }).then(function (rows) {\r\n                        var q = index_1.nSQL().query(\"select\", orm.select);\r\n                        if (orm.where) {\r\n                            q.where(orm.where);\r\n                        }\r\n                        if (orm.limit !== undefined) {\r\n                            q.limit(orm.limit);\r\n                        }\r\n                        if (orm.offset !== undefined) {\r\n                            q.offset(orm.offset);\r\n                        }\r\n                        if (orm.orderBy) {\r\n                            q.orderBy(orm.orderBy);\r\n                        }\r\n                        if (orm.groupBy) {\r\n                            q.groupBy(orm.groupBy);\r\n                        }\r\n                        q.manualExec({ table: rows }).then(function (result) {\r\n                            if (!rows.filter(function (r) { return r; }).length) {\r\n                                row[orm.key] = relateData._thisType === \"array\" ? [] : undefined;\r\n                            }\r\n                            else {\r\n                                row[orm.key] = relateData._thisType === \"array\" ? result : result[0];\r\n                            }\r\n                            ormResult();\r\n                        });\r\n                    });\r\n                }\r\n                else {\r\n                    ormResult();\r\n                }\r\n            }).then(function () {\r\n                rowResult(row);\r\n            });\r\n        }).then(complete);\r\n    };\r\n    /**\r\n     * Performs the actual JOIN mutation, including the O^2 select query to check all rows against every other row.\r\n     *\r\n     * @internal\r\n     * @param {(\"left\" | \"inner\" | \"right\" | \"cross\" | \"outer\")} type\r\n     * @param {string} leftTable\r\n     * @param {string} rightTable\r\n     * @param {(null | { _left: string, _check: string, _right: string })} joinConditions\r\n     * @param {(rows: DBRow[]) => void} complete\r\n     * @memberof _MutateSelection\r\n     */\r\n    _MutateSelection.prototype._doJoin = function (type, leftTable, rightTable, joinConditions, complete) {\r\n        var L = \"left\";\r\n        var R = \"right\";\r\n        var O = \"outer\";\r\n        var C = \"cross\";\r\n        var t = this;\r\n        var firstTableData = t.s.tableInfo[type === R ? rightTable : leftTable];\r\n        var seconTableData = t.s.tableInfo[type === R ? leftTable : rightTable];\r\n        var doJoinRows = function (leftRow, rightRow) {\r\n            return [firstTableData, seconTableData].reduce(function (prev, cur, i) {\r\n                cur._keys.forEach(function (k) {\r\n                    prev[cur._name + \".\" + k] = ((i === 0 ? leftRow : rightRow) || {})[k];\r\n                });\r\n                return prev;\r\n            }, {});\r\n        };\r\n        var joinTable = [];\r\n        var rightKey = joinConditions && joinConditions._right ? joinConditions._right.split(\".\").pop() || \"\" : \"\";\r\n        var usedSecondTableRows = {};\r\n        var secondRowCache = [];\r\n        // O^2, YAY!\r\n        t.s._read(firstTableData._name, function (firstRow, idx, keep) {\r\n            var hasOneRelation = false;\r\n            t.s._read(seconTableData._name, function (secondRow, idx2, keep2) {\r\n                if (!joinConditions || type === C) { // no conditional to check OR cross join, always add\r\n                    joinTable.push(doJoinRows(firstRow, secondRow));\r\n                    hasOneRelation = true;\r\n                }\r\n                else { // check conditional statement to possibly join\r\n                    var willJoinRows = _where((_a = {},\r\n                        _a[firstTableData._name] = firstRow,\r\n                        _a[seconTableData._name] = secondRow,\r\n                        _a), [joinConditions._left, joinConditions._check, type === R ? firstRow[rightKey] : secondRow[rightKey]], 0, false);\r\n                    if (willJoinRows) {\r\n                        if (type === O)\r\n                            usedSecondTableRows[idx2] = true;\r\n                        joinTable.push(doJoinRows(firstRow, secondRow));\r\n                        hasOneRelation = true;\r\n                    }\r\n                    else {\r\n                        if (type === O)\r\n                            secondRowCache[idx2] = secondRow;\r\n                    }\r\n                }\r\n                keep2(false);\r\n                var _a;\r\n            }, function () {\r\n                // left, right or outer join will cause rows without a relation to be added anyway with null relation\r\n                if (!hasOneRelation && [L, R, O].indexOf(type) > -1) {\r\n                    joinTable.push(doJoinRows(firstRow, null));\r\n                }\r\n                keep(false);\r\n            });\r\n        }, function () {\r\n            // full outer join, add the secondary rows that haven't been added yet\r\n            if (type === O) {\r\n                var addRows = secondRowCache.filter(function (val, i) { return !usedSecondTableRows[i]; });\r\n                var i = 0;\r\n                while (i < addRows.length) {\r\n                    joinTable.push(doJoinRows(null, addRows[i]));\r\n                    i++;\r\n                }\r\n                complete(joinTable);\r\n            }\r\n            else {\r\n                complete(joinTable);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Get the sort direction for two objects given the objects, columns and resolve paths.\r\n     *\r\n     * @internal\r\n     * @param {*} objA\r\n     * @param {*} objB\r\n     * @param {{ [key: string]: string }} columns\r\n     * @param {boolean} resolvePaths\r\n     * @returns {number}\r\n     * @memberof _MutateSelection\r\n     */\r\n    _MutateSelection.prototype._sortObj = function (objA, objB, columns, resolvePaths) {\r\n        return Object.keys(columns).reduce(function (prev, cur) {\r\n            var A = resolvePaths ? utilities_1.objQuery(cur, objA) : objA[cur];\r\n            var B = resolvePaths ? utilities_1.objQuery(cur, objB) : objB[cur];\r\n            if (!prev) {\r\n                if (A === B)\r\n                    return 0;\r\n                return (A > B ? 1 : -1) * (columns[cur] === \"desc\" ? -1 : 1);\r\n            }\r\n            else {\r\n                return prev;\r\n            }\r\n        }, 0);\r\n    };\r\n    /**\r\n     * Apply AS, functions and Group By\r\n     *\r\n     * @internal\r\n     * @param {DBRow[]} rows\r\n     * @param {(rows: DBRow[]) => void} complete\r\n     * @memberof _MutateSelection\r\n     */\r\n    _MutateSelection.prototype._mutateRows = function (rows, complete) {\r\n        var _this = this;\r\n        var columnSelection = this.q.actionArgs;\r\n        var functionResults = {};\r\n        var fnGroupByResults = {};\r\n        if (columnSelection && columnSelection.length) {\r\n            // possibly has functions, AS statements\r\n            var hasAggregateFun_1 = false;\r\n            var columnData_1 = {};\r\n            columnSelection.forEach(function (column) {\r\n                if (column.indexOf(\"(\") === -1) { // no functions\r\n                    return;\r\n                }\r\n                var fnName = (column.match(/^.*\\(/g) || [\"\"])[0].replace(/\\(|\\)/g, \"\").toUpperCase();\r\n                var fn = index_1.NanoSQLInstance.functions[fnName];\r\n                var key = column.split(\" AS \").length === 1 ? fnName : (column.split(\" AS \").pop() || \"\").trim();\r\n                if (!fn) {\r\n                    throw new Error(\"nSQL: '\" + fnName + \"' is not a valid function!\");\r\n                }\r\n                if (fn.type === \"A\") { // agregate function\r\n                    hasAggregateFun_1 = true;\r\n                }\r\n                columnData_1[column] = {\r\n                    fn: fn,\r\n                    key: key\r\n                };\r\n            });\r\n            utilities_1.fastALL(columnSelection, function (column, j, columnDone) {\r\n                if (column.indexOf(\"(\") > -1) { // function exists\r\n                    var fnArgs_1 = (column.match(/\\(.*\\)/g) || [\"\"])[0].replace(/\\(|\\)/g, \"\").split(\",\").map(function (v) { return v.trim(); });\r\n                    if (_this._sortGroups && hasAggregateFun_1) { // group by exists with aggregate function\r\n                        utilities_1.fastALL(Object.keys(_this._sortGroups), function (k, l, fnDone) {\r\n                            if (!fnGroupByResults[k]) {\r\n                                fnGroupByResults[k] = {};\r\n                            }\r\n                            (_a = columnData_1[column].fn).call.apply(_a, [rows.filter(function (r, i) { return _this._sortGroups[k].indexOf(i) > -1; }), function (result) {\r\n                                    fnGroupByResults[k][columnData_1[column].key] = result;\r\n                                    fnDone();\r\n                                }, _this.q.join !== undefined].concat(fnArgs_1));\r\n                            var _a;\r\n                        }).then(columnDone);\r\n                    }\r\n                    else { // no group by\r\n                        (_a = columnData_1[column].fn).call.apply(_a, [rows, function (result) {\r\n                                functionResults[columnData_1[column].key] = result;\r\n                                columnDone();\r\n                            }, _this.q.join !== undefined].concat(fnArgs_1));\r\n                    }\r\n                }\r\n                else {\r\n                    columnDone(); // no function\r\n                }\r\n                var _a;\r\n            }).then(function () {\r\n                // time to rebuild row results\r\n                var doMuateRows = function (row, idx, fnResults) {\r\n                    var newRow = {};\r\n                    // remove unselected columns, apply AS and integrate function results\r\n                    columnSelection.forEach(function (column) {\r\n                        var hasFunc = column.indexOf(\"(\") > -1;\r\n                        var type = hasFunc ? columnData_1[column].fn.type : \"\";\r\n                        if (column.indexOf(\" AS \") > -1) { // alias column data\r\n                            var alias = column.split(\" AS \");\r\n                            var key = hasFunc ? columnData_1[column].key : alias[0].trim();\r\n                            newRow[alias[1]] = hasFunc ? (type === \"A\" ? fnResults[key] : fnResults[key][idx]) : utilities_1.objQuery(key, row, _this.q.join !== undefined);\r\n                        }\r\n                        else {\r\n                            var key = hasFunc ? columnData_1[column].key : column;\r\n                            newRow[column] = hasFunc ? (type === \"A\" ? fnResults[key] : fnResults[key][idx]) : utilities_1.objQuery(key, row, _this.q.join !== undefined);\r\n                        }\r\n                    });\r\n                    return newRow;\r\n                };\r\n                if (!rows.length && hasAggregateFun_1) {\r\n                    var oneRow_1 = [{}];\r\n                    Object.keys(columnData_1).forEach(function (fnName) {\r\n                        if (typeof functionResults[columnData_1[fnName].key] !== \"undefined\") {\r\n                            oneRow_1[0][fnName] = functionResults[columnData_1[fnName].key];\r\n                        }\r\n                    });\r\n                    complete(oneRow_1);\r\n                    return;\r\n                }\r\n                if (_this._sortGroups && hasAggregateFun_1) { // group by with aggregate\r\n                    var newRows_2 = [];\r\n                    Object.keys(_this._sortGroups).forEach(function (k) {\r\n                        var thisRow = rows.filter(function (r, i) { return _this._sortGroups[k].indexOf(i) > -1; }).filter(function (v, i) { return i < 1; });\r\n                        if (thisRow && thisRow.length) {\r\n                            newRows_2.push(doMuateRows(thisRow[0], 0, fnGroupByResults[k]));\r\n                        }\r\n                    });\r\n                    complete(newRows_2);\r\n                }\r\n                else if (hasAggregateFun_1) { // just aggregate (returns 1 row)\r\n                    complete(rows.filter(function (v, i) { return i < 1; }).map(function (v, i) { return doMuateRows(v, i, functionResults); }));\r\n                }\r\n                else { // no aggregate and no group by, easy peasy\r\n                    complete(rows.map(function (v, i) { return doMuateRows(v, i, functionResults); }));\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            // just pass through\r\n            complete(rows);\r\n        }\r\n    };\r\n    /**\r\n     * Triggers the mutations in the order of operations.\r\n     *\r\n     * @param {DBRow[]} inputRows\r\n     * @param {(rows: DBRow[]) => void} callback\r\n     * @memberof _MutateSelection\r\n     */\r\n    _MutateSelection.prototype._executeQueryArguments = function (inputRows, callback) {\r\n        var _this = this;\r\n        var afterMutate = function () {\r\n            if (_this.q.having) {\r\n                inputRows = _this._having(inputRows);\r\n            }\r\n            if (_this.q.orderBy) {\r\n                inputRows = _this._orderBy(inputRows);\r\n            }\r\n            if (_this.q.offset) {\r\n                inputRows = _this._offset(inputRows);\r\n            }\r\n            if (_this.q.limit) {\r\n                inputRows = _this._limit(inputRows);\r\n            }\r\n            callback(inputRows);\r\n        };\r\n        var afterORM = function () {\r\n            if (_this.q.actionArgs && _this.q.actionArgs.length) {\r\n                _this._mutateRows(inputRows, function (newRows) {\r\n                    inputRows = newRows;\r\n                    afterMutate();\r\n                });\r\n            }\r\n            else {\r\n                afterMutate();\r\n            }\r\n        };\r\n        var afterJoin = function () {\r\n            if (_this.q.groupBy) {\r\n                inputRows = _this._groupBy(inputRows);\r\n            }\r\n            if (_this.q.orm) {\r\n                _this._orm(inputRows, function (newRows) {\r\n                    inputRows = newRows;\r\n                    afterORM();\r\n                });\r\n            }\r\n            else {\r\n                afterORM();\r\n            }\r\n        };\r\n        if (this.q.join) {\r\n            this._join(inputRows, function (rows) {\r\n                inputRows = rows;\r\n                afterJoin();\r\n            });\r\n        }\r\n        else {\r\n            afterJoin();\r\n        }\r\n    };\r\n    return _MutateSelection;\r\n}());\r\nexports._MutateSelection = _MutateSelection;\r\n/**\r\n * Selects the needed rows from the storage system.\r\n * Uses the fastes possible method to get the rows.\r\n *\r\n * @export\r\n * @class _RowSelection\r\n */\r\n// tslint:disable-next-line\r\nvar _RowSelection = /** @class */ (function () {\r\n    function _RowSelection(qu, q, s, callback) {\r\n        var _this = this;\r\n        this.qu = qu;\r\n        this.q = q;\r\n        this.s = s;\r\n        if (this.q.join && this.q.orm) {\r\n            throw new Error(\"nSQL: Cannot do a JOIN and ORM command at the same time!\");\r\n        }\r\n        if ([this.q.where, this.q.range, this.q.trie].filter(function (i) { return i; }).length > 1) {\r\n            throw new Error(\"nSQL: Can only have ONE of Trie, Range or Where!\");\r\n        }\r\n        // join command requires n^2 scan that gets taken care of in join logic.\r\n        if (this.q.join) {\r\n            callback([]);\r\n            return;\r\n        }\r\n        // trie search, nice and fast.\r\n        if (this.q.trie && this.q.trie.column && this.q.trie.search) {\r\n            this._selectByTrie(callback);\r\n            return;\r\n        }\r\n        // range select, very fast\r\n        if (this.q.range && this.q.range.length) {\r\n            this._selectByRange(callback);\r\n            return;\r\n        }\r\n        // no where statement, read whole db :(\r\n        // OR\r\n        // where statement is function, still gotta read the whole db.\r\n        if ((!this.q.where || !this.q.where.length) || !Array.isArray(this.q.where)) {\r\n            this._fullTableScan(callback);\r\n            return;\r\n        }\r\n        // where statement possibly contains only primary key and secondary key queries, do faster query if possible.\r\n        var doFastRead = false;\r\n        if (typeof this.q.where[0] === \"string\") { // Single WHERE\r\n            doFastRead = this._isOptimizedWhere(this.q.where) === 0;\r\n        }\r\n        else { // combined where statements\r\n            doFastRead = (this.q.where || []).reduce(function (prev, cur, i) {\r\n                if (i % 2 === 1)\r\n                    return prev;\r\n                return prev + _this._isOptimizedWhere(cur);\r\n            }, 0) === 0;\r\n        }\r\n        if (doFastRead) { // can go straight to primary or secondary keys, wee!\r\n            this._selectByKeysOrSeach(this.q.where, callback);\r\n            return;\r\n        }\r\n        // if compound where statement includes primary key/secondary index queries followed by AND with other conditions.\r\n        // grabs the section of data related to the optimized read, then full table scans the result.\r\n        var whereSlice = this._isSubOptimizedWhere(this.q.where);\r\n        if (whereSlice > 0) {\r\n            var fastWhere = this.q.where.slice(0, whereSlice);\r\n            var slowWhere_1 = this.q.where.slice(whereSlice + 1);\r\n            this._selectByKeysOrSeach(fastWhere, function (rows) {\r\n                callback(rows.filter(function (r, i) { return _where(r, slowWhere_1, i, false); }));\r\n            });\r\n            return;\r\n        }\r\n        // Full table scan :(\r\n        this._fullTableScan(callback);\r\n    }\r\n    /**\r\n     * Does super fast primary key or secondary index select.\r\n     * Handles compound WHERE statements, combining their results.\r\n     * Works as long as every WHERE statement is selecting against a primary key or secondary index.\r\n     *\r\n     * @internal\r\n     * @param {(rows: DBRow[]) => void} callback\r\n     * @memberof _RowSelection\r\n     */\r\n    _RowSelection.prototype._selectByKeysOrSeach = function (where, callback) {\r\n        var _this = this;\r\n        if (where && typeof where[0] === \"string\") { // single where\r\n            this._selectRowsByIndexOrSearch(where, callback);\r\n        }\r\n        else if (where) { // compound where\r\n            var resultRows_1 = [];\r\n            var lastCommand_1 = \"\";\r\n            var PK_1 = this.s.tableInfo[this.q.table]._pk;\r\n            utilities_1.fastCHAIN(where, function (wArg, i, nextWArg) {\r\n                if (i % 2 === 1) {\r\n                    lastCommand_1 = wArg;\r\n                    nextWArg();\r\n                    return;\r\n                }\r\n                _this._selectRowsByIndexOrSearch(wArg, function (rows) {\r\n                    if (lastCommand_1 === \"AND\") {\r\n                        var idx_1 = {};\r\n                        var i_1 = rows.length;\r\n                        while (i_1--) {\r\n                            idx_1[rows[i_1][PK_1]] = true;\r\n                        }\r\n                        resultRows_1 = resultRows_1.filter(function (row) { return idx_1[row[PK_1]]; });\r\n                    }\r\n                    else {\r\n                        resultRows_1 = resultRows_1.concat(rows);\r\n                    }\r\n                    nextWArg();\r\n                });\r\n            }).then(function () {\r\n                var pks = {};\r\n                // remove duplicates\r\n                callback(resultRows_1.filter(function (row) {\r\n                    if (pks[row[PK_1]])\r\n                        return false;\r\n                    pks[row[PK_1]] = true;\r\n                    return true;\r\n                }));\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Much faster SELECT by primary key or secondary index.\r\n     * Accepts a single WHERE statement, no compound statements allowed.\r\n     *\r\n     * @internal\r\n     * @param {any[]} where\r\n     * @param {(rows: DBRow[]) => void} callback\r\n     * @returns\r\n     * @memberof _RowSelection\r\n     */\r\n    _RowSelection.prototype._selectRowsByIndexOrSearch = function (where, callback) {\r\n        var _this = this;\r\n        if (where[0].indexOf(\"search(\") === 0) {\r\n            var whereType_1 = 0;\r\n            if (where[1].indexOf(\">\") !== -1) {\r\n                whereType_1 = parseFloat(where[1].replace(\">\", \"\")) + 0.0001;\r\n            }\r\n            else if (where[1].indexOf(\"<\") !== -1) {\r\n                whereType_1 = (parseFloat(where[1].replace(\"<\", \"\")) * -1) + 0.0001;\r\n            }\r\n            var columns = where[0].replace(/search\\((.*)\\)/gmi, \"$1\").split(\",\").map(function (c) { return c.trim(); });\r\n            var weights_1 = {};\r\n            var searchTermsToFound_1 = {};\r\n            utilities_1.fastALL(columns, function (col, i, nextCol) {\r\n                // tokenize search terms\r\n                var searchTerms = _this.qu._tokenizer(col, where[2]);\r\n                var args = _this.s.tableInfo[_this.q.table]._searchColumns[col];\r\n                var reducedResults = {};\r\n                var reducedFirstLocations = [];\r\n                var tokenToTerm = {};\r\n                var termToToken = {};\r\n                searchTerms.forEach(function (search) {\r\n                    tokenToTerm[search.w] = search.o;\r\n                    termToToken[search.o] = search.w;\r\n                });\r\n                // get all rows that have at least one search term\r\n                utilities_1.fastALL([\"_search_\", \"_search_fuzzy_\"], function (tableSection, j, nextTable) {\r\n                    var indexTable = \"_\" + _this.q.table + tableSection + col;\r\n                    switch (j) {\r\n                        case 0:\r\n                            // Search the tokenized index for matches (super quick);\r\n                            utilities_1.fastALL(searchTerms, function (term, j, nextTerm) {\r\n                                _this.s.adapterRead(indexTable, term.w, function (row) {\r\n                                    if (!row) {\r\n                                        nextTerm();\r\n                                        return;\r\n                                    }\r\n                                    row.rows.forEach(function (r) {\r\n                                        if (!reducedResults[r.id]) {\r\n                                            reducedResults[r.id] = {};\r\n                                        }\r\n                                        reducedFirstLocations.push(r.i[0]);\r\n                                        reducedResults[r.id][term.w] = r;\r\n                                    });\r\n                                    nextTerm();\r\n                                });\r\n                            }).then(nextTable);\r\n                            break;\r\n                        case 1:\r\n                            if (whereType_1 === 0) {\r\n                                nextTable();\r\n                                return;\r\n                            }\r\n                            // Grab the fuzzy search index then compare each string for match\r\n                            // WAY slower than the tokenizer match but gets you fuzzy results.\r\n                            _this.s.adapters[0].adapter.getIndex(indexTable, false, function (index) {\r\n                                var wordsToGet = [];\r\n                                index.forEach(function (word) {\r\n                                    searchTerms.forEach(function (term) {\r\n                                        if (fuzzy(term.o, word)) {\r\n                                            searchTermsToFound_1[term.o] = word;\r\n                                            tokenToTerm[word] = term.o;\r\n                                            wordsToGet.push(word);\r\n                                        }\r\n                                    });\r\n                                });\r\n                                // remove duplicates\r\n                                wordsToGet = wordsToGet.filter(function (v, i, s) { return s.indexOf(v) === i; });\r\n                                utilities_1.fastALL(wordsToGet, function (term, j, nextTerm) {\r\n                                    _this.s.adapterRead(indexTable, term, function (row) {\r\n                                        if (!row) {\r\n                                            nextTerm();\r\n                                            return;\r\n                                        }\r\n                                        row.rows.forEach(function (r) {\r\n                                            // if the non fuzzy search already got this row then ignore it\r\n                                            var exists = false;\r\n                                            if (!reducedResults[r.id]) {\r\n                                                reducedResults[r.id] = {};\r\n                                            }\r\n                                            else {\r\n                                                if (reducedFirstLocations.indexOf(r.i[0]) !== -1) {\r\n                                                    exists = true;\r\n                                                }\r\n                                            }\r\n                                            if (!exists) {\r\n                                                var key = termToToken[term] || term;\r\n                                                reducedResults[r.id][key] = r;\r\n                                            }\r\n                                        });\r\n                                        nextTerm();\r\n                                    });\r\n                                }).then(nextTable);\r\n                            });\r\n                            break;\r\n                    }\r\n                }).then(function () {\r\n                    // now get the weights and locations for each row\r\n                    Object.keys(reducedResults).forEach(function (rowPK) {\r\n                        if (whereType_1 === 0) { // exact match, row results must have same number of terms as search\r\n                            if (Object.keys(reducedResults[rowPK]).length !== searchTerms.length) {\r\n                                delete reducedResults[rowPK];\r\n                                return;\r\n                            }\r\n                        }\r\n                        if (!weights_1[rowPK]) {\r\n                            weights_1[rowPK] = { weight: 0, locations: {} };\r\n                        }\r\n                        var docLength = 0;\r\n                        var wordLocs = Object.keys(reducedResults[rowPK]).map(function (w) {\r\n                            docLength = reducedResults[rowPK][w].l;\r\n                            if (tokenToTerm[w]) {\r\n                                // if we got something from fuzzy search, boost it up.\r\n                                // this is to balance against the idxsTerm code below\r\n                                weights_1[rowPK].weight += 5;\r\n                            }\r\n                            return { word: tokenToTerm[w] || w, loc: reducedResults[rowPK][w].i };\r\n                        });\r\n                        var totalLocations = wordLocs.reduce(function (p, c) { return p + c.loc.length; }, 0);\r\n                        weights_1[rowPK].weight += (totalLocations / docLength) + parseInt(args[0]);\r\n                        weights_1[rowPK].locations[col] = wordLocs;\r\n                        if (whereType_1 !== 0) { // fuzzy term match\r\n                            // We're checking each result to see how closely it matches the search phrase.\r\n                            // Closer proximity === higher weight\r\n                            searchTerms.forEach(function (sTerm) {\r\n                                // all instances of this term in this row/column, only runs against tokenizer results\r\n                                var idxsTerm = reducedResults[rowPK][sTerm.w];\r\n                                if (idxsTerm) {\r\n                                    idxsTerm.i.forEach(function (refLocation) {\r\n                                        // now check to see where the other parts of the terms are located in reference to this one\r\n                                        Object.keys(reducedResults[rowPK]).forEach(function (sTerm2) {\r\n                                            if (sTerm2 !== sTerm.w) {\r\n                                                // check all instances of other terms\r\n                                                reducedResults[rowPK][sTerm2].i.forEach(function (wordLoc) {\r\n                                                    var distance = Math.abs(wordLoc - refLocation);\r\n                                                    if (distance)\r\n                                                        weights_1[rowPK].weight += (10 / (distance * 10));\r\n                                                });\r\n                                            }\r\n                                        });\r\n                                    });\r\n                                }\r\n                                // the fuzzy() search algorithm used in the previouse step is orders of magnitude faster than levenshtein distance,\r\n                                // however it only returns boolean values, so we use levenshtein to get relevance on the much smaller set\r\n                                // of result records\r\n                                if (searchTermsToFound_1[sTerm.o]) {\r\n                                    wordLocs.forEach(function (loc) {\r\n                                        if (searchTermsToFound_1[sTerm.o] === loc.word) {\r\n                                            var lev = levenshtein(sTerm.o, loc.word);\r\n                                            if (lev <= 1) {\r\n                                                weights_1[rowPK].weight += 10;\r\n                                            }\r\n                                            else {\r\n                                                weights_1[rowPK].weight += 10 / (lev * 5);\r\n                                            }\r\n                                        }\r\n                                    });\r\n                                }\r\n                            });\r\n                        }\r\n                        else { // exact term match\r\n                            if (searchTerms.length > 1) {\r\n                                var startingWord_1 = [];\r\n                                Object.keys(reducedResults[rowPK]).forEach(function (term) {\r\n                                    if (term === searchTerms[0].w) {\r\n                                        startingWord_1 = reducedResults[rowPK][term].i;\r\n                                    }\r\n                                });\r\n                                var doingGood_1 = true;\r\n                                startingWord_1.forEach(function (location, i) {\r\n                                    var nextWord = searchTerms[i + 1];\r\n                                    if (nextWord) {\r\n                                        Object.keys(reducedResults[rowPK]).forEach(function (term) {\r\n                                            if (term === nextWord.w) {\r\n                                                var offset = nextWord.i + location;\r\n                                                if (reducedResults[rowPK][term].i.indexOf(offset) === -1) {\r\n                                                    doingGood_1 = false;\r\n                                                }\r\n                                            }\r\n                                        });\r\n                                    }\r\n                                });\r\n                                if (!doingGood_1) {\r\n                                    delete weights_1[rowPK];\r\n                                }\r\n                            }\r\n                        }\r\n                    });\r\n                    nextCol();\r\n                });\r\n            }).then(function (results) {\r\n                // normalize the weights\r\n                var max = 0;\r\n                var rowKeys = Object.keys(weights_1);\r\n                var ii = rowKeys.length;\r\n                while (ii--) {\r\n                    max = Math.max(max, weights_1[rowKeys[ii]].weight);\r\n                }\r\n                ii = rowKeys.length;\r\n                while (ii--) {\r\n                    weights_1[rowKeys[ii]].weight = weights_1[rowKeys[ii]].weight / max;\r\n                }\r\n                utilities_1.fastALL(rowKeys.filter(function (pk) {\r\n                    if (whereType_1 === 0)\r\n                        return true;\r\n                    if (whereType_1 > 0) {\r\n                        return whereType_1 < weights_1[pk].weight;\r\n                    }\r\n                    if (whereType_1 < 0) {\r\n                        return whereType_1 * -1 > weights_1[pk].weight;\r\n                    }\r\n                    return true;\r\n                }), function (pk, i, done) {\r\n                    // get result rows\r\n                    _this.s.adapterRead(_this.q.table, pk, done);\r\n                }).then(function (rows) {\r\n                    var pk = _this.s.tableInfo[_this.q.table]._pk;\r\n                    rows = rows.filter(function (r) { return r; });\r\n                    // run levenshtein again against the results.\r\n                    // We're doing this again because there's no way to know the values of the tokenized result rows that we've matched\r\n                    // without querying them, so we reduce the problem set to the smallest possible, then levenshtein against it.\r\n                    rows.forEach(function (row) {\r\n                        var rowPK = row[pk];\r\n                        Object.keys(weights_1[rowPK].locations).forEach(function (col) {\r\n                            var rowCol = _this.qu._tokenizer(col, row[col]).map(function (w) { return w.o; });\r\n                            weights_1[rowPK].locations[col].forEach(function (matches) {\r\n                                matches.loc.forEach(function (idx) {\r\n                                    var lev = levenshtein(rowCol[idx], matches.word);\r\n                                    if (lev <= 1) {\r\n                                        weights_1[rowPK].weight += 10;\r\n                                    }\r\n                                    else {\r\n                                        weights_1[rowPK].weight += 10 / (lev * 10);\r\n                                    }\r\n                                });\r\n                            });\r\n                        });\r\n                    });\r\n                    // normalize weights again\r\n                    var max = 0;\r\n                    var rowKeys = Object.keys(weights_1);\r\n                    var ii = rowKeys.length;\r\n                    while (ii--) {\r\n                        max = Math.max(max, weights_1[rowKeys[ii]].weight);\r\n                    }\r\n                    ii = rowKeys.length;\r\n                    while (ii--) {\r\n                        weights_1[rowKeys[ii]].weight = weights_1[rowKeys[ii]].weight / max;\r\n                    }\r\n                    callback(rows.filter(function (r) {\r\n                        if (whereType_1 === 0)\r\n                            return true;\r\n                        if (whereType_1 > 0) {\r\n                            return whereType_1 < weights_1[r[pk]].weight;\r\n                        }\r\n                        if (whereType_1 < 0) {\r\n                            return whereType_1 * -1 > weights_1[r[pk]].weight;\r\n                        }\r\n                        return true;\r\n                    }).map(function (r) { return (__assign({}, r, { _weight: weights_1[r[pk]].weight, _locations: weights_1[r[pk]].locations })); }));\r\n                });\r\n            });\r\n            return;\r\n        }\r\n        // get rows based on crow distance from given GPS coordinates\r\n        if (where[0].indexOf(\"crow(\") === 0) {\r\n            var gps_1 = where[0].replace(/crow\\((.*)\\)/gmi, \"$1\").split(\",\").map(function (c, i) { return i < 2 ? parseFloat(c.trim()) : c.trim(); });\r\n            var latTable = \"_\" + this.q.table + \"_idx_\" + (gps_1.length > 2 ? gps_1[2] : \"lat\");\r\n            var lonTable = \"_\" + this.q.table + \"_idx_\" + (gps_1.length > 2 ? gps_1[3] : \"lon\");\r\n            var distance_1 = parseFloat(where[2] || \"0\");\r\n            // get latitudes that are distance north and distance south from the search point\r\n            var latRange_1 = [-1, 1].map(function (i) {\r\n                return gps_1[0] + ((distance_1 * i) / index_1.NanoSQLInstance.earthRadius) * (180 * Math.PI);\r\n            });\r\n            // get the longitudes that are distance west and distance east from the search point\r\n            var lonRange_1 = [-1, 1].map(function (i) {\r\n                return gps_1[1] + ((distance_1 * i) / index_1.NanoSQLInstance.earthRadius) * (180 * Math.PI) / Math.cos(gps_1[0] * Math.PI / 180);\r\n            });\r\n            // We're getting all rows that are within the latitude OR longitude range.\r\n            // the final result will be a square giving us an approximation of the final result set.\r\n            utilities_1.fastALL([latTable, lonTable], function (table, i, next) {\r\n                var ranges = i === 0 ? latRange_1 : lonRange_1;\r\n                _this.s._rangeRead(table, ranges[0], ranges[1], true, next);\r\n            }).then(function (result) {\r\n                // if the lat or lon results are empty then we have no records that match\r\n                if (!result[0].length || !result[1].length) {\r\n                    callback([]);\r\n                    return;\r\n                }\r\n                // build an array of row primary keys and calculate their distance\r\n                // doesn't calculate distance if row doesn't fit inside the approximation square.\r\n                var rows = {};\r\n                var keys = [];\r\n                [0, 1].forEach(function (i) {\r\n                    result[i].forEach(function (r) {\r\n                        r.rows.forEach(function (pk) {\r\n                            switch (i) {\r\n                                case 0:\r\n                                    rows[pk] = r.id;\r\n                                    break;\r\n                                case 1:\r\n                                    // record is inside the search radius\r\n                                    if (rows[pk] && utilities_1.crowDistance(gps_1[0], gps_1[1], rows[pk], r.id, index_1.NanoSQLInstance.earthRadius) < distance_1) {\r\n                                        keys.push(pk);\r\n                                    }\r\n                                    break;\r\n                            }\r\n                        });\r\n                    });\r\n                });\r\n                // Get the rows\r\n                var pk = _this.qu._store.tableInfo[_this.q.table]._pk;\r\n                _this.s._read(_this.q.table, keys, function (records) {\r\n                    callback(records.map(function (r) { return (__assign({}, r, { _distance: rows[r[pk]] })); }));\r\n                });\r\n            });\r\n            return;\r\n        }\r\n        if (where[1] === \"BETWEEN\") {\r\n            var secondaryIndexKey = where[0] === this.s.tableInfo[this.q.table]._pk ? \"\" : where[0];\r\n            if (secondaryIndexKey) {\r\n                var idxTable_1 = \"_\" + this.q.table + \"_idx_\" + secondaryIndexKey;\r\n                if (this.s._doCache) {\r\n                    var pks = this.s._secondaryIndexes[idxTable_1].idx.filter(function (idx) { return where[2][0] <= idx && where[2][1] >= idx; });\r\n                    var keys_1 = pks.map(function (r) { return _this.s._secondaryIndexes[idxTable_1].rows[r]; }).reverse().reduce(function (prev, cur) {\r\n                        return prev.concat(cur.rows);\r\n                    }, []);\r\n                    this.s._read(this.q.table, keys_1, callback);\r\n                }\r\n                else {\r\n                    this.s._rangeRead(idxTable_1, where[2][0], where[2][1], true, function (rows) {\r\n                        var keys = [];\r\n                        var i = rows.length;\r\n                        while (i--) {\r\n                            keys = keys.concat(rows[i].rows);\r\n                        }\r\n                        _this.s._read(_this.q.table, keys, callback);\r\n                    });\r\n                }\r\n            }\r\n            else {\r\n                this.s._rangeRead(this.q.table, where[2][0], where[2][1], true, function (rows) {\r\n                    callback(rows);\r\n                });\r\n            }\r\n            return;\r\n        }\r\n        var keys = [];\r\n        var condition = \"\";\r\n        switch (where[1]) {\r\n            case \"IN\":\r\n                keys = where[2];\r\n                condition = \"=\";\r\n                break;\r\n            case \"=\":\r\n            case \">\":\r\n            case \">=\":\r\n            case \"<\":\r\n            case \"<=\":\r\n                keys = [where[2]];\r\n                condition = where[1];\r\n                break;\r\n        }\r\n        if (where[0] === this.s.tableInfo[this.q.table]._pk) { // primary key select\r\n            if (condition === \"=\") {\r\n                this.s._read(this.q.table, keys, callback);\r\n            }\r\n            else {\r\n                this.s.adapters[0].adapter.getIndex(this.q.table, false, function (index) {\r\n                    var searchVal = keys[0];\r\n                    var getPKs = index.filter(function (val) {\r\n                        switch (condition) {\r\n                            case \">\": return val > searchVal;\r\n                            case \">=\": return val >= searchVal;\r\n                            case \"<\": return val < searchVal;\r\n                            case \"<=\": return val <= searchVal;\r\n                        }\r\n                        return false;\r\n                    });\r\n                    if (!getPKs.length) {\r\n                        callback([]);\r\n                        return;\r\n                    }\r\n                    _this.s._read(_this.q.table, getPKs, callback);\r\n                });\r\n            }\r\n        }\r\n        else { // secondary index select\r\n            utilities_1.fastALL(keys, function (idx, i, complete) {\r\n                _this.s._secondaryIndexRead(_this.q.table, condition, where[0], idx, complete);\r\n            }).then(function (rows) {\r\n                callback([].concat.apply([], rows));\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Select rows within a numerical range using limit and offset values.\r\n     * Negative limit values will start the range from the bottom of the table.\r\n     *\r\n     * @internal\r\n     * @param {(rows: DBRow[]) => void} callback\r\n     * @memberof _RowSelection\r\n     */\r\n    // [limit, offset]\r\n    _RowSelection.prototype._selectByRange = function (callback) {\r\n        var _this = this;\r\n        if (this.q.range) {\r\n            var r_1 = this.q.range;\r\n            if (r_1[0] > 0) { // positive limit value, we can send this straight to the adapter\r\n                this.s._rangeRead(this.q.table, r_1[1], (r_1[1] + r_1[0]) - 1, false, callback);\r\n            }\r\n            else { // using negative limit value to get rows at the end of the database.\r\n                this.s.adapters[0].adapter.getIndex(this.q.table, true, function (count) {\r\n                    var fromIdx = count + r_1[0] - r_1[1];\r\n                    var toIdx = fromIdx;\r\n                    var counter = Math.abs(r_1[0]) - 1;\r\n                    while (counter--) {\r\n                        toIdx++;\r\n                    }\r\n                    _this.s._rangeRead(_this.q.table, fromIdx, toIdx, false, callback);\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            callback([]);\r\n        }\r\n    };\r\n    /**\r\n     * Select rows based on a Trie Query.\r\n     *\r\n     * @internal\r\n     * @param {(rows: DBRow[]) => void} callback\r\n     * @memberof _RowSelection\r\n     */\r\n    _RowSelection.prototype._selectByTrie = function (callback) {\r\n        if (this.q.trie) {\r\n            this.s._trieRead(this.q.table, this.q.trie.column, this.q.trie.search, callback);\r\n        }\r\n        else {\r\n            callback([]);\r\n        }\r\n    };\r\n    /**\r\n     * Do a full table scan, checking every row against the WHERE statement.\r\n     *\r\n     * @internal\r\n     * @param {(rows: DBRow[]) => void} callback\r\n     * @memberof _RowSelection\r\n     */\r\n    _RowSelection.prototype._fullTableScan = function (callback) {\r\n        var _this = this;\r\n        var hasWhere = this.q.where !== undefined;\r\n        var arrWhere = hasWhere && Array.isArray(this.q.where);\r\n        var PK = this.s.tableInfo[this.q.table]._pk;\r\n        var arraySearchCache = [];\r\n        var rowCache = [];\r\n        var scanTable = function () {\r\n            _this.s._read(_this.q.table, function (row, i, keep) {\r\n                if (!hasWhere) { // no where statement\r\n                    keep(true);\r\n                    return;\r\n                }\r\n                if (arrWhere) { // where is array\r\n                    keep(_where(row, _this.q.where, i, false, arraySearchCache, PK));\r\n                }\r\n                else { // where is function\r\n                    keep(_this.q.where(row, i));\r\n                }\r\n            }, callback);\r\n        };\r\n        var where = this.q.where || [];\r\n        if (arrWhere && typeof where[0] !== \"string\") { // array and compount where\r\n            // compound where, handle search() queries inside an unoptimized query.\r\n            utilities_1.fastCHAIN(where, function (wAr, i, done) {\r\n                if (wAr[0].indexOf(\"search(\") === -1) {\r\n                    done();\r\n                    return;\r\n                }\r\n                // perform optimized search query, then store the results to compare aginst the rest of the .where() conditions\r\n                _this.qu._store._nsql.query(\"select\").where(wAr).manualExec({ table: _this.q.table }).then(function (rows) {\r\n                    arraySearchCache[i] = rows.map(function (r) { return r[PK]; });\r\n                    done();\r\n                });\r\n            }).then(function () {\r\n                scanTable();\r\n            });\r\n        }\r\n        else {\r\n            scanTable();\r\n        }\r\n    };\r\n    /**\r\n     * Given a compound where statement like [[value, =, key], AND, [something, =, something]]\r\n     * Check if first where conditions are primary key/ secondary index followed by unoptimized/unindexed conditions\r\n     *\r\n     * In this case we can grab the primary key/secondary index query from the database and do a faster query on the smaller result set.\r\n     *\r\n     * Returns 0 if this isn't a suboptimized where condition.\r\n     * Returns the index of the where array where the AND splits between optimized and unoptimized conditions otherwise.\r\n     *\r\n     * @private\r\n     * @param {any[]} wArgs\r\n     * @returns {number}\r\n     * @memberof _RowSelection\r\n     */\r\n    _RowSelection.prototype._isSubOptimizedWhere = function (wArgs) {\r\n        var _this = this;\r\n        if (typeof wArgs[0] === \"string\") { // not compound where\r\n            return 0;\r\n        }\r\n        if (this._isOptimizedWhere(wArgs[0]) === 0) { // at least first value is optimized\r\n            // last primary key/secondary index condition MUST be followed by AND\r\n            var lastCheck_1 = 0;\r\n            wArgs.forEach(function (wArg, i) {\r\n                if (i % 2 === 0) {\r\n                    if (_this._isOptimizedWhere(wArg) === 0 && wArgs[i + 1]) {\r\n                        lastCheck_1 = i + 1;\r\n                    }\r\n                }\r\n            });\r\n            // AND must follow the last secondary index/primary key condition\r\n            if (wArgs[lastCheck_1] !== \"AND\")\r\n                return 0;\r\n            return lastCheck_1;\r\n        }\r\n        return 0;\r\n    };\r\n    /**\r\n     * Checks if a single WHERE statement [\"row\", \"=\", value] uses a primary key or secondary index as it's row.\r\n     * If so, we can use a much faster SELECT method.\r\n     *\r\n     * @internal\r\n     * @param {any[]} wArgs\r\n     * @returns {number}\r\n     * @memberof _RowSelection\r\n     */\r\n    _RowSelection.prototype._isOptimizedWhere = function (wArgs) {\r\n        var tableData = this.s.tableInfo[this.q.table];\r\n        var wQuery = wArgs[0] || \"\";\r\n        var wCondition = wArgs[1] || \"\";\r\n        // is a valid crow query with secondary indexes\r\n        if (wQuery.indexOf(\"crow(\") !== 1 && wCondition === \"<\") {\r\n            var crowArgs = wQuery.replace(/crow\\((.*)\\)/gmi, \"$1\").split(\",\").map(function (c) { return c.trim(); });\r\n            var latTable = crowArgs[2] || \"lat\";\r\n            var lonTable = crowArgs[3] || \"lon\";\r\n            if (tableData._secondaryIndexes.indexOf(latTable) === -1 || tableData._secondaryIndexes.indexOf(lonTable) === -1)\r\n                return 1;\r\n            return 0;\r\n        }\r\n        // is a valid search query\r\n        if (wQuery.indexOf(\"search(\") !== -1 && [\"=\", \">\", \"<\"].reduce(function (p, c) { return p + wArgs[1].indexOf(c); }, 0) !== -3) {\r\n            var searchArgs = wQuery.replace(/search\\((.*)\\)/gmi, \"$1\").split(\",\").map(function (c) { return c.trim(); });\r\n            // all search columns are indexed\r\n            if (searchArgs.filter(function (s) { return Object.keys(tableData._searchColumns).indexOf(s) !== -1; }).length) {\r\n                return 0;\r\n            }\r\n            return 1;\r\n        }\r\n        // primary or secondary index with valid where condition\r\n        if (wQuery === tableData._pk || tableData._secondaryIndexes.indexOf(wQuery) !== -1) {\r\n            if ([\"=\", \"IN\", \"BETWEEN\", \">\", \">=\", \"<\", \"<=\"].indexOf(wArgs[1]) > -1)\r\n                return 0;\r\n            return 1;\r\n        }\r\n        return 1;\r\n    };\r\n    return _RowSelection;\r\n}());\r\nexports._RowSelection = _RowSelection;\r\n/**\r\n * Select rows from an instance table. Supports RANGE and WHERE statements.\r\n *\r\n * @export\r\n * @class InstanceSelection\r\n */\r\nvar InstanceSelection = /** @class */ (function () {\r\n    function InstanceSelection(q, p) {\r\n        this.q = q;\r\n        this.p = p;\r\n    }\r\n    InstanceSelection.prototype.getRows = function (callback) {\r\n        var _this = this;\r\n        if (this.q.join || this.q.orm || this.q.trie) {\r\n            throw new Error(\"nSQL: Cannot do a JOIN, ORM or TRIE command with instance table!\");\r\n        }\r\n        if (this.q.range && this.q.range.length) { // range select [limit, offset]\r\n            var range = this.q.range, from_1, to_1;\r\n            if (range[0] < 0) {\r\n                from_1 = (this.q.table.length) + range[0] - range[1];\r\n            }\r\n            else {\r\n                from_1 = range[1];\r\n            }\r\n            var cnt = Math.abs(range[0]) - 1;\r\n            to_1 = from_1;\r\n            while (cnt--) {\r\n                to_1++;\r\n            }\r\n            callback(this.q.table.filter(function (val, idx) {\r\n                return idx >= from_1 && idx <= to_1;\r\n            }));\r\n            return;\r\n        }\r\n        callback(this.q.table.filter(function (row, i) {\r\n            if (_this.q.where) {\r\n                return Array.isArray(_this.q.where) ? _where(row, _this.q.where || [], i, false) : _this.q.where(row, i);\r\n            }\r\n            return true;\r\n        }));\r\n    };\r\n    return InstanceSelection;\r\n}());\r\nexports.InstanceSelection = InstanceSelection;\r\n/**\r\n * Handles WHERE statements, combining multiple compared statements aginst AND/OR as needed to return a final boolean value.\r\n * The final boolean value is wether the row matches the WHERE conditions or not.\r\n *\r\n * @param {*} singleRow\r\n * @param {any[]} where\r\n * @param {number} rowIDX\r\n * @param {boolean} [ignoreFirstPath]\r\n * @returns {boolean}\r\n */\r\nvar _where = function (singleRow, where, rowIDX, ignoreFirstPath, searchCache, pk) {\r\n    if (typeof where[0] !== \"string\") { // compound where statements\r\n        var hasOr_1 = where.indexOf(\"OR\") !== -1;\r\n        var decided_1;\r\n        var prevCondition_1;\r\n        return where.reduce(function (prev, wArg, idx) {\r\n            if (decided_1 !== undefined)\r\n                return decided_1;\r\n            if (idx % 2 === 1) {\r\n                prevCondition_1 = wArg;\r\n                return prev;\r\n            }\r\n            var compareResult = false;\r\n            if (wArg[0].indexOf(\"search(\") === 0 && searchCache) {\r\n                compareResult = searchCache[idx].indexOf(singleRow[pk]) !== -1;\r\n            }\r\n            else {\r\n                compareResult = _compare(wArg, singleRow, ignoreFirstPath || false);\r\n            }\r\n            // if all conditions are \"AND\" we can stop checking on the first false result\r\n            if (!hasOr_1 && compareResult === false) {\r\n                decided_1 = false;\r\n                return decided_1;\r\n            }\r\n            if (idx === 0)\r\n                return compareResult;\r\n            if (prevCondition_1 === \"AND\") {\r\n                return prev && compareResult;\r\n            }\r\n            else {\r\n                return prev || compareResult;\r\n            }\r\n        }, false);\r\n    }\r\n    else { // single where statement\r\n        return _compare(where, singleRow, ignoreFirstPath || false);\r\n    }\r\n};\r\nvar likeCache = {};\r\nvar whereFuncCache = {};\r\n/**\r\n * Compare function used by WHERE to determine if a given value matches a given condition.\r\n *\r\n * Accepts single where arguments (compound arguments not allowed).\r\n *\r\n *\r\n * @param {*} val1\r\n * @param {string} compare\r\n * @param {*} val2\r\n * @returns {boolean}\r\n */\r\nvar _compare = function (where, wholeRow, isJoin) {\r\n    if (!whereFuncCache[where[0]]) {\r\n        // \"levenshtein(word, column)\"\" => [\"levenshtein\", \"word\", \"column\"]\r\n        // \"crow(-49, 29, lat_main, lon_main)\" => [\"crow\", -49, 29, \"lat_main\", \"lon_main\"]\r\n        // notAFunction => []\r\n        whereFuncCache[where[0]] = where[0].indexOf(\"(\") !== -1 ?\r\n            where[0].replace(/(.*)\\((.*)\\)/gmi, \"$1,$2\").split(\",\").map(function (c) { return isNaN(c) ? c.trim() : parseFloat(c.trim()); })\r\n            : [];\r\n    }\r\n    var processLIKE = function (columnValue, givenValue) {\r\n        if (!likeCache[givenValue]) {\r\n            var prevChar_1 = \"\";\r\n            likeCache[givenValue] = new RegExp(givenValue.split(\"\").map(function (s) {\r\n                if (prevChar_1 === \"\\\\\") {\r\n                    prevChar_1 = s;\r\n                    return s;\r\n                }\r\n                prevChar_1 = s;\r\n                if (s === \"%\")\r\n                    return \".*\";\r\n                if (s === \"_\")\r\n                    return \".\";\r\n                return s;\r\n            }).join(\"\"), \"gmi\");\r\n        }\r\n        if (typeof columnValue !== \"string\") {\r\n            if (typeof columnValue === \"number\") {\r\n                return String(columnValue).match(likeCache[givenValue]) !== null;\r\n            }\r\n            else {\r\n                return JSON.stringify(columnValue).match(likeCache[givenValue]) !== null;\r\n            }\r\n        }\r\n        return columnValue.match(likeCache[givenValue]) !== null;\r\n    };\r\n    var givenValue = where[2];\r\n    var compare = where[1];\r\n    var columnValue = (function () {\r\n        if (whereFuncCache[where[0]].length) {\r\n            var whereFn = index_1.NanoSQLInstance.whereFunctions[whereFuncCache[where[0]][0]];\r\n            if (whereFn) {\r\n                return whereFn.apply(null, [wholeRow, isJoin].concat(whereFuncCache[where[0]].slice(1)));\r\n            }\r\n            return undefined;\r\n        }\r\n        else {\r\n            return utilities_1.objQuery(where[0], wholeRow, isJoin);\r\n        }\r\n    })();\r\n    if (givenValue === \"NULL\" || givenValue === \"NOT NULL\") {\r\n        var isNull = [undefined, null, \"\"].indexOf(columnValue) !== -1;\r\n        var isEqual = compare === \"=\" || compare === \"LIKE\";\r\n        switch (givenValue) {\r\n            case \"NULL\": return isEqual ? isNull : !isNull;\r\n            case \"NOT NULL\": return isEqual ? !isNull : isNull;\r\n        }\r\n    }\r\n    switch (compare) {\r\n        // if column equal to given value\r\n        case \"=\": return columnValue === givenValue;\r\n        // if column not equal to given value\r\n        case \"!=\": return columnValue !== givenValue;\r\n        // if column greather than given value\r\n        case \">\": return columnValue > givenValue;\r\n        // if column less than given value\r\n        case \"<\": return columnValue < givenValue;\r\n        // if column less than or equal to given value\r\n        case \"<=\": return columnValue <= givenValue;\r\n        // if column greater than or equal to given value\r\n        case \">=\": return columnValue >= givenValue;\r\n        // if column value exists in given array\r\n        case \"IN\": return (givenValue || []).indexOf(columnValue) !== -1;\r\n        // if column does not exist in given array\r\n        case \"NOT IN\": return (givenValue || []).indexOf(columnValue) === -1;\r\n        // regexp search the column\r\n        case \"REGEXP\":\r\n        case \"REGEX\": return (columnValue || \"\").match(givenValue) !== null;\r\n        // if given value exists in column value\r\n        case \"LIKE\": return processLIKE((columnValue || \"\"), givenValue);\r\n        // if given value does not exist in column value\r\n        case \"NOT LIKE\": return !processLIKE((columnValue || \"\"), givenValue);\r\n        // if the column value is between two given numbers\r\n        case \"BETWEEN\": return givenValue[0] <= columnValue && givenValue[1] >= columnValue;\r\n        // if single value exists in array column\r\n        case \"HAVE\": return (columnValue || []).indexOf(givenValue) !== -1;\r\n        // if single value does not exist in array column\r\n        case \"NOT HAVE\": return (columnValue || []).indexOf(givenValue) === -1;\r\n        // if array of values intersects with array column\r\n        case \"INTERSECT\": return (columnValue || []).filter(function (l) { return (givenValue || []).indexOf(l) > -1; }).length > 0;\r\n        // if array of values does not intersect with array column\r\n        case \"NOT INTERSECT\": return (columnValue || []).filter(function (l) { return (givenValue || []).indexOf(l) > -1; }).length === 0;\r\n        default: return false;\r\n    }\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/nano-sql/lib/database/query.js\n// module id = 185\n// module chunks = 0","'use strict';\n\nfunction fuzzysearch (needle, haystack) {\n  var tlen = haystack.length;\n  var qlen = needle.length;\n  if (qlen > tlen) {\n    return false;\n  }\n  if (qlen === tlen) {\n    return needle === haystack;\n  }\n  outer: for (var i = 0, j = 0; i < qlen; i++) {\n    var nch = needle.charCodeAt(i);\n    while (j < tlen) {\n      if (haystack.charCodeAt(j++) === nch) {\n        continue outer;\n      }\n    }\n    return false;\n  }\n  return true;\n}\n\nmodule.exports = fuzzysearch;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/fuzzysearch/index.js\n// module id = 186\n// module chunks = 0","var __assign = (this && this.__assign) || Object.assign || function(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n            t[p] = s[p];\r\n    }\r\n    return t;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar prefix_trie_ts_1 = require(\"prefix-trie-ts\");\r\nvar utilities_1 = require(\"../utilities\");\r\nvar adapter_sync_1 = require(\"./adapter-sync\");\r\nvar adapter_indexedDB_1 = require(\"./adapter-indexedDB\");\r\nvar adapter_websql_1 = require(\"./adapter-websql\");\r\nvar lie_ts_1 = require(\"lie-ts\");\r\n/* NODE-START */\r\nvar adapter_levelDB_1 = require(\"./adapter-levelDB\");\r\n/* NODE-END */\r\nvar queue = require(\"queue\");\r\nvar newQueryQ = function (_this) {\r\n    return {\r\n        qs: {},\r\n        add: function (table, cb) {\r\n            if (!_this.queue.qs[table]) {\r\n                _this.queue.qs[table] = queue({ autostart: true, concurrency: 1 });\r\n            }\r\n            _this.queue.qs[table].push(function (done) {\r\n                lie_ts_1.setFast(function () { return cb(done); });\r\n            });\r\n        }\r\n    };\r\n};\r\n/**\r\n * Holds the general abstractions to connect the query module to the storage adapters.\r\n * Takes care of indexing, tries, secondary indexes and adapter management.\r\n *\r\n * @export\r\n * @class _NanoSQLStorage\r\n */\r\n// tslint:disable-next-line\r\nvar _NanoSQLStorage = /** @class */ (function () {\r\n    function _NanoSQLStorage(parent, args) {\r\n        var _this = this;\r\n        /**\r\n         * Array of table names\r\n         *\r\n         * @internal\r\n         * @type {string[]}\r\n         * @memberof _NanoSQLStorage\r\n         */\r\n        this._tableNames = [];\r\n        this._secondaryIndexes = {};\r\n        this._secondaryIndexUpdates = {};\r\n        this._nsql = parent;\r\n        this._mode = args.persistent ? \"PERM\" : args.mode || \"TEMP\";\r\n        this._id = args.id;\r\n        this._size = args.size || 5;\r\n        this.queue = newQueryQ(this);\r\n        this.adapters = [];\r\n        this.models = {};\r\n        this.tableInfo = {};\r\n        this._trieIndexes = {};\r\n        this._tableNames = [];\r\n        this._doCache = (typeof args.cache !== \"undefined\" ? args.cache : true);\r\n        this._cache = {};\r\n        if (this._doCache && args.peer && typeof window !== \"undefined\") {\r\n            var prevTable = parent.sTable;\r\n            parent.table(\"*\").on(\"peer-change\", function (ev) {\r\n                _this._cache[ev.table] = {};\r\n            });\r\n            parent.table(prevTable);\r\n        }\r\n        this.adapters[0] = {\r\n            adapter: null,\r\n            waitForWrites: true\r\n        };\r\n        if (typeof this._mode === \"string\") {\r\n            if (this._mode === \"PERM\") {\r\n                this._mode = this._detectStorageMethod() || this._mode;\r\n            }\r\n            switch (this._mode) {\r\n                case \"IDB\":\r\n                case \"IDB_WW\":\r\n                    this.adapters[0].adapter = new adapter_indexedDB_1._IndexedDBStore();\r\n                    break;\r\n                case \"WSQL\":\r\n                    this.adapters[0].adapter = new adapter_websql_1._WebSQLStore(this._size);\r\n                    break;\r\n                case \"LS\":\r\n                    this.adapters[0].adapter = new adapter_sync_1._SyncStore(true);\r\n                    break;\r\n                /* NODE-START */\r\n                case \"LVL\":\r\n                    this.adapters[0].adapter = new adapter_levelDB_1._LevelStore(args.dbPath, args.writeCache, args.readCache);\r\n                    break;\r\n                /* NODE-END */\r\n                case \"TEMP\":\r\n                    this.adapters[0].adapter = new adapter_sync_1._SyncStore(false);\r\n                    break;\r\n            }\r\n        }\r\n        else {\r\n            this.adapters[0].adapter = this._mode;\r\n        }\r\n    }\r\n    _NanoSQLStorage.prototype._flushIndexes = function () {\r\n        var _this = this;\r\n        if (this._doCache && !this._isFlushing && Object.keys(this._secondaryIndexUpdates).length) {\r\n            this._isFlushing = true;\r\n            var indexes_1 = utilities_1._assign(this._secondaryIndexUpdates);\r\n            this._secondaryIndexUpdates = {};\r\n            utilities_1.fastALL(Object.keys(indexes_1), function (table, i, done) {\r\n                var PKs = indexes_1[table];\r\n                utilities_1.fastALL(PKs, function (pk, ii, nextRow) {\r\n                    _this.adapterWrite(table, pk, utilities_1._assign(_this._secondaryIndexes[table].rows[pk]), nextRow);\r\n                }).then(done);\r\n            }).then(function () {\r\n                // flush indexes to database no more than every 100ms.\r\n                setTimeout(function () {\r\n                    _this._isFlushing = false;\r\n                    _this._flushIndexes();\r\n                }, 100);\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Initilize the storage adapter and get ready to rumble!\r\n     *\r\n     * @param {StdObject<DataModel[]>} dataModels\r\n     * @param {(newModels: StdObject<DataModel[]>) => void} complete\r\n     * @memberof _NanoSQLStorage\r\n     */\r\n    _NanoSQLStorage.prototype.init = function (dataModels, complete) {\r\n        var _this = this;\r\n        if (!this._id) {\r\n            this._id = utilities_1.hash(JSON.stringify(dataModels)).toString();\r\n        }\r\n        this.models = this._createIndexTables(dataModels);\r\n        this._tableNames = Object.keys(this.models);\r\n        this.adapters.forEach(function (a) {\r\n            a.adapter.setID(_this._id);\r\n        });\r\n        this._tableNames.forEach(function (table) {\r\n            _this._newTable(table, dataModels[table]);\r\n        });\r\n        this._relFromTable = {};\r\n        this._relToTable = {};\r\n        this._relationColumns = {};\r\n        this._columnsAreTables = {};\r\n        this._tableNames.forEach(function (table) {\r\n            // finish views data\r\n            // gets a list of tables that need to be checked on each row update of this table\r\n            _this.tableInfo[table]._viewTables = Object.keys(_this.tableInfo).reduce(function (prev, cur) {\r\n                if (cur === table)\r\n                    return prev;\r\n                var vTables = Object.keys(_this.tableInfo[cur]._views);\r\n                if (vTables.indexOf(table) !== -1) {\r\n                    prev.push({ table: cur, column: _this.tableInfo[cur]._views[table].pkColumn });\r\n                }\r\n                return prev;\r\n            }, []);\r\n            // finish ORM and other stuff\r\n            var i = _this.models[table].length;\r\n            _this._relFromTable[table] = {};\r\n            _this._relationColumns[table] = [];\r\n            _this._relToTable[table] = [];\r\n            _this._columnsAreTables[table] = {};\r\n            var _loop_1 = function () {\r\n                var p = _this.models[table][i];\r\n                // Check for relations\r\n                if (_this._tableNames.indexOf(p.type.replace(\"[]\", \"\")) !== -1) {\r\n                    var mapTo_1 = \"\";\r\n                    _this._columnsAreTables[table][p.key] = {\r\n                        _toTable: p.type.replace(\"[]\", \"\"),\r\n                        _thisType: p.type.indexOf(\"[]\") === -1 ? \"single\" : \"array\"\r\n                    };\r\n                    if (p.props) {\r\n                        p.props.forEach(function (p) {\r\n                            // old format ref=>column or ref=>column[]\r\n                            if (p.indexOf(\"ref=>\") !== -1) {\r\n                                mapTo_1 = p.replace(\"ref=>\", \"\");\r\n                            }\r\n                            // new format orm(column) or orm(column[])\r\n                            if (p.indexOf(\"orm(\") === 0) {\r\n                                mapTo_1 = p.replace(/orm\\((.*)\\)/gmi, \"$1\");\r\n                            }\r\n                        });\r\n                        if (mapTo_1) {\r\n                            _this._hasORM = true;\r\n                            _this._relationColumns[table].push(p.key);\r\n                            _this._relFromTable[table][p.key] = {\r\n                                _toTable: p.type.replace(\"[]\", \"\"),\r\n                                _toColumn: mapTo_1.replace(\"[]\", \"\"),\r\n                                _toType: mapTo_1.indexOf(\"[]\") === -1 ? \"single\" : \"array\",\r\n                                _thisType: p.type.indexOf(\"[]\") === -1 ? \"single\" : \"array\"\r\n                            };\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n            while (i--) {\r\n                _loop_1();\r\n            }\r\n        });\r\n        Object.keys(this._relFromTable).forEach(function (table) {\r\n            Object.keys(_this._relFromTable[table]).forEach(function (column) {\r\n                var rel = _this._relFromTable[table][column];\r\n                _this._relToTable[rel._toTable].push({\r\n                    _thisColumn: rel._toColumn,\r\n                    _thisType: rel._toType,\r\n                    _fromTable: table,\r\n                    _fromColumn: column,\r\n                    _fromType: rel._thisType\r\n                });\r\n            });\r\n        });\r\n        utilities_1.fastALL(this.adapters, function (a, i, done) {\r\n            a.adapter.connect(function () {\r\n                if (a.adapter.setNSQL) {\r\n                    a.adapter.setNSQL(_this._nsql);\r\n                }\r\n                done();\r\n            });\r\n        }).then(function () {\r\n            // populate trie data\r\n            utilities_1.fastALL(Object.keys(_this._trieIndexes), function (table, i, tableDone) {\r\n                var trieColumns = _this._trieIndexes[table];\r\n                if (Object.keys(trieColumns).length) {\r\n                    utilities_1.fastALL(Object.keys(trieColumns), function (column, ii, nextColumn) {\r\n                        var idxTable = \"_\" + table + \"_idx_\" + column;\r\n                        _this.adapters[0].adapter.getIndex(idxTable, false, function (index) {\r\n                            index.forEach(function (value) {\r\n                                _this._trieIndexes[table][column].addWord(String(value));\r\n                            });\r\n                            nextColumn();\r\n                        });\r\n                    }).then(tableDone);\r\n                }\r\n                else {\r\n                    tableDone();\r\n                }\r\n            }).then(function () {\r\n                // populate cached secondary indexes from persistent storage\r\n                if (_this._doCache) {\r\n                    utilities_1.fastALL(Object.keys(_this.tableInfo), function (table, i, next) {\r\n                        utilities_1.fastALL(_this.tableInfo[table]._secondaryIndexes, function (column, ii, nextCol) {\r\n                            var idxTable = \"_\" + table + \"_idx_\" + column;\r\n                            _this.adapters[0].adapter.getIndex(idxTable, false, function (index) {\r\n                                _this._secondaryIndexes[idxTable].idx = index;\r\n                                _this.adapters[0].adapter.rangeRead(idxTable, function (row, i, nextRow) {\r\n                                    _this._secondaryIndexes[idxTable].rows[row.id] = row;\r\n                                    nextRow();\r\n                                }, nextCol);\r\n                            });\r\n                        }).then(next);\r\n                    }).then(function () {\r\n                        complete(_this.models);\r\n                    });\r\n                }\r\n                else {\r\n                    complete(_this.models);\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Rebuild secondary indexes of a given table.\r\n     * Pass \"_ALL_\" as table to rebuild all indexes.\r\n     *\r\n     * @param {(time: number) => void} complete\r\n     * @memberof _NanoSQLStorage\r\n     */\r\n    _NanoSQLStorage.prototype.rebuildIndexes = function (table, complete) {\r\n        var _this = this;\r\n        var start = new Date().getTime();\r\n        utilities_1.fastALL(Object.keys(this.tableInfo), function (ta, k, tableDone) {\r\n            if ((table !== \"_ALL_\" && table !== ta) || ta.indexOf(\"_\") === 0) {\r\n                tableDone();\r\n                return;\r\n            }\r\n            var secondIndexes = _this.tableInfo[ta]._secondaryIndexes;\r\n            utilities_1.fastALL(secondIndexes, function (column, j, idxDone) {\r\n                var idxTable = \"_\" + ta + \"_idx_\" + column;\r\n                _this._secondaryIndexes[idxTable].idx = [];\r\n                _this._secondaryIndexes[idxTable].rows = {};\r\n                _this._secondaryIndexUpdates[idxTable] = [];\r\n                _this._drop(idxTable, idxDone);\r\n            }).then(function () {\r\n                var pk = _this.tableInfo[ta]._pk;\r\n                var indexGroups = {};\r\n                secondIndexes.forEach(function (column) {\r\n                    indexGroups[column] = {};\r\n                });\r\n                _this._read(ta, function (row, idx, done) {\r\n                    if (!row[pk]) {\r\n                        done(false);\r\n                        return;\r\n                    }\r\n                    secondIndexes.forEach(function (column) {\r\n                        if (!row[column]) {\r\n                            return;\r\n                        }\r\n                        if (!indexGroups[column][row[column]]) {\r\n                            indexGroups[column][row[column]] = [];\r\n                        }\r\n                        indexGroups[column][row[column]].push(row[pk]);\r\n                    });\r\n                    done(false);\r\n                    /*this._setSecondaryIndexes(ta, row[pk], row, [], () => {\r\n                        done(false);\r\n                    });*/\r\n                }, function () {\r\n                    utilities_1.fastALL(secondIndexes, function (item, i, done) {\r\n                        var idxTable = \"_\" + ta + \"_idx_\" + item;\r\n                        if (_this._doCache) {\r\n                            Object.keys(indexGroups[item]).forEach(function (rowKey, i) {\r\n                                _this._secondaryIndexUpdates[idxTable].push(rowKey);\r\n                                _this._secondaryIndexes[idxTable].idx.push(rowKey);\r\n                                _this._secondaryIndexes[idxTable].rows[rowKey] = { id: rowKey, rows: indexGroups[item][rowKey] };\r\n                            });\r\n                            done();\r\n                        }\r\n                        else {\r\n                            utilities_1.fastALL(Object.keys(indexGroups[item]), function (rowKey, i, next) {\r\n                                _this.adapterWrite(idxTable, rowKey, {\r\n                                    id: rowKey,\r\n                                    rows: indexGroups[item][rowKey].sort()\r\n                                }, next);\r\n                            }).then(done);\r\n                        }\r\n                    }).then(function () {\r\n                        tableDone();\r\n                    });\r\n                });\r\n            });\r\n        }).then(function () {\r\n            if (_this._doCache) {\r\n                _this._flushIndexes();\r\n            }\r\n            complete(new Date().getTime() - start);\r\n        });\r\n    };\r\n    /**\r\n     * Turn any js variable into a 32 character long primary key for secondary index tables.\r\n     *\r\n     * @internal\r\n     * @param {*} value\r\n     * @returns {(string|number)}\r\n     * @memberof _NanoSQLStorage\r\n     */\r\n    _NanoSQLStorage.prototype._secondaryIndexKey = function (value) {\r\n        if (utilities_1.isObject(value) || Array.isArray(value)) {\r\n            return JSON.stringify(value).substr(0, 12);\r\n        }\r\n        if (typeof value === \"number\") {\r\n            return value;\r\n        }\r\n        return String(value).substr(0, 32);\r\n    };\r\n    /**\r\n     * Use variouse methods to detect the best persistent storage method for the environment NanoSQL is in.\r\n     *\r\n     * @returns {string}\r\n     * @memberof _NanoSQLStorage\r\n     */\r\n    _NanoSQLStorage.prototype._detectStorageMethod = function () {\r\n        // NodeJS\r\n        if (typeof window === \"undefined\") {\r\n            return \"LVL\";\r\n        }\r\n        // Browser\r\n        // Safari / iOS always gets WebSQL (mobile and desktop)\r\n        if (utilities_1.isSafari) {\r\n            return \"WSQL\";\r\n        }\r\n        // everyone else (FF + Chrome + Edge + IE)\r\n        // check for support for indexed db, web workers and blob\r\n        if (typeof indexedDB !== \"undefined\") { // fall back to indexed db if we can\r\n            return \"IDB\";\r\n        }\r\n        // Use WebSQL if it's there.\r\n        if (typeof window !== \"undefined\" && typeof window.openDatabase !== \"undefined\") {\r\n            return \"WSQL\";\r\n        }\r\n        // nothing else works, we gotta do local storage. :(\r\n        return \"LS\";\r\n    };\r\n    /**\r\n     * Get rows from a table given the column and secondary index primary key to read from.\r\n     *\r\n     * valid conditions are: =, <, <=, >, >=\r\n     *\r\n     *\r\n     * @param {string} table\r\n     * @param {string} column\r\n     * @param {string} search\r\n     * @param {(rows: DBRow[]) => void} callback\r\n     * @memberof _NanoSQLStorage\r\n     */\r\n    _NanoSQLStorage.prototype._secondaryIndexRead = function (table, condition, column, search, callback) {\r\n        var _this = this;\r\n        var getSecondaryIndex = function (table, pks, cb) {\r\n            if (_this._doCache) {\r\n                cb(pks.map(function (pk) { return _this._secondaryIndexes[table].rows[pk]; }).filter(function (r) { return r; }));\r\n            }\r\n            else {\r\n                if (pks.length === 1) {\r\n                    _this.adapters[0].adapter.read(table, pks[0], function (row) {\r\n                        cb([row]);\r\n                    });\r\n                }\r\n                else {\r\n                    _this._read(table, pks, function (rows) {\r\n                        cb(rows);\r\n                    });\r\n                }\r\n            }\r\n        };\r\n        var getSecondaryIndexKeys = function (table, cb) {\r\n            if (_this._doCache) {\r\n                cb(_this._secondaryIndexes[table].idx);\r\n            }\r\n            else {\r\n                _this.adapters[0].adapter.getIndex(table, false, cb);\r\n            }\r\n        };\r\n        switch (condition) {\r\n            case \"=\":\r\n                getSecondaryIndex(\"_\" + table + \"_idx_\" + column, [this._secondaryIndexKey(search)], function (rows) {\r\n                    if (rows[0] !== undefined && rows[0] !== null) {\r\n                        _this._read(table, (rows[0][\"rows\"] || []), function (rows) {\r\n                            callback(rows);\r\n                        });\r\n                    }\r\n                    else {\r\n                        callback([]);\r\n                    }\r\n                });\r\n                break;\r\n            default:\r\n                getSecondaryIndexKeys(\"_\" + table + \"_idx_\" + column, function (index) {\r\n                    var searchVal = _this._secondaryIndexKey(search);\r\n                    var getPKs = index.filter(function (val) {\r\n                        switch (condition) {\r\n                            case \">\": return val > searchVal;\r\n                            case \">=\": return val >= searchVal;\r\n                            case \"<\": return val < searchVal;\r\n                            case \"<=\": return val <= searchVal;\r\n                        }\r\n                        return false;\r\n                    });\r\n                    if (!getPKs.length) {\r\n                        callback([]);\r\n                        return;\r\n                    }\r\n                    getSecondaryIndex(\"_\" + table + \"_idx_\" + column, getPKs, function (rows) {\r\n                        var rowPKs = [].concat.apply([], rows.map(function (r) { return r.rows; }));\r\n                        if (!rowPKs.length) {\r\n                            callback([]);\r\n                            return;\r\n                        }\r\n                        _this._read(table, rowPKs, function (rows) {\r\n                            callback(rows);\r\n                        });\r\n                    });\r\n                });\r\n        }\r\n    };\r\n    /**\r\n     * Get a range of rows from a given table.\r\n     * If usePKs is false the range is in limit/offset form where the from and to values are numbers indicating a range of rows to get.\r\n     * Otherwise the from and to values should be primary key values to get everything in between.\r\n     *\r\n     * @param {string} table\r\n     * @param {DBKey} from\r\n     * @param {DBKey} to\r\n     * @param {(rows: DBRow[]) => void} complete\r\n     * @memberof _NanoSQLStorage\r\n     */\r\n    _NanoSQLStorage.prototype._rangeRead = function (table, from, to, usePKs, complete) {\r\n        var rows = [];\r\n        this.adapters[0].adapter.rangeRead(table, function (row, idx, next) {\r\n            rows.push(row);\r\n            next();\r\n        }, function () {\r\n            complete(rows);\r\n        }, from, to, usePKs);\r\n    };\r\n    /**\r\n     * Full table scan if a function is passed in OR read an array of primary keys.\r\n     *\r\n     * @param {string} table\r\n     * @param {(row: DBRow, idx: number, toKeep: (result: boolean) => void) => void} query\r\n     * @param {(rows: DBRow[]) => void} callback\r\n     * @returns\r\n     * @memberof _NanoSQLStorage\r\n     */\r\n    _NanoSQLStorage.prototype._read = function (table, query, callback) {\r\n        var _this = this;\r\n        if (Array.isArray(query)) { // select by array of primary keys\r\n            var batchRead = this.adapters[0].adapter.batchRead;\r\n            if (batchRead) {\r\n                batchRead.apply(this.adapters[0].adapter, [table, query, callback]);\r\n            }\r\n            else {\r\n                // possibly (but not always) slower fallback\r\n                utilities_1.fastALL(query, function (q, i, result) {\r\n                    _this.adapters[0].adapter.read(table, q, result);\r\n                }).then(function (rows) {\r\n                    callback(rows.filter(function (r) { return r; }));\r\n                });\r\n            }\r\n            return;\r\n        }\r\n        var rows = [];\r\n        // full table scan\r\n        if (typeof query === \"function\") { // iterate through entire db, returning rows that return true on the function\r\n            this.adapters[0].adapter.rangeRead(table, function (row, idx, nextRow) {\r\n                query(row, idx, function (keep) {\r\n                    if (keep) {\r\n                        rows.push(row);\r\n                    }\r\n                    nextRow();\r\n                });\r\n            }, function () {\r\n                callback(rows);\r\n            });\r\n            return;\r\n        }\r\n    };\r\n    /**\r\n     * Get all values in a table where the column value matches against the given trie search value.\r\n     *\r\n     * @param {string} table\r\n     * @param {string} column\r\n     * @param {string} search\r\n     * @param {(rows: DBRow[] ) => void} callback\r\n     * @memberof _NanoSQLStorage\r\n     */\r\n    _NanoSQLStorage.prototype._trieRead = function (table, column, search, callback) {\r\n        var _this = this;\r\n        var words = this._trieIndexes[table][column].getPrefix(search);\r\n        utilities_1.fastALL(words, function (w, i, result) {\r\n            _this._secondaryIndexRead(table, \"=\", column, w, result);\r\n        }).then(function (arrayOfRows) {\r\n            callback([].concat.apply([], arrayOfRows));\r\n        });\r\n    };\r\n    /**\r\n     * Remove secondary index values of a specific row.\r\n     *\r\n     * @internal\r\n     * @param {string} table\r\n     * @param {DBKey} pk\r\n     * @param {DBRow} rowData\r\n     * @param {string[]} skipColumns\r\n     * @param {() => void} complete\r\n     * @memberof _NanoSQLStorage\r\n     */\r\n    _NanoSQLStorage.prototype._clearSecondaryIndexes = function (table, pk, rowData, doColumns, complete) {\r\n        var _this = this;\r\n        if (this._doCache) {\r\n            doColumns.forEach(function (idx) {\r\n                var idxTable = \"_\" + table + \"_idx_\" + idx;\r\n                var column = _this._secondaryIndexKey(rowData[idx]);\r\n                if (!_this._secondaryIndexUpdates[idxTable]) {\r\n                    _this._secondaryIndexUpdates[idxTable] = [];\r\n                }\r\n                if (_this._secondaryIndexUpdates[idxTable].indexOf(column) === -1) {\r\n                    _this._secondaryIndexUpdates[idxTable].push(column);\r\n                }\r\n                var index = _this._secondaryIndexes[idxTable].rows[column];\r\n                if (!index) {\r\n                    return;\r\n                }\r\n                var i = index.rows.indexOf(pk);\r\n                if (i === -1) {\r\n                    return;\r\n                }\r\n                var newRow = index || { id: column, rows: [] };\r\n                newRow.rows.splice(i, 1);\r\n                _this._secondaryIndexes[idxTable].rows[column] = newRow;\r\n            });\r\n            this._flushIndexes();\r\n            complete();\r\n        }\r\n        else {\r\n            utilities_1.fastALL(doColumns, function (idx, k, done) {\r\n                var column = _this._secondaryIndexKey(rowData[idx]);\r\n                var idxTable = \"_\" + table + \"_idx_\" + idx;\r\n                _this.adapters[0].adapter.read(idxTable, column, function (row) {\r\n                    if (!row) {\r\n                        done();\r\n                        return;\r\n                    }\r\n                    var i = row.rows.indexOf(pk);\r\n                    if (i === -1) {\r\n                        done();\r\n                        return;\r\n                    }\r\n                    var newRow = row ? Object.isFrozen(row) ? utilities_1._assign(row) : row : { id: column, rows: [] };\r\n                    newRow.rows.splice(i, 1);\r\n                    // newRow.rows = removeDuplicates(newRow.rows);\r\n                    _this.adapterWrite(idxTable, newRow.id, newRow, done);\r\n                });\r\n            }).then(complete);\r\n        }\r\n    };\r\n    /**\r\n     * Add secondary index values for a specific row.\r\n     *\r\n     * @internal\r\n     * @param {string} table\r\n     * @param {DBKey} pk\r\n     * @param {DBRow} rowData\r\n     * @param {string[]} skipColumns\r\n     * @param {() => void} complete\r\n     * @memberof _NanoSQLStorage\r\n     */\r\n    _NanoSQLStorage.prototype._setSecondaryIndexes = function (table, pk, rowData, doColumns, complete) {\r\n        var _this = this;\r\n        if (this._doCache) {\r\n            doColumns.forEach(function (col, i) {\r\n                var column = _this._secondaryIndexKey(rowData[col]);\r\n                if (typeof column === \"undefined\") {\r\n                    return;\r\n                }\r\n                if (_this._trieIndexes[table][col]) {\r\n                    _this._trieIndexes[table][col].addWord(String(rowData[col]));\r\n                }\r\n                var idxTable = \"_\" + table + \"_idx_\" + col;\r\n                if (!_this._secondaryIndexUpdates[idxTable]) {\r\n                    _this._secondaryIndexUpdates[idxTable] = [];\r\n                }\r\n                if (_this._secondaryIndexUpdates[idxTable].indexOf(column) === -1) {\r\n                    _this._secondaryIndexUpdates[idxTable].push(column);\r\n                }\r\n                var indexRow = _this._secondaryIndexes[idxTable].rows[column];\r\n                if (!indexRow) {\r\n                    indexRow = { id: column, rows: [] };\r\n                    if (_this._secondaryIndexes[idxTable].sortIdx) {\r\n                        var pos = utilities_1.binarySearch(_this._secondaryIndexes[idxTable].idx, column);\r\n                        _this._secondaryIndexes[idxTable].idx.splice(pos, 0, column);\r\n                    }\r\n                    else {\r\n                        _this._secondaryIndexes[idxTable].idx.push(column);\r\n                    }\r\n                }\r\n                indexRow.rows.push(pk);\r\n                _this._secondaryIndexes[idxTable].rows[column] = indexRow;\r\n            });\r\n            this._flushIndexes();\r\n            if (complete)\r\n                complete();\r\n        }\r\n        else {\r\n            utilities_1.fastALL(doColumns, function (col, i, done) {\r\n                var column = _this._secondaryIndexKey(rowData[col]);\r\n                if (typeof column === \"undefined\") {\r\n                    done();\r\n                    return;\r\n                }\r\n                if (_this._trieIndexes[table][col]) {\r\n                    _this._trieIndexes[table][col].addWord(String(rowData[col]));\r\n                }\r\n                var idxTable = \"_\" + table + \"_idx_\" + col;\r\n                _this.adapters[0].adapter.read(idxTable, column, function (row) {\r\n                    var indexRow = row ? (Object.isFrozen(row) ? utilities_1._assign(row) : row) : { id: column, rows: [] };\r\n                    indexRow.rows.push(pk);\r\n                    // indexRow.rows.sort();\r\n                    // indexRow.rows = removeDuplicates(indexRow.rows);\r\n                    _this.adapterWrite(idxTable, column, indexRow, done);\r\n                });\r\n            }).then(function () {\r\n                if (complete)\r\n                    complete();\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Write a row to the database\r\n     *\r\n     * @param {string} table\r\n     * @param {DBKey} pk\r\n     * @param {*} oldRow\r\n     * @param {DBRow} newRow\r\n     * @param {(row: DBRow) => void} complete\r\n     * @memberof _NanoSQLStorage\r\n     */\r\n    _NanoSQLStorage.prototype._write = function (table, pk, oldRow, newRow, complete) {\r\n        var _this = this;\r\n        if (!oldRow) { // new row\r\n            this.adapterWrite(table, pk, newRow, function (row) {\r\n                if (_this.tableInfo[table]._secondaryIndexes.length) {\r\n                    _this._setSecondaryIndexes(table, row[_this.tableInfo[table]._pk], newRow, _this.tableInfo[table]._secondaryIndexes, function () {\r\n                        complete(row);\r\n                    });\r\n                }\r\n                else {\r\n                    complete(row);\r\n                }\r\n            });\r\n        }\r\n        else { // existing row\r\n            var setRow_1 = __assign({}, oldRow, newRow, (_a = {}, _a[this.tableInfo[table]._pk] = pk, _a));\r\n            var doColumns_1 = this.tableInfo[table]._secondaryIndexes.filter(function (col) { return Object.keys(setRow_1).filter(function (key) {\r\n                return setRow_1[key] === oldRow[key];\r\n            }).indexOf(col) === -1; });\r\n            if (this.tableInfo[table]._secondaryIndexes.length) {\r\n                utilities_1.fastALL([0, 1, 2], function (idx, i, next) {\r\n                    switch (idx) {\r\n                        case 0:\r\n                            _this._clearSecondaryIndexes(table, pk, oldRow, doColumns_1, next);\r\n                            break;\r\n                        case 1:\r\n                            _this._setSecondaryIndexes(table, pk, setRow_1, doColumns_1, next);\r\n                            break;\r\n                        case 2:\r\n                            _this.adapterWrite(table, pk, setRow_1, next);\r\n                            break;\r\n                    }\r\n                }).then(function (results) {\r\n                    complete(results[2]);\r\n                });\r\n            }\r\n            else {\r\n                this.adapterWrite(table, pk, setRow_1, function (row) {\r\n                    complete(row);\r\n                });\r\n            }\r\n        }\r\n        var _a;\r\n    };\r\n    /**\r\n     * Delete a specific row from the database.\r\n     *\r\n     * @param {string} table\r\n     * @param {DBKey} pk\r\n     * @param {(row: DBRow) => void} complete\r\n     * @memberof _NanoSQLStorage\r\n     */\r\n    _NanoSQLStorage.prototype._delete = function (table, pk, complete) {\r\n        var _this = this;\r\n        if (!pk) {\r\n            throw new Error(\"nSQL: Can't delete without a primary key!\");\r\n        }\r\n        else {\r\n            // update secondary indexes\r\n            this.adapters[0].adapter.read(table, pk, function (row) {\r\n                utilities_1.fastALL([0, 1], function (job, ii, next) {\r\n                    switch (job) {\r\n                        case 0:\r\n                            _this._clearSecondaryIndexes(table, pk, row, _this.tableInfo[table]._secondaryIndexes, next);\r\n                            break;\r\n                        case 1:\r\n                            _this.adapterDelete(table, pk, next);\r\n                            break;\r\n                    }\r\n                }).then(function () {\r\n                    complete(row);\r\n                });\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Drop entire table from the database.\r\n     *\r\n     * @param {string} table\r\n     * @param {() => void} complete\r\n     * @memberof _NanoSQLStorage\r\n     */\r\n    _NanoSQLStorage.prototype._drop = function (table, complete) {\r\n        var _this = this;\r\n        // drop token and hash search cache\r\n        var tablesToDrop = Object.keys(this.tableInfo[table]._searchColumns).map(function (t) { return \"_\" + table + \"_search_tokens_\" + t; });\r\n        tablesToDrop = tablesToDrop.concat(Object.keys(this.tableInfo[table]._searchColumns).map(function (t) { return \"_\" + table + \"_search_\" + t; }));\r\n        tablesToDrop = tablesToDrop.concat(Object.keys(this.tableInfo[table]._searchColumns).map(function (t) { return \"_\" + table + \"_search_fuzzy_\" + t; }));\r\n        // drop secondary indexes\r\n        var secondaryIdxs = this.tableInfo[table]._secondaryIndexes.map(function (t) { return \"_\" + table + \"_idx_\" + t; });\r\n        tablesToDrop = tablesToDrop.concat(secondaryIdxs);\r\n        if (this._doCache) {\r\n            secondaryIdxs.forEach(function (idxTable) {\r\n                _this._secondaryIndexes[idxTable].idx = [];\r\n                _this._secondaryIndexes[idxTable].rows = {};\r\n            });\r\n        }\r\n        utilities_1.fastALL(tablesToDrop, function (table, i, done) {\r\n            _this.adapterDrop(table, done);\r\n        }).then(function () {\r\n            _this._trieIndexes[table] = {};\r\n            _this.tableInfo[table]._trieColumns.forEach(function (co) {\r\n                _this._trieIndexes[table][co] = new prefix_trie_ts_1.Trie([]);\r\n            });\r\n            _this.adapterDrop(table, complete);\r\n        });\r\n    };\r\n    /**\r\n     * Find secondary indexes and automatically generate an index table for each.\r\n     *\r\n     * @internal\r\n     * @param {StdObject<DataModel[]>} dataModels\r\n     * @returns\r\n     * @memberof NanoSQLStorage\r\n     */\r\n    _NanoSQLStorage.prototype._createIndexTables = function (dataModels) {\r\n        Object.keys(dataModels).forEach(function (table) {\r\n            var hasIDX = false;\r\n            var hasSearch = false;\r\n            var pkType = \"\";\r\n            dataModels[table].forEach(function (model) {\r\n                if (model.props && model.props.length) {\r\n                    if (utilities_1.intersect([\"pk\", \"pk()\"], model.props)) {\r\n                        pkType = model.key;\r\n                    }\r\n                    if (utilities_1.intersect([\"trie\", \"idx\", \"idx()\", \"trie()\"], model.props)) {\r\n                        hasIDX = true;\r\n                        var isNumber = [\"number\", \"float\", \"int\"].indexOf(model.type) !== -1;\r\n                        dataModels[\"_\" + table + \"_idx_\" + model.key] = [\r\n                            { key: \"id\", type: isNumber ? model.type : \"string\", props: [\"pk\"] },\r\n                            { key: \"rows\", type: \"any[]\" }\r\n                        ];\r\n                    }\r\n                    model.props.forEach(function (prop) {\r\n                        if (prop.indexOf(\"search(\") !== -1) {\r\n                            hasSearch = true;\r\n                            dataModels[\"_\" + table + \"_search_\" + model.key] = [\r\n                                { key: \"wrd\", type: \"string\", props: [\"pk\", \"ns\"] },\r\n                                { key: \"rows\", type: \"any[]\" }\r\n                            ];\r\n                            dataModels[\"_\" + table + \"_search_fuzzy_\" + model.key] = [\r\n                                { key: \"wrd\", type: \"string\", props: [\"pk\", \"ns\"] },\r\n                                { key: \"rows\", type: \"any[]\" }\r\n                            ];\r\n                            dataModels[\"_\" + table + \"_search_tokens_\" + model.key] = [\r\n                                { key: \"id\", type: pkType, props: [\"pk\", \"ns\"] },\r\n                                { key: \"hash\", type: \"string\" },\r\n                                { key: \"tokens\", type: \"any[]\" }\r\n                            ];\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n            if ((hasIDX || hasSearch) && !pkType) {\r\n                throw new Error(\"nSQL: Tables with secondary indexes or search() must have a primary key!\");\r\n            }\r\n        });\r\n        return dataModels;\r\n    };\r\n    /**\r\n     * Generate the data needed to manage each table in the database\r\n     *\r\n     * @internal\r\n     * @param {string} tableName\r\n     * @param {DataModel[]} dataModels\r\n     * @returns {string}\r\n     * @memberof NanoSQLStorage\r\n     */\r\n    _NanoSQLStorage.prototype._newTable = function (tableName, dataModels) {\r\n        var _this = this;\r\n        this.tableInfo[tableName] = {\r\n            _pk: \"\",\r\n            _pkType: \"\",\r\n            _keys: [],\r\n            _defaults: [],\r\n            _secondaryIndexes: [],\r\n            _hasDefaults: false,\r\n            _trieColumns: [],\r\n            _name: tableName,\r\n            _views: {},\r\n            _viewTables: [],\r\n            _searchColumns: {}\r\n        };\r\n        this._cache[tableName] = {};\r\n        this._trieIndexes[tableName] = {};\r\n        this.adapters.forEach(function (a) {\r\n            a.adapter.makeTable(tableName, dataModels);\r\n        });\r\n        // Discover primary keys for each table\r\n        var i = this.models[tableName].length;\r\n        var _loop_2 = function () {\r\n            var p = this_1.models[tableName][i];\r\n            this_1.tableInfo[tableName]._keys.unshift(p.key);\r\n            if (p.default !== undefined) {\r\n                this_1.tableInfo[tableName]._defaults[p.key] = p.default;\r\n                this_1.tableInfo[tableName]._hasDefaults = true;\r\n            }\r\n            if (p.props && p.props.length) {\r\n                var is2ndIndex_1 = false;\r\n                p.props.forEach(function (prop) {\r\n                    if (prop.indexOf(\"from=>\") !== -1) {\r\n                        _this._hasViews = true;\r\n                        var table = p.type;\r\n                        if (prop !== \"from=>GHOST\" && prop !== \"from=>LIVE\") {\r\n                            // prop is \"from=>table.column\"\r\n                            table = prop.replace(\"from=>\", \"\").split(\".\").shift();\r\n                        }\r\n                        if (!_this.tableInfo[tableName]._views[table]) {\r\n                            _this.tableInfo[tableName]._views[table] = {\r\n                                pkColumn: \"\",\r\n                                mode: \"\",\r\n                                columns: []\r\n                            };\r\n                        }\r\n                        if (prop === \"from=>GHOST\" || prop === \"from=>LIVE\") {\r\n                            is2ndIndex_1 = true;\r\n                            _this.tableInfo[tableName]._views[table].pkColumn = p.key;\r\n                            _this.tableInfo[tableName]._views[table].mode = prop.replace(\"from=>\", \"\");\r\n                        }\r\n                        else {\r\n                            _this.tableInfo[tableName]._views[table].columns.push({\r\n                                thisColumn: p.key,\r\n                                otherColumn: prop.replace(\"from=>\", \"\").split(\".\").pop()\r\n                            });\r\n                        }\r\n                    }\r\n                    if (prop.indexOf(\"search(\") === 0) {\r\n                        _this.tableInfo[tableName]._searchColumns[p.key] = prop.replace(/search\\((.*)\\)/gmi, \"$1\").split(\",\").map(function (c) { return c.trim(); });\r\n                    }\r\n                });\r\n                // Check for primary key\r\n                if (utilities_1.intersect([\"pk\", \"pk()\"], p.props)) {\r\n                    this_1.tableInfo[tableName]._pk = p.key;\r\n                    this_1.tableInfo[tableName]._pkType = p.type;\r\n                }\r\n                // Check for secondary indexes\r\n                if (utilities_1.intersect([\"trie\", \"idx\", \"idx()\", \"trie()\"], p.props) || is2ndIndex_1) {\r\n                    this_1.tableInfo[tableName]._secondaryIndexes.push(p.key);\r\n                    this_1._secondaryIndexes[\"_\" + tableName + \"_idx_\" + p.key] = { idx: [], rows: [], sortIdx: [\"number\", \"int\", \"float\"].indexOf(p.type) !== -1 };\r\n                }\r\n                // Check for trie indexes\r\n                if (utilities_1.intersect([\"trie\", \"trie()\"], p.props)) {\r\n                    this_1.tableInfo[tableName]._trieColumns.push(p.key);\r\n                    this_1._trieIndexes[tableName][p.key] = new prefix_trie_ts_1.Trie([]);\r\n                }\r\n            }\r\n        };\r\n        var this_1 = this;\r\n        while (i--) {\r\n            _loop_2();\r\n        }\r\n        return tableName;\r\n    };\r\n    _NanoSQLStorage.prototype.adapterRead = function (table, pk, complete, queue) {\r\n        this.adapters[0].adapter.read(table, pk, function (row) {\r\n            complete(row);\r\n        });\r\n    };\r\n    _NanoSQLStorage.prototype.adapterWrite = function (table, pk, data, complete, error) {\r\n        var result;\r\n        utilities_1.fastALL(this.adapters, function (a, i, done) {\r\n            if (a.waitForWrites) {\r\n                a.adapter.write(table, pk, data, function (row) {\r\n                    result = row;\r\n                    done();\r\n                });\r\n            }\r\n            else {\r\n                done();\r\n                a.adapter.write(table, pk, data, function (row) { });\r\n            }\r\n        }).then(function () {\r\n            complete(result);\r\n        }).catch(function (err) {\r\n            if (error)\r\n                error(err);\r\n        });\r\n    };\r\n    _NanoSQLStorage.prototype.adapterDelete = function (table, pk, complete, error) {\r\n        utilities_1.fastALL(this.adapters, function (a, i, done) {\r\n            if (a.waitForWrites) {\r\n                a.adapter.delete(table, pk, function () {\r\n                    done();\r\n                });\r\n            }\r\n            else {\r\n                done();\r\n                a.adapter.delete(table, pk, function () { });\r\n            }\r\n        }).then(function () {\r\n            complete();\r\n        }).catch(function (err) {\r\n            if (error)\r\n                error(err);\r\n        });\r\n    };\r\n    _NanoSQLStorage.prototype.adapterDrop = function (table, complete, error) {\r\n        utilities_1.fastALL(this.adapters, function (a, i, done) {\r\n            if (a.waitForWrites) {\r\n                a.adapter.drop(table, function () {\r\n                    done();\r\n                });\r\n            }\r\n            else {\r\n                done();\r\n                a.adapter.drop(table, function () { });\r\n            }\r\n        }).then(function () {\r\n            complete();\r\n        }).catch(function (err) {\r\n            if (error)\r\n                error(err);\r\n        });\r\n    };\r\n    return _NanoSQLStorage;\r\n}());\r\nexports._NanoSQLStorage = _NanoSQLStorage;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/nano-sql/lib/database/storage.js\n// module id = 187\n// module chunks = 0","Object.defineProperty(exports, \"__esModule\", { value: true });\r\nvar config = {\r\n    END_WORD: \"$\",\r\n    PERMS_MIN_LEN: 2,\r\n};\r\nvar Trie = (function () {\r\n    function Trie(input) {\r\n        this._trie = Trie._create(input);\r\n    }\r\n    Trie.prototype.getIndex = function () {\r\n        return this._trie;\r\n    };\r\n    Trie.prototype.setIndex = function (trie) {\r\n        this._trie = trie;\r\n    };\r\n    Trie.prototype.addWord = function (word) {\r\n        var reducer = function (previousValue, currentValue, currentIndex, array) {\r\n            return Trie._append(previousValue, currentValue, currentIndex, array);\r\n        };\r\n        var input = word.toLowerCase().split(\"\");\r\n        input.reduce(reducer, this._trie);\r\n        return this;\r\n    };\r\n    Trie.prototype.removeWord = function (word) {\r\n        var _a = Trie._checkPrefix(this._trie, word), prefixFound = _a.prefixFound, prefixNode = _a.prefixNode;\r\n        if (prefixFound) {\r\n            delete prefixNode[config.END_WORD];\r\n        }\r\n        return this;\r\n    };\r\n    Trie.prototype.getWords = function () {\r\n        return Trie._recursePrefix(this._trie, '');\r\n    };\r\n    Trie.prototype.getPrefix = function (strPrefix) {\r\n        strPrefix = strPrefix.toLowerCase();\r\n        if (!this._isPrefix(strPrefix)) {\r\n            return [];\r\n        }\r\n        var prefixNode = Trie._checkPrefix(this._trie, strPrefix).prefixNode;\r\n        return Trie._recursePrefix(prefixNode, strPrefix);\r\n    };\r\n    Trie.prototype._isPrefix = function (prefix) {\r\n        var prefixFound = Trie._checkPrefix(this._trie, prefix).prefixFound;\r\n        return prefixFound;\r\n    };\r\n    Trie._append = function (trie, letter, index, array) {\r\n        trie[letter] = trie[letter] || {};\r\n        trie = trie[letter];\r\n        if (index === array.length - 1) {\r\n            trie[config.END_WORD] = 1;\r\n        }\r\n        return trie;\r\n    };\r\n    Trie._checkPrefix = function (prefixNode, prefix) {\r\n        var input = prefix.toLowerCase().split(\"\");\r\n        var prefixFound = input.every(function (letter, index) {\r\n            if (!prefixNode[letter]) {\r\n                return false;\r\n            }\r\n            return prefixNode = prefixNode[letter];\r\n        });\r\n        return {\r\n            prefixFound: prefixFound,\r\n            prefixNode: prefixNode,\r\n        };\r\n    };\r\n    Trie._create = function (input) {\r\n        var trie = (input || []).reduce(function (accumulator, item) {\r\n            item\r\n                .toLowerCase()\r\n                .split(\"\")\r\n                .reduce(Trie._append, accumulator);\r\n            return accumulator;\r\n        }, {});\r\n        return trie;\r\n    };\r\n    Trie._recursePrefix = function (node, prefix, prefixes) {\r\n        if (prefixes === void 0) { prefixes = []; }\r\n        var word = prefix;\r\n        for (var branch in node) {\r\n            if (branch === config.END_WORD) {\r\n                prefixes.push(word);\r\n                word = \"\";\r\n            }\r\n            Trie._recursePrefix(node[branch], prefix + branch, prefixes);\r\n        }\r\n        return prefixes.sort();\r\n    };\r\n    return Trie;\r\n}());\r\nexports.Trie = Trie;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/prefix-trie-ts/node/index.js\n// module id = 188\n// module chunks = 0","var __assign = (this && this.__assign) || Object.assign || function(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n            t[p] = s[p];\r\n    }\r\n    return t;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar lie_ts_1 = require(\"lie-ts\");\r\nvar utilities_1 = require(\"../utilities\");\r\nvar db_idx_1 = require(\"./db-idx\");\r\n/**\r\n * Handles all available syncronous versions of storage (memory and localstorage)\r\n *\r\n * @export\r\n * @class _SyncStore\r\n * @implements {NanoSQLStorageAdapter}\r\n */\r\n// tslint:disable-next-line\r\nvar _SyncStore = /** @class */ (function () {\r\n    function _SyncStore(useLocalStorage) {\r\n        this._pkKey = {};\r\n        this._rows = {};\r\n        this._dbIndex = {};\r\n        this._ls = useLocalStorage || false;\r\n    }\r\n    _SyncStore.prototype.connect = function (complete) {\r\n        complete();\r\n    };\r\n    _SyncStore.prototype.setID = function (id) {\r\n        this._id = id;\r\n    };\r\n    _SyncStore.prototype.makeTable = function (tableName, dataModels) {\r\n        var _this = this;\r\n        this._rows[tableName] = {};\r\n        this._dbIndex[tableName] = new db_idx_1.DatabaseIndex();\r\n        dataModels.forEach(function (d) {\r\n            if (d.props && utilities_1.intersect([\"pk\", \"pk()\"], d.props)) {\r\n                _this._dbIndex[tableName].pkType = d.type;\r\n                _this._pkKey[tableName] = d.key;\r\n                if (d.props && utilities_1.intersect([\"ai\", \"ai()\"], d.props) && (d.type === \"int\" || d.type === \"number\")) {\r\n                    _this._dbIndex[tableName].doAI = true;\r\n                }\r\n                if (d.props && utilities_1.intersect([\"ns\", \"ns()\"], d.props) || [\"uuid\", \"timeId\", \"timeIdms\"].indexOf(_this._dbIndex[tableName].pkType) !== -1) {\r\n                    _this._dbIndex[tableName].sortIndex = false;\r\n                }\r\n                if (_this._ls) {\r\n                    var index = localStorage.getItem(_this._id + \"*\" + tableName + \"_idx\");\r\n                    if (index) {\r\n                        _this._dbIndex[tableName].set(JSON.parse(index));\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    };\r\n    _SyncStore.prototype.write = function (table, pk, data, complete) {\r\n        pk = pk || utilities_1.generateID(this._dbIndex[table].pkType, this._dbIndex[table].ai);\r\n        if (!pk) {\r\n            throw new Error(\"nSQL: Can't add a row without a primary key!\");\r\n        }\r\n        if (this._dbIndex[table].indexOf(pk) === -1) {\r\n            this._dbIndex[table].add(pk);\r\n            if (this._ls) {\r\n                localStorage.setItem(this._id + \"*\" + table + \"_idx\", JSON.stringify(this._dbIndex[table].keys()));\r\n            }\r\n        }\r\n        if (this._ls) {\r\n            var r = __assign({}, data, (_a = {}, _a[this._pkKey[table]] = pk, _a));\r\n            localStorage.setItem(this._id + \"*\" + table + \"__\" + pk, JSON.stringify(r));\r\n            complete(r);\r\n        }\r\n        else {\r\n            var r = __assign({}, data, (_b = {}, _b[this._pkKey[table]] = pk, _b));\r\n            this._rows[table][pk] = utilities_1.deepFreeze(r);\r\n            complete(r);\r\n        }\r\n        var _a, _b;\r\n    };\r\n    _SyncStore.prototype.delete = function (table, pk, complete) {\r\n        var idx = this._dbIndex[table].indexOf(pk);\r\n        if (idx !== -1) {\r\n            this._dbIndex[table].remove(pk);\r\n            if (this._ls) {\r\n                localStorage.setItem(this._id + \"*\" + table + \"_idx\", JSON.stringify(this._dbIndex[table].keys()));\r\n            }\r\n        }\r\n        if (this._ls) {\r\n            localStorage.removeItem(this._id + \"*\" + table + \"__\" + pk);\r\n        }\r\n        else {\r\n            delete this._rows[table][pk];\r\n        }\r\n        complete();\r\n    };\r\n    _SyncStore.prototype.read = function (table, pk, callback) {\r\n        if (this._ls) {\r\n            var r = localStorage.getItem(this._id + \"*\" + table + \"__\" + pk);\r\n            callback(r ? JSON.parse(r) : undefined);\r\n        }\r\n        else {\r\n            callback(this._rows[table][pk]);\r\n        }\r\n    };\r\n    _SyncStore.prototype.rangeRead = function (table, rowCallback, complete, from, to, usePK) {\r\n        var _this = this;\r\n        var keys = this._dbIndex[table].keys();\r\n        var usefulValues = [typeof from, typeof to].indexOf(\"undefined\") === -1;\r\n        var ranges = usefulValues ? [from, to] : [0, keys.length - 1];\r\n        if (!keys.length) {\r\n            complete();\r\n            return;\r\n        }\r\n        if (this._dbIndex[table].sortIndex === false) {\r\n            keys = keys.sort();\r\n        }\r\n        if (usePK && usefulValues) {\r\n            ranges = ranges.map(function (r) {\r\n                var idxOf = _this._dbIndex[table].indexOf(r);\r\n                return idxOf !== -1 ? idxOf : _this._dbIndex[table].getLocation(r);\r\n            });\r\n        }\r\n        var idx = ranges[0];\r\n        var i = 0;\r\n        var rowDone = function () {\r\n            idx++;\r\n            i++;\r\n            i % 500 === 0 ? lie_ts_1.setFast(getRow) : getRow(); // handle maximum call stack error\r\n        };\r\n        var getRow = function () {\r\n            if (idx <= ranges[1]) {\r\n                if (_this._ls) {\r\n                    var r = localStorage.getItem(_this._id + \"*\" + table + \"__\" + keys[idx]);\r\n                    rowCallback(r ? JSON.parse(r) : undefined, idx, rowDone);\r\n                }\r\n                else {\r\n                    rowCallback(_this._rows[table][keys[idx]], idx, rowDone);\r\n                }\r\n            }\r\n            else {\r\n                complete();\r\n            }\r\n        };\r\n        getRow();\r\n    };\r\n    _SyncStore.prototype.drop = function (table, callback) {\r\n        var _this = this;\r\n        if (this._ls) {\r\n            localStorage.setItem(this._id + \"*\" + table + \"_idx\", JSON.stringify([]));\r\n            this._dbIndex[table].keys().forEach(function (key) {\r\n                localStorage.removeItem(_this._id + \"*\" + table + \"__\" + key);\r\n            });\r\n        }\r\n        else {\r\n            this._rows[table] = {};\r\n        }\r\n        this._dbIndex[table] = this._dbIndex[table].clone();\r\n        callback();\r\n    };\r\n    _SyncStore.prototype.getIndex = function (table, getLength, complete) {\r\n        complete(getLength ? this._dbIndex[table].keys().length : this._dbIndex[table].keys());\r\n    };\r\n    _SyncStore.prototype.destroy = function (complete) {\r\n        var _this = this;\r\n        utilities_1.fastALL(Object.keys(this._dbIndex), function (table, i, done) {\r\n            _this.drop(table, done);\r\n        }).then(complete);\r\n    };\r\n    _SyncStore.prototype.setNSQL = function (nSQL) {\r\n        db_idx_1.syncPeerIndex(nSQL, this._dbIndex);\r\n    };\r\n    return _SyncStore;\r\n}());\r\nexports._SyncStore = _SyncStore;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/nano-sql/lib/database/adapter-sync.js\n// module id = 189\n// module chunks = 0","var __assign = (this && this.__assign) || Object.assign || function(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n            t[p] = s[p];\r\n    }\r\n    return t;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar lie_ts_1 = require(\"lie-ts\");\r\nvar utilities_1 = require(\"../utilities\");\r\nvar db_idx_1 = require(\"./db-idx\");\r\n/**\r\n * Handles IndexedDB with and without web workers.\r\n * Uses blob worker OR eval()s the worker and uses it inline.\r\n *\r\n * @export\r\n * @class _IndexedDBStore\r\n * @implements {NanoSQLStorageAdapter}\r\n */\r\n// tslint:disable-next-line\r\nvar _IndexedDBStore = /** @class */ (function () {\r\n    function _IndexedDBStore() {\r\n        this._pkKey = {};\r\n        this._dbIndex = {};\r\n        this._dataModels = {};\r\n    }\r\n    _IndexedDBStore.prototype.onError = function (ev) {\r\n        console.error(ev);\r\n        throw new Error(\"nSQL: IndexedDB Error!\");\r\n    };\r\n    _IndexedDBStore.prototype.connect = function (complete) {\r\n        var _this = this;\r\n        this._modelHash = utilities_1.hash(JSON.stringify(this._dataModels));\r\n        var version = parseInt(localStorage.getItem(this._id + \"-idb-version\") || \"\") || 1;\r\n        var modelHash = localStorage.getItem(this._id + \"-idb-hash\") || this._modelHash;\r\n        if (modelHash !== this._modelHash) {\r\n            version++;\r\n        }\r\n        localStorage.setItem(this._id + \"-idb-version\", String(version));\r\n        localStorage.setItem(this._id + \"-idb-hash\", this._modelHash);\r\n        var idb = indexedDB.open(this._id, version);\r\n        var idxes = {};\r\n        idb.onerror = this.onError;\r\n        // Called only when there is no existing DB, creates the tables and data store.\r\n        // Sets indexes as empty arrays.\r\n        idb.onupgradeneeded = function (event) {\r\n            _this._db = event.target.result;\r\n            Object.keys(_this._dbIndex).forEach(function (table) {\r\n                if (!_this._db.objectStoreNames.contains(table)) {\r\n                    _this._db.createObjectStore(table, { keyPath: _this._pkKey[table] });\r\n                }\r\n                idxes[table] = [];\r\n            });\r\n        };\r\n        // Called once the database is connected and working\r\n        // If an onupgrade wasn't called it's an existing DB, so we import indexes\r\n        idb.onsuccess = function (event) {\r\n            _this._db = event.target.result;\r\n            var getIDBIndex = function (tName, callBack) {\r\n                var items = [];\r\n                _this.store(tName, \"readonly\", function (transaction, store) {\r\n                    var cursorRequest = store.openCursor();\r\n                    cursorRequest.onsuccess = function (evt) {\r\n                        var cursor = evt.target.result;\r\n                        if (cursor) {\r\n                            items.push(cursor.key);\r\n                            cursor.continue();\r\n                        }\r\n                    };\r\n                    cursorRequest.onerror = _this.onError;\r\n                    transaction.oncomplete = function () {\r\n                        callBack(items);\r\n                    };\r\n                });\r\n            };\r\n            utilities_1.fastALL(Object.keys(_this._dbIndex), function (table, i, tDone) {\r\n                getIDBIndex(table, function (index) {\r\n                    _this._dbIndex[table].set(index);\r\n                    tDone();\r\n                });\r\n            }).then(function () {\r\n                complete();\r\n            });\r\n        };\r\n    };\r\n    _IndexedDBStore.prototype.store = function (table, type, open) {\r\n        var transaction = this._db.transaction(table, type);\r\n        transaction.onabort = this.onError;\r\n        transaction.onerror = this.onError;\r\n        open(transaction, transaction.objectStore(table));\r\n    };\r\n    _IndexedDBStore.prototype.setID = function (id) {\r\n        this._id = id;\r\n    };\r\n    _IndexedDBStore.prototype.makeTable = function (tableName, dataModels) {\r\n        var _this = this;\r\n        this._dbIndex[tableName] = new db_idx_1.DatabaseIndex();\r\n        this._dataModels[tableName] = dataModels;\r\n        dataModels.forEach(function (d) {\r\n            if (d.props && utilities_1.intersect([\"pk\", \"pk()\"], d.props)) {\r\n                _this._dbIndex[tableName].pkType = d.type;\r\n                _this._pkKey[tableName] = d.key;\r\n                if (d.props && utilities_1.intersect([\"ai\", \"ai()\"], d.props) && (d.type === \"int\" || d.type === \"number\")) {\r\n                    _this._dbIndex[tableName].doAI = true;\r\n                }\r\n                if (d.props && utilities_1.intersect([\"ns\", \"ns()\"], d.props) || [\"uuid\", \"timeId\", \"timeIdms\"].indexOf(_this._dbIndex[tableName].pkType) !== -1) {\r\n                    _this._dbIndex[tableName].sortIndex = false;\r\n                }\r\n            }\r\n        });\r\n    };\r\n    _IndexedDBStore.prototype.write = function (table, pk, data, complete) {\r\n        var _this = this;\r\n        pk = pk || utilities_1.generateID(this._dbIndex[table].pkType, this._dbIndex[table].ai);\r\n        if (!pk) {\r\n            throw new Error(\"nSQL: Can't add a row without a primary key!\");\r\n        }\r\n        if (this._dbIndex[table].indexOf(pk) === -1) {\r\n            this._dbIndex[table].add(pk);\r\n        }\r\n        var r = __assign({}, data, (_a = {}, _a[this._pkKey[table]] = pk, _a));\r\n        this.store(table, \"readwrite\", function (transaction, store) {\r\n            var req = store.put(r);\r\n            req.onerror = _this.onError;\r\n            req.onsuccess = function (e) {\r\n                complete(r);\r\n            };\r\n        });\r\n        var _a;\r\n    };\r\n    _IndexedDBStore.prototype.delete = function (table, pk, complete) {\r\n        var _this = this;\r\n        var idx = this._dbIndex[table].indexOf(pk);\r\n        if (idx !== -1) {\r\n            this._dbIndex[table].remove(pk);\r\n        }\r\n        this.store(table, \"readwrite\", function (transaction, store) {\r\n            var req = (pk === \"_clear_\") ? store.clear() : store.delete(pk);\r\n            req.onerror = _this.onError;\r\n            req.onsuccess = function (e) {\r\n                complete();\r\n            };\r\n        });\r\n    };\r\n    _IndexedDBStore.prototype.read = function (table, pk, callback) {\r\n        var _this = this;\r\n        if (this._dbIndex[table].indexOf(pk) === -1) {\r\n            callback(null);\r\n            return;\r\n        }\r\n        this.store(table, \"readonly\", function (transaction, store) {\r\n            var singleReq = store.get(pk);\r\n            singleReq.onerror = _this.onError;\r\n            singleReq.onsuccess = function () {\r\n                callback(singleReq.result);\r\n            };\r\n        });\r\n    };\r\n    _IndexedDBStore.prototype.rangeRead = function (table, rowCallback, complete, from, to, usePK) {\r\n        var _this = this;\r\n        var keys = this._dbIndex[table].keys();\r\n        var usefulValues = [typeof from, typeof to].indexOf(\"undefined\") === -1;\r\n        var ranges = usefulValues ? [from, to] : [0, keys.length - 1];\r\n        if (!keys.length) {\r\n            complete();\r\n            return;\r\n        }\r\n        if (this._dbIndex[table].sortIndex === false) {\r\n            keys = keys.sort();\r\n        }\r\n        var lower = usePK && usefulValues ? from : keys[ranges[0]];\r\n        var higher = usePK && usefulValues ? to : keys[ranges[1]];\r\n        this.store(table, \"readonly\", function (transaction, store) {\r\n            var rows = [];\r\n            var cursorRequest = usefulValues ? store.openCursor(IDBKeyRange.bound(lower, higher)) : store.openCursor();\r\n            transaction.oncomplete = function (e) {\r\n                var i = 0;\r\n                var getRow = function () {\r\n                    if (rows[i]) {\r\n                        rowCallback(rows[i], i, function () {\r\n                            i++;\r\n                            i % 500 === 0 ? lie_ts_1.setFast(getRow) : getRow(); // handle maximum call stack error\r\n                        });\r\n                    }\r\n                    else {\r\n                        complete();\r\n                    }\r\n                };\r\n                getRow();\r\n            };\r\n            cursorRequest.onsuccess = function (evt) {\r\n                var cursor = evt.target.result;\r\n                if (cursor) {\r\n                    rows.push(cursor.value);\r\n                    cursor.continue();\r\n                }\r\n            };\r\n            cursorRequest.onerror = _this.onError;\r\n        });\r\n    };\r\n    _IndexedDBStore.prototype.drop = function (table, callback) {\r\n        this._dbIndex[table] = this._dbIndex[table].clone();\r\n        this.delete(table, \"_clear_\", function () {\r\n            callback();\r\n        });\r\n    };\r\n    _IndexedDBStore.prototype.getIndex = function (table, getLength, complete) {\r\n        complete(getLength ? this._dbIndex[table].keys().length : this._dbIndex[table].keys());\r\n    };\r\n    _IndexedDBStore.prototype.destroy = function (complete) {\r\n        var _this = this;\r\n        utilities_1.fastALL(Object.keys(this._dbIndex), function (table, i, done) {\r\n            _this.drop(table, done);\r\n        }).then(complete);\r\n    };\r\n    _IndexedDBStore.prototype.setNSQL = function (nSQL) {\r\n        db_idx_1.syncPeerIndex(nSQL, this._dbIndex);\r\n    };\r\n    return _IndexedDBStore;\r\n}());\r\nexports._IndexedDBStore = _IndexedDBStore;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/nano-sql/lib/database/adapter-indexedDB.js\n// module id = 190\n// module chunks = 0","var __assign = (this && this.__assign) || Object.assign || function(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n            t[p] = s[p];\r\n    }\r\n    return t;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar lie_ts_1 = require(\"lie-ts\");\r\nvar utilities_1 = require(\"../utilities\");\r\nvar db_idx_1 = require(\"./db-idx\");\r\n/**\r\n * Handles WebSQL persistent storage\r\n *\r\n * @export\r\n * @class _SyncStore\r\n * @implements {NanoSQLStorageAdapter}\r\n */\r\n// tslint:disable-next-line\r\nvar _WebSQLStore = /** @class */ (function () {\r\n    function _WebSQLStore(size) {\r\n        this._pkKey = {};\r\n        this._dbIndex = {};\r\n        this._size = (size || 0) * 1000 * 1000;\r\n    }\r\n    _WebSQLStore.prototype.setID = function (id) {\r\n        this._id = id;\r\n    };\r\n    _WebSQLStore.prototype.connect = function (complete) {\r\n        var _this = this;\r\n        this._db = window.openDatabase(this._id, \"1.0\", this._id, this._size || utilities_1.isAndroid ? 5000000 : 1);\r\n        utilities_1.fastALL(Object.keys(this._pkKey), function (table, i, nextKey) {\r\n            _this._sql(true, \"CREATE TABLE IF NOT EXISTS \" + table + \" (id BLOB PRIMARY KEY UNIQUE, data TEXT)\", [], function () {\r\n                _this._sql(false, \"SELECT id FROM \" + table, [], function (result) {\r\n                    var idx = [];\r\n                    for (var i_1 = 0; i_1 < result.rows.length; i_1++) {\r\n                        idx.push(result.rows.item(i_1).id);\r\n                    }\r\n                    // SQLite doesn't sort primary keys, but the system depends on sorted primary keys\r\n                    if (_this._dbIndex[table].sortIndex) {\r\n                        idx = idx.sort(function (a, b) { return a > b ? 1 : -1; });\r\n                    }\r\n                    _this._dbIndex[table].set(idx);\r\n                    nextKey();\r\n                });\r\n            });\r\n        }).then(complete);\r\n    };\r\n    /**\r\n     * Table names can't be escaped easily in the queries.\r\n     * This function gaurantees any provided table is a valid table name being used by the system.\r\n     *\r\n     * @private\r\n     * @param {string} table\r\n     * @returns {string}\r\n     * @memberof _WebSQLStore\r\n     */\r\n    _WebSQLStore.prototype._chkTable = function (table) {\r\n        if (Object.keys(this._dbIndex).indexOf(table) === -1) {\r\n            throw Error(\"No table \" + table + \" found!\");\r\n        }\r\n        else {\r\n            return table;\r\n        }\r\n    };\r\n    _WebSQLStore.prototype.makeTable = function (tableName, dataModels) {\r\n        var _this = this;\r\n        this._dbIndex[tableName] = new db_idx_1.DatabaseIndex();\r\n        dataModels.forEach(function (d) {\r\n            if (d.props && utilities_1.intersect([\"pk\", \"pk()\"], d.props)) {\r\n                _this._dbIndex[tableName].pkType = d.type;\r\n                _this._pkKey[tableName] = d.key;\r\n                if (d.props && utilities_1.intersect([\"ai\", \"ai()\"], d.props) && (d.type === \"int\" || d.type === \"number\")) {\r\n                    _this._dbIndex[tableName].doAI = true;\r\n                }\r\n                if (d.props && utilities_1.intersect([\"ns\", \"ns()\"], d.props) || [\"uuid\", \"timeId\", \"timeIdms\"].indexOf(_this._dbIndex[tableName].pkType) !== -1) {\r\n                    _this._dbIndex[tableName].sortIndex = false;\r\n                }\r\n            }\r\n        });\r\n    };\r\n    _WebSQLStore.prototype._sql = function (allowWrite, sql, args, complete) {\r\n        var doTransaction = function (tx) {\r\n            tx.executeSql(sql, args, function (tx2, result) {\r\n                complete(result);\r\n            }, function (tx, err) {\r\n                console.error(sql, args, err);\r\n                return false;\r\n            });\r\n        };\r\n        if (allowWrite) {\r\n            this._db.transaction(doTransaction);\r\n        }\r\n        else {\r\n            this._db.readTransaction(doTransaction);\r\n        }\r\n    };\r\n    _WebSQLStore.prototype.write = function (table, pk, data, complete) {\r\n        pk = pk || utilities_1.generateID(this._dbIndex[table].pkType, this._dbIndex[table].ai);\r\n        if (!pk) {\r\n            throw new Error(\"nSQL: Can't add a row without a primary key!\");\r\n        }\r\n        var newRow = false;\r\n        if (!this._dbIndex[table].exists(pk)) {\r\n            newRow = true;\r\n            this._dbIndex[table].add(pk);\r\n        }\r\n        if (newRow) {\r\n            var r_1 = __assign({}, data, (_a = {}, _a[this._pkKey[table]] = pk, _a));\r\n            this._sql(true, \"INSERT into \" + this._chkTable(table) + \" (id, data) VALUES (?, ?)\", [pk, JSON.stringify(r_1)], function (result) {\r\n                complete(r_1);\r\n            });\r\n        }\r\n        else {\r\n            var r_2 = __assign({}, data, (_b = {}, _b[this._pkKey[table]] = pk, _b));\r\n            this._sql(true, \"UPDATE \" + this._chkTable(table) + \" SET data = ? WHERE id = ?\", [JSON.stringify(r_2), pk], function () {\r\n                complete(r_2);\r\n            });\r\n        }\r\n        var _a, _b;\r\n    };\r\n    _WebSQLStore.prototype.delete = function (table, pk, complete) {\r\n        var pos = this._dbIndex[table].indexOf(pk);\r\n        if (pos !== -1) {\r\n            this._dbIndex[table].remove(pk);\r\n        }\r\n        this._sql(true, \"DELETE FROM \" + this._chkTable(table) + \" WHERE id = ?\", [pk], function () {\r\n            complete();\r\n        });\r\n    };\r\n    _WebSQLStore.prototype.read = function (table, pk, callback) {\r\n        this._sql(false, \"SELECT data FROM \" + this._chkTable(table) + \" WHERE id = ?\", [pk], function (result) {\r\n            if (result.rows.length) {\r\n                callback(JSON.parse(result.rows.item(0).data));\r\n            }\r\n            else {\r\n                callback(undefined);\r\n            }\r\n        });\r\n    };\r\n    _WebSQLStore.prototype.batchRead = function (table, pks, callback) {\r\n        this._sql(false, \"SELECT data from \" + this._chkTable(table) + \" WHERE id IN (\" + pks.map(function (p) { return \"?\"; }).join(\", \") + \") ORDER BY id\", pks, function (result) {\r\n            var i = result.rows.length;\r\n            var rows = [];\r\n            while (i--) {\r\n                rows.unshift(JSON.parse(result.rows.item(i).data));\r\n            }\r\n            callback(rows);\r\n        });\r\n    };\r\n    _WebSQLStore.prototype.rangeRead = function (table, rowCallback, complete, from, to, usePK) {\r\n        var _this = this;\r\n        var keys = this._dbIndex[table].keys();\r\n        var usefulValues = [typeof from, typeof to].indexOf(\"undefined\") === -1;\r\n        var ranges = usefulValues ? [from, to] : [];\r\n        if (!keys.length) {\r\n            complete();\r\n            return;\r\n        }\r\n        if (usePK && usefulValues) {\r\n            ranges = ranges.map(function (r) { return _this._dbIndex[table].getLocation(r); });\r\n        }\r\n        if (this._dbIndex[table].sortIndex === false) {\r\n            keys = keys.sort();\r\n        }\r\n        var idx = ranges[0] || 0;\r\n        var getKeys = [];\r\n        var startIDX = ranges[0];\r\n        var stmnt = \"SELECT data from \" + this._chkTable(table);\r\n        // SQLite doesn't handle BETWEEN statements gracefully with primary keys, always doing a full table scan.\r\n        // So we take the index of the table (which is in js memory) and convert it into an IN statement meaning SQLite\r\n        // can go directly to the rows we need without a full table scan.\r\n        if (ranges.length) {\r\n            var t = typeof keys[startIDX] === \"number\";\r\n            while (startIDX <= ranges[1]) {\r\n                getKeys.push(keys[startIDX]);\r\n                startIDX++;\r\n            }\r\n            stmnt += \" WHERE id IN (\" + getKeys.map(function (k) { return \"?\"; }).join(\", \") + \")\";\r\n        }\r\n        stmnt += \" ORDER BY id\";\r\n        this._sql(false, stmnt, getKeys, function (result) {\r\n            var i = 0;\r\n            var getRow = function () {\r\n                if (result.rows.length > i) {\r\n                    rowCallback(JSON.parse(result.rows.item(i).data), idx, function () {\r\n                        idx++;\r\n                        i++;\r\n                        i % 500 === 0 ? lie_ts_1.setFast(getRow) : getRow(); // handle maximum call stack error\r\n                    });\r\n                }\r\n                else {\r\n                    complete();\r\n                }\r\n            };\r\n            getRow();\r\n        });\r\n    };\r\n    _WebSQLStore.prototype.drop = function (table, callback) {\r\n        this._dbIndex[table] = this._dbIndex[table].clone();\r\n        this._sql(true, \"DELETE FROM \" + this._chkTable(table), [], function (rows) {\r\n            callback();\r\n        });\r\n    };\r\n    _WebSQLStore.prototype.getIndex = function (table, getLength, complete) {\r\n        complete(getLength ? this._dbIndex[table].keys().length : this._dbIndex[table].keys());\r\n    };\r\n    _WebSQLStore.prototype.destroy = function (complete) {\r\n        var _this = this;\r\n        utilities_1.fastALL(Object.keys(this._dbIndex), function (table, i, done) {\r\n            _this.drop(table, done);\r\n        }).then(complete);\r\n    };\r\n    _WebSQLStore.prototype.setNSQL = function (nSQL) {\r\n        db_idx_1.syncPeerIndex(nSQL, this._dbIndex);\r\n    };\r\n    return _WebSQLStore;\r\n}());\r\nexports._WebSQLStore = _WebSQLStore;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/nano-sql/lib/database/adapter-websql.js\n// module id = 191\n// module chunks = 0","var __assign = (this && this.__assign) || Object.assign || function(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n            t[p] = s[p];\r\n    }\r\n    return t;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar lie_ts_1 = require(\"lie-ts\");\r\nvar utilities_1 = require(\"../utilities\");\r\nvar db_idx_1 = require(\"./db-idx\");\r\nvar deleteFolderRecursive = function (path) {\r\n    if (global._fs.existsSync(path)) {\r\n        global._fs.readdirSync(path).forEach(function (file) {\r\n            var curPath = path + \"/\" + file;\r\n            if (global._fs.statSync(curPath).isDirectory()) { // recurse\r\n                deleteFolderRecursive(curPath);\r\n            }\r\n            else { // delete file\r\n                global._fs.unlinkSync(curPath);\r\n            }\r\n        });\r\n        global._fs.rmdirSync(path);\r\n    }\r\n};\r\n/**\r\n * Handles Level DB storage.\r\n *\r\n * @export\r\n * @class _LevelStore\r\n * @implements {NanoSQLStorageAdapter}\r\n */\r\n// tslint:disable-next-line\r\nvar _LevelStore = /** @class */ (function () {\r\n    function _LevelStore(path, writeCache, readCache) {\r\n        this.path = path;\r\n        this.writeCache = writeCache;\r\n        this.readCache = readCache;\r\n        this._pkKey = {};\r\n        this._pkType = {};\r\n        this._dbIndex = {};\r\n        this._levelDBs = {};\r\n        this._isPKnum = {};\r\n    }\r\n    _LevelStore.prototype.connect = function (complete) {\r\n        var _this = this;\r\n        utilities_1.fastALL(Object.keys(this._dbIndex), function (table, i, done) {\r\n            var pks = [];\r\n            _this._levelDBs[table].createKeyStream()\r\n                .on(\"data\", function (data) {\r\n                pks.push(_this._isPKnum[table] ? new global._Int64BE(data).toNumber() : data.toString());\r\n            })\r\n                .on(\"end\", function () {\r\n                if (pks.length) {\r\n                    _this._dbIndex[table].set(pks);\r\n                }\r\n                done();\r\n            });\r\n        }).then(complete);\r\n    };\r\n    _LevelStore.prototype.disconnect = function (complete) {\r\n        var _this = this;\r\n        utilities_1.fastALL(Object.keys(this._dbIndex), function (table, i, done) {\r\n            _this._levelDBs[table].close(done);\r\n        }).then(function () {\r\n            complete();\r\n        });\r\n    };\r\n    _LevelStore.prototype.setID = function (id) {\r\n        this._id = id;\r\n        this._path = (this.path || \".\") + \"/db_\" + this._id;\r\n        if (!global._fs.existsSync(this._path)) {\r\n            global._fs.mkdirSync(this._path);\r\n        }\r\n    };\r\n    _LevelStore.prototype.makeTable = function (tableName, dataModels) {\r\n        var _this = this;\r\n        this._dbIndex[tableName] = new db_idx_1.DatabaseIndex();\r\n        this._levelDBs[tableName] = global._levelup(global._leveldown(global._path.join(this._path, tableName)), {\r\n            cacheSize: (this.readCache || 32) * 1024 * 1024,\r\n            writeBufferSize: (this.writeCache || 32) * 1024 * 1024\r\n        });\r\n        dataModels.forEach(function (d) {\r\n            if (d.props && utilities_1.intersect([\"pk\", \"pk()\"], d.props)) {\r\n                _this._pkType[tableName] = d.type;\r\n                _this._pkKey[tableName] = d.key;\r\n                _this._isPKnum[tableName] = [\"int\", \"float\", \"number\"].indexOf(d.type) !== -1;\r\n                if (d.props && utilities_1.intersect([\"ai\", \"ai()\"], d.props) && (d.type === \"int\" || d.type === \"number\")) {\r\n                    _this._dbIndex[tableName].doAI = true;\r\n                }\r\n                if (d.props && utilities_1.intersect([\"ns\", \"ns()\"], d.props) || [\"uuid\", \"timeId\", \"timeIdms\"].indexOf(_this._pkType[tableName]) !== -1) {\r\n                    _this._dbIndex[tableName].sortIndex = false;\r\n                }\r\n            }\r\n        });\r\n    };\r\n    _LevelStore.prototype.write = function (table, pk, data, complete) {\r\n        pk = pk || utilities_1.generateID(this._pkType[table], this._dbIndex[table].ai);\r\n        if (!pk) {\r\n            throw Error(\"Can't add a row without a primary key!\");\r\n        }\r\n        if (this._dbIndex[table].indexOf(pk) === -1) {\r\n            this._dbIndex[table].add(pk);\r\n        }\r\n        var r = __assign({}, data, (_a = {}, _a[this._pkKey[table]] = pk, _a));\r\n        this._levelDBs[table].put(this._isPKnum[table] ? new global._Int64BE(pk).toBuffer() : pk, JSON.stringify(r), function (err) {\r\n            if (err) {\r\n                throw Error(err);\r\n            }\r\n            else {\r\n                complete(r);\r\n            }\r\n        });\r\n        var _a;\r\n    };\r\n    _LevelStore.prototype.delete = function (table, pk, complete) {\r\n        var idx = this._dbIndex[table].indexOf(pk);\r\n        if (idx !== -1) {\r\n            this._dbIndex[table].remove(pk);\r\n        }\r\n        this._levelDBs[table].del(this._isPKnum[table] ? new global._Int64BE(pk).toBuffer() : pk, function (err) {\r\n            if (err) {\r\n                throw Error(err);\r\n            }\r\n            else {\r\n                complete();\r\n            }\r\n        });\r\n    };\r\n    _LevelStore.prototype.read = function (table, pk, callback) {\r\n        if (!this._dbIndex[table].exists(pk)) {\r\n            callback(null);\r\n            return;\r\n        }\r\n        this._levelDBs[table].get(this._isPKnum[table] ? new global._Int64BE(pk).toBuffer() : pk, function (err, row) {\r\n            if (err) {\r\n                throw Error(err);\r\n            }\r\n            else {\r\n                callback(JSON.parse(row));\r\n            }\r\n        });\r\n    };\r\n    _LevelStore.prototype.rangeRead = function (table, rowCallback, complete, from, to, usePK) {\r\n        var keys = this._dbIndex[table].keys();\r\n        var usefulValues = [typeof from, typeof to].indexOf(\"undefined\") === -1;\r\n        var ranges = usefulValues ? [from, to] : [0, keys.length - 1];\r\n        var rows = [];\r\n        if (this._dbIndex[table].sortIndex === false) {\r\n            keys = keys.sort();\r\n        }\r\n        var lower = usePK && usefulValues ? from : keys[ranges[0]];\r\n        var higher = usePK && usefulValues ? to : keys[ranges[1]];\r\n        this._levelDBs[table]\r\n            .createValueStream({\r\n            gte: this._isPKnum[table] ? new global._Int64BE(lower).toBuffer() : lower,\r\n            lte: this._isPKnum[table] ? new global._Int64BE(higher).toBuffer() : higher\r\n        })\r\n            .on(\"data\", function (data) {\r\n            rows.push(JSON.parse(data));\r\n        })\r\n            .on(\"end\", function () {\r\n            var idx = ranges[0] || 0;\r\n            var i = 0;\r\n            var getRow = function () {\r\n                if (i < rows.length) {\r\n                    rowCallback(rows[i], idx, function () {\r\n                        idx++;\r\n                        i++;\r\n                        i % 500 === 0 ? lie_ts_1.setFast(getRow) : getRow(); // handle maximum call stack error\r\n                    });\r\n                }\r\n                else {\r\n                    complete();\r\n                }\r\n            };\r\n            getRow();\r\n        });\r\n    };\r\n    _LevelStore.prototype.drop = function (table, callback) {\r\n        var _this = this;\r\n        utilities_1.fastALL(this._dbIndex[table].keys(), function (pk, i, done) {\r\n            _this._levelDBs[table].del(pk, done);\r\n        }).then(function () {\r\n            _this._dbIndex[table] = _this._dbIndex[table].clone();\r\n            callback();\r\n        });\r\n    };\r\n    _LevelStore.prototype.getIndex = function (table, getLength, complete) {\r\n        complete(getLength ? this._dbIndex[table].keys().length : this._dbIndex[table].keys());\r\n    };\r\n    _LevelStore.prototype.destroy = function (complete) {\r\n        var _this = this;\r\n        utilities_1.fastALL(Object.keys(this._dbIndex), function (table, i, done) {\r\n            _this.drop(table, function () {\r\n                _this._levelDBs[table].close(done);\r\n            });\r\n        }).then(function () {\r\n            deleteFolderRecursive(_this._path);\r\n            complete();\r\n        });\r\n    };\r\n    return _LevelStore;\r\n}());\r\nexports._LevelStore = _LevelStore;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/nano-sql/lib/database/adapter-levelDB.js\n// module id = 192\n// module chunks = 0","var inherits = require('inherits')\nvar EventEmitter = require('events').EventEmitter\n\nmodule.exports = Queue\n\nfunction Queue (options) {\n  if (!(this instanceof Queue)) {\n    return new Queue(options)\n  }\n\n  EventEmitter.call(this)\n  options = options || {}\n  this.concurrency = options.concurrency || Infinity\n  this.timeout = options.timeout || 0\n  this.autostart = options.autostart || false\n  this.results = options.results || null\n  this.pending = 0\n  this.session = 0\n  this.running = false\n  this.jobs = []\n  this.timers = {}\n}\ninherits(Queue, EventEmitter)\n\nvar arrayMethods = [\n  'pop',\n  'shift',\n  'indexOf',\n  'lastIndexOf'\n]\n\narrayMethods.forEach(function (method) {\n  Queue.prototype[method] = function () {\n    return Array.prototype[method].apply(this.jobs, arguments)\n  }\n})\n\nQueue.prototype.slice = function (begin, end) {\n  this.jobs = this.jobs.slice(begin, end)\n  return this\n}\n\nQueue.prototype.reverse = function () {\n  this.jobs.reverse()\n  return this\n}\n\nvar arrayAddMethods = [\n  'push',\n  'unshift',\n  'splice'\n]\n\narrayAddMethods.forEach(function (method) {\n  Queue.prototype[method] = function () {\n    var methodResult = Array.prototype[method].apply(this.jobs, arguments)\n    if (this.autostart) {\n      this.start()\n    }\n    return methodResult\n  }\n})\n\nObject.defineProperty(Queue.prototype, 'length', {\n  get: function () {\n    return this.pending + this.jobs.length\n  }\n})\n\nQueue.prototype.start = function (cb) {\n  if (cb) {\n    callOnErrorOrEnd.call(this, cb)\n  }\n\n  this.running = true\n\n  if (this.pending >= this.concurrency) {\n    return\n  }\n\n  if (this.jobs.length === 0) {\n    if (this.pending === 0) {\n      done.call(this)\n    }\n    return\n  }\n\n  var self = this\n  var job = this.jobs.shift()\n  var once = true\n  var session = this.session\n  var timeoutId = null\n  var didTimeout = false\n  var resultIndex = null\n\n  function next (err, result) {\n    if (once && self.session === session) {\n      once = false\n      self.pending--\n      if (timeoutId !== null) {\n        delete self.timers[timeoutId]\n        clearTimeout(timeoutId)\n      }\n\n      if (err) {\n        self.emit('error', err, job)\n      } else if (didTimeout === false) {\n        if (resultIndex !== null) {\n          self.results[resultIndex] = Array.prototype.slice.call(arguments, 1)\n        }\n        self.emit('success', result, job)\n      }\n\n      if (self.session === session) {\n        if (self.pending === 0 && self.jobs.length === 0) {\n          done.call(self)\n        } else if (self.running) {\n          self.start()\n        }\n      }\n    }\n  }\n\n  if (this.timeout) {\n    timeoutId = setTimeout(function () {\n      didTimeout = true\n      if (self.listeners('timeout').length > 0) {\n        self.emit('timeout', next, job)\n      } else {\n        next()\n      }\n    }, this.timeout)\n    this.timers[timeoutId] = timeoutId\n  }\n\n  if (this.results) {\n    resultIndex = this.results.length\n    this.results[resultIndex] = null\n  }\n\n  this.pending++\n  var promise = job(next)\n  if (promise && promise.then && typeof promise.then === 'function') {\n    promise.then(function (result) {\n      next(null, result)\n    }).catch(function (err) {\n      next(err || true)\n    })\n  }\n\n  if (this.running && this.jobs.length > 0) {\n    this.start()\n  }\n}\n\nQueue.prototype.stop = function () {\n  this.running = false\n}\n\nQueue.prototype.end = function (err) {\n  clearTimers.call(this)\n  this.jobs.length = 0\n  this.pending = 0\n  done.call(this, err)\n}\n\nfunction clearTimers () {\n  for (var key in this.timers) {\n    var timeoutId = this.timers[key]\n    delete this.timers[key]\n    clearTimeout(timeoutId)\n  }\n}\n\nfunction callOnErrorOrEnd (cb) {\n  var self = this\n  this.on('error', onerror)\n  this.on('end', onend)\n\n  function onerror (err) { self.end(err) }\n  function onend (err) {\n    self.removeListener('error', onerror)\n    self.removeListener('end', onend)\n    cb(err, this.results)\n  }\n}\n\nfunction done (err) {\n  this.session++\n  this.running = false\n  this.emit('end', err)\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/queue/index.js\n// module id = 193\n// module chunks = 0","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/inherits/inherits_browser.js\n// module id = 194\n// module chunks = 0","var __assign = (this && this.__assign) || Object.assign || function(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n            t[p] = s[p];\r\n    }\r\n    return t;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utilities_1 = require(\"./utilities\");\r\n// uglifyJS workaround\r\nvar strs = [\"_hist\", \"_hist_ptr\", \"_id\"];\r\n/**\r\n * New History Plugin\r\n * Provides multiple history modes, including a per row mode (for row revisions), a database wide mode and a table wide mode.\r\n * You can either set a single argument to tell the system to use row, table, or database mode OR you can pass in an object.\r\n * The object should contain a key with all tables with history, each value should be \"row\" or \"table\", dictating the type of history\r\n * for that table.\r\n *\r\n * @export\r\n * @class _NanoSQLHistoryPlugin\r\n * @implements {NanoSQLPlugin}\r\n */\r\n// tslint:disable-next-line\r\nvar _NanoSQLHistoryPlugin = /** @class */ (function () {\r\n    function _NanoSQLHistoryPlugin(historyModeArgs) {\r\n        this.historyModeArgs = historyModeArgs;\r\n        this._tablePkKeys = {};\r\n        this._tablePkTypes = {};\r\n        this._tableKeys = {};\r\n    }\r\n    _NanoSQLHistoryPlugin.prototype.willConnect = function (connectArgs, next) {\r\n        var _this = this;\r\n        this.parent = connectArgs.parent;\r\n        var historyTables = {};\r\n        // handle tables to store row data history\r\n        Object.keys(connectArgs.models).forEach(function (table) {\r\n            // only add history for public tables\r\n            if (table.indexOf(\"_\") !== 0) {\r\n                var histModel = utilities_1._assign(connectArgs.models[table]).map(function (model) {\r\n                    if (model.props && utilities_1.intersect([\"pk\", \"pk()\"], model.props)) {\r\n                        _this._tablePkKeys[table] = model.key;\r\n                        _this._tablePkTypes[table] = model.type;\r\n                        _this._tableKeys[table] = {};\r\n                    }\r\n                    delete model.props; // remove secondary indexes and everything else fancy\r\n                    delete model.default; // remove default column value\r\n                    return model;\r\n                });\r\n                // add new primary key used by the history system\r\n                histModel.unshift({ key: \"_id\", type: \"timeIdms\", props: [\"pk\"] });\r\n                // Holds old or new row data\r\n                historyTables[\"_\" + table + \"__hist_rows\"] = histModel;\r\n                // holds where in the row history we are\r\n                historyTables[\"_\" + table + \"__hist_idx\"] = [\r\n                    { key: \"id\", type: _this._tablePkTypes[table], props: [\"pk\"] },\r\n                    { key: \"histRows\", type: \"timeIdms[]\" },\r\n                    { key: \"histPtr\", type: \"number\" } // where in the above array we are.\r\n                ];\r\n            }\r\n        });\r\n        var isNotString = typeof this.historyModeArgs !== \"string\";\r\n        var historyTable = [\r\n            { key: \"id\", type: \"timeIdms\", props: [\"pk\"] },\r\n            { key: \"table\", type: \"string\" },\r\n            { key: \"keys\", type: \"any[]\" }\r\n        ];\r\n        var historyTablePointer = [\r\n            { key: \"id\", type: \"timeIdms\", props: [\"pk\"] },\r\n            { key: \"ptr\", type: \"int\" }\r\n        ];\r\n        // database/linear mode. all undo/redo is tracked across the entire database.  Default behavior\r\n        if (this.historyModeArgs === \"database\" || !this.historyModeArgs) {\r\n            historyTables[strs[0]] = historyTable;\r\n            historyTables[strs[1]] = historyTablePointer;\r\n            // table/row mode, undo/redo is tracked either per row OR per table\r\n        }\r\n        else if (this.historyModeArgs !== \"database\" || isNotString) {\r\n            this.historyModes = {};\r\n            if (!isNotString) { // apply the global arg (\"row\" or \"table\") to every table\r\n                Object.keys(this._tablePkKeys).forEach(function (table) {\r\n                    _this.historyModes[table] = _this.historyModeArgs;\r\n                });\r\n            }\r\n            else { // object of tables was passed in, the user specified a behavior for each table.  Just copy their config object.\r\n                this.historyModes = utilities_1._assign(this.historyModeArgs);\r\n            }\r\n            // create tracking rows needed for table wide history\r\n            Object.keys(this.historyModes).forEach(function (table) {\r\n                if (_this.historyModes[table] === \"table\") {\r\n                    historyTables[\"_\" + table + \"__hist\"] = historyTable;\r\n                    historyTables[\"_\" + table + \"__hist_ptr\"] = historyTablePointer;\r\n                }\r\n            });\r\n        }\r\n        connectArgs.models = __assign({}, connectArgs.models, historyTables);\r\n        next(connectArgs);\r\n    };\r\n    _NanoSQLHistoryPlugin.prototype._histTable = function (table) {\r\n        if (!table)\r\n            return \"__null\";\r\n        return this.historyModes ? this.historyModes[table] === \"table\" ? \"_\" + table + \"__hist\" : null : \"_hist\";\r\n    };\r\n    _NanoSQLHistoryPlugin.prototype._generateHistoryPointers = function (table, complete) {\r\n        var _this = this;\r\n        var histTable = this._histTable(table);\r\n        if (!histTable) { // row mode\r\n            complete();\r\n        }\r\n        else {\r\n            this.parent.query(\"select\").manualExec({\r\n                table: histTable + \"_ptr\"\r\n            }).then(function (rows) {\r\n                if (rows.length) { // already has a pointer\r\n                    complete();\r\n                }\r\n                else { // needs one\r\n                    _this.parent.query(\"upsert\", {\r\n                        id: utilities_1.timeid(true),\r\n                        table: table,\r\n                        ptr: 0 // empty table\r\n                    }).manualExec({ table: histTable + \"_ptr\" }).then(complete);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    _NanoSQLHistoryPlugin.prototype.didConnect = function (connectArgs, next) {\r\n        var _this = this;\r\n        var finishSetup = function () {\r\n            // we need to know what existing primary keys are in each table and make sure pointers are setup where needed.\r\n            utilities_1.fastALL(Object.keys(_this._tableKeys), function (table, k, tableDone) {\r\n                _this.parent.extend(\"beforeConn\", \"idx\", \"_\" + table + \"__hist_idx\").then(function (index) {\r\n                    index.forEach(function (item) {\r\n                        _this._tableKeys[table][item] = true;\r\n                    });\r\n                    if (_this.historyModes) { // table / row mode\r\n                        _this._generateHistoryPointers(table, tableDone);\r\n                    }\r\n                    else { // global mode\r\n                        tableDone();\r\n                    }\r\n                });\r\n            }).then(next);\r\n        };\r\n        if (!this.historyModes) { // global mode\r\n            this.parent.query(\"select\").manualExec({\r\n                table: \"_hist_ptr\"\r\n            }).then(function (rows) {\r\n                if (rows.length) {\r\n                    finishSetup();\r\n                }\r\n                else {\r\n                    _this.parent.query(\"upsert\", {\r\n                        id: utilities_1.timeid(true),\r\n                        table: \"\",\r\n                        ptr: 0\r\n                    }).manualExec({ table: \"_hist_ptr\" }).then(finishSetup);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            finishSetup();\r\n        }\r\n    };\r\n    /**\r\n     * If any of the given row pointers are above zero, remove the rows in \"forward\" history.\r\n     *\r\n     * @private\r\n     * @param {string} table\r\n     * @param {any[]} rowPKs\r\n     * @param {() => void} complete\r\n     * @memberof _NanoSQLHistoryPlugin\r\n     */\r\n    _NanoSQLHistoryPlugin.prototype._purgeRowHistory = function (table, rowPKs, complete, clearAll) {\r\n        var _this = this;\r\n        var rowHistTable = \"_\" + table + \"__hist_rows\";\r\n        var rowIDXTable = \"_\" + table + \"__hist_idx\";\r\n        utilities_1.fastALL(rowPKs, function (pk, l, rowDone) {\r\n            _this.parent.query(\"select\").where([\"id\", \"=\", pk]).manualExec({ table: rowIDXTable }).then(function (rows) {\r\n                if (!rows.length) {\r\n                    rowDone();\r\n                    return;\r\n                }\r\n                var histRowIDX = Object.isFrozen(rows[0]) ? utilities_1._assign(rows[0]) : rows[0];\r\n                var delIDs = [];\r\n                if (clearAll) {\r\n                    delIDs = delIDs.concat(histRowIDX.histRows.filter(function (r) { return r !== -1; }));\r\n                    histRowIDX.histPtr = 0;\r\n                    histRowIDX.histRows = [];\r\n                }\r\n                else {\r\n                    while (histRowIDX.histPtr--) {\r\n                        delIDs.push(histRowIDX.histRows.shift());\r\n                    }\r\n                    histRowIDX.histPtr = 0;\r\n                }\r\n                if (!delIDs.length) {\r\n                    rowDone();\r\n                    return;\r\n                }\r\n                _this.parent.query(\"upsert\", histRowIDX).comment(\"History Purge\").where([\"id\", \"=\", pk]).manualExec({ table: rowIDXTable }).then(function () {\r\n                    _this.parent.query(\"delete\").comment(\"History Purge\").where([\"_id\", \"IN\", delIDs]).manualExec({ table: rowHistTable }).then(function () {\r\n                        if (clearAll) {\r\n                            _this.parent.query(\"select\").where([_this._tablePkKeys[table], \"=\", pk]).manualExec({ table: table }).then(function (existingRow) {\r\n                                _this._unshiftSingleRow(table, [\"change\"], pk, existingRow[0], false, rowDone);\r\n                            });\r\n                        }\r\n                        else {\r\n                            rowDone();\r\n                        }\r\n                    });\r\n                });\r\n            });\r\n        }).then(complete);\r\n    };\r\n    _NanoSQLHistoryPlugin.prototype._purgeTableHistory = function (table, complete, clearAll) {\r\n        var _this = this;\r\n        this.parent.query(\"select\").manualExec({ table: table + \"_ptr\" }).then(function (rows) {\r\n            var row = Object.isFrozen(rows[0]) ? utilities_1._assign(rows[0]) : rows[0];\r\n            if (clearAll || row.ptr > 0) {\r\n                var histQ = _this.parent.query(\"select\");\r\n                if (!clearAll) {\r\n                    histQ.range(row.ptr * -1, 0);\r\n                }\r\n                histQ.manualExec({ table: table }).then(function (histTableRows) {\r\n                    if (!histTableRows.length) {\r\n                        complete();\r\n                        return;\r\n                    }\r\n                    var purgeRows = {};\r\n                    histTableRows.forEach(function (row) {\r\n                        if (!purgeRows[row.table])\r\n                            purgeRows[row.table] = [];\r\n                        purgeRows[row.table] = purgeRows[row.table].concat(row.keys);\r\n                    });\r\n                    utilities_1.fastALL(Object.keys(purgeRows), function (ta, j, tableDone) {\r\n                        _this._purgeRowHistory(ta, purgeRows[ta], tableDone, clearAll);\r\n                    }).then(function () {\r\n                        _this.parent.query(\"delete\").comment(\"History Purge\").where([\"id\", \"IN\", histTableRows.map(function (r) { return r.id; })]).manualExec({ table: table }).then(function () {\r\n                            row.ptr = 0;\r\n                            _this.parent.query(\"upsert\", row).comment(\"History Purge\").where([\"id\", \"=\", row.id]).manualExec({ table: table + \"_ptr\" }).then(complete);\r\n                        });\r\n                    });\r\n                });\r\n            }\r\n            else {\r\n                complete();\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * If any row pointers are above zero, we must first remove the revisions ahead of the existing one before adding a new revision.\r\n     * This prevents the history from becomming broken\r\n     *\r\n     * @private\r\n     * @param {string} table\r\n     * @param {any[]} rowPKs\r\n     * @param {() => void} complete\r\n     * @memberof _NanoSQLHistoryPlugin\r\n     */\r\n    _NanoSQLHistoryPlugin.prototype._purgeParentHistory = function (table, rowPKs, complete) {\r\n        if (!this.historyModes) { // global mode\r\n            this._purgeTableHistory(\"_hist\", complete);\r\n            return;\r\n        }\r\n        var histTable = this._histTable(table);\r\n        if (!histTable) { // row mode\r\n            this._purgeRowHistory(table, rowPKs, complete);\r\n        }\r\n        else { // table mode\r\n            this._purgeTableHistory(histTable, complete);\r\n        }\r\n    };\r\n    _NanoSQLHistoryPlugin.prototype._purgeAllHistory = function (table, rowPK, complete) {\r\n        if (!this.historyModes) { // global mode\r\n            this._purgeTableHistory(\"_hist\", complete, true);\r\n            return;\r\n        }\r\n        var histTable = this._histTable(table);\r\n        if (!histTable) { // row mode\r\n            this._purgeRowHistory(table, [rowPK], complete, true);\r\n        }\r\n        else { // table mode\r\n            this._purgeTableHistory(histTable, complete, true);\r\n        }\r\n    };\r\n    _NanoSQLHistoryPlugin.prototype.didExec = function (event, next) {\r\n        // only do history on public tables (ones that dont begin with _)\r\n        // also only do history if there was a change in the database\r\n        var _this = this;\r\n        if (event.table && event.table.indexOf(\"_\") !== 0 && event.types.indexOf(\"change\") > -1 && event.query.comments.indexOf(\"History Write\") === -1) {\r\n            this._purgeParentHistory(event.table, event.affectedRowPKS, function () {\r\n                utilities_1.fastALL(event.affectedRows, function (row, k, rowDone) {\r\n                    var pk = row[_this._tablePkKeys[event.table]];\r\n                    if (_this._tableKeys[event.table][pk]) { // existing row\r\n                        _this._unshiftSingleRow(event.table, event.types, pk, row, false, function (id) {\r\n                            rowDone(pk);\r\n                        });\r\n                    }\r\n                    else { // new row\r\n                        _this._tableKeys[event.table][pk] = true;\r\n                        _this._unshiftSingleRow(event.table, event.types, pk, row, true, function (id) {\r\n                            _this.parent.query(\"upsert\", {\r\n                                id: pk,\r\n                                histRows: [id, -1],\r\n                                histPtr: 0\r\n                            }).manualExec({ table: \"_\" + event.table + \"__hist_idx\" }).then(function () {\r\n                                rowDone(pk);\r\n                            });\r\n                        });\r\n                    }\r\n                }).then(function (rowIDs) {\r\n                    _this._unshiftParent(event, rowIDs, next);\r\n                });\r\n            });\r\n        }\r\n        else {\r\n            next(event);\r\n        }\r\n    };\r\n    _NanoSQLHistoryPlugin.prototype._unshiftParent = function (event, histRowIDs, complete) {\r\n        // null if in row mode, otherwise provides the history table\r\n        var histTable = this._histTable(event.table);\r\n        if (!histTable) {\r\n            complete(event);\r\n        }\r\n        else {\r\n            this.parent.query(\"upsert\", {\r\n                id: utilities_1.timeid(true),\r\n                table: event.table,\r\n                keys: histRowIDs\r\n            }).manualExec({ table: histTable }).then(function () {\r\n                complete(event);\r\n            });\r\n        }\r\n    };\r\n    _NanoSQLHistoryPlugin.prototype._unshiftSingleRow = function (table, eventTypes, rowPK, row, skipIDX, complete) {\r\n        var _this = this;\r\n        var rowHistTable = \"_\" + table + \"__hist_idx\";\r\n        var id = utilities_1.timeid(true);\r\n        var adjustHistoryIDX = function (appendID) {\r\n            // adjust the history pointer table with the new row id\r\n            _this.parent.query(\"select\").where([\"id\", \"=\", rowPK]).manualExec({ table: rowHistTable }).then(function (rows) {\r\n                var histRowIDX = Object.isFrozen(rows[0]) || Object.isFrozen(rows[0].histRows) ? utilities_1._assign(rows[0]) : rows[0];\r\n                histRowIDX.histRows.unshift(appendID);\r\n                _this.parent.query(\"upsert\", histRowIDX).where([\"id\", \"=\", rowPK]).manualExec({ table: rowHistTable }).then(function () {\r\n                    complete(appendID);\r\n                });\r\n            });\r\n        };\r\n        if (eventTypes.indexOf(\"delete\") > -1 || eventTypes.indexOf(\"drop\") > -1) {\r\n            // add deleted record to history table\r\n            adjustHistoryIDX(-1);\r\n        }\r\n        else {\r\n            // add row to history table\r\n            this.parent.query(\"upsert\", __assign((_a = {}, _a[strs[2]] = id, _a), row)).manualExec({ table: \"_\" + table + \"__hist_rows\" }).then(function () {\r\n                if (skipIDX) {\r\n                    complete(id);\r\n                    return;\r\n                }\r\n                adjustHistoryIDX(id);\r\n            });\r\n        }\r\n        var _a;\r\n    };\r\n    _NanoSQLHistoryPlugin.prototype.extend = function (next, args, result) {\r\n        if (args[0] === \"hist\") {\r\n            var query = args[1];\r\n            var table = args[2];\r\n            var rowPK = args[3];\r\n            switch (query) {\r\n                // move database/table/row forward or backward in history\r\n                case \"<\":\r\n                case \">\":\r\n                    this._shiftHistory(query, table, rowPK, function (didAnything) {\r\n                        next(args, [didAnything]);\r\n                    });\r\n                    break;\r\n                // query history state of database/table/row\r\n                case \"?\":\r\n                    this._queryHistory(table, rowPK, function (qResult) {\r\n                        next(args, qResult);\r\n                    });\r\n                    break;\r\n                // get all revisions of a given row\r\n                case \"rev\":\r\n                    this._getRevisionHistory(table, rowPK, function (qResult) {\r\n                        next(args, qResult);\r\n                    });\r\n                    break;\r\n                // clear history of the database/table/row\r\n                case \"clear\":\r\n                    this._purgeAllHistory(table, rowPK, function () {\r\n                        next(args, result);\r\n                    });\r\n                    break;\r\n            }\r\n        }\r\n        else {\r\n            next(args, result);\r\n        }\r\n    };\r\n    // only works when given a specific row\r\n    _NanoSQLHistoryPlugin.prototype._getRevisionHistory = function (table, rowPK, complete) {\r\n        var _this = this;\r\n        var rowHistTable = \"_\" + table + \"__hist_idx\";\r\n        this.parent.query(\"select\").where([\"id\", \"=\", rowPK]).manualExec({ table: rowHistTable }).then(function (rows) {\r\n            var getRows = rows[0].histRows.filter(function (id) { return id !== -1; });\r\n            _this.parent.query(\"select\").where([\"_id\", \"IN\", getRows]).manualExec({ table: \"_\" + table + \"__hist_rows\" }).then(function (resultRows) {\r\n                var rObj = {};\r\n                resultRows.forEach(function (row) {\r\n                    rObj[row[strs[2]]] = Object.isFrozen(row) ? utilities_1._assign(row) : row;\r\n                    delete rObj[row[strs[2]]][strs[2]];\r\n                });\r\n                complete([{\r\n                        pointer: rows[0].histRows.length - rows[0].histPtr - 1,\r\n                        revisions: rows[0].histRows.reverse().map(function (r) { return r === -1 ? null : rObj[r]; })\r\n                    }]);\r\n            });\r\n        });\r\n    };\r\n    _NanoSQLHistoryPlugin.prototype._getTableHistory = function (table, complete) {\r\n        var _this = this;\r\n        this.parent.extend(\"idx.length\", table).then(function (len) {\r\n            _this.parent.query(\"select\").manualExec({ table: table + \"_ptr\" }).then(function (rows) {\r\n                if (!rows.length) {\r\n                    complete([0, 0]);\r\n                    return;\r\n                }\r\n                complete([len, len - rows[0].ptr]);\r\n            });\r\n        });\r\n    };\r\n    _NanoSQLHistoryPlugin.prototype._queryHistory = function (table, rowPK, complete) {\r\n        if (!this.historyModes) { // global mode\r\n            this._getTableHistory(\"_hist\", function (result) {\r\n                complete(result);\r\n            });\r\n            return;\r\n        }\r\n        var histTable = this._histTable(table);\r\n        if (!histTable) { // get single row history\r\n            if (!rowPK) {\r\n                throw Error(\"nSQL: Need a row primary key to query this history!\");\r\n            }\r\n            var rowHistTable = \"_\" + table + \"__hist_idx\";\r\n            this.parent.query(\"select\").where([\"id\", \"=\", rowPK]).manualExec({ table: rowHistTable }).then(function (rows) {\r\n                var histRowIDX = rows[0];\r\n                complete([histRowIDX.histRows.length, histRowIDX.histRows.length - histRowIDX.histPtr - 1]);\r\n            });\r\n        }\r\n        else { // get single table history\r\n            if (!table) {\r\n                throw Error(\"nSQL: Need a table to query this history!\");\r\n            }\r\n            this._getTableHistory(histTable, complete);\r\n        }\r\n    };\r\n    _NanoSQLHistoryPlugin.prototype._shiftTableHistory = function (direction, table, complete) {\r\n        var _this = this;\r\n        this.parent.query(\"select\").manualExec({ table: table + \"_ptr\" }).then(function (rows) {\r\n            var rowPtr = utilities_1._assign(rows[0]);\r\n            rowPtr.ptr += direction === \"<\" ? 1 : -1;\r\n            if (rowPtr.ptr < 0)\r\n                rowPtr.ptr = 0;\r\n            _this.parent.extend(\"idx.length\", table).then(function (len) {\r\n                if (rowPtr.ptr > len) {\r\n                    rowPtr.ptr = len;\r\n                }\r\n                if (rows[0].ptr === rowPtr.ptr) { // no change in history, nothing to do.\r\n                    complete(false);\r\n                    return;\r\n                }\r\n                _this.parent.query(\"select\").range(-1, direction === \"<\" ? rows[0].ptr : rowPtr.ptr).manualExec({ table: table }).then(function (rows) {\r\n                    _this.parent.query(\"upsert\", rowPtr).manualExec({ table: table + \"_ptr\" }).then(function () {\r\n                        utilities_1.fastALL(rows[0].keys, function (pk, i, nextRow) {\r\n                            _this._shiftRowHistory(direction, rows[0].table, pk, nextRow);\r\n                        }).then(function (didAnything) {\r\n                            complete(didAnything.indexOf(true) > -1);\r\n                        });\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    };\r\n    _NanoSQLHistoryPlugin.prototype._shiftRowHistory = function (direction, table, PK, complete) {\r\n        var _this = this;\r\n        var updateIDX = function (meta) {\r\n            _this.parent.query(\"upsert\", meta).where([_this._tablePkKeys[table], \"=\", PK]).manualExec({ table: \"_\" + table + \"__hist_idx\" }).then(function () {\r\n                complete(true);\r\n            });\r\n        };\r\n        this.parent.query(\"select\").where([this._tablePkKeys[table], \"=\", PK]).manualExec({ table: \"_\" + table + \"__hist_idx\" }).then(function (rows) {\r\n            var rowIDX = utilities_1._assign(rows[0]);\r\n            rowIDX.histPtr += direction === \"<\" ? 1 : -1;\r\n            if (rowIDX.histPtr < 0)\r\n                rowIDX.histPtr = 0;\r\n            if (rowIDX.histPtr > rowIDX.histRows.length - 1)\r\n                rowIDX.histPtr = rowIDX.histRows.length - 1;\r\n            if (rowIDX.histPtr === rows[0].histPtr) { // outside of history range, nothing to do\r\n                complete(false);\r\n                return;\r\n            }\r\n            var historyPK = rowIDX.histRows[rowIDX.histPtr];\r\n            if (historyPK === -1) { // row has been deleted\r\n                _this.parent.query(\"delete\").comment(\"History Write\").where([_this._tablePkKeys[table], \"=\", PK]).manualExec({ table: table }).then(function () {\r\n                    updateIDX(rowIDX);\r\n                });\r\n            }\r\n            else { // row has been added or modified\r\n                // pull the history's copy of the row\r\n                _this.parent.query(\"select\").where([\"_id\", \"=\", historyPK]).manualExec({ table: \"_\" + table + \"__hist_rows\" }).then(function (rows) {\r\n                    // overwrite the row in the database\r\n                    _this.parent.query(\"upsert\", rows[0]).comment(\"History Write\").manualExec({ table: table }).then(function () {\r\n                        updateIDX(rowIDX);\r\n                    });\r\n                });\r\n            }\r\n        });\r\n    };\r\n    _NanoSQLHistoryPlugin.prototype._shiftHistory = function (direction, table, rowPK, complete) {\r\n        if (!this.historyModes) { // global mode\r\n            this._shiftTableHistory(direction, \"_hist\", complete);\r\n            return;\r\n        }\r\n        var histTable = this._histTable(table);\r\n        if (!histTable) { // adjust single row history\r\n            if (!rowPK) {\r\n                throw Error(\"nSQL: Need a row primary key to change this history!\");\r\n            }\r\n            this._shiftRowHistory(direction, table, rowPK, complete);\r\n        }\r\n        else { // adjust single table history\r\n            if (!table) {\r\n                throw Error(\"nSQL: Need a table to change this history!\");\r\n            }\r\n            this._shiftTableHistory(direction, histTable, complete);\r\n        }\r\n    };\r\n    return _NanoSQLHistoryPlugin;\r\n}());\r\nexports._NanoSQLHistoryPlugin = _NanoSQLHistoryPlugin;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/nano-sql/lib/history-plugin.js\n// module id = 195\n// module chunks = 0","Object.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utilities_1 = require(\"./utilities\");\r\nvar lie_ts_1 = require(\"lie-ts\");\r\nvar Observer = /** @class */ (function () {\r\n    function Observer(_nSQL, _query, _tables) {\r\n        this._nSQL = _nSQL;\r\n        this._query = _query;\r\n        this._tables = _tables;\r\n        this._order = [];\r\n        this._count = 0;\r\n        this._config = [];\r\n    }\r\n    /**\r\n     * Debounce responses\r\n     *\r\n     * @param {number} ms\r\n     * @returns\r\n     * @memberof Observer\r\n     */\r\n    Observer.prototype.debounce = function (ms) {\r\n        this._config[this._order.length] = ms;\r\n        this._order.push(\"debounce\");\r\n        return this;\r\n    };\r\n    /**\r\n     * Suppress identical results\r\n     *\r\n     * @returns\r\n     * @memberof Observer\r\n     */\r\n    Observer.prototype.distinct = function (keyFunc, compareFunc) {\r\n        this._config[this._order.length] = [\r\n            keyFunc || (function (obj) { return obj; }),\r\n            compareFunc || (function (k1, k2) { return k1 === k2; })\r\n        ];\r\n        this._order.push(\"distinct\");\r\n        return this;\r\n    };\r\n    /**\r\n     * Filter results based on specific conditions\r\n     *\r\n     * @param {(obj: any) => boolean} fn\r\n     * @returns\r\n     * @memberof Observer\r\n     */\r\n    Observer.prototype.filter = function (fn) {\r\n        this._config[this._order.length] = fn;\r\n        this._order.push(\"filter\");\r\n        return this;\r\n    };\r\n    /**\r\n     * Mutate results from observable\r\n     *\r\n     * @param {(obj: any) => any} fn\r\n     * @returns\r\n     * @memberof Observer\r\n     */\r\n    Observer.prototype.map = function (fn) {\r\n        this._config[this._order.length] = fn;\r\n        this._order.push(\"map\");\r\n        return this;\r\n    };\r\n    /**\r\n     * Emit only the first result OR emit the first result that meets a condition passed into the fn.\r\n     *\r\n     * @param {((obj?: any) => boolean|void)} fn\r\n     * @returns\r\n     * @memberof Observer\r\n     */\r\n    Observer.prototype.first = function (fn) {\r\n        this._config[this._order.length] = fn || (function (obj, idx) { return true; });\r\n        this._order.push(\"first\");\r\n        return this;\r\n    };\r\n    /**\r\n     * Skip the first n events.\r\n     *\r\n     * @param {number} num\r\n     * @returns\r\n     * @memberof Observer\r\n     */\r\n    Observer.prototype.skip = function (num) {\r\n        this._config[this._order.length] = num;\r\n        this._order.push(\"skip\");\r\n        return this;\r\n    };\r\n    /**\r\n     * Only get the first n events.\r\n     *\r\n     * @param {number} num\r\n     * @memberof Observer\r\n     */\r\n    Observer.prototype.take = function (num) {\r\n        this._config[this._order.length] = num;\r\n        this._order.push(\"take\");\r\n        return this;\r\n    };\r\n    /**\r\n     * Subscribe to the observer\r\n     *\r\n     * @param {((value: T, event?: DatabaseEvent) => void | {\r\n     *         next: (value: T, event?: DatabaseEvent) => void;\r\n     *         error?: (error: any) => void;\r\n     *         complete?: (value?: T, event?: DatabaseEvent) => void;\r\n     *     })} callback\r\n     * @returns\r\n     * @memberof Observer\r\n     */\r\n    Observer.prototype.subscribe = function (callback) {\r\n        var _this = this;\r\n        var prevValue = {};\r\n        var lastRan = {};\r\n        var lastFunc = {};\r\n        var complete;\r\n        var lastCount = {};\r\n        return new ObserverSubscriber(this._nSQL, this._query, {\r\n            next: function (rows, event) {\r\n                _this._count++;\r\n                if (complete)\r\n                    return;\r\n                var step = 0;\r\n                var loop = function () {\r\n                    if (step === _this._order.length) {\r\n                        if (typeof callback === \"function\") {\r\n                            callback(rows, event);\r\n                        }\r\n                        else if (callback.next) {\r\n                            callback.next(rows, event);\r\n                        }\r\n                        if (complete && callback.complete) {\r\n                            callback.complete(rows, event);\r\n                        }\r\n                    }\r\n                    else {\r\n                        var getCount = function (step) {\r\n                            if (_this._count === 0)\r\n                                return 0;\r\n                            var i = step;\r\n                            var count = _this._count;\r\n                            var found = false;\r\n                            while (i-- && !found) {\r\n                                if (lastCount[i] !== undefined) {\r\n                                    found = true;\r\n                                    count = lastCount[i];\r\n                                }\r\n                            }\r\n                            return count;\r\n                        };\r\n                        switch (_this._order[step]) {\r\n                            case \"debounce\":\r\n                                if (!lastRan[step]) {\r\n                                    lastRan[step] = Date.now();\r\n                                }\r\n                                else {\r\n                                    clearTimeout(lastFunc[step]);\r\n                                    var debnc_1 = _this._config[step];\r\n                                    lastFunc[step] = setTimeout(function () {\r\n                                        if ((Date.now() - lastRan[step]) >= debnc_1) {\r\n                                            lastRan[step] = Date.now();\r\n                                            if (lastCount[step] === undefined) {\r\n                                                lastCount[step] = 0;\r\n                                            }\r\n                                            lastCount[step]++;\r\n                                            step++;\r\n                                            loop();\r\n                                        }\r\n                                    }, debnc_1 - (Date.now() - lastRan[step]));\r\n                                    return;\r\n                                }\r\n                                break;\r\n                            case \"distinct\":\r\n                                var key = _this._config[step][0](rows, event);\r\n                                if (_this._config[step][1](prevValue[step], key) === false) {\r\n                                    prevValue[step] = key;\r\n                                    if (lastCount[step] === undefined) {\r\n                                        lastCount[step] = 0;\r\n                                    }\r\n                                    lastCount[step]++;\r\n                                }\r\n                                else {\r\n                                    return;\r\n                                }\r\n                                break;\r\n                            case \"filter\":\r\n                                if (_this._config[step](rows, getCount(step), event) === false) {\r\n                                    return;\r\n                                }\r\n                                else {\r\n                                    if (lastCount[step] === undefined) {\r\n                                        lastCount[step] = 0;\r\n                                    }\r\n                                    lastCount[step]++;\r\n                                }\r\n                                break;\r\n                            case \"first\":\r\n                                if (_this._config[step](rows, getCount(step), event) === true) {\r\n                                    if (lastCount[step] === undefined) {\r\n                                        lastCount[step] = 0;\r\n                                    }\r\n                                    lastCount[step]++;\r\n                                    complete = true;\r\n                                }\r\n                                else {\r\n                                    return;\r\n                                }\r\n                                break;\r\n                            case \"map\":\r\n                                rows = _this._config[step](rows, getCount(step), event);\r\n                                break;\r\n                            case \"skip\":\r\n                                if (getCount(step) <= _this._config[step]) {\r\n                                    return;\r\n                                }\r\n                                break;\r\n                            case \"take\":\r\n                                if (getCount(step) >= _this._config[step]) {\r\n                                    complete = true;\r\n                                }\r\n                                break;\r\n                        }\r\n                        step++;\r\n                        loop();\r\n                    }\r\n                };\r\n                loop();\r\n            },\r\n            error: function (err) {\r\n                if (callback.error) {\r\n                    callback.error(err);\r\n                }\r\n            }\r\n        }, this._tables);\r\n    };\r\n    return Observer;\r\n}());\r\nexports.Observer = Observer;\r\nvar ObserverSubscriber = /** @class */ (function () {\r\n    function ObserverSubscriber(_nSQL, _getQuery, _callback, _tables) {\r\n        var _this = this;\r\n        this._nSQL = _nSQL;\r\n        this._getQuery = _getQuery;\r\n        this._callback = _callback;\r\n        this._tables = _tables;\r\n        this._closed = false;\r\n        this.exec = this.exec.bind(this);\r\n        this.unsubscribe = this.unsubscribe.bind(this);\r\n        var q = this._getQuery();\r\n        if (q) {\r\n            this._tables = utilities_1.removeDuplicates(this._tables.concat([q.table]));\r\n            this.exec();\r\n        }\r\n        this._tables.forEach(function (table) {\r\n            _this._nSQL.table(table).on(\"change\", _this.exec);\r\n        });\r\n    }\r\n    ObserverSubscriber.prototype.exec = function (event) {\r\n        var _this = this;\r\n        lie_ts_1.setFast(function () {\r\n            var q = _this._getQuery(event);\r\n            if (!q)\r\n                return;\r\n            _this._nSQL.query(\"select\").manualExec(q).then(function (rows) {\r\n                _this._callback.next(rows, event);\r\n            }).catch(function (err) {\r\n                _this._callback.error(err);\r\n            });\r\n        });\r\n    };\r\n    ObserverSubscriber.prototype.unsubscribe = function () {\r\n        var _this = this;\r\n        this._tables.forEach(function (table) {\r\n            _this._nSQL.table(table).off(\"change\", _this.exec);\r\n        });\r\n        this._closed = true;\r\n    };\r\n    ObserverSubscriber.prototype.closed = function () {\r\n        return this._closed;\r\n    };\r\n    return ObserverSubscriber;\r\n}());\r\nexports.ObserverSubscriber = ObserverSubscriber;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/nano-sql/lib/observable.js\n// module id = 196\n// module chunks = 0","import { PubSub } from 'graphql-subscriptions';\n\nexport const pubsub = new PubSub();\n\n\n\n// WEBPACK FOOTER //\n// ./src/graphql/subscriptions.ts","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar pubsub_1 = require(\"./pubsub\");\nexports.PubSub = pubsub_1.PubSub;\nvar with_filter_1 = require(\"./with-filter\");\nexports.withFilter = with_filter_1.withFilter;\n//# sourceMappingURL=index.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql-subscriptions/dist/index.js\n// module id = 198\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar events_1 = require(\"events\");\nvar event_emitter_to_async_iterator_1 = require(\"./event-emitter-to-async-iterator\");\nvar PubSub = (function () {\n    function PubSub(options) {\n        if (options === void 0) { options = {}; }\n        this.ee = options.eventEmitter || new events_1.EventEmitter();\n        this.subscriptions = {};\n        this.subIdCounter = 0;\n    }\n    PubSub.prototype.publish = function (triggerName, payload) {\n        this.ee.emit(triggerName, payload);\n        return true;\n    };\n    PubSub.prototype.subscribe = function (triggerName, onMessage) {\n        this.ee.addListener(triggerName, onMessage);\n        this.subIdCounter = this.subIdCounter + 1;\n        this.subscriptions[this.subIdCounter] = [triggerName, onMessage];\n        return Promise.resolve(this.subIdCounter);\n    };\n    PubSub.prototype.unsubscribe = function (subId) {\n        var _a = this.subscriptions[subId], triggerName = _a[0], onMessage = _a[1];\n        delete this.subscriptions[subId];\n        this.ee.removeListener(triggerName, onMessage);\n    };\n    PubSub.prototype.asyncIterator = function (triggers) {\n        return event_emitter_to_async_iterator_1.eventEmitterAsyncIterator(this.ee, triggers);\n    };\n    return PubSub;\n}());\nexports.PubSub = PubSub;\n//# sourceMappingURL=pubsub.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql-subscriptions/dist/pubsub.js\n// module id = 199\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar iterall_1 = require(\"iterall\");\nfunction eventEmitterAsyncIterator(eventEmitter, eventsNames) {\n    var pullQueue = [];\n    var pushQueue = [];\n    var eventsArray = typeof eventsNames === 'string' ? [eventsNames] : eventsNames;\n    var listening = true;\n    var pushValue = function (event) {\n        if (pullQueue.length !== 0) {\n            pullQueue.shift()({ value: event, done: false });\n        }\n        else {\n            pushQueue.push(event);\n        }\n    };\n    var pullValue = function () {\n        return new Promise(function (resolve) {\n            if (pushQueue.length !== 0) {\n                resolve({ value: pushQueue.shift(), done: false });\n            }\n            else {\n                pullQueue.push(resolve);\n            }\n        });\n    };\n    var emptyQueue = function () {\n        if (listening) {\n            listening = false;\n            removeEventListeners();\n            pullQueue.forEach(function (resolve) { return resolve({ value: undefined, done: true }); });\n            pullQueue.length = 0;\n            pushQueue.length = 0;\n        }\n    };\n    var addEventListeners = function () {\n        for (var _i = 0, eventsArray_1 = eventsArray; _i < eventsArray_1.length; _i++) {\n            var eventName = eventsArray_1[_i];\n            eventEmitter.addListener(eventName, pushValue);\n        }\n    };\n    var removeEventListeners = function () {\n        for (var _i = 0, eventsArray_2 = eventsArray; _i < eventsArray_2.length; _i++) {\n            var eventName = eventsArray_2[_i];\n            eventEmitter.removeListener(eventName, pushValue);\n        }\n    };\n    addEventListeners();\n    return _a = {\n            next: function () {\n                return listening ? pullValue() : this.return();\n            },\n            return: function () {\n                emptyQueue();\n                return Promise.resolve({ value: undefined, done: true });\n            },\n            throw: function (error) {\n                emptyQueue();\n                return Promise.reject(error);\n            }\n        },\n        _a[iterall_1.$$asyncIterator] = function () {\n            return this;\n        },\n        _a;\n    var _a;\n}\nexports.eventEmitterAsyncIterator = eventEmitterAsyncIterator;\n//# sourceMappingURL=event-emitter-to-async-iterator.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql-subscriptions/dist/event-emitter-to-async-iterator.js\n// module id = 200\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar iterall_1 = require(\"iterall\");\nexports.withFilter = function (asyncIteratorFn, filterFn) {\n    return function (rootValue, args, context, info) {\n        var asyncIterator = asyncIteratorFn(rootValue, args, context, info);\n        var getNextPromise = function () {\n            return asyncIterator\n                .next()\n                .then(function (payload) { return Promise.all([\n                payload,\n                Promise.resolve(filterFn(payload.value, args, context, info)).catch(function () { return false; }),\n            ]); })\n                .then(function (_a) {\n                var payload = _a[0], filterResult = _a[1];\n                if (filterResult === true || payload.done === true) {\n                    return payload;\n                }\n                return getNextPromise();\n            });\n        };\n        return _a = {\n                next: function () {\n                    return getNextPromise();\n                },\n                return: function () {\n                    return asyncIterator.return();\n                },\n                throw: function (error) {\n                    return asyncIterator.throw(error);\n                }\n            },\n            _a[iterall_1.$$asyncIterator] = function () {\n                return this;\n            },\n            _a;\n        var _a;\n    };\n};\n//# sourceMappingURL=with-filter.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/bherr/workspaces/bbsrc/bbsrc/node_modules/graphql-subscriptions/dist/with-filter.js\n// module id = 201\n// module chunks = 0","import { BBSRCDatabase } from '../nsql/bbsrc-database';\nimport { GraphQLContext } from './context';\n\nimport { DB_DUMP_URI } from '../loader/options';\n\nasync function readJSON(uri: string): Promise<any> {\n  return (await fetch(uri, { method: 'get' })).json();\n}\n\nasync function importDBDump(database: BBSRCDatabase): Promise<any> {\n  const db = await database.get(async (db) => {\n    const hasResults = !!(await database.collectionCount('publication'))\n    if (!hasResults) {\n      console.log(`Loading dump from ${DB_DUMP_URI}`);\n      const dump = await readJSON(DB_DUMP_URI);\n      await db.rawImport(dump);\n    }\n  });\n  return db;\n}\n\nexport function createClientContext(): GraphQLContext {\n  const database = new BBSRCDatabase(false, 'idb');\n  importDBDump(database).then(() => {\n    console.log('DB Loaded');\n  });\n  return new GraphQLContext(database);\n}\n\nexport const context = createClientContext();\n\n\n\n// WEBPACK FOOTER //\n// ./src/graphql/client-context.ts","import { nSQL, NanoSQLInstance, NanoSQLConfig } from 'nano-sql';\nimport { PublicationModel } from './publication.model';\n\nexport class BBSRCDatabase {\n  private static dbPromise: Promise<NanoSQLInstance> = null;\n\n  collections: any[] = [\n    { name: 'publication', schema: PublicationModel }\n  ];\n\n  constructor(private production?: boolean, private adapter: string = 'PERM', private nSQLOptions: NanoSQLConfig = {}) { }\n\n  get(initializer?: (db: NanoSQLInstance) => Promise<any>): Promise<NanoSQLInstance> {\n    if (!BBSRCDatabase.dbPromise) {\n      BBSRCDatabase.dbPromise = this._create(initializer);\n    }\n    return BBSRCDatabase.dbPromise;\n  }\n\n  public async initializeCollection(collection: string, data: any[]) {\n    const db = await this.get();\n    const coll = db.table(collection);\n    if ((await this.collectionCount(collection) === 0)) {\n      await coll.loadJS(collection, data);\n    }\n    const results = await this.collectionCount(collection);\n    this.log(`${collection}: ${results}`);\n  }\n\n  public async collectionCount(collection: string, db?: NanoSQLInstance): Promise<number> {\n    if (!db) {\n      db = await this.get();\n    }\n    const query = db.table(collection).query('select',['COUNT(*) AS total']);\n    const results = (await query.exec())[0];\n    return results['total'] || results['COUNT(*) AS total'] || 0;\n  }\n\n  private async initialize(db: NanoSQLInstance) {\n    // Do nothing...\n  }\n\n  private async _create(initializer?: (db: NanoSQLInstance) => Promise<any>): Promise<NanoSQLInstance> {\n    const config = <NanoSQLConfig>Object.assign({\n      mode: this.adapter\n    }, this.nSQLOptions);\n\n    this.log('DatabaseService: creating database');\n    this.log('DatabaseService: creating collections');\n    let db: NanoSQLInstance = null;\n    for (const collection of this.collections) {\n      db = nSQL(collection.name).model(collection.schema).config(config);\n      await db.connect();\n      this[collection.name] = db;\n    }\n\n    await this.initialize(db);\n    if (initializer) {\n      await initializer(db);\n    }\n\n    return db;\n  }\n\n  private log(message: string) {\n    if (!this.production) {\n      console.log(message);\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/nsql/bbsrc-database.ts","export const PublicationModel = [\n  {key: 'id',type:'string', props:['pk']},\n  {key: 'title',type:'string'},\n  {key: 'author',type:'string'},\n  {key: 'year',type:'int'}, // props: ['idx']\n  {key: 'pmid',type:'string'},\n  {key: 'doi',type:'string'},\n  {key: 'pmcid',type:'string'},\n  {key: 'journalName',type:'string'},\n  {key: 'journalId',type:'int'},\n  {key: 'subdisciplines',type:'array'},\n  {key: 'grantId',type:'string'},\n  {key: 'grantTitle',type:'string'},\n  {key: 'grantClasses',type:'array'},\n  {key: 'grantYear',type:'int'}, // props: ['idx']\n  {key: 'grantInstitution',type:'string'}, // props: ['idx']\n  {key: 'grantMechanism',type:'string'}, // props: ['idx']\n  {key: 'fulltext',type:'string'}\n];\n\n\n\n// WEBPACK FOOTER //\n// ./src/nsql/publication.model.ts","import { NanoSQLInstance } from 'nano-sql';\nimport { BBSRCDatabase } from '../nsql/bbsrc-database';\n\nexport class GraphQLContext {\n  constructor(public database: BBSRCDatabase, public db?: NanoSQLInstance) {\n    if (!db) {\n      database.get().then((dbInstance) => { this.db = dbInstance; });\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/graphql/context.ts","export const GRANTS = '../../raw-data/grants.xlsx';\nexport const PUBS = '../../raw-data/publications.xlsx';\nexport const JOURNAL_ISSN_MAPPING = '../../raw-data/20180205-ISSNs for BBSRC Publications.xlsx';\nexport const JOURNAL_MAPPING_SUPPLEMENT = '../../raw-data/20180523-BBSRC Journal Information Additional Mapping.xlsx';\nexport const DB_JSON = '../../raw-data/database.json';\nexport const DB_DUMP = '../../raw-data/db-dump.json';\nexport const DB_SQLITE = '../../raw-data/db/';\nexport const DB_DUMP_URI = '/assets/db-dump.json';\n\n\n\n// WEBPACK FOOTER //\n// ./src/loader/options.ts"],"sourceRoot":""}